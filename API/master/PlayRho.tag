<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile doxygen_version="1.9.1">
  <compound kind="file">
    <name>ArrayList.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>ArrayList_8hpp.html</filename>
    <includes id="LengthError_8hpp" name="LengthError.hpp" local="no" imported="no">playrho/LengthError.hpp</includes>
    <includes id="Span_8hpp" name="Span.hpp" local="no" imported="no">playrho/Span.hpp</includes>
    <includes id="Templates_8hpp" name="Templates.hpp" local="no" imported="no">playrho/Templates.hpp</includes>
    <class kind="class">playrho::ArrayList</class>
    <class kind="class">std::tuple_size&lt; playrho::ArrayList&lt; T, N, SIZE_TYPE &gt; &gt;</class>
    <namespace>playrho</namespace>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a67e0766a9469380763fd0e3b0a5107e6</anchor>
      <arglist>(const ArrayList&lt; T, LhsSize &gt; &amp;lhs, const ArrayList&lt; T, RhsSize &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ArrayList&lt; T, S &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a3712e444173611decc9b129c3d806dd7</anchor>
      <arglist>(ArrayList&lt; T, S &gt; &amp;lhs, T rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>af6506e9c43bb12c5d4e29856163a81b9</anchor>
      <arglist>(ArrayList&lt; T, S &gt; &amp;lhs, U &amp;&amp;rhs) -&gt; decltype(rhs.begin(), rhs.end(), rhs.size(), lhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aecc8c4f87ec5b117810b27a5e5c5ed52</anchor>
      <arglist>(const ArrayList&lt; T, LhsSize &gt; &amp;lhs, const ArrayList&lt; T, RhsSize &gt; &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BlockAllocator.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>BlockAllocator_8hpp.html</filename>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">playrho/Settings.hpp</includes>
    <class kind="class">playrho::BlockAllocator</class>
    <class kind="struct">playrho::BlockDeallocator</class>
    <namespace>playrho</namespace>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a425d26025dffe3901caa095b9fa19682</anchor>
      <arglist>(const BlockAllocator &amp;a, const BlockAllocator &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab5692e54289c87c156bd7455763082a9</anchor>
      <arglist>(const BlockAllocator &amp;a, const BlockAllocator &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BodyID.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>BodyID_8hpp.html</filename>
    <includes id="IndexingNamedType_8hpp" name="IndexingNamedType.hpp" local="no" imported="no">playrho/detail/IndexingNamedType.hpp</includes>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">playrho/Settings.hpp</includes>
    <namespace>playrho</namespace>
    <member kind="typedef">
      <type>detail::IndexingNamedType&lt; BodyCounter, struct BodyIdentifier &gt;</type>
      <name>BodyID</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9d094e8b19ea714a079a48c336abad92</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab7404128f6225cf6915219bb784c7843</anchor>
      <arglist>(const BodyID &amp;value) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>InvalidBodyID</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a38fa6c4a45ec8fd218dc962396685c3f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BodyShapeFunction.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>BodyShapeFunction_8hpp.html</filename>
    <includes id="BodyID_8hpp" name="BodyID.hpp" local="no" imported="no">playrho/BodyID.hpp</includes>
    <includes id="ShapeID_8hpp" name="ShapeID.hpp" local="no" imported="no">playrho/ShapeID.hpp</includes>
    <namespace>playrho</namespace>
    <member kind="typedef">
      <type>std::function&lt; void(std::pair&lt; BodyID, ShapeID &gt;)&gt;</type>
      <name>BodyShapeFunction</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a33405bfc73fdf1a786a72b98e846e9c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BodyType.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>BodyType_8hpp.html</filename>
    <namespace>playrho</namespace>
    <member kind="enumeration">
      <type></type>
      <name>BodyType</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a098b0ef528e3b728af8e3e17873963f7</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceplayrho.html" anchor="a098b0ef528e3b728af8e3e17873963f7a84a8921b25f505d0d2077aeb5db4bc16">Static</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a098b0ef528e3b728af8e3e17873963f7a40c78b58b86002ee38fad2d3c9dd787e">Kinematic</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a098b0ef528e3b728af8e3e17873963f7a971fd8cc345d8bd9f92e9f7d88fdf20c">Dynamic</enumvalue>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAccelerable</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a6514752c0838613cfaf76ea7e03581cd</anchor>
      <arglist>(BodyType type)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSpeedable</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a76e2dcc5aeb221351e51ad965e9de893</anchor>
      <arglist>(BodyType type)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConstraintSolverConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>ConstraintSolverConf_8hpp.html</filename>
    <includes id="Real_8hpp" name="Real.hpp" local="no" imported="no">playrho/Real.hpp</includes>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">playrho/Settings.hpp</includes>
    <includes id="Units_8hpp" name="Units.hpp" local="no" imported="no">playrho/Units.hpp</includes>
    <class kind="struct">playrho::ConstraintSolverConf</class>
    <namespace>playrho</namespace>
    <member kind="function">
      <type>constexpr ConstraintSolverConf</type>
      <name>GetDefaultPositionSolverConf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a081dbfc95d4d3139eb2817a1f11a5af3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ConstraintSolverConf</type>
      <name>GetDefaultToiPositionSolverConf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a56b5137ea90045d15dfb2279d5773b46</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>ConstraintSolverConf</type>
      <name>GetRegConstraintSolverConf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aacaf6573afe5f3fb0803faa353dc9c65</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ConstraintSolverConf</type>
      <name>GetToiConstraintSolverConf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>afdb8daa84d36ac948934ee05eb4cb242</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Contact.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>Contact_8hpp.html</filename>
    <includes id="BodyID_8hpp" name="BodyID.hpp" local="no" imported="no">playrho/BodyID.hpp</includes>
    <includes id="Contactable_8hpp" name="Contactable.hpp" local="no" imported="no">playrho/Contactable.hpp</includes>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">playrho/Math.hpp</includes>
    <includes id="NonNegative_8hpp" name="NonNegative.hpp" local="no" imported="no">playrho/NonNegative.hpp</includes>
    <includes id="Real_8hpp" name="Real.hpp" local="no" imported="no">playrho/Real.hpp</includes>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">playrho/Settings.hpp</includes>
    <includes id="ShapeID_8hpp" name="ShapeID.hpp" local="no" imported="no">playrho/ShapeID.hpp</includes>
    <includes id="UnitInterval_8hpp" name="UnitInterval.hpp" local="no" imported="no">playrho/UnitInterval.hpp</includes>
    <includes id="Units_8hpp" name="Units.hpp" local="no" imported="no">playrho/Units.hpp</includes>
    <class kind="class">playrho::Contact</class>
    <namespace>playrho</namespace>
    <member kind="function">
      <type>constexpr void</type>
      <name>FlagForFiltering</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac1efaeb0c030854ede6606021ba56d30</anchor>
      <arglist>(Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>FlagForUpdating</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac1ec70ebc79af5b28899b8d0a1341141</anchor>
      <arglist>(Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyID</type>
      <name>GetBodyA</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab6119f387b09a5ece4a552f3b3aa1565</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyID</type>
      <name>GetBodyB</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aa747a1797c3953dfc068ce03901695ed</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ChildCounter</type>
      <name>GetChildIndexA</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2e63c4946d742afab47f8a1c00ae2a8a</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ChildCounter</type>
      <name>GetChildIndexB</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a676e6537b55110a4aa43e3e0a113f8b9</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetFriction</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a1e3bad8be42524709861c9e728048ea2</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetOtherBody</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ae8ddd62df538578a056ac976e42d9739</anchor>
      <arglist>(const Contact &amp;c, BodyID bodyID) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetRestitution</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a8623a4509113eb33f84ea8aba436396e</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ShapeID</type>
      <name>GetShapeA</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a3905c9d50e61b110388dcf71176cd1fe</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ShapeID</type>
      <name>GetShapeB</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a1bff0722b0746e1ba9d6cf2015e4bc95</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetTangentSpeed</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a568a3fc3585eb44878213a919420f847</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetToi</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>acd05d6b92912a6430c09ad8a74bcbc73</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetToiCount</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>abce1723933df3c7d4054975daa7ac724</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>HasValidToi</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a77e830664360ead07ab616d934ff2550</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsActive</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ae659e1f443f30d7813853f6763f1f22f</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsEnabled</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>acf2071b64988e62193b4a2567bdde292</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsFor</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aa8f91c8a02e1886e4e9f90d0926e075a</anchor>
      <arglist>(const Contact &amp;c, BodyID bodyID, ShapeID shapeID) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsFor</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a283c9f04ceb148910537dc1cd3f37c00</anchor>
      <arglist>(const Contact &amp;c, ShapeID shapeID) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsImpenetrable</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a885fded7567b0972b4af486e5df9afea</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsSensor</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab8801b7203d1ab9a06ca349a9d304f3c</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsTouching</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aecbf667797116ec6c5e84d896f05daa6</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>MixFriction</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2fce5cef2c9f11a5e880c1f6b54bb80f</anchor>
      <arglist>(NonNegativeFF&lt; Real &gt; friction1, NonNegativeFF&lt; Real &gt; friction2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>MixRestitution</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>af99b1684f31a12e9151c9abeafdc74fe</anchor>
      <arglist>(Real restitution1, Real restitution2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>NeedsFiltering</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a92b68ee2dcf7f21577269938c5267f5f</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>NeedsUpdating</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a00846636a226626c5dd4151893f397f7</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a253588f96c2b53aec235c79675776988</anchor>
      <arglist>(const Contact &amp;lhs, const Contact &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a5b92007cb872b11ba4ab93f5095e2e48</anchor>
      <arglist>(const Contact &amp;lhs, const Contact &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetEnabled</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a23ce44af5f5ba3deb7e1eafe1acf5198</anchor>
      <arglist>(Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetFriction</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>acaf284b9eea3b4ad78ba5b673e67b00b</anchor>
      <arglist>(Contact &amp;contact, NonNegative&lt; Real &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetImpenetrable</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a146755eafb1ed7d0ea52af68ea4874cd</anchor>
      <arglist>(Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetIsActive</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a6dc7dc1c568e7e1cbe70afe67c51b14a</anchor>
      <arglist>(Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetRestitution</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ae72b11c11801f8189dbd1d61dd917f77</anchor>
      <arglist>(Contact &amp;contact, Real value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetSensor</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>af8595ac215de486ea15aaa0c9c608b3e</anchor>
      <arglist>(Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetTangentSpeed</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a16493a4bdae1683c07b4b116516716f0</anchor>
      <arglist>(Contact &amp;contact, LinearVelocity value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetToi</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>af93e3743c48882f44ef7936cbad68ae1</anchor>
      <arglist>(Contact &amp;contact, const std::optional&lt; UnitIntervalFF&lt; Real &gt;&gt; &amp;toi) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetToiCount</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aabf79c789863cc4aea6b9e6bc976267c</anchor>
      <arglist>(Contact &amp;contact, Contact::substep_type value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>UnflagForFiltering</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aaf49104158a7aea199f9531f9ab5b7d0</anchor>
      <arglist>(Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>UnflagForUpdating</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad0be851da5e90da82388aaddaa1d8f6d</anchor>
      <arglist>(Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>UnsetEnabled</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4e555a7d486dd3e1c1f7788c7d5edc0f</anchor>
      <arglist>(Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>UnsetImpenetrable</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a205494b248da96a02b57be9d9ad9a27b</anchor>
      <arglist>(Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>UnsetIsActive</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a1ae66cec17d17f003982ee50908d0d25</anchor>
      <arglist>(Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>UnsetIsSensor</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad488916b3a4198e323011d0a3f417c90</anchor>
      <arglist>(Contact &amp;contact) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Contactable.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>Contactable_8hpp.html</filename>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">playrho/Settings.hpp</includes>
    <includes id="ShapeID_8hpp" name="ShapeID.hpp" local="no" imported="no">playrho/ShapeID.hpp</includes>
    <includes id="BodyID_8hpp" name="BodyID.hpp" local="no" imported="no">playrho/BodyID.hpp</includes>
    <class kind="struct">playrho::Contactable</class>
    <namespace>playrho</namespace>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsFor</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a078999e2c900ac9ee1b081be6934d5b7</anchor>
      <arglist>(const Contactable &amp;c, BodyID bodyID, ShapeID shapeID) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a64c43d9f4a2db2922f8816f960ece8ec</anchor>
      <arglist>(const Contactable &amp;lhs, const Contactable &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a268967eee0d7a53d51224a8a1259d06f</anchor>
      <arglist>(const Contactable &amp;lhs, const Contactable &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ContactFeature.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>ContactFeature_8hpp.html</filename>
    <class kind="struct">playrho::ContactFeature</class>
    <namespace>playrho</namespace>
    <member kind="function">
      <type>constexpr ContactFeature</type>
      <name>Flip</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a43951f69f7ead57450bac66cbb76b0e1</anchor>
      <arglist>(ContactFeature val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ContactFeature</type>
      <name>GetFaceFaceContactFeature</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aa64fefdeb5b40b3ee00c30dc263397b9</anchor>
      <arglist>(ContactFeature::Index a, ContactFeature::Index b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ContactFeature</type>
      <name>GetFaceVertexContactFeature</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a874b42008ce4794858edc982ba13534a</anchor>
      <arglist>(ContactFeature::Index a, ContactFeature::Index b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const char *</type>
      <name>GetName</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4f6b450f2f1fb0bad7e9cd47269e33c6</anchor>
      <arglist>(ContactFeature::Type type) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ContactFeature</type>
      <name>GetVertexFaceContactFeature</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a525adfccea1a81ce8311751fc90d0614</anchor>
      <arglist>(ContactFeature::Index a, ContactFeature::Index b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ContactFeature</type>
      <name>GetVertexVertexContactFeature</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad0c8c86c92d71e89dd707af00b1de6a8</anchor>
      <arglist>(ContactFeature::Index a, ContactFeature::Index b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9bcf95269c48c96b8af0854d24894e3d</anchor>
      <arglist>(ContactFeature lhs, ContactFeature rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad3ec58bed15fb00ea00af6a52e5a7e3e</anchor>
      <arglist>(::std::ostream &amp;os, const ContactFeature &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac19a825ed22691eab1981a616b6bf539</anchor>
      <arglist>(ContactFeature lhs, ContactFeature rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ContactFunction.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>ContactFunction_8hpp.html</filename>
    <includes id="ContactID_8hpp" name="ContactID.hpp" local="no" imported="no">playrho/ContactID.hpp</includes>
    <namespace>playrho</namespace>
    <member kind="typedef">
      <type>std::function&lt; void(ContactID)&gt;</type>
      <name>ContactFunction</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ae4fcaffc82149e8a51dccba6b31f4d52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ContactID.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>ContactID_8hpp.html</filename>
    <includes id="IndexingNamedType_8hpp" name="IndexingNamedType.hpp" local="no" imported="no">playrho/detail/IndexingNamedType.hpp</includes>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">playrho/Settings.hpp</includes>
    <namespace>playrho</namespace>
    <member kind="typedef">
      <type>detail::IndexingNamedType&lt; ContactCounter, struct ContactIdentifier &gt;</type>
      <name>ContactID</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>abe7a48a3a0e57fa1a9dd9e396b6b24f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>adc42b14180314ff41872c38c5596970c</anchor>
      <arglist>(const ContactID &amp;value) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>InvalidContactID</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a1a7a2c4f0ce447813c94060e1ea4c0f9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ContactKey.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>ContactKey_8hpp.html</filename>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">playrho/Settings.hpp</includes>
    <class kind="class">playrho::ContactKey</class>
    <class kind="struct">std::hash&lt; playrho::ContactKey &gt;</class>
    <namespace>playrho</namespace>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a7c47651b8e0165d5ac406946d49ae60f</anchor>
      <arglist>(const ContactKey &amp;lhs, const ContactKey &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a7c40d9c4a48c2e389e97941863bdd584</anchor>
      <arglist>(const ContactKey &amp;lhs, const ContactKey &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a82753a7f5943b1efcc8c843e547f1054</anchor>
      <arglist>(const ContactKey &amp;lhs, const ContactKey &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4bcf53dc3cb0bb29ac669f5350de0008</anchor>
      <arglist>(const ContactKey &amp;lhs, const ContactKey &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a66c974144631e169b23411d95a01f6d5</anchor>
      <arglist>(const ContactKey &amp;lhs, const ContactKey &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aacd3782f12938e0148922e6ab546c354</anchor>
      <arglist>(const ContactKey &amp;lhs, const ContactKey &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AABB.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>d2_2AABB_8hpp.html</filename>
    <includes id="BodyID_8hpp" name="BodyID.hpp" local="no" imported="no">playrho/BodyID.hpp</includes>
    <includes id="Interval_8hpp" name="Interval.hpp" local="no" imported="no">playrho/Interval.hpp</includes>
    <includes id="Intervals_8hpp" name="Intervals.hpp" local="no" imported="no">playrho/Intervals.hpp</includes>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">playrho/Settings.hpp</includes>
    <includes id="ShapeID_8hpp" name="ShapeID.hpp" local="no" imported="no">playrho/ShapeID.hpp</includes>
    <includes id="Units_8hpp" name="Units.hpp" local="no" imported="no">playrho/Units.hpp</includes>
    <includes id="detail_2AABB_8hpp" name="AABB.hpp" local="no" imported="no">playrho/detail/AABB.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <namespace>playrho::detail</namespace>
    <member kind="typedef">
      <type>::playrho::detail::AABB&lt; 2 &gt;</type>
      <name>AABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abfb3031d97cbdac7eb72cccf26e3c694</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a48a5c3ca651b9b1a16314b65124c415e</anchor>
      <arglist>(const DistanceProxy &amp;proxy, const Transformation &amp;xf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1d220483edb635672bde217ecd5f4d86</anchor>
      <arglist>(const DistanceProxy &amp;proxy, const Transformation &amp;xfm0, const Transformation &amp;xfm1) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0e052f006832cbde0a453b284572c2ed</anchor>
      <arglist>(const Shape &amp;shape, const Transformation &amp;xf)</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0248c8d2589a0f53e14d80c91359e6d1</anchor>
      <arglist>(const World &amp;world, BodyID bodyID, ShapeID shapeID)</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acf9132ff11de52902cbb44070fb944c6</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeIntersectingAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2a637f309919743439018f2fb100bd30</anchor>
      <arglist>(const World &amp;world, BodyID bA, ShapeID sA, ChildCounter iA, BodyID bB, ShapeID sB, ChildCounter iB)</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeIntersectingAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac78eaf998b8cc105a6123019c4f5d3d7</anchor>
      <arglist>(const World &amp;world, const Contact &amp;contact)</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>GetAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>add2ef460cb524b34a3ad4feea71dc41f</anchor>
      <arglist>(const playrho::detail::RayCastInput&lt; 2 &gt; &amp;input) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>GetPerimeter</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ace87984d1541a40a6c850825acb43742</anchor>
      <arglist>(const AABB &amp;aabb) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>InvalidAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1fd86bad0e3f157fe6f76cb9ba093f2b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AABB.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/detail/</path>
    <filename>detail_2AABB_8hpp.html</filename>
    <includes id="Intervals_8hpp" name="Intervals.hpp" local="no" imported="no">playrho/Intervals.hpp</includes>
    <includes id="Vector_8hpp" name="Vector.hpp" local="no" imported="no">playrho/Vector.hpp</includes>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">playrho/Settings.hpp</includes>
    <includes id="Templates_8hpp" name="Templates.hpp" local="no" imported="no">playrho/Templates.hpp</includes>
    <class kind="struct">playrho::detail::AABB</class>
    <namespace>playrho</namespace>
    <namespace>playrho::detail</namespace>
    <member kind="function">
      <type>constexpr bool</type>
      <name>Contains</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>aeccc4adba69c5f7bbf4c0c3724ae1fcc</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;a, const AABB&lt; N &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt; &amp;</type>
      <name>Fatten</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a3b93a03d7da33af6899f8997a3b254ce</anchor>
      <arglist>(AABB&lt; N &gt; &amp;var, const NonNegative&lt; Length &gt; amount) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; Length, N &gt;</type>
      <name>GetCenter</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>aa5c9f951c0b82a2cdecdc7d559ca34d4</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; Length, N &gt;</type>
      <name>GetDimensions</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a3f0de4fdd4cecf5567090bf345c42ead</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt;</type>
      <name>GetDisplacedAABB</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a1d14a66e8a7cca9d84a04736e498e1a2</anchor>
      <arglist>(AABB&lt; N &gt; aabb, const Vector&lt; Length, N &gt; displacement)</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt;</type>
      <name>GetEnclosingAABB</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>af0034e680404f80e04d94699d42ed07d</anchor>
      <arglist>(AABB&lt; N &gt; a, const AABB&lt; N &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; Length, N &gt;</type>
      <name>GetExtents</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a869cd35cc1b8a53bfdedd47f2b6b9000</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt;</type>
      <name>GetFattenedAABB</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a3f169758eb050baf511b152fb5177735</anchor>
      <arglist>(AABB&lt; N &gt; aabb, const Length amount)</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt;</type>
      <name>GetIntersectingAABB</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a91d15c57e8504dca29a922fb382a0eec</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;a, const AABB&lt; N &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; Length, N &gt;</type>
      <name>GetLowerBound</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>aad63477b5cea2c8275ecedff1f3f9530</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt;</type>
      <name>GetMovedAABB</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a74557026c35a580c45dfc12f0c2bc6c0</anchor>
      <arglist>(AABB&lt; N &gt; aabb, const Vector&lt; Length, N &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; Length, N &gt;</type>
      <name>GetUpperBound</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a98a4a10ae8cc38664e56b99a5ef40ba6</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt; &amp;</type>
      <name>Include</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a5daa9c97e0b9a5dcf45681bf596639c3</anchor>
      <arglist>(AABB&lt; N &gt; &amp;var, const AABB&lt; N &gt; &amp;val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt; &amp;</type>
      <name>Include</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>aa5638faaf78557603c3e60b945f0c415</anchor>
      <arglist>(AABB&lt; N &gt; &amp;var, const Vector&lt; Length, N &gt; &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt; &amp;</type>
      <name>Move</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a5f59177e89e8d24dfee72915a0ebe649</anchor>
      <arglist>(AABB&lt; N &gt; &amp;var, const Vector&lt; Length, N &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>abe2471568df9b5635f92209b8d25be38</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>ac7738d0953158fb06eada28384bde27b</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>aeedbbe27963b9396e1e566a97a03097a</anchor>
      <arglist>(::std::ostream &amp;os, const AABB&lt; N &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>aa3edeccc850d69e6165e5a5523e5b406</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>ae9459aea2a9cd94f8089837a09f41003</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a76b557d909c21ff5256aeb1a9d3b8c05</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a48d06003e414f652104fd195b308d296</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>TestOverlap</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a9ad73cec0b99cb943f354a290c7f9bfc</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;a, const AABB&lt; N &gt; &amp;b) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AabbTreeWorld.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>AabbTreeWorld_8hpp.html</filename>
    <includes id="BodyID_8hpp" name="BodyID.hpp" local="no" imported="no">playrho/BodyID.hpp</includes>
    <includes id="BodyShapeFunction_8hpp" name="BodyShapeFunction.hpp" local="no" imported="no">playrho/BodyShapeFunction.hpp</includes>
    <includes id="Contactable_8hpp" name="Contactable.hpp" local="no" imported="no">playrho/Contactable.hpp</includes>
    <includes id="ContactFunction_8hpp" name="ContactFunction.hpp" local="no" imported="no">playrho/ContactFunction.hpp</includes>
    <includes id="ContactID_8hpp" name="ContactID.hpp" local="no" imported="no">playrho/ContactID.hpp</includes>
    <includes id="ContactKey_8hpp" name="ContactKey.hpp" local="no" imported="no">playrho/ContactKey.hpp</includes>
    <includes id="JointFunction_8hpp" name="JointFunction.hpp" local="no" imported="no">playrho/JointFunction.hpp</includes>
    <includes id="JointID_8hpp" name="JointID.hpp" local="no" imported="no">playrho/JointID.hpp</includes>
    <includes id="Interval_8hpp" name="Interval.hpp" local="no" imported="no">playrho/Interval.hpp</includes>
    <includes id="Island_8hpp" name="Island.hpp" local="no" imported="no">playrho/Island.hpp</includes>
    <includes id="IslandStats_8hpp" name="IslandStats.hpp" local="no" imported="no">playrho/IslandStats.hpp</includes>
    <includes id="KeyedContactID_8hpp" name="KeyedContactID.hpp" local="no" imported="no">playrho/KeyedContactID.hpp</includes>
    <includes id="ObjectPool_8hpp" name="ObjectPool.hpp" local="no" imported="no">playrho/ObjectPool.hpp</includes>
    <includes id="Positive_8hpp" name="Positive.hpp" local="no" imported="no">playrho/Positive.hpp</includes>
    <includes id="Real_8hpp" name="Real.hpp" local="no" imported="no">playrho/Real.hpp</includes>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">playrho/Settings.hpp</includes>
    <includes id="ShapeFunction_8hpp" name="ShapeFunction.hpp" local="no" imported="no">playrho/ShapeFunction.hpp</includes>
    <includes id="ShapeID_8hpp" name="ShapeID.hpp" local="no" imported="no">playrho/ShapeID.hpp</includes>
    <includes id="Span_8hpp" name="Span.hpp" local="no" imported="no">playrho/Span.hpp</includes>
    <includes id="StepStats_8hpp" name="StepStats.hpp" local="no" imported="no">playrho/StepStats.hpp</includes>
    <includes id="Units_8hpp" name="Units.hpp" local="no" imported="no">playrho/Units.hpp</includes>
    <includes id="Vector2_8hpp" name="Vector2.hpp" local="no" imported="no">playrho/Vector2.hpp</includes>
    <includes id="ZeroToUnderOne_8hpp" name="ZeroToUnderOne.hpp" local="no" imported="no">playrho/ZeroToUnderOne.hpp</includes>
    <includes id="BodyConstraint_8hpp" name="BodyConstraint.hpp" local="no" imported="no">playrho/d2/BodyConstraint.hpp</includes>
    <includes id="ContactImpulsesFunction_8hpp" name="ContactImpulsesFunction.hpp" local="no" imported="no">playrho/d2/ContactImpulsesFunction.hpp</includes>
    <includes id="ContactManifoldFunction_8hpp" name="ContactManifoldFunction.hpp" local="no" imported="no">playrho/d2/ContactManifoldFunction.hpp</includes>
    <includes id="DynamicTree_8hpp" name="DynamicTree.hpp" local="no" imported="no">playrho/d2/DynamicTree.hpp</includes>
    <includes id="Transformation_8hpp" name="Transformation.hpp" local="no" imported="no">playrho/d2/Transformation.hpp</includes>
    <includes id="WorldConf_8hpp" name="WorldConf.hpp" local="no" imported="no">playrho/d2/WorldConf.hpp</includes>
    <class kind="class">playrho::d2::AabbTreeWorld</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="typedef">
      <type>std::vector&lt; std::tuple&lt; ContactKey, ContactID &gt; &gt;</type>
      <name>BodyContactIDs</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a44a03b52bdd73ab4fb1bc9e522708da3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; BodyID &gt;</type>
      <name>BodyIDs</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aeee94a0ca7f0d3069e197bec5902c7a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::pair&lt; BodyID, JointID &gt; &gt;</type>
      <name>BodyJointIDs</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab725a0099ae40f88067b8c1104c7ffac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::pair&lt; BodyID, ShapeID &gt; &gt;</type>
      <name>BodyShapeIDs</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a430e1d6d6a2310f75ec7e181b37d90dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; JointID &gt;</type>
      <name>JointIDs</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a442773c8570c44bfd40f5ed08ab1240c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; KeyedContactID &gt;</type>
      <name>KeyedContactIDs</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abd7dca1f774f4159c942850575286f73</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; DynamicTree::Size &gt;</type>
      <name>ProxyIDs</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2b03aa4cdf4968f8dc10d9016cb0552d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ContactID</type>
      <name>GetSoonestContact</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7e8932936bd2f281984a4afacc40e7a1</anchor>
      <arglist>(const Span&lt; const KeyedContactID &gt; &amp;ids, const Span&lt; const Contact &gt; &amp;contacts) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBeginContactListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af91536aa88e244f3956b70736dfbbc12</anchor>
      <arglist>(AabbTreeWorld &amp;world, ContactFunction listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDetachListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a54e878b6146c7c2bb50e7bd73a95c217</anchor>
      <arglist>(AabbTreeWorld &amp;world, BodyShapeFunction listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEndContactListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2ef32850c1173ac570c8eaa586a6653c</anchor>
      <arglist>(AabbTreeWorld &amp;world, ContactFunction listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetJointDestructionListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7c1863dc243955e1955e519c01a0c59a</anchor>
      <arglist>(AabbTreeWorld &amp;world, JointFunction listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPostSolveContactListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a64227632d49eb8e331902edb22999b58</anchor>
      <arglist>(AabbTreeWorld &amp;world, ContactImpulsesFunction listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPreSolveContactListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af7733aac4d120107b96ef887303e4fbf</anchor>
      <arglist>(AabbTreeWorld &amp;world, ContactManifoldFunction listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetShapeDestructionListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a59900969bcf9d8419fa8f122118844aa</anchor>
      <arglist>(AabbTreeWorld &amp;world, ShapeFunction listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a652406794226e2ebe8a0a9c7cf2d98ea</anchor>
      <arglist>(AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const BodyShapeIDs &amp;</type>
      <name>GetFixturesForProxies</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af5a39fd26cc21a25452046df1c4c1b08</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Frequency</type>
      <name>GetInvDeltaTime</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a32f875c95aaec6c2e7a5737e00738e0f</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const ProxyIDs &amp;</type>
      <name>GetProxies</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa688d6514c8709849281db9d93448a93</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; pmr::StatsResource::Stats &gt;</type>
      <name>GetResourceStats</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aff84d6881d841e255e77330984080008</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetSubStepping</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af8856e4e147c88bcacefa6b63aa750cd</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const DynamicTree &amp;</type>
      <name>GetTree</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a906e04c52b759610040707fef9ad58b0</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Interval&lt; Positive&lt; Length &gt; &gt;</type>
      <name>GetVertexRadiusInterval</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa5bd2b2d4ff4f88eef1db5f754dfa7c2</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLocked</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af876b6037e657c9123c89cc057dae338</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsStepComplete</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aac86950fdee2a34e82718966246905a3</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3b4f6e28eb03d5efe900c149745a275c</anchor>
      <arglist>(const AabbTreeWorld &amp;lhs, const AabbTreeWorld &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abf71b232c9e1851d6149bc0ba4e5867b</anchor>
      <arglist>(const AabbTreeWorld &amp;lhs, const AabbTreeWorld &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSubStepping</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7b8d4d16ed5f043b13407de3cd8f11f4</anchor>
      <arglist>(AabbTreeWorld &amp;world, bool flag) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4602fbbc1af40386700118e5ddda8b6a</anchor>
      <arglist>(AabbTreeWorld &amp;world, const Length2 &amp;newOrigin)</arglist>
    </member>
    <member kind="function">
      <type>StepStats</type>
      <name>Step</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af03fb141f6d983e01e4799b62c9e3b07</anchor>
      <arglist>(AabbTreeWorld &amp;world, const StepConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>CreateBody</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a352ef727632169c252a59d648808822f</anchor>
      <arglist>(AabbTreeWorld &amp;world, Body body=Body{})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Destroy</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7df9661feac023ea0e4cbe6369943352</anchor>
      <arglist>(AabbTreeWorld &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>const BodyIDs &amp;</type>
      <name>GetBodies</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4c12d1fb1dda1f84e19d43cb9abfbdd6</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const BodyIDs &amp;</type>
      <name>GetBodiesForProxies</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a02732814de45bab260fe1a91e1fb05c0</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Body &amp;</type>
      <name>GetBody</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aaa29799a42054beffb9328eb8c651ed1</anchor>
      <arglist>(const AabbTreeWorld &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>GetBodyRange</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae97a6f878c88ff1c0609582303945bd2</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const BodyContactIDs &amp;</type>
      <name>GetContacts</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7b9fd7f3e9d7a0f8ff73d5818cf0d1f4</anchor>
      <arglist>(const AabbTreeWorld &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>const BodyJointIDs &amp;</type>
      <name>GetJoints</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abaaa273bdf2585781176266c6be413a6</anchor>
      <arglist>(const AabbTreeWorld &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>const ProxyIDs &amp;</type>
      <name>GetProxies</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3694df2092406746a5e71113ee6487f1</anchor>
      <arglist>(const AabbTreeWorld &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsDestroyed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a420fd33ad8ad006f01422746b89cc507</anchor>
      <arglist>(const AabbTreeWorld &amp;world, BodyID id) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBody</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a20cdd89db66f857c4799c090880bd5b4</anchor>
      <arglist>(AabbTreeWorld &amp;world, BodyID id, Body value)</arglist>
    </member>
    <member kind="function">
      <type>JointID</type>
      <name>CreateJoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad08795abe5eee5183189ff9901ab410a</anchor>
      <arglist>(AabbTreeWorld &amp;world, Joint def)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Destroy</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acc9f0d8549658a5f76cc03ac8a78df14</anchor>
      <arglist>(AabbTreeWorld &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>const Joint &amp;</type>
      <name>GetJoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6372e003c4984f0c0319884f812f2dd7</anchor>
      <arglist>(const AabbTreeWorld &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>JointCounter</type>
      <name>GetJointRange</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adfede6c462c7ebd2f3d75ec2878bbb73</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const JointIDs &amp;</type>
      <name>GetJoints</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a04675e3f7536245a0ca7fad3f4bb0b27</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsDestroyed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a24478dcc8d764767fae7067be9dcc6d4</anchor>
      <arglist>(const AabbTreeWorld &amp;world, JointID id) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetJoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae2bf839e74417fc9845d648c90f5b1cc</anchor>
      <arglist>(AabbTreeWorld &amp;world, JointID id, Joint def)</arglist>
    </member>
    <member kind="function">
      <type>ShapeID</type>
      <name>CreateShape</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5063d35172bec75d73944cc1c52009ed</anchor>
      <arglist>(AabbTreeWorld &amp;world, Shape def)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Destroy</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7896b447c00a9a33828fead594cb9df4</anchor>
      <arglist>(AabbTreeWorld &amp;world, ShapeID id)</arglist>
    </member>
    <member kind="function">
      <type>const Shape &amp;</type>
      <name>GetShape</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9e29376addbe168c363097e82eb796f0</anchor>
      <arglist>(const AabbTreeWorld &amp;world, ShapeID id)</arglist>
    </member>
    <member kind="function">
      <type>ShapeCounter</type>
      <name>GetShapeRange</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a61d7f65f10afdad013c11d866292ad12</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsDestroyed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae36d58fc98aeafd62c67ef3106e0e4a3</anchor>
      <arglist>(const AabbTreeWorld &amp;world, ShapeID id) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetShape</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a089e703b548a6b5f8b02ceb661a40a1d</anchor>
      <arglist>(AabbTreeWorld &amp;world, ShapeID id, Shape def)</arglist>
    </member>
    <member kind="function">
      <type>const Contact &amp;</type>
      <name>GetContact</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab77e4986f15b40a9e31429c3f6be3b27</anchor>
      <arglist>(const AabbTreeWorld &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>ContactCounter</type>
      <name>GetContactRange</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1e9f16b0b9ca81d3852d99bd3bf7ba94</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>KeyedContactIDs</type>
      <name>GetContacts</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab42cd5eaac7f55f5fc952be4188a1fc5</anchor>
      <arglist>(const AabbTreeWorld &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>const Manifold &amp;</type>
      <name>GetManifold</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4744f578a96c67e8929c84c7b32e27e7</anchor>
      <arglist>(const AabbTreeWorld &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsDestroyed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a410fda5a1c75561497f4184d9e6d0d15</anchor>
      <arglist>(const AabbTreeWorld &amp;world, ContactID id) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetContact</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a986132f0e473e4da3dfcd1b5ec1eb608</anchor>
      <arglist>(AabbTreeWorld &amp;world, ContactID id, Contact value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBeginContactListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af91536aa88e244f3956b70736dfbbc12</anchor>
      <arglist>(AabbTreeWorld &amp;world, ContactFunction listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDetachListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a54e878b6146c7c2bb50e7bd73a95c217</anchor>
      <arglist>(AabbTreeWorld &amp;world, BodyShapeFunction listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEndContactListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2ef32850c1173ac570c8eaa586a6653c</anchor>
      <arglist>(AabbTreeWorld &amp;world, ContactFunction listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetJointDestructionListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7c1863dc243955e1955e519c01a0c59a</anchor>
      <arglist>(AabbTreeWorld &amp;world, JointFunction listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPostSolveContactListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a64227632d49eb8e331902edb22999b58</anchor>
      <arglist>(AabbTreeWorld &amp;world, ContactImpulsesFunction listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPreSolveContactListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af7733aac4d120107b96ef887303e4fbf</anchor>
      <arglist>(AabbTreeWorld &amp;world, ContactManifoldFunction listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetShapeDestructionListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a59900969bcf9d8419fa8f122118844aa</anchor>
      <arglist>(AabbTreeWorld &amp;world, ShapeFunction listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a652406794226e2ebe8a0a9c7cf2d98ea</anchor>
      <arglist>(AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const BodyShapeIDs &amp;</type>
      <name>GetFixturesForProxies</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af5a39fd26cc21a25452046df1c4c1b08</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Frequency</type>
      <name>GetInvDeltaTime</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a32f875c95aaec6c2e7a5737e00738e0f</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const ProxyIDs &amp;</type>
      <name>GetProxies</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa688d6514c8709849281db9d93448a93</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; pmr::StatsResource::Stats &gt;</type>
      <name>GetResourceStats</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aff84d6881d841e255e77330984080008</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetSubStepping</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af8856e4e147c88bcacefa6b63aa750cd</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const DynamicTree &amp;</type>
      <name>GetTree</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a906e04c52b759610040707fef9ad58b0</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Interval&lt; Positive&lt; Length &gt; &gt;</type>
      <name>GetVertexRadiusInterval</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa5bd2b2d4ff4f88eef1db5f754dfa7c2</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLocked</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af876b6037e657c9123c89cc057dae338</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsStepComplete</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aac86950fdee2a34e82718966246905a3</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3b4f6e28eb03d5efe900c149745a275c</anchor>
      <arglist>(const AabbTreeWorld &amp;lhs, const AabbTreeWorld &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abf71b232c9e1851d6149bc0ba4e5867b</anchor>
      <arglist>(const AabbTreeWorld &amp;lhs, const AabbTreeWorld &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSubStepping</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7b8d4d16ed5f043b13407de3cd8f11f4</anchor>
      <arglist>(AabbTreeWorld &amp;world, bool flag) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4602fbbc1af40386700118e5ddda8b6a</anchor>
      <arglist>(AabbTreeWorld &amp;world, const Length2 &amp;newOrigin)</arglist>
    </member>
    <member kind="function">
      <type>StepStats</type>
      <name>Step</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af03fb141f6d983e01e4799b62c9e3b07</anchor>
      <arglist>(AabbTreeWorld &amp;world, const StepConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>CreateBody</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a352ef727632169c252a59d648808822f</anchor>
      <arglist>(AabbTreeWorld &amp;world, Body body=Body{})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Destroy</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7df9661feac023ea0e4cbe6369943352</anchor>
      <arglist>(AabbTreeWorld &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>const BodyIDs &amp;</type>
      <name>GetBodies</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4c12d1fb1dda1f84e19d43cb9abfbdd6</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const BodyIDs &amp;</type>
      <name>GetBodiesForProxies</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a02732814de45bab260fe1a91e1fb05c0</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Body &amp;</type>
      <name>GetBody</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aaa29799a42054beffb9328eb8c651ed1</anchor>
      <arglist>(const AabbTreeWorld &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>GetBodyRange</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae97a6f878c88ff1c0609582303945bd2</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const BodyContactIDs &amp;</type>
      <name>GetContacts</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7b9fd7f3e9d7a0f8ff73d5818cf0d1f4</anchor>
      <arglist>(const AabbTreeWorld &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>const BodyJointIDs &amp;</type>
      <name>GetJoints</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abaaa273bdf2585781176266c6be413a6</anchor>
      <arglist>(const AabbTreeWorld &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>const ProxyIDs &amp;</type>
      <name>GetProxies</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3694df2092406746a5e71113ee6487f1</anchor>
      <arglist>(const AabbTreeWorld &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsDestroyed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a420fd33ad8ad006f01422746b89cc507</anchor>
      <arglist>(const AabbTreeWorld &amp;world, BodyID id) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBody</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a20cdd89db66f857c4799c090880bd5b4</anchor>
      <arglist>(AabbTreeWorld &amp;world, BodyID id, Body value)</arglist>
    </member>
    <member kind="function">
      <type>JointID</type>
      <name>CreateJoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad08795abe5eee5183189ff9901ab410a</anchor>
      <arglist>(AabbTreeWorld &amp;world, Joint def)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Destroy</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acc9f0d8549658a5f76cc03ac8a78df14</anchor>
      <arglist>(AabbTreeWorld &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>const Joint &amp;</type>
      <name>GetJoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6372e003c4984f0c0319884f812f2dd7</anchor>
      <arglist>(const AabbTreeWorld &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>JointCounter</type>
      <name>GetJointRange</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adfede6c462c7ebd2f3d75ec2878bbb73</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const JointIDs &amp;</type>
      <name>GetJoints</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a04675e3f7536245a0ca7fad3f4bb0b27</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsDestroyed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a24478dcc8d764767fae7067be9dcc6d4</anchor>
      <arglist>(const AabbTreeWorld &amp;world, JointID id) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetJoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae2bf839e74417fc9845d648c90f5b1cc</anchor>
      <arglist>(AabbTreeWorld &amp;world, JointID id, Joint def)</arglist>
    </member>
    <member kind="function">
      <type>ShapeID</type>
      <name>CreateShape</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5063d35172bec75d73944cc1c52009ed</anchor>
      <arglist>(AabbTreeWorld &amp;world, Shape def)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Destroy</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7896b447c00a9a33828fead594cb9df4</anchor>
      <arglist>(AabbTreeWorld &amp;world, ShapeID id)</arglist>
    </member>
    <member kind="function">
      <type>const Shape &amp;</type>
      <name>GetShape</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9e29376addbe168c363097e82eb796f0</anchor>
      <arglist>(const AabbTreeWorld &amp;world, ShapeID id)</arglist>
    </member>
    <member kind="function">
      <type>ShapeCounter</type>
      <name>GetShapeRange</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a61d7f65f10afdad013c11d866292ad12</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsDestroyed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae36d58fc98aeafd62c67ef3106e0e4a3</anchor>
      <arglist>(const AabbTreeWorld &amp;world, ShapeID id) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetShape</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a089e703b548a6b5f8b02ceb661a40a1d</anchor>
      <arglist>(AabbTreeWorld &amp;world, ShapeID id, Shape def)</arglist>
    </member>
    <member kind="function">
      <type>const Contact &amp;</type>
      <name>GetContact</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab77e4986f15b40a9e31429c3f6be3b27</anchor>
      <arglist>(const AabbTreeWorld &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>ContactCounter</type>
      <name>GetContactRange</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1e9f16b0b9ca81d3852d99bd3bf7ba94</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>KeyedContactIDs</type>
      <name>GetContacts</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab42cd5eaac7f55f5fc952be4188a1fc5</anchor>
      <arglist>(const AabbTreeWorld &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>const Manifold &amp;</type>
      <name>GetManifold</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4744f578a96c67e8929c84c7b32e27e7</anchor>
      <arglist>(const AabbTreeWorld &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsDestroyed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a410fda5a1c75561497f4184d9e6d0d15</anchor>
      <arglist>(const AabbTreeWorld &amp;world, ContactID id) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetContact</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a986132f0e473e4da3dfcd1b5ec1eb608</anchor>
      <arglist>(AabbTreeWorld &amp;world, ContactID id, Contact value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AabbTreeWorldBody.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>AabbTreeWorldBody_8hpp.html</filename>
    <includes id="BodyID_8hpp" name="BodyID.hpp" local="no" imported="no">playrho/BodyID.hpp</includes>
    <includes id="ShapeID_8hpp" name="ShapeID.hpp" local="no" imported="no">playrho/ShapeID.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>void</type>
      <name>Attach</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a71e1178c67501e9f3cecd3bc40cc04a1</anchor>
      <arglist>(AabbTreeWorld &amp;world, BodyID id, ShapeID shapeID)</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>CreateBody</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aac5c2b6c5fc9a39971942baf99fcee2b</anchor>
      <arglist>(AabbTreeWorld &amp;world, const BodyConf &amp;def)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Detach</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa96788ab361740a16d316b821154ea9e</anchor>
      <arglist>(AabbTreeWorld &amp;world, BodyID id, ShapeID shapeID)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; ShapeID &gt; &amp;</type>
      <name>GetShapes</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afe762c434a20aa39abb7f121b9d89c03</anchor>
      <arglist>(const AabbTreeWorld &amp;world, BodyID id)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Acceleration.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>Acceleration_8hpp.html</filename>
    <includes id="Real_8hpp" name="Real.hpp" local="no" imported="no">playrho/Real.hpp</includes>
    <includes id="Templates_8hpp" name="Templates.hpp" local="no" imported="no">playrho/Templates.hpp</includes>
    <includes id="Units_8hpp" name="Units.hpp" local="no" imported="no">playrho/Units.hpp</includes>
    <includes id="Vector2_8hpp" name="Vector2.hpp" local="no" imported="no">playrho/Vector2.hpp</includes>
    <class kind="struct">playrho::d2::Acceleration</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a299c547b3a13504426688a0c968e2891</anchor>
      <arglist>(const d2::Acceleration &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4442cd95fcdc4e62463d3e294fc7a303</anchor>
      <arglist>(const Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a69bd254b1dac7999ffb0d0a8cb73f64e</anchor>
      <arglist>(const Acceleration &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a19e063d352181298469b751c99cad684</anchor>
      <arglist>(const Real lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration &amp;</type>
      <name>operator*=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a381123f80f2c54ad37576e703eeb68a4</anchor>
      <arglist>(Acceleration &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af1ae3bcd38f85eedaab9cfb290de1ba2</anchor>
      <arglist>(const Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a33f1fdc4c279009a88f064ca1dd3ff59</anchor>
      <arglist>(const Acceleration &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration &amp;</type>
      <name>operator+=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aae7afb9157770b54dde00ee05cc3f586</anchor>
      <arglist>(Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af4082a55e3d2a0600855a5b626f19f41</anchor>
      <arglist>(const Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af2f8aaffda4163a6733ef5aff24414e0</anchor>
      <arglist>(const Acceleration &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration &amp;</type>
      <name>operator-=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a66e903f6e66753963a1bd82295759ddb</anchor>
      <arglist>(Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration</type>
      <name>operator/</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9b895b5b826bc5349fbd007bd6e9683b</anchor>
      <arglist>(const Acceleration &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration &amp;</type>
      <name>operator/=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a80f242d8a02779e3c73ebb380a7476c1</anchor>
      <arglist>(Acceleration &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4e08ccbbdba321adad44c940d95c52fb</anchor>
      <arglist>(const Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BasicAPI.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>BasicAPI_8hpp.html</filename>
    <includes id="World_8hpp" name="World.hpp" local="no" imported="no">playrho/d2/World.hpp</includes>
    <includes id="WorldMisc_8hpp" name="WorldMisc.hpp" local="no" imported="no">playrho/d2/WorldMisc.hpp</includes>
    <includes id="WorldBody_8hpp" name="WorldBody.hpp" local="no" imported="no">playrho/d2/WorldBody.hpp</includes>
    <includes id="WorldShape_8hpp" name="WorldShape.hpp" local="no" imported="no">playrho/d2/WorldShape.hpp</includes>
    <includes id="WorldJoint_8hpp" name="WorldJoint.hpp" local="no" imported="no">playrho/d2/WorldJoint.hpp</includes>
    <includes id="WorldContact_8hpp" name="WorldContact.hpp" local="no" imported="no">playrho/d2/WorldContact.hpp</includes>
    <includes id="ChainShapeConf_8hpp" name="ChainShapeConf.hpp" local="no" imported="no">playrho/d2/ChainShapeConf.hpp</includes>
    <includes id="DiskShapeConf_8hpp" name="DiskShapeConf.hpp" local="no" imported="no">playrho/d2/DiskShapeConf.hpp</includes>
    <includes id="EdgeShapeConf_8hpp" name="EdgeShapeConf.hpp" local="no" imported="no">playrho/d2/EdgeShapeConf.hpp</includes>
    <includes id="MultiShapeConf_8hpp" name="MultiShapeConf.hpp" local="no" imported="no">playrho/d2/MultiShapeConf.hpp</includes>
    <includes id="PolygonShapeConf_8hpp" name="PolygonShapeConf.hpp" local="no" imported="no">playrho/d2/PolygonShapeConf.hpp</includes>
    <includes id="DistanceJointConf_8hpp" name="DistanceJointConf.hpp" local="no" imported="no">playrho/d2/DistanceJointConf.hpp</includes>
    <includes id="FrictionJointConf_8hpp" name="FrictionJointConf.hpp" local="no" imported="no">playrho/d2/FrictionJointConf.hpp</includes>
    <includes id="GearJointConf_8hpp" name="GearJointConf.hpp" local="no" imported="no">playrho/d2/GearJointConf.hpp</includes>
    <includes id="MotorJointConf_8hpp" name="MotorJointConf.hpp" local="no" imported="no">playrho/d2/MotorJointConf.hpp</includes>
    <includes id="TargetJointConf_8hpp" name="TargetJointConf.hpp" local="no" imported="no">playrho/d2/TargetJointConf.hpp</includes>
    <includes id="PrismaticJointConf_8hpp" name="PrismaticJointConf.hpp" local="no" imported="no">playrho/d2/PrismaticJointConf.hpp</includes>
    <includes id="PulleyJointConf_8hpp" name="PulleyJointConf.hpp" local="no" imported="no">playrho/d2/PulleyJointConf.hpp</includes>
    <includes id="RevoluteJointConf_8hpp" name="RevoluteJointConf.hpp" local="no" imported="no">playrho/d2/RevoluteJointConf.hpp</includes>
    <includes id="RopeJointConf_8hpp" name="RopeJointConf.hpp" local="no" imported="no">playrho/d2/RopeJointConf.hpp</includes>
    <includes id="WeldJointConf_8hpp" name="WeldJointConf.hpp" local="no" imported="no">playrho/d2/WeldJointConf.hpp</includes>
    <includes id="WheelJointConf_8hpp" name="WheelJointConf.hpp" local="no" imported="no">playrho/d2/WheelJointConf.hpp</includes>
  </compound>
  <compound kind="file">
    <name>Body.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>Body_8hpp.html</filename>
    <includes id="BodyType_8hpp" name="BodyType.hpp" local="no" imported="no">playrho/BodyType.hpp</includes>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">playrho/Math.hpp</includes>
    <includes id="NonNegative_8hpp" name="NonNegative.hpp" local="no" imported="no">playrho/NonNegative.hpp</includes>
    <includes id="Real_8hpp" name="Real.hpp" local="no" imported="no">playrho/Real.hpp</includes>
    <includes id="ShapeID_8hpp" name="ShapeID.hpp" local="no" imported="no">playrho/ShapeID.hpp</includes>
    <includes id="Units_8hpp" name="Units.hpp" local="no" imported="no">playrho/Units.hpp</includes>
    <includes id="Vector2_8hpp" name="Vector2.hpp" local="no" imported="no">playrho/Vector2.hpp</includes>
    <includes id="ZeroToUnderOne_8hpp" name="ZeroToUnderOne.hpp" local="no" imported="no">playrho/ZeroToUnderOne.hpp</includes>
    <includes id="Acceleration_8hpp" name="Acceleration.hpp" local="no" imported="no">playrho/d2/Acceleration.hpp</includes>
    <includes id="BodyConf_8hpp" name="BodyConf.hpp" local="no" imported="no">playrho/d2/BodyConf.hpp</includes>
    <includes id="d2_2Math_8hpp" name="Math.hpp" local="no" imported="no">playrho/d2/Math.hpp</includes>
    <includes id="Position_8hpp" name="Position.hpp" local="no" imported="no">playrho/d2/Position.hpp</includes>
    <includes id="Sweep_8hpp" name="Sweep.hpp" local="no" imported="no">playrho/d2/Sweep.hpp</includes>
    <includes id="Transformation_8hpp" name="Transformation.hpp" local="no" imported="no">playrho/d2/Transformation.hpp</includes>
    <includes id="UnitVec_8hpp" name="UnitVec.hpp" local="no" imported="no">playrho/d2/UnitVec.hpp</includes>
    <includes id="Velocity_8hpp" name="Velocity.hpp" local="no" imported="no">playrho/d2/Velocity.hpp</includes>
    <class kind="class">playrho::d2::Body</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>void</type>
      <name>Advance</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa5385b2dbb547f7dcf7cb4d8bd67d6a0</anchor>
      <arglist>(Body &amp;body, ZeroToUnderOneFF&lt; Real &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Advance0</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3025c6db501979297b7b7c27547111c4</anchor>
      <arglist>(Body &amp;body, ZeroToUnderOneFF&lt; Real &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyAngularImpulse</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a01828005de015a2660fb08cb6fd10e0a</anchor>
      <arglist>(Body &amp;body, AngularMomentum impulse) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyLinearImpulse</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aee7a0c13c47b5e71839b4bcf66ce1a63</anchor>
      <arglist>(Body &amp;body, const Momentum2 &amp;impulse, const Length2 &amp;point) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Awaken</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4834708af29bcc9ae39ebfc2b9f580f6</anchor>
      <arglist>(Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Acceleration</type>
      <name>GetAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acafaac4ef15f7416f464dff9b19780fa</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngle</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2ecdf15e8b628491940dd2e568afc427</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AngularAcceleration</type>
      <name>GetAngularAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a986b11edba421b23879fa363c557f1e5</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Frequency &gt;</type>
      <name>GetAngularDamping</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7543270614333c0aa69df56877a3a1bd</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetAngularVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a306635dbd11f92ad1020a386fce7b7c2</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Body::FlagsType</type>
      <name>GetFlags</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a21071397aafb9df4a10e1abde2d11421</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Force2</type>
      <name>GetForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a82eaa61b6bddf682fe315f09830e2bfc</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegativeFF&lt; InvMass &gt;</type>
      <name>GetInvMass</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7d74493ba9108b54a9900eb8319ede92</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegativeFF&lt; InvRotInertia &gt;</type>
      <name>GetInvRotInertia</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4c2a6d79f4824a9d3d9971b60a865e47</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearAcceleration2</type>
      <name>GetLinearAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aef76fc5d7813af886e28e8033e9d019d</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Frequency &gt;</type>
      <name>GetLinearDamping</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a19b401f474facc647922e54a7aa60aa8</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity2</type>
      <name>GetLinearVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3802163b90f631b001eaa0201be419c9</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity2</type>
      <name>GetLinearVelocityFromLocalPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a35436f653d3b5cad6584a34e530e825e</anchor>
      <arglist>(const Body &amp;body, const Length2 &amp;localPoint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity2</type>
      <name>GetLinearVelocityFromWorldPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9139b405ca94083b92bb773c43cf5abe</anchor>
      <arglist>(const Body &amp;body, const Length2 &amp;worldPoint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalCenter</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8d99adba0a8c68b083bb765ef9f1c1f0</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac687607740e4b5d123eba7d7c3b8a3f3</anchor>
      <arglist>(const Body &amp;body, const Length2 &amp;worldPoint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RotInertia</type>
      <name>GetLocalRotInertia</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>accc0736257251f381353661320af972e</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetLocalVector</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad524fa0b4ae0f8847070328bdee06572</anchor>
      <arglist>(const Body &amp;body, const UnitVec &amp;uv) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8a6f694cab71d0db91049dc0908de63f</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Mass</type>
      <name>GetMass</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3c355eb58981b97e5901fa7d04052507</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>GetPosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1ee2be09f607ec37050c91dc3a5d0f92</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>GetPosition0</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a295726fcb0ed9f3bd0a8cc3288f5f552</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>GetPosition1</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a77de45b3fab735d0f87a0978a622a9c0</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RotInertia</type>
      <name>GetRotInertia</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4c4c855f042444d0122919f8c1559ccb</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; ShapeID &gt; &amp;</type>
      <name>GetShapes</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a63b209948a3e0c8c4904f7ff662abfd5</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Sweep &amp;</type>
      <name>GetSweep</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a83c03ab97ee5e1a0cdb1a41a62050ccc</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Torque</type>
      <name>GetTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a18e2ece8e057b22c240cf681aca400b5</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Transformation &amp;</type>
      <name>GetTransformation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a798bf0d73d9cdbbaad16af6fd13cfed0</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyType</type>
      <name>GetType</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a421d2110404320428fd02b2d0b70a062</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Time</type>
      <name>GetUnderActiveTime</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1192c89bb1512e70b1fb878c1b29a452</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Velocity</type>
      <name>GetVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a13ee26a73a0987dbb7c825539590719d</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Velocity</type>
      <name>GetVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4949a38cc04a59f2d32d5d3e1347d21f</anchor>
      <arglist>(const Body &amp;body, Time h) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetWorldCenter</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1d38f917cdf715b50222fe39fe1a22c3</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetWorldPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5eba7c0bd135eb4e0445063929639961</anchor>
      <arglist>(const Body &amp;body, const Length2 &amp;localPoint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetWorldVector</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4bf32a6c0d4ac08ef187ac68d14886dc</anchor>
      <arglist>(const Body &amp;body, const Length2 &amp;localVector) noexcept</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetWorldVector</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abd3a5456b15768fa846cb40d6b32a259</anchor>
      <arglist>(const Body &amp;body, const UnitVec &amp;localVector) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAccelerable</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad1f05a05c6dd9eb2a1564cc10032f16c</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAwake</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a139df81757401545db36e6fc6f030d75</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab930c47cedb9dc4fe0d6e178e7651d54</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsFixedRotation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a91940e85abf08596f625348315452e3d</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsImpenetrable</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8c4170f49badbf1881f371cfb5f466a7</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMassDataDirty</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af3540987384e881f23e28f5a9c710ae1</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSleepingAllowed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1cde4db895479e9ddd34c70425811699</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSpeedable</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a81c7a4d7696e9cb367f241afdbbe2727</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad57faa5642b6526d57f2f066cb74c3a9</anchor>
      <arglist>(const Body &amp;lhs, const Body &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a015695f69f7b80674591cc605b8a1a76</anchor>
      <arglist>(const Body &amp;lhs, const Body &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5907db10db49a1e6d7f8b8bc59dfa8e8</anchor>
      <arglist>(Body &amp;body, AngularAcceleration value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a005d180107a41f007d4c495abdebd06f</anchor>
      <arglist>(Body &amp;body, const Acceleration &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aaab26b27ef305db5fd455a7bfb3206f0</anchor>
      <arglist>(Body &amp;body, const LinearAcceleration2 &amp;linear, AngularAcceleration angular) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9455cc8ec4240be80b646f9430abe1e4</anchor>
      <arglist>(Body &amp;body, const LinearAcceleration2 &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngle</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a804f65cef5ba33970fabd8af9d40cb93</anchor>
      <arglist>(Body &amp;body, Angle value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngularDamping</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a344a9753e8cd6fb046a57e82d2206d60</anchor>
      <arglist>(Body &amp;body, NonNegative&lt; Frequency &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAwake</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a60201ffd45e0d810ff5d4fb90fd0bc4b</anchor>
      <arglist>(Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abfae76ec0240c61e85bed996119d130e</anchor>
      <arglist>(Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a88826de33b9ad1fe847120458fe3a836</anchor>
      <arglist>(Body &amp;body, bool value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFixedRotation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a546de4c838854e1d2bee174a4cf264e5</anchor>
      <arglist>(Body &amp;body, bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetImpenetrable</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aaf57ca63655e6eaeac4d9e65a8e7be4a</anchor>
      <arglist>(Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLinearDamping</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9901b5b3ddb898a60f216007adace0de</anchor>
      <arglist>(Body &amp;body, NonNegative&lt; Frequency &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLocation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5e7d71d5a95963adfa0be724685f0c72</anchor>
      <arglist>(Body &amp;body, const Length2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMass</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af26ae548ac842dfc9c1da2230b224870</anchor>
      <arglist>(Body &amp;body, Mass mass)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPosition0</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acedc779293d6c9cacd1cb15ae0fe9600</anchor>
      <arglist>(Body &amp;body, const Position &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPosition1</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aaefd53390bb21fa5e3b17f59ad320c4e</anchor>
      <arglist>(Body &amp;body, const Position &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRotInertia</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6c126330f4880228831cbacb1fb81df6</anchor>
      <arglist>(Body &amp;body, RotInertia value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSleepingAllowed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a54802d32ec837cdf5669744c20dca3df</anchor>
      <arglist>(Body &amp;body, bool value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSweep</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1f30cb6266cb2f950ea5fdb5aae58d1b</anchor>
      <arglist>(Body &amp;body, const Sweep &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTransformation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afb699dee312da633427a8adc403cd88b</anchor>
      <arglist>(Body &amp;body, const Transformation &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetType</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2a12afea1828cb69ef94cbfa86018069</anchor>
      <arglist>(Body &amp;body, BodyType value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adc771e5dfb30f44b8b71f15cd9e5f950</anchor>
      <arglist>(Body &amp;body, AngularVelocity value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6a3b4ab8ab7e96a8cac1cb64a9c401c6</anchor>
      <arglist>(Body &amp;body, const LinearVelocity2 &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adddd763be5890fad18f5a3dd9d2b4d38</anchor>
      <arglist>(Body &amp;body, const Velocity &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Unawaken</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abdfbff06306e4ecb71f6d4b2136eea7c</anchor>
      <arglist>(Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetAwake</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afce7db62d828a84a94e8c6222d9111a6</anchor>
      <arglist>(Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5f8f4bd2d2daa7bbd38dbe9b0919f08e</anchor>
      <arglist>(Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetImpenetrable</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2ba4e5cbd12444be971a3ef0a09e9931</anchor>
      <arglist>(Body &amp;body) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BodyConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>BodyConf_8hpp.html</filename>
    <includes id="ArrayList_8hpp" name="ArrayList.hpp" local="no" imported="no">playrho/ArrayList.hpp</includes>
    <includes id="BodyType_8hpp" name="BodyType.hpp" local="no" imported="no">playrho/BodyType.hpp</includes>
    <includes id="NonNegative_8hpp" name="NonNegative.hpp" local="no" imported="no">playrho/NonNegative.hpp</includes>
    <includes id="Real_8hpp" name="Real.hpp" local="no" imported="no">playrho/Real.hpp</includes>
    <includes id="ShapeID_8hpp" name="ShapeID.hpp" local="no" imported="no">playrho/ShapeID.hpp</includes>
    <includes id="Span_8hpp" name="Span.hpp" local="no" imported="no">playrho/Span.hpp</includes>
    <includes id="Units_8hpp" name="Units.hpp" local="no" imported="no">playrho/Units.hpp</includes>
    <includes id="Vector2_8hpp" name="Vector2.hpp" local="no" imported="no">playrho/Vector2.hpp</includes>
    <includes id="Position_8hpp" name="Position.hpp" local="no" imported="no">playrho/d2/Position.hpp</includes>
    <includes id="Sweep_8hpp" name="Sweep.hpp" local="no" imported="no">playrho/d2/Sweep.hpp</includes>
    <includes id="Transformation_8hpp" name="Transformation.hpp" local="no" imported="no">playrho/d2/Transformation.hpp</includes>
    <includes id="Velocity_8hpp" name="Velocity.hpp" local="no" imported="no">playrho/d2/Velocity.hpp</includes>
    <class kind="struct">playrho::d2::BodyConf</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetAngle</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6e36744b63f83418fefcdc1642acbbf8</anchor>
      <arglist>(const BodyConf &amp;conf) noexcept -&gt; Angle</arglist>
    </member>
    <member kind="function">
      <type>BodyConf</type>
      <name>GetBodyConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adce9b45f685c4bace08d09e412d3b8f2</anchor>
      <arglist>(const Body &amp;body)</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyConf</type>
      <name>GetDefaultBodyConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af6c1034a2366e6ef466253aea8a13829</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLocation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af305801683ef38d8ef1fbd65a5f8fa55</anchor>
      <arglist>(const BodyConf &amp;conf) noexcept -&gt; Length2</arglist>
    </member>
    <member kind="function">
      <type>Transformation</type>
      <name>GetTransformation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4eb1f96a1c7cb27d7e9b07696eaf7413</anchor>
      <arglist>(const BodyConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a50e186f203ad0d5f7c851058802978fd</anchor>
      <arglist>(const BodyConf &amp;lhs, const BodyConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0106f5ff990330d8e8afcd906cefa75a</anchor>
      <arglist>(const BodyConf &amp;lhs, const BodyConf &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BodyConstraint.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>BodyConstraint_8hpp.html</filename>
    <includes id="MovementConf_8hpp" name="MovementConf.hpp" local="no" imported="no">playrho/MovementConf.hpp</includes>
    <includes id="Units_8hpp" name="Units.hpp" local="no" imported="no">playrho/Units.hpp</includes>
    <includes id="Vector2_8hpp" name="Vector2.hpp" local="no" imported="no">playrho/Vector2.hpp</includes>
    <includes id="Body_8hpp" name="Body.hpp" local="no" imported="no">playrho/d2/Body.hpp</includes>
    <includes id="Position_8hpp" name="Position.hpp" local="no" imported="no">playrho/d2/Position.hpp</includes>
    <includes id="Velocity_8hpp" name="Velocity.hpp" local="no" imported="no">playrho/d2/Velocity.hpp</includes>
    <class kind="class">playrho::d2::BodyConstraint</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>BodyConstraint</type>
      <name>GetBodyConstraint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a973134610257ca826a0a4e81743eda3c</anchor>
      <arglist>(const Body &amp;body, Time time, const MovementConf &amp;conf) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ChainShapeConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>ChainShapeConf_8hpp.html</filename>
    <includes id="TypeInfo_8hpp" name="TypeInfo.hpp" local="no" imported="no">playrho/TypeInfo.hpp</includes>
    <includes id="ShapeConf_8hpp" name="ShapeConf.hpp" local="no" imported="no">playrho/d2/ShapeConf.hpp</includes>
    <includes id="DistanceProxy_8hpp" name="DistanceProxy.hpp" local="no" imported="no">playrho/d2/DistanceProxy.hpp</includes>
    <includes id="MassData_8hpp" name="MassData.hpp" local="no" imported="no">playrho/d2/MassData.hpp</includes>
    <includes id="d2_2Math_8hpp" name="Math.hpp" local="no" imported="no">playrho/d2/Math.hpp</includes>
    <includes id="d2_2AABB_8hpp" name="AABB.hpp" local="no" imported="no">playrho/d2/AABB.hpp</includes>
    <class kind="struct">playrho::d2::ChainShapeConf</class>
    <class kind="struct">playrho::detail::TypeInfo&lt; playrho::d2::ChainShapeConf &gt;</class>
    <class kind="class">playrho::d2::ChainShapeConf::VerticesWithNormals</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>ChainShapeConf</type>
      <name>GetChainShapeConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab25320e8b45be5e1730e39c9fc26a103</anchor>
      <arglist>(const AABB &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>ChainShapeConf</type>
      <name>GetChainShapeConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1506cafaf0782493d23348b88fc79053</anchor>
      <arglist>(const Length2 &amp;dimensions)</arglist>
    </member>
    <member kind="function">
      <type>ChainShapeConf</type>
      <name>GetChainShapeConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ade70545e6c2bf848f87657114a111d11</anchor>
      <arglist>(Length dimension)</arglist>
    </member>
    <member kind="function">
      <type>DistanceProxy</type>
      <name>GetChild</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8cdbec96d1a3f30b8c5705b602aeb8df</anchor>
      <arglist>(const ChainShapeConf &amp;arg, ChildCounter index)</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetChildCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afeeb64f8bbd439af0e350288e16da2e7</anchor>
      <arglist>(const ChainShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae2464e71b10f122808be6b06d1d8071a</anchor>
      <arglist>(const ChainShapeConf &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetNextIndex</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac7d699f052c62efd80ce28f0190d70af</anchor>
      <arglist>(const ChainShapeConf &amp;shape, ChildCounter index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a066d3e1ae90fa58624f7f07f62eecaf3</anchor>
      <arglist>(const ChainShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7ad00f041fe71267d7454ac6d8434078</anchor>
      <arglist>(const ChainShapeConf &amp;arg, ChildCounter) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLooped</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a435d2dc5439f69826450d3bac84b35c5</anchor>
      <arglist>(const ChainShapeConf &amp;shape) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Rotate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0a415ca6071bd581ccda6627333c917b</anchor>
      <arglist>(ChainShapeConf &amp;arg, const UnitVec &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Scale</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2a9f6506a87ab7964f3ae2a98618ac2d</anchor>
      <arglist>(ChainShapeConf &amp;arg, const Vec2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afcd643dc7d76848a7bed68d4bc7e2d61</anchor>
      <arglist>(ChainShapeConf &amp;arg, ChildCounter, NonNegative&lt; Length &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a42d5595b353659b2a4d22a91071195d7</anchor>
      <arglist>(ChainShapeConf &amp;arg, NonNegative&lt; Length &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Translate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6c6b074765640b44214ed1ac90ee4970</anchor>
      <arglist>(ChainShapeConf &amp;arg, const Length2 &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ClipList.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>ClipList_8hpp.html</filename>
    <includes id="ArrayList_8hpp" name="ArrayList.hpp" local="no" imported="no">playrho/ArrayList.hpp</includes>
    <includes id="ContactFeature_8hpp" name="ContactFeature.hpp" local="no" imported="no">playrho/ContactFeature.hpp</includes>
    <includes id="d2_2Math_8hpp" name="Math.hpp" local="no" imported="no">playrho/d2/Math.hpp</includes>
    <class kind="struct">playrho::d2::ClipVertex</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="typedef">
      <type>ArrayList&lt; ClipVertex, MaxManifoldPoints &gt;</type>
      <name>ClipList</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab02c685f9b6933b73418fb3223e2e433</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ClipList</type>
      <name>ClipSegmentToLine</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a073a93c54a20aa68f2c56e759b7976ab</anchor>
      <arglist>(const ClipList &amp;vIn, const UnitVec &amp;normal, Length offset, ContactFeature::Index indexA)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ContactImpulsesFunction.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>ContactImpulsesFunction_8hpp.html</filename>
    <includes id="ContactID_8hpp" name="ContactID.hpp" local="no" imported="no">playrho/ContactID.hpp</includes>
    <includes id="ContactImpulsesList_8hpp" name="ContactImpulsesList.hpp" local="no" imported="no">playrho/d2/ContactImpulsesList.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="typedef">
      <type>std::function&lt; void(ContactID, const ContactImpulsesList &amp;, unsigned)&gt;</type>
      <name>ContactImpulsesFunction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab0945eb1db3efaa574b6b8403a11b853</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ContactImpulsesList.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>ContactImpulsesList_8hpp.html</filename>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">playrho/Settings.hpp</includes>
    <class kind="class">playrho::d2::ContactImpulsesList</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>ContactImpulsesList</type>
      <name>GetContactImpulses</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3952e6392470f39a6236a5d144df88fe</anchor>
      <arglist>(const VelocityConstraint &amp;vc)</arglist>
    </member>
    <member kind="function">
      <type>Momentum</type>
      <name>GetMaxNormalImpulse</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a07f0d8f5fce9556590d8e7e40289ae33</anchor>
      <arglist>(const ContactImpulsesList &amp;impulses) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ContactManifoldFunction.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>ContactManifoldFunction_8hpp.html</filename>
    <includes id="ContactID_8hpp" name="ContactID.hpp" local="no" imported="no">playrho/ContactID.hpp</includes>
    <includes id="Manifold_8hpp" name="Manifold.hpp" local="no" imported="no">playrho/d2/Manifold.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="typedef">
      <type>std::function&lt; void(ContactID, const Manifold &amp;)&gt;</type>
      <name>ContactManifoldFunction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae8f4e3ce8b18d8ddf7c2e34572c3a8f6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ContactSolver.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>ContactSolver_8hpp.html</filename>
    <includes id="Span_8hpp" name="Span.hpp" local="no" imported="no">playrho/Span.hpp</includes>
    <includes id="d2_2Math_8hpp" name="Math.hpp" local="no" imported="no">playrho/d2/Math.hpp</includes>
    <includes id="PositionSolution_8hpp" name="PositionSolution.hpp" local="no" imported="no">playrho/d2/PositionSolution.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>d2::PositionSolution</type>
      <name>SolvePositionConstraint</name>
      <anchorfile>ContactSolver_8hpp.html</anchorfile>
      <anchor>a0fd21d441a78194f210e9f900bd3d1a4</anchor>
      <arglist>(const d2::PositionConstraint &amp;pc, bool moveA, bool moveB, const Span&lt; d2::BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>Momentum</type>
      <name>SolveVelocityConstraint</name>
      <anchorfile>ContactSolver_8hpp.html</anchorfile>
      <anchor>a89d774623d1c5986bbae698dbb20a07f</anchor>
      <arglist>(d2::VelocityConstraint &amp;vc, const Span&lt; d2::BodyConstraint &gt; &amp;bodies)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConvexHull.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>ConvexHull_8hpp.html</filename>
    <includes id="DistanceProxy_8hpp" name="DistanceProxy.hpp" local="no" imported="no">playrho/d2/DistanceProxy.hpp</includes>
    <includes id="d2_2Math_8hpp" name="Math.hpp" local="no" imported="no">playrho/d2/Math.hpp</includes>
    <class kind="class">playrho::d2::ConvexHull</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
  </compound>
  <compound kind="file">
    <name>JointConcept.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/detail/</path>
    <filename>JointConcept_8hpp.html</filename>
    <includes id="BodyID_8hpp" name="BodyID.hpp" local="no" imported="no">playrho/BodyID.hpp</includes>
    <includes id="Span_8hpp" name="Span.hpp" local="no" imported="no">playrho/Span.hpp</includes>
    <includes id="TypeInfo_8hpp" name="TypeInfo.hpp" local="no" imported="no">playrho/TypeInfo.hpp</includes>
    <includes id="Vector2_8hpp" name="Vector2.hpp" local="no" imported="no">playrho/Vector2.hpp</includes>
    <class kind="struct">playrho::d2::detail::JointConcept</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <namespace>playrho::d2::detail</namespace>
  </compound>
  <compound kind="file">
    <name>JointModel.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/detail/</path>
    <filename>JointModel_8hpp.html</filename>
    <includes id="JointConcept_8hpp" name="JointConcept.hpp" local="no" imported="no">playrho/d2/detail/JointConcept.hpp</includes>
    <class kind="struct">playrho::d2::detail::JointModel</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <namespace>playrho::d2::detail</namespace>
  </compound>
  <compound kind="file">
    <name>ShapeConcept.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/detail/</path>
    <filename>ShapeConcept_8hpp.html</filename>
    <includes id="Filter_8hpp" name="Filter.hpp" local="no" imported="no">playrho/Filter.hpp</includes>
    <includes id="NonNegative_8hpp" name="NonNegative.hpp" local="no" imported="no">playrho/NonNegative.hpp</includes>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">playrho/Settings.hpp</includes>
    <includes id="TypeInfo_8hpp" name="TypeInfo.hpp" local="no" imported="no">playrho/TypeInfo.hpp</includes>
    <includes id="Units_8hpp" name="Units.hpp" local="no" imported="no">playrho/Units.hpp</includes>
    <includes id="DistanceProxy_8hpp" name="DistanceProxy.hpp" local="no" imported="no">playrho/d2/DistanceProxy.hpp</includes>
    <includes id="MassData_8hpp" name="MassData.hpp" local="no" imported="no">playrho/d2/MassData.hpp</includes>
    <includes id="d2_2Math_8hpp" name="Math.hpp" local="no" imported="no">playrho/d2/Math.hpp</includes>
    <class kind="struct">playrho::d2::detail::ShapeConcept</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <namespace>playrho::d2::detail</namespace>
  </compound>
  <compound kind="file">
    <name>ShapeModel.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/detail/</path>
    <filename>ShapeModel_8hpp.html</filename>
    <includes id="ShapeConcept_8hpp" name="ShapeConcept.hpp" local="no" imported="no">playrho/d2/detail/ShapeConcept.hpp</includes>
    <class kind="struct">playrho::d2::detail::IsValidShapeType</class>
    <class kind="struct">playrho::d2::detail::IsValidShapeType&lt; T, std::void_t&lt; decltype(GetChildCount(std::declval&lt; T &gt;())), decltype(GetChild(std::declval&lt; T &gt;(), std::declval&lt; ChildCounter &gt;())), decltype(GetMassData(std::declval&lt; T &gt;())), decltype(GetVertexRadius(std::declval&lt; T &gt;(), std::declval&lt; ChildCounter &gt;())), decltype(GetDensity(std::declval&lt; T &gt;())), decltype(GetFriction(std::declval&lt; T &gt;())), decltype(GetRestitution(std::declval&lt; T &gt;())), decltype(std::declval&lt; T &gt;()==std::declval&lt; T &gt;()), decltype(std::declval&lt; DecayedTypeIfNotSame&lt; T, Shape &gt;&gt;()), decltype(std::is_constructible_v&lt; DecayedTypeIfNotSame&lt; T, Shape &gt;, T &gt;)&gt; &gt;</class>
    <class kind="struct">playrho::d2::detail::ShapeModel</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <namespace>playrho::d2::detail</namespace>
    <member kind="typedef">
      <type>decltype(Rotate(std::declval&lt; T &amp; &gt;(), std::declval&lt; Angle &gt;()))</type>
      <name>RotateReturnType</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>ac69c0f6a231372c71b1450233e3c19f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(Scale(std::declval&lt; T &amp; &gt;(), std::declval&lt; Vec2 &gt;()))</type>
      <name>ScaleReturnType</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>a930128f3824518b4949d79b17bdbfedf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(SetDensity(std::declval&lt; T &amp; &gt;(), std::declval&lt; NonNegative&lt; AreaDensity &gt; &gt;()))</type>
      <name>SetDensityReturnType</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>adf775b067a6a92cbc004c8099575d421</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(SetFilter(std::declval&lt; T &amp; &gt;(), std::declval&lt; Filter &gt;()))</type>
      <name>SetFilterReturnType</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>ad5f894cb72b909bb22b023b28a49ab62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(SetFriction(std::declval&lt; T &amp; &gt;(), std::declval&lt; Real &gt;()))</type>
      <name>SetFrictionReturnType</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>ad3b1703a4316deeb771ca4aa51786b4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(SetRestitution(std::declval&lt; T &amp; &gt;(), std::declval&lt; Real &gt;()))</type>
      <name>SetRestitutionReturnType</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>a87d54b57854b9796a6c377e2532b6b6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(SetSensor(std::declval&lt; T &amp; &gt;(), std::declval&lt; bool &gt;()))</type>
      <name>SetSensorReturnType</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>a497d8b12db027af729dbd6d06a2ad7c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(Translate(std::declval&lt; T &amp; &gt;(), std::declval&lt; Length2 &gt;()))</type>
      <name>TranslateReturnType</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>af16f4da2426a4615570ce10404350a1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>Rotate</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>adb80827350fb79ee9e770d46e035fad6</anchor>
      <arglist>(T &amp;, const UnitVec &amp;value) -&gt; std::enable_if_t&lt; IsValidShapeTypeV&lt; T &gt; &amp;&amp;!HasRotateV&lt; T &gt;, void &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>Scale</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>a16e9f2dee6601112685b1c64138790a4</anchor>
      <arglist>(T &amp;, const Vec2 &amp;value) -&gt; std::enable_if_t&lt; IsValidShapeTypeV&lt; T &gt; &amp;&amp;!HasScaleV&lt; T &gt;, void &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>SetDensity</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>a0fde38de41407f2cb4d94864b53f3a6f</anchor>
      <arglist>(T &amp;o, NonNegative&lt; AreaDensity &gt; value) -&gt; std::enable_if_t&lt; IsValidShapeTypeV&lt; T &gt; &amp;&amp;!HasSetDensityV&lt; T &gt;, void &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>SetFilter</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>a1e2fdda165c83d909e826ca3d8e350fa</anchor>
      <arglist>(T &amp;o, Filter value) -&gt; std::enable_if_t&lt; IsValidShapeTypeV&lt; T &gt; &amp;&amp;!HasSetFilterV&lt; T &gt;, void &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>SetFriction</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>a453ec591eac3f6a4c2468be943dd82f7</anchor>
      <arglist>(T &amp;o, NonNegative&lt; Real &gt; value) -&gt; std::enable_if_t&lt; IsValidShapeTypeV&lt; T &gt; &amp;&amp;!HasSetFrictionV&lt; T &gt;, void &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>SetRestitution</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>a9863b9d7c75dfb681e66b0b1733346c8</anchor>
      <arglist>(T &amp;o, Real value) -&gt; std::enable_if_t&lt; IsValidShapeTypeV&lt; T &gt; &amp;&amp;!HasSetRestitutionV&lt; T &gt;, void &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>SetSensor</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>ae257d5ce00315511f38471a1da468eee</anchor>
      <arglist>(T &amp;o, bool value) -&gt; std::enable_if_t&lt; IsValidShapeTypeV&lt; T &gt; &amp;&amp;!HasSetSensorV&lt; T &gt;, void &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>Translate</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>a0a50f2a135461ddf9ee6f56537f0d02f</anchor>
      <arglist>(T &amp;, const Length2 &amp;value) -&gt; std::enable_if_t&lt; IsValidShapeTypeV&lt; T &gt; &amp;&amp;!HasTranslateV&lt; T &gt;, void &gt;</arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>HasRotateV</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>a25bbe957cc15f8fd98a52dc3fda0395d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>HasScaleV</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>af809b7b33fa9ac0c0a983b07510a8db9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>HasSetDensityV</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>adb61b65e134bd2243330b2c55986c588</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>HasSetFilterV</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>a138f8181e4d5016acd8b5b5a3c0038fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>HasSetFrictionV</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>aa4fdba3a4ce28df4548f0e8e36b43b7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>HasSetRestitutionV</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>a2670f07bf95a7e2416cbb9cc177cde6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>HasSetSensorV</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>a587d6642d2dd21b03e3443199aec9616</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>HasTranslateV</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>aba3766778604fa1f8d6046261b32303a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>IsValidShapeTypeV</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>a292fde9a0fe65df5ef97448e1b293294</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WorldConcept.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/detail/</path>
    <filename>WorldConcept_8hpp.html</filename>
    <includes id="BodyID_8hpp" name="BodyID.hpp" local="no" imported="no">playrho/BodyID.hpp</includes>
    <includes id="BodyShapeFunction_8hpp" name="BodyShapeFunction.hpp" local="no" imported="no">playrho/BodyShapeFunction.hpp</includes>
    <includes id="Contact_8hpp" name="Contact.hpp" local="no" imported="no">playrho/Contact.hpp</includes>
    <includes id="ContactFunction_8hpp" name="ContactFunction.hpp" local="no" imported="no">playrho/ContactFunction.hpp</includes>
    <includes id="Interval_8hpp" name="Interval.hpp" local="no" imported="no">playrho/Interval.hpp</includes>
    <includes id="KeyedContactID_8hpp" name="KeyedContactID.hpp" local="no" imported="no">playrho/KeyedContactID.hpp</includes>
    <includes id="JointFunction_8hpp" name="JointFunction.hpp" local="no" imported="no">playrho/JointFunction.hpp</includes>
    <includes id="JointID_8hpp" name="JointID.hpp" local="no" imported="no">playrho/JointID.hpp</includes>
    <includes id="LimitState_8hpp" name="LimitState.hpp" local="no" imported="no">playrho/LimitState.hpp</includes>
    <includes id="ShapeFunction_8hpp" name="ShapeFunction.hpp" local="no" imported="no">playrho/ShapeFunction.hpp</includes>
    <includes id="ShapeID_8hpp" name="ShapeID.hpp" local="no" imported="no">playrho/ShapeID.hpp</includes>
    <includes id="StepConf_8hpp" name="StepConf.hpp" local="no" imported="no">playrho/StepConf.hpp</includes>
    <includes id="StepStats_8hpp" name="StepStats.hpp" local="no" imported="no">playrho/StepStats.hpp</includes>
    <includes id="TypeInfo_8hpp" name="TypeInfo.hpp" local="no" imported="no">playrho/TypeInfo.hpp</includes>
    <includes id="Units_8hpp" name="Units.hpp" local="no" imported="no">playrho/Units.hpp</includes>
    <includes id="Body_8hpp" name="Body.hpp" local="no" imported="no">playrho/d2/Body.hpp</includes>
    <includes id="ContactImpulsesFunction_8hpp" name="ContactImpulsesFunction.hpp" local="no" imported="no">playrho/d2/ContactImpulsesFunction.hpp</includes>
    <includes id="ContactManifoldFunction_8hpp" name="ContactManifoldFunction.hpp" local="no" imported="no">playrho/d2/ContactManifoldFunction.hpp</includes>
    <includes id="Joint_8hpp" name="Joint.hpp" local="no" imported="no">playrho/d2/Joint.hpp</includes>
    <includes id="Manifold_8hpp" name="Manifold.hpp" local="no" imported="no">playrho/d2/Manifold.hpp</includes>
    <includes id="MassData_8hpp" name="MassData.hpp" local="no" imported="no">playrho/d2/MassData.hpp</includes>
    <includes id="Shape_8hpp" name="Shape.hpp" local="no" imported="no">playrho/d2/Shape.hpp</includes>
    <class kind="struct">playrho::d2::detail::WorldConcept</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <namespace>playrho::d2::detail</namespace>
  </compound>
  <compound kind="file">
    <name>WorldModel.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/detail/</path>
    <filename>WorldModel_8hpp.html</filename>
    <includes id="WorldConcept_8hpp" name="WorldConcept.hpp" local="no" imported="no">playrho/d2/detail/WorldConcept.hpp</includes>
    <class kind="struct">playrho::d2::detail::WorldModel</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <namespace>playrho::d2::detail</namespace>
  </compound>
  <compound kind="file">
    <name>DiskShapeConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>DiskShapeConf_8hpp.html</filename>
    <includes id="TypeInfo_8hpp" name="TypeInfo.hpp" local="no" imported="no">playrho/TypeInfo.hpp</includes>
    <includes id="DistanceProxy_8hpp" name="DistanceProxy.hpp" local="no" imported="no">playrho/d2/DistanceProxy.hpp</includes>
    <includes id="MassData_8hpp" name="MassData.hpp" local="no" imported="no">playrho/d2/MassData.hpp</includes>
    <includes id="d2_2Math_8hpp" name="Math.hpp" local="no" imported="no">playrho/d2/Math.hpp</includes>
    <includes id="ShapeConf_8hpp" name="ShapeConf.hpp" local="no" imported="no">playrho/d2/ShapeConf.hpp</includes>
    <class kind="struct">playrho::d2::DiskShapeConf</class>
    <class kind="struct">playrho::detail::TypeInfo&lt; playrho::d2::DiskShapeConf &gt;</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>DistanceProxy</type>
      <name>GetChild</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab2edb0ada2177d0b9f078f49069f4810</anchor>
      <arglist>(const DiskShapeConf &amp;arg, ChildCounter index)</arglist>
    </member>
    <member kind="function">
      <type>constexpr ChildCounter</type>
      <name>GetChildCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acfcf513079d544b6e0e64dc79b6e3381</anchor>
      <arglist>(const DiskShapeConf &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1a3dff7ec484efe761eb24b7d1a13790</anchor>
      <arglist>(const DiskShapeConf &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>constexpr NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aea6cd8aa55bd2f15a1e04e6ac08f46fe</anchor>
      <arglist>(const DiskShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a94a41528ae369c2a77c31e7280b9cb22</anchor>
      <arglist>(const DiskShapeConf &amp;arg, ChildCounter) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae54dffb8788232936ee10689ab0296cd</anchor>
      <arglist>(const DiskShapeConf &amp;lhs, const DiskShapeConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a85d3074f854445b9ec458b0d6ba6aa80</anchor>
      <arglist>(const DiskShapeConf &amp;lhs, const DiskShapeConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Rotate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab55d49ec6abe0409adbd4845ec5f822a</anchor>
      <arglist>(DiskShapeConf &amp;arg, const UnitVec &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Scale</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab6e1a39dabfd7b259e0dadb20d2e7157</anchor>
      <arglist>(DiskShapeConf &amp;arg, const Vec2 &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6d0915a211ce1e854caedf3492270a43</anchor>
      <arglist>(DiskShapeConf &amp;arg, ChildCounter, NonNegative&lt; Length &gt; value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Translate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adb20d2f87c3b175ff5b6267d30a4b4d8</anchor>
      <arglist>(DiskShapeConf &amp;arg, const Length2 &amp;value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DistanceConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>DistanceConf_8hpp.html</filename>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">playrho/Settings.hpp</includes>
    <includes id="Simplex_8hpp" name="Simplex.hpp" local="no" imported="no">playrho/d2/Simplex.hpp</includes>
    <class kind="struct">playrho::d2::DistanceConf</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>DistanceConf</type>
      <name>GetDistanceConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a761066151582811dfe44b76a0bd29389</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DistanceConf</type>
      <name>GetDistanceConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a39c11c9e373870e29e2f5cf69f817b5e</anchor>
      <arglist>(const ToiConf &amp;conf) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DistanceJointConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>DistanceJointConf_8hpp.html</filename>
    <includes id="NonNegative_8hpp" name="NonNegative.hpp" local="no" imported="no">playrho/NonNegative.hpp</includes>
    <includes id="Span_8hpp" name="Span.hpp" local="no" imported="no">playrho/Span.hpp</includes>
    <includes id="TypeInfo_8hpp" name="TypeInfo.hpp" local="no" imported="no">playrho/TypeInfo.hpp</includes>
    <includes id="JointConf_8hpp" name="JointConf.hpp" local="no" imported="no">playrho/d2/JointConf.hpp</includes>
    <includes id="d2_2Math_8hpp" name="Math.hpp" local="no" imported="no">playrho/d2/Math.hpp</includes>
    <class kind="struct">playrho::d2::DistanceJointConf</class>
    <class kind="struct">playrho::detail::TypeInfo&lt; playrho::d2::DistanceJointConf &gt;</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>constexpr AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af7938377c565a183168613b640e651e8</anchor>
      <arglist>(const DistanceJointConf &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DistanceJointConf</type>
      <name>GetDistanceJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab375b99ce3245ea19955018f6d6a6532</anchor>
      <arglist>(const Joint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>DistanceJointConf</type>
      <name>GetDistanceJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a833296e5ec165dbed8c0b76064e75732</anchor>
      <arglist>(const World &amp;world, BodyID bodyA, BodyID bodyB, const Length2 &amp;anchorA=Length2{}, const Length2 &amp;anchorB=Length2{})</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLength</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9d8e5d2ecc10f965faa16f74ade58628</anchor>
      <arglist>(const DistanceJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a262919449fdc976d24c1b57d5f764610</anchor>
      <arglist>(const DistanceJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afdd19d3dd63a8ae8f391d9229f1bcb89</anchor>
      <arglist>(DistanceJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae758c3a2894c69fe0dc10e62d6b50c16</anchor>
      <arglist>(const DistanceJointConf &amp;lhs, const DistanceJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a35315499cf67026c7d8d7613477023cd</anchor>
      <arglist>(const DistanceJointConf &amp;lhs, const DistanceJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetDampingRatio</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1f9a4e32b7ca3e69527dca3e2793e1ba</anchor>
      <arglist>(DistanceJointConf &amp;object, Real value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetFrequency</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae0cc3578e6f724a74d45e9cfc02d412d</anchor>
      <arglist>(DistanceJointConf &amp;object, NonNegative&lt; Frequency &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetLength</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abf156111fddecc740c68f7dbcdaf7ba0</anchor>
      <arglist>(DistanceJointConf &amp;object, Length value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1086ac024e4e129259c3c1b4f7c5a6c4</anchor>
      <arglist>(DistanceJointConf &amp;, Length2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a46c211c4530a6a472eddfb02840dd87a</anchor>
      <arglist>(const DistanceJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0f2ad4417adb6c9f316a0debd1c7785a</anchor>
      <arglist>(DistanceJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DistanceProxy.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>DistanceProxy_8hpp.html</filename>
    <includes id="Span_8hpp" name="Span.hpp" local="no" imported="no">playrho/Span.hpp</includes>
    <includes id="d2_2Math_8hpp" name="Math.hpp" local="no" imported="no">playrho/d2/Math.hpp</includes>
    <class kind="class">playrho::d2::DistanceProxy</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>std::size_t</type>
      <name>FindLowestRightMostVertex</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac8845b24d9baa83d95859a1ec749fdff</anchor>
      <arglist>(Span&lt; const Length2 &gt; vertices) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Length2 &gt;</type>
      <name>GetConvexHullAsVector</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae1538594ce2f0d86da70bf832c0327bb</anchor>
      <arglist>(Span&lt; const Length2 &gt; vertices)</arglist>
    </member>
    <member kind="function">
      <type>VertexCounter</type>
      <name>GetSupportIndex</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6cfc27f1644f9c4d6da229b5eba07e51</anchor>
      <arglist>(const DistanceProxy &amp;proxy, T dir) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab855c314cdb69e2906ed3474f127f332</anchor>
      <arglist>(const DistanceProxy &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1c65d94d98dea8f68c3dd32e90b888bb</anchor>
      <arglist>(const DistanceProxy &amp;lhs, const DistanceProxy &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a00facc6af4e8bc7a365979d757be7315</anchor>
      <arglist>(const DistanceProxy &amp;lhs, const DistanceProxy &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestPoint</name>
      <anchorfile>group__TestPointGroup.html</anchorfile>
      <anchor>ga6307be53a55224b578a3122d40d6e0f1</anchor>
      <arglist>(const DistanceProxy &amp;proxy, const Length2 &amp;point) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DynamicTree.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>DynamicTree_8hpp.html</filename>
    <includes id="d2_2AABB_8hpp" name="AABB.hpp" local="no" imported="no">playrho/d2/AABB.hpp</includes>
    <includes id="DynamicTreeData_8hpp" name="DynamicTreeData.hpp" local="no" imported="no">playrho/d2/DynamicTreeData.hpp</includes>
    <includes id="ShapeID_8hpp" name="ShapeID.hpp" local="no" imported="no">playrho/ShapeID.hpp</includes>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">playrho/Settings.hpp</includes>
    <includes id="Vector2_8hpp" name="Vector2.hpp" local="no" imported="no">playrho/Vector2.hpp</includes>
    <includes id="BodyID_8hpp" name="BodyID.hpp" local="no" imported="no">playrho/BodyID.hpp</includes>
    <class kind="class">playrho::d2::DynamicTree</class>
    <class kind="class">playrho::d2::DynamicTree::TreeNode</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="typedef">
      <type>std::function&lt; DynamicTreeOpcode(DynamicTree::Size)&gt;</type>
      <name>DynamicTreeSizeCB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a50dec3f5f2b2d5add65db48633593967</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; bool(BodyID body, ShapeID shape, ChildCounter child)&gt;</type>
      <name>QueryShapeCallback</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a42e1647eb14290436bb570dd04d02215</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DynamicTreeOpcode</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a04c475376564975c7ff4c357e88bdf16</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceplayrho_1_1d2.html" anchor="a04c475376564975c7ff4c357e88bdf16a87557f11575c0ad78e4e28abedc13b6e">End</enumvalue>
      <enumvalue file="namespaceplayrho_1_1d2.html" anchor="a04c475376564975c7ff4c357e88bdf16aa0bfb8e59e6c13fc8d990781f77694fe">Continue</enumvalue>
    </member>
    <member kind="function">
      <type>DynamicTree::Height</type>
      <name>ComputeHeight</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9130244ba8964592f654cf473e4979ed</anchor>
      <arglist>(const DynamicTree &amp;tree) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DynamicTree::Height</type>
      <name>ComputeHeight</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af0e796616b3e92f4b7b34ffdc73e4942</anchor>
      <arglist>(const DynamicTree &amp;tree, DynamicTree::Size index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>ComputePerimeterRatio</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7daf9650f36f8d172678d1398034a516</anchor>
      <arglist>(const DynamicTree &amp;tree) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>ComputeTotalPerimeter</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aaab37fd533a1ec17e12c6798e42a21b3</anchor>
      <arglist>(const DynamicTree &amp;tree) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>GetAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adebb4dfdc038631f8b24ee19a0b29713</anchor>
      <arglist>(const DynamicTree &amp;tree) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB</type>
      <name>GetAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab6f093bc8ffe077f0d5895bfc5b672a7</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DynamicTree::Height</type>
      <name>GetHeight</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a72265a3c2d4511e74df6ab4d13112f6d</anchor>
      <arglist>(const DynamicTree &amp;tree) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DynamicTree::Height</type>
      <name>GetMaxImbalance</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab2389e08997d0d0e0ba03697eec17936</anchor>
      <arglist>(const DynamicTree &amp;tree) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr DynamicTree::Size</type>
      <name>GetNext</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acd3a93c79eb73866acfe12518491c2cd</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsBranch</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7d5284fb35640d9a05b6b5346933c82a</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsLeaf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aae0b95c4e9a195b7c6c5d64c8664ab35</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsUnused</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3ad7a716e1b2bc2677ebf9ec441401f4</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Query</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a52ca8acb99e3c3591d13ca912282470e</anchor>
      <arglist>(const DynamicTree &amp;tree, const AABB &amp;aabb, const DynamicTreeSizeCB &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Query</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac6aa2ced68dfade6cf384f097fe8f55b</anchor>
      <arglist>(const DynamicTree &amp;tree, const AABB &amp;aabb, QueryShapeCallback callback)</arglist>
    </member>
    <member kind="function">
      <type>constexpr DynamicTreeBranchData</type>
      <name>ReplaceChild</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0d01bb024654763423607eb506ec1575</anchor>
      <arglist>(DynamicTreeBranchData bd, DynamicTree::Size oldChild, DynamicTree::Size newChild)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0f207924edd9511c1d56c03933928fa8</anchor>
      <arglist>(const DynamicTree &amp;tree) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestOverlap</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a905424c61ac9933179b91eb12ac0d537</anchor>
      <arglist>(const DynamicTree &amp;tree, DynamicTree::Size leafIdA, DynamicTree::Size leafIdB) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ValidateMetrics</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a22c9cd17bd9080414ab77b1d3e433dca</anchor>
      <arglist>(const DynamicTree &amp;tree, DynamicTree::Size index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ValidateStructure</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ababba0a1b926e9aa793afe44044f204b</anchor>
      <arglist>(const DynamicTree &amp;tree, DynamicTree::Size index) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DynamicTreeData.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>DynamicTreeData_8hpp.html</filename>
    <includes id="Contactable_8hpp" name="Contactable.hpp" local="no" imported="no">playrho/Contactable.hpp</includes>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">playrho/Settings.hpp</includes>
    <class kind="struct">playrho::DynamicTreeBranchData</class>
    <class kind="struct">playrho::DynamicTreeUnusedData</class>
    <class kind="union">playrho::DynamicTreeVariantData</class>
    <namespace>playrho</namespace>
  </compound>
  <compound kind="file">
    <name>EdgeShapeConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>EdgeShapeConf_8hpp.html</filename>
    <includes id="InvalidArgument_8hpp" name="InvalidArgument.hpp" local="no" imported="no">playrho/InvalidArgument.hpp</includes>
    <includes id="NonNegative_8hpp" name="NonNegative.hpp" local="no" imported="no">playrho/NonNegative.hpp</includes>
    <includes id="Real_8hpp" name="Real.hpp" local="no" imported="no">playrho/Real.hpp</includes>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">playrho/Settings.hpp</includes>
    <includes id="Units_8hpp" name="Units.hpp" local="no" imported="no">playrho/Units.hpp</includes>
    <includes id="Vector2_8hpp" name="Vector2.hpp" local="no" imported="no">playrho/Vector2.hpp</includes>
    <includes id="detail_2Templates_8hpp" name="Templates.hpp" local="no" imported="no">playrho/detail/Templates.hpp</includes>
    <includes id="detail_2TypeInfo_8hpp" name="TypeInfo.hpp" local="no" imported="no">playrho/detail/TypeInfo.hpp</includes>
    <includes id="DistanceProxy_8hpp" name="DistanceProxy.hpp" local="no" imported="no">playrho/d2/DistanceProxy.hpp</includes>
    <includes id="MassData_8hpp" name="MassData.hpp" local="no" imported="no">playrho/d2/MassData.hpp</includes>
    <includes id="NgonWithFwdNormals_8hpp" name="NgonWithFwdNormals.hpp" local="no" imported="no">playrho/d2/NgonWithFwdNormals.hpp</includes>
    <includes id="ShapeConf_8hpp" name="ShapeConf.hpp" local="no" imported="no">playrho/d2/ShapeConf.hpp</includes>
    <includes id="UnitVec_8hpp" name="UnitVec.hpp" local="no" imported="no">playrho/d2/UnitVec.hpp</includes>
    <class kind="struct">playrho::d2::EdgeShapeConf</class>
    <class kind="struct">playrho::detail::TypeInfo&lt; playrho::d2::EdgeShapeConf &gt;</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>DistanceProxy</type>
      <name>GetChild</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a65056ce7e0d413a4beeb818ad0ab9f4b</anchor>
      <arglist>(const EdgeShapeConf &amp;arg, ChildCounter index)</arglist>
    </member>
    <member kind="function">
      <type>constexpr ChildCounter</type>
      <name>GetChildCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5821b2f4d9cef13bc998b92a02687663</anchor>
      <arglist>(const EdgeShapeConf &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1ed2ce9d811c5f30fe273af513dcfb99</anchor>
      <arglist>(const EdgeShapeConf &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a179e4a68b183074106cc54a88b46a68f</anchor>
      <arglist>(const EdgeShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a04c3bbe42dd7c5fd9e5c758ed67ddab2</anchor>
      <arglist>(const EdgeShapeConf &amp;arg, ChildCounter) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6db183fd84981136da63e62d3a767d9c</anchor>
      <arglist>(const EdgeShapeConf &amp;lhs, const EdgeShapeConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af86100a70f9250d51c3c76a103edb8e4</anchor>
      <arglist>(const EdgeShapeConf &amp;lhs, const EdgeShapeConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Rotate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a97a691c0265c0aced8cbc9c2082bc4f8</anchor>
      <arglist>(EdgeShapeConf &amp;arg, const UnitVec &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Scale</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab0f760b347a80523244f147a3b484f33</anchor>
      <arglist>(EdgeShapeConf &amp;arg, const Vec2 &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae5a9c3b8927fc259f587ebb97b038f87</anchor>
      <arglist>(EdgeShapeConf &amp;arg, ChildCounter, NonNegative&lt; Length &gt; value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aeea9cafe29765dde4bc7e6510dfc79ac</anchor>
      <arglist>(EdgeShapeConf &amp;arg, NonNegative&lt; Length &gt; value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Translate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6bc49b3c1070721b695448e85bb8de52</anchor>
      <arglist>(EdgeShapeConf &amp;arg, const Length2 &amp;value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FrictionJointConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>FrictionJointConf_8hpp.html</filename>
    <includes id="NonNegative_8hpp" name="NonNegative.hpp" local="no" imported="no">playrho/NonNegative.hpp</includes>
    <includes id="Span_8hpp" name="Span.hpp" local="no" imported="no">playrho/Span.hpp</includes>
    <includes id="TypeInfo_8hpp" name="TypeInfo.hpp" local="no" imported="no">playrho/TypeInfo.hpp</includes>
    <includes id="JointConf_8hpp" name="JointConf.hpp" local="no" imported="no">playrho/d2/JointConf.hpp</includes>
    <includes id="d2_2Math_8hpp" name="Math.hpp" local="no" imported="no">playrho/d2/Math.hpp</includes>
    <class kind="struct">playrho::d2::FrictionJointConf</class>
    <class kind="struct">playrho::detail::TypeInfo&lt; playrho::d2::FrictionJointConf &gt;</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>constexpr AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ade895bb6a4e1b45bc803784534f2ffb2</anchor>
      <arglist>(const FrictionJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>FrictionJointConf</type>
      <name>GetFrictionJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adb48ff4223599c7af13fe487370e9933</anchor>
      <arglist>(const Joint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>FrictionJointConf</type>
      <name>GetFrictionJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae208174e24b40f42ba8c5926dd2598a5</anchor>
      <arglist>(const World &amp;world, BodyID bodyA, BodyID bodyB, const Length2 &amp;anchor)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a91ac3d07e13f9277632001e8f02de54f</anchor>
      <arglist>(const FrictionJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetMaxForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aba8162d50c28927d87bdf7e29aa8afe0</anchor>
      <arglist>(const FrictionJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetMaxTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a00b4cc40afea7be207a08ad7c018f3c1</anchor>
      <arglist>(const FrictionJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad1b04b7a4e640bfbdaffe5612a3dc3fe</anchor>
      <arglist>(FrictionJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a45ea8b96cd57e4d21f2191d6a832f814</anchor>
      <arglist>(const FrictionJointConf &amp;lhs, const FrictionJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a194fd21d14647aedddc772f5871295ae</anchor>
      <arglist>(const FrictionJointConf &amp;lhs, const FrictionJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetMaxForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afa6324a364b2b89057a749a5032ff720</anchor>
      <arglist>(FrictionJointConf &amp;object, NonNegative&lt; Force &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetMaxTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acfc7a47e907d3aaf399a7919896f3571</anchor>
      <arglist>(FrictionJointConf &amp;object, NonNegative&lt; Torque &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a110d0d6a089b3b8883e1f319984774fb</anchor>
      <arglist>(FrictionJointConf &amp;, Length2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a810edf8bc34e06730ecfb35ec58d1eb7</anchor>
      <arglist>(const FrictionJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa4c803913d2f6a3ee31e06060f65883f</anchor>
      <arglist>(FrictionJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GearJointConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>GearJointConf_8hpp.html</filename>
    <includes id="JointID_8hpp" name="JointID.hpp" local="no" imported="no">playrho/JointID.hpp</includes>
    <includes id="Span_8hpp" name="Span.hpp" local="no" imported="no">playrho/Span.hpp</includes>
    <includes id="TypeInfo_8hpp" name="TypeInfo.hpp" local="no" imported="no">playrho/TypeInfo.hpp</includes>
    <includes id="JointConf_8hpp" name="JointConf.hpp" local="no" imported="no">playrho/d2/JointConf.hpp</includes>
    <includes id="d2_2Math_8hpp" name="Math.hpp" local="no" imported="no">playrho/d2/Math.hpp</includes>
    <class kind="struct">playrho::d2::GearJointConf</class>
    <class kind="struct">playrho::d2::GearJointConf::PrismaticData</class>
    <class kind="struct">playrho::d2::GearJointConf::RevoluteData</class>
    <class kind="struct">playrho::detail::TypeInfo&lt; playrho::d2::GearJointConf &gt;</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>constexpr AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af2ce467ab8d8f56bd0cf232fd554e58b</anchor>
      <arglist>(const GearJointConf &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetConstant</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac71c6757a2460462d539185069dd9c4c</anchor>
      <arglist>(const GearJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>GearJointConf</type>
      <name>GetGearJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a36b5ef1495440a134a304321d2e85e3d</anchor>
      <arglist>(const Joint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>GearJointConf</type>
      <name>GetGearJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae1ef79a7cfe5d55553679336eb54990b</anchor>
      <arglist>(const World &amp;world, JointID id1, JointID id2, Real ratio=Real{1})</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aef9ee799e4e668610deb9199d0848153</anchor>
      <arglist>(const GearJointConf &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalAnchorA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad53a1e79d6e949a948293990837ba83f</anchor>
      <arglist>(const GearJointConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalAnchorB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a27a8b26e2499ae4abb787373114ecd43</anchor>
      <arglist>(const GearJointConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetRatio</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad6bb4ee45a731f7095f5c052f16e15c0</anchor>
      <arglist>(const GearJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TypeID</type>
      <name>GetTypeAC</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8a2849276bed6c543c9bf97fb64b1e8e</anchor>
      <arglist>(const GearJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TypeID</type>
      <name>GetTypeBD</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a143f9f615a7da516c00f7767717d6bb6</anchor>
      <arglist>(const GearJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5df864a583d38b96f8a13c9015f64e8e</anchor>
      <arglist>(GearJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae908913a1c7e55a8431fa73b79c03ff5</anchor>
      <arglist>(const GearJointConf &amp;lhs, const GearJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8ad81220811f446279361ecc24a27be8</anchor>
      <arglist>(const GearJointConf::PrismaticData &amp;lhs, const GearJointConf::PrismaticData &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a24b0f175ed2d20f9b7282990b2f30333</anchor>
      <arglist>(const GearJointConf::RevoluteData &amp;lhs, const GearJointConf::RevoluteData &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abf8d004c9a5fca4f9d757e31164db5f0</anchor>
      <arglist>(const GearJointConf &amp;lhs, const GearJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa482162774c71ee7192c4844799def17</anchor>
      <arglist>(const GearJointConf::PrismaticData &amp;lhs, const GearJointConf::PrismaticData &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab7f36c40b8f0777a2f745dc5078300d3</anchor>
      <arglist>(const GearJointConf::RevoluteData &amp;lhs, const GearJointConf::RevoluteData &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetRatio</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0561c70cfa90284d65bba0a3f59cb62a</anchor>
      <arglist>(GearJointConf &amp;object, Real value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aef5af6f1b7a6ac1842df096a201e17d4</anchor>
      <arglist>(GearJointConf &amp;, const Length2 &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af7494f501244609b3b9e0deeee80e28d</anchor>
      <arglist>(const GearJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a06642a41105d91e429c8a6c52311713c</anchor>
      <arglist>(GearJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Joint.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>Joint_8hpp.html</filename>
    <includes id="BodyID_8hpp" name="BodyID.hpp" local="no" imported="no">playrho/BodyID.hpp</includes>
    <includes id="LimitState_8hpp" name="LimitState.hpp" local="no" imported="no">playrho/LimitState.hpp</includes>
    <includes id="Real_8hpp" name="Real.hpp" local="no" imported="no">playrho/Real.hpp</includes>
    <includes id="Span_8hpp" name="Span.hpp" local="no" imported="no">playrho/Span.hpp</includes>
    <includes id="Templates_8hpp" name="Templates.hpp" local="no" imported="no">playrho/Templates.hpp</includes>
    <includes id="TypeInfo_8hpp" name="TypeInfo.hpp" local="no" imported="no">playrho/TypeInfo.hpp</includes>
    <includes id="Units_8hpp" name="Units.hpp" local="no" imported="no">playrho/Units.hpp</includes>
    <includes id="Vector2_8hpp" name="Vector2.hpp" local="no" imported="no">playrho/Vector2.hpp</includes>
    <includes id="UnitVec_8hpp" name="UnitVec.hpp" local="no" imported="no">playrho/d2/UnitVec.hpp</includes>
    <includes id="JointConcept_8hpp" name="JointConcept.hpp" local="no" imported="no">playrho/d2/detail/JointConcept.hpp</includes>
    <includes id="JointModel_8hpp" name="JointModel.hpp" local="no" imported="no">playrho/d2/detail/JointModel.hpp</includes>
    <class kind="struct">playrho::d2::detail::IsValidJointType</class>
    <class kind="struct">playrho::d2::detail::IsValidJointType&lt; T, std::void_t&lt; decltype(GetBodyA(std::declval&lt; T &gt;())), decltype(GetBodyB(std::declval&lt; T &gt;())), decltype(GetCollideConnected(std::declval&lt; T &gt;())), decltype(ShiftOrigin(std::declval&lt; T &amp; &gt;(), std::declval&lt; Length2 &gt;())), decltype(InitVelocity(std::declval&lt; T &amp; &gt;(), std::declval&lt; const Span&lt; BodyConstraint &gt; &amp; &gt;(), std::declval&lt; StepConf &gt;(), std::declval&lt; ConstraintSolverConf &gt;())), decltype(SolveVelocity(std::declval&lt; T &amp; &gt;(), std::declval&lt; const Span&lt; BodyConstraint &gt; &amp; &gt;(), std::declval&lt; StepConf &gt;())), decltype(SolvePosition(std::declval&lt; T &gt;(), std::declval&lt; const Span&lt; BodyConstraint &gt; &amp; &gt;(), std::declval&lt; ConstraintSolverConf &gt;())), decltype(std::declval&lt; T &gt;()==std::declval&lt; T &gt;()), decltype(Joint{std::declval&lt; T &gt;()})&gt; &gt;</class>
    <class kind="class">playrho::d2::Joint</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <namespace>playrho::d2::detail</namespace>
    <member kind="function">
      <type>BodyConstraint &amp;</type>
      <name>At</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af6a301104182688b53bfdfb4c9df309f</anchor>
      <arglist>(const Span&lt; BodyConstraint &gt; &amp;container, BodyID key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnableLimit</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae6d08550931a4a4ef3f009ca9419ea76</anchor>
      <arglist>(Joint &amp;object, bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnableMotor</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adcfe849a5fc2d93b1d7dec254daef3ad</anchor>
      <arglist>(Joint &amp;object, bool value)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngularLowerLimit</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3f73c71e61f2b25d3c44d6b2ef16de63</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>RotInertia</type>
      <name>GetAngularMass</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac7901ff48ce34588757a8afdbed661dc</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>AngularMomentum</type>
      <name>GetAngularMotorImpulse</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afc80a8adf52d40020d359f515a9bb75b</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngularOffset</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a20ffca8f4b379016205db895aa714f6e</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3a1ba7e61266e608fc3b5cf4eff142be</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngularUpperLimit</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7006c4b738236b79502497c69d11ae70</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>GetBodyA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a700fc1baf4e0165912da41dae27dfc78</anchor>
      <arglist>(const Joint &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>GetBodyB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a37729f6494a066607deb10ea5a57c449</anchor>
      <arglist>(const Joint &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetCollideConnected</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad982ed0433982ac18703569f42f4037c</anchor>
      <arglist>(const Joint &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetDampingRatio</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6169172fbdb742ca0e37dd36271756fc</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Frequency</type>
      <name>GetFrequency</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a339442beaa60f275f89aa1eba7034afd</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetGroundAnchorA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8abe578d751e8b6a47fc6420f5e54d88</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetGroundAnchorB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a287bd75941373137dcdb235ec42250c5</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetLength</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6064a1e393886b961056b48031b81c13</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>LimitState</type>
      <name>GetLimitState</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab848993fd700dcb158d52f66e51cdf5f</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetLinearLowerLimit</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6f3aa5cd9a7405fbb0f6649d25be37d7</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Momentum</type>
      <name>GetLinearMotorImpulse</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3bf45989df5425c62d0dde5b5aad0874</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLinearOffset</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa4f8817e88c579e5c6cc61d25a501201</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afb5492868f81a0c2e0a104139d0c22e2</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetLinearUpperLimit</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae61f0e65d81b6ee4b71442eaba01e557</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalAnchorA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a347b0e5fce1dfb74e71e3f0d57144ac1</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalAnchorB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0fd920a1103fb1a35d48f199dbb0c5c3</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetLocalXAxisA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9ef8b96db20a6be16038d614fa71cc8d</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetLocalYAxisA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a94b7da0e22d5fa2780f91d64bc54f24d</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Force</type>
      <name>GetMaxForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a27b1c23ab0395c2910137ed55e9e3c9a</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Force</type>
      <name>GetMaxMotorForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae22198b24d05e7e01620376e409ba207</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Torque</type>
      <name>GetMaxMotorTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abf153df98daca101d74e4ee0d4999b65</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Torque</type>
      <name>GetMaxTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a854ade782141a1e4839aabf82962b793</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetMotorSpeed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afcaf52b432d8610fe7c8059c9f6237a6</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Torque</type>
      <name>GetMotorTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5771e47bcd401f72f04f8c24c482270b</anchor>
      <arglist>(const Joint &amp;joint, Frequency inv_dt)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetRatio</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7533e4cb7ceff376ce89ff41eea97265</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetReferenceAngle</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a398794c59f86e6203d67c504e576808e</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetTarget</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a44e13140e7670e778d7a18229aabcadf</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>TypeID</type>
      <name>GetType</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a14ed64f17ea64f51257b1adca6e385a7</anchor>
      <arglist>(const Joint &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abdb7b4eba61112b4be50f70532793303</anchor>
      <arglist>(Joint &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLimitEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac76a4085860445c97e2f43f36cf11d3e</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMotorEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a18da863a4c6a0440fd8a634268dc8c8a</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a195b40b377eb99929c3033c990c43d00</anchor>
      <arglist>(const Joint &amp;lhs, const Joint &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa22000a029fd294dace37815f6141a83</anchor>
      <arglist>(const Joint &amp;lhs, const Joint &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngularLimits</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad34b889b15ded07a92afbe8791d4db88</anchor>
      <arglist>(Joint &amp;object, Angle lower, Angle upper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngularOffset</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac5846586fb9cfc8bd797bb53df9834dc</anchor>
      <arglist>(Joint &amp;object, Angle value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFrequency</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a368baf65b3d36a4b2a7f29299b0d6982</anchor>
      <arglist>(Joint &amp;object, Frequency value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLinearLimits</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1ad9f455de397189e1747350e4796bfe</anchor>
      <arglist>(Joint &amp;object, Length lower, Length upper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLinearOffset</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a61dc8df8fff81c55b461bcb2b7fd4c15</anchor>
      <arglist>(Joint &amp;object, const Length2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMaxMotorForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8dbcfd41105f2beefde7afc17ca5ab17</anchor>
      <arglist>(Joint &amp;object, Force value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMaxMotorTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8a8d8821c7f1a5c1f675e0491db02af3</anchor>
      <arglist>(Joint &amp;object, Torque value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMotorSpeed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8e04b8a0612ba4699c19ce24e6c88ba1</anchor>
      <arglist>(Joint &amp;object, AngularVelocity value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTarget</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a76c03d6b21297cb6e1249df1624bfe93</anchor>
      <arglist>(Joint &amp;object, const Length2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7c9990d4de6d53c687778acaf5504f37</anchor>
      <arglist>(Joint &amp;object, const Length2 &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adc5da0c25548d4f2090b44a16ca55dee</anchor>
      <arglist>(const Joint &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aaf4bab6b065375066bdef90be8384af0</anchor>
      <arglist>(Joint &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>TypeCast</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af04a40472f1b7576171f3132305ce7a2</anchor>
      <arglist>(const Joint &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>std::add_pointer_t&lt; std::add_const_t&lt; T &gt; &gt;</type>
      <name>TypeCast</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a697bc4e18553f5207dd96db40817a664</anchor>
      <arglist>(const Joint *value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>TypeCast</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3a5b4ab06d5e078ef5aa2e67b56c5dcc</anchor>
      <arglist>(Joint &amp;&amp;value)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>TypeCast</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac91cb4dc6cbce2a3d54364794b1f1887</anchor>
      <arglist>(Joint &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>std::add_pointer_t&lt; T &gt;</type>
      <name>TypeCast</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa592a3a7994d2f355a6d2a2235f24c60</anchor>
      <arglist>(Joint *value) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>IsValidJointTypeV</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa4fa3329c284acdaec3757e7b96f25ed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>JointConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>JointConf_8hpp.html</filename>
    <includes id="BodyID_8hpp" name="BodyID.hpp" local="no" imported="no">playrho/BodyID.hpp</includes>
    <includes id="Units_8hpp" name="Units.hpp" local="no" imported="no">playrho/Units.hpp</includes>
    <class kind="struct">playrho::d2::JointBuilder</class>
    <class kind="struct">playrho::d2::JointConf</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>constexpr auto</type>
      <name>EnableLimit</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa3863e6b3d94dcc69b7265dbd20ac074</anchor>
      <arglist>(T &amp;conf, bool v) noexcept -&gt; decltype(std::declval&lt; T &gt;().UseEnableLimit(bool{}))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>EnableMotor</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7d2bb2408814597cad0ada96cb799b01</anchor>
      <arglist>(T &amp;conf, bool v) noexcept -&gt; decltype(std::declval&lt; T &gt;().UseEnableMotor(bool{}))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetAngularMass</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac10aff235975c8e469ef2f569d1cf8d3</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().angularMass)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetAngularMotorImpulse</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1be2a175968f4f26710ae25ac786e41e</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().angularMotorImpulse)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetAngularOffset</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a12f6b8a80dfe9b80745b16612801b4bd</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().angularOffset)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetAngularReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a351709375948378e06b028ba49b19c1e</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().angularImpulse)</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyID</type>
      <name>GetBodyA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3e3bb4a7dc061ae0e86c29e287b9dd3b</anchor>
      <arglist>(const JointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyID</type>
      <name>GetBodyB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad93f572c35fb47bafd90668d4be3a9fd</anchor>
      <arglist>(const JointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>GetCollideConnected</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae4acb95cd2fdc94eb04c04ed03a6dd77</anchor>
      <arglist>(const JointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetDampingRatio</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad67a47fda75f3da5fa0a2a5c0c4357e9</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().dampingRatio)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetFrequency</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5f80b9a578caed67f0fe63fc0001cb60</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().frequency)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetGroundAnchorA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa40326009ae501f30b26103fefa6c3f7</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().groundAnchorA)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetGroundAnchorB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a178863a997aeef26e3a1d2f66f31fa60</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().groundAnchorB)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLength</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa318f56579b7038e0e194545dffb5257</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().length)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLimitState</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3d2a1ce1f457886cc0b8d2e2ee85860c</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().limitState)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLinearMotorImpulse</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7927fe2d7e321e8824cc5d541ad984c2</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().motorImpulse)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLinearOffset</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae6d33c1f65f4909dd4b0dabe1550d8ce</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().linearOffset)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLinearReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa94b2d64f846a51cf42d1cd426039e7c</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().linearImpulse)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLocalAnchorA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a866f13c49c824e4bad68f5c53f0c6bb7</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().localAnchorA)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLocalAnchorB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a54a673f7a1db17e977ab57a355cebab5</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().localAnchorB)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLocalXAxisA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2f428192ffefe712d096f535c4c4e825</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().localXAxisA)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLocalYAxisA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a09041a146b572b6200045fa80dd3cd57</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().localYAxisA)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetMaxForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a421363e986b87aeb7108fd0b5bca86da</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().maxForce)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetMaxMotorForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad4c6c5934b5a650803d3c9e96f689876</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().maxMotorForce)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetMaxMotorTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a58caf5daa56d1399dfc2006db67dda03</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().maxMotorTorque)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetMaxTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7e8e865660723c1618ff7ff57bf41a2c</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().maxTorque)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetMotorSpeed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad0b16ddfe432a028cfad31b11cf01e2c</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().motorSpeed)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetRatio</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a853b627c976acbbe4655600c3701df5d</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().ratio)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetReferenceAngle</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a433bb57f8a2f5ff4048d2c768e3b1bda</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().referenceAngle)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>IsLimitEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7a5f74579fa335b23d637780808b59c2</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().enableLimit)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>IsMotorEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8552180d0e15cf5c5c6046faf683035e</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().enableMotor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9f3ae0c3965083b637c95a58b20bb340</anchor>
      <arglist>(JointConf &amp;def, const Joint &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetMotorSpeed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a191b26d3b6bdd1d6419350d33c9d77b0</anchor>
      <arglist>(T &amp;conf, AngularVelocity v) noexcept -&gt; decltype(std::declval&lt; T &gt;().UseMotorSpeed(AngularVelocity{}))</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Manifold.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>Manifold_8hpp.html</filename>
    <includes id="ContactFeature_8hpp" name="ContactFeature.hpp" local="no" imported="no">playrho/ContactFeature.hpp</includes>
    <includes id="d2_2Math_8hpp" name="Math.hpp" local="no" imported="no">playrho/d2/Math.hpp</includes>
    <class kind="struct">playrho::d2::Manifold::Conf</class>
    <class kind="class">playrho::d2::Manifold</class>
    <class kind="struct">playrho::d2::Manifold::Point</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>Manifold</type>
      <name>CollideShapes</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9fc228e00bb7a378f64d9382226e5900</anchor>
      <arglist>(const DistanceProxy &amp;shapeA, const Transformation &amp;xfA, const DistanceProxy &amp;shapeB, const Transformation &amp;xfB, const Manifold::Conf &amp;conf=GetDefaultManifoldConf())</arglist>
    </member>
    <member kind="function">
      <type>constexpr Manifold::Conf</type>
      <name>GetDefaultManifoldConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acaf37db0f0fc4d474c6a447b1032d73f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>Manifold</type>
      <name>GetManifold</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac457cb117f43c867a553087e91608ce7</anchor>
      <arglist>(bool flipped, const DistanceProxy &amp;shape0, const Transformation &amp;xf0, VertexCounter idx0, const DistanceProxy &amp;shape1, const Transformation &amp;xf1, VertexCounter2 indices1, const Manifold::Conf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>Manifold</type>
      <name>GetManifold</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac8fe6ad97a28e83fe2e667e03865bc6e</anchor>
      <arglist>(bool flipped, Length totalRadius, const DistanceProxy &amp;shape, const Transformation &amp;sxf, const Length2 &amp;point, const Transformation &amp;xfm)</arglist>
    </member>
    <member kind="function">
      <type>Manifold</type>
      <name>GetManifold</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af9c6bf3946b74280a56587fb4859a624</anchor>
      <arglist>(const Length2 &amp;locationA, const Transformation &amp;xfA, const Length2 &amp;locationB, const Transformation &amp;xfB, Length totalRadius) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Manifold::Conf</type>
      <name>GetManifoldConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a095c59023434207efeda09c32649d24b</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetName</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afe0be704277b108db26e28108c610174</anchor>
      <arglist>(Manifold::Type type) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab903c93dd80fcff6148a66dbc7c89687</anchor>
      <arglist>(const d2::Manifold &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5f506fbf9ce307b2322e83b0b547f599</anchor>
      <arglist>(const Manifold &amp;lhs, const Manifold &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a32ec204c7b30df76f2c52667740c6b87</anchor>
      <arglist>(const Manifold::Point &amp;lhs, const Manifold::Point &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6fc49d51f874cf1b745f4c2a9ccb8a38</anchor>
      <arglist>(const Manifold &amp;lhs, const Manifold &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a42b73256bfc88f351e0c3a9490aeb1ab</anchor>
      <arglist>(const Manifold::Point &amp;lhs, const Manifold::Point &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MassData.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>MassData_8hpp.html</filename>
    <includes id="NonNegative_8hpp" name="NonNegative.hpp" local="no" imported="no">playrho/NonNegative.hpp</includes>
    <includes id="Span_8hpp" name="Span.hpp" local="no" imported="no">playrho/Span.hpp</includes>
    <includes id="Units_8hpp" name="Units.hpp" local="no" imported="no">playrho/Units.hpp</includes>
    <includes id="Vector_8hpp" name="Vector.hpp" local="no" imported="no">playrho/Vector.hpp</includes>
    <includes id="Vector2_8hpp" name="Vector2.hpp" local="no" imported="no">playrho/Vector2.hpp</includes>
    <class kind="struct">playrho::detail::MassData</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <namespace>playrho::detail</namespace>
    <member kind="typedef">
      <type>::playrho::detail::MassData&lt; 2 &gt;</type>
      <name>MassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1afff43f96a91b8c26b8f0de7b9a71da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad7dc3397566d3b0447d318e67761bbc2</anchor>
      <arglist>(Length r, NonNegative&lt; AreaDensity &gt; density, const Length2 &amp;location)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a32e1a0772998ac59c02ff4b1a7981343</anchor>
      <arglist>(Length r, NonNegative&lt; AreaDensity &gt; density, const Length2 &amp;v0, const Length2 &amp;v1)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7304da106cfaa394b4d0179ded468aa6</anchor>
      <arglist>(Length vertexRadius, NonNegative&lt; AreaDensity &gt; density, Span&lt; const Length2 &gt; vertices)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a64050b6fc27058d98f7e504d4a3eacab</anchor>
      <arglist>(MassData&lt; N &gt; lhs, MassData&lt; N &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>af4a0970bf5a0f7b37eeb21d6301a75e2</anchor>
      <arglist>(MassData&lt; N &gt; lhs, MassData&lt; N &gt; rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Math.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>d2_2Math_8hpp.html</filename>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">playrho/Math.hpp</includes>
    <includes id="Matrix_8hpp" name="Matrix.hpp" local="no" imported="no">playrho/Matrix.hpp</includes>
    <includes id="Real_8hpp" name="Real.hpp" local="no" imported="no">playrho/Real.hpp</includes>
    <includes id="UnitInterval_8hpp" name="UnitInterval.hpp" local="no" imported="no">playrho/UnitInterval.hpp</includes>
    <includes id="Units_8hpp" name="Units.hpp" local="no" imported="no">playrho/Units.hpp</includes>
    <includes id="Vector2_8hpp" name="Vector2.hpp" local="no" imported="no">playrho/Vector2.hpp</includes>
    <includes id="Checked_8hpp" name="Checked.hpp" local="no" imported="no">playrho/detail/Checked.hpp</includes>
    <includes id="UnitVec_8hpp" name="UnitVec.hpp" local="no" imported="no">playrho/d2/UnitVec.hpp</includes>
    <includes id="Position_8hpp" name="Position.hpp" local="no" imported="no">playrho/d2/Position.hpp</includes>
    <includes id="Velocity_8hpp" name="Velocity.hpp" local="no" imported="no">playrho/d2/Velocity.hpp</includes>
    <includes id="Transformation_8hpp" name="Transformation.hpp" local="no" imported="no">playrho/d2/Transformation.hpp</includes>
    <includes id="Sweep_8hpp" name="Sweep.hpp" local="no" imported="no">playrho/d2/Sweep.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>Position</type>
      <name>Cap</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5e5d2c48721690652f6ac4c7ec0b04de</anchor>
      <arglist>(Position pos, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngle</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a01ec0848cea0c5b1730736cd1b75b156</anchor>
      <arglist>(const Transformation &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngle</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3b7f2988103c1593f346d2d58e9b4c6c</anchor>
      <arglist>(const UnitVec &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity2</type>
      <name>GetContactRelVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a21ae34e564b20057e6ed0f80e4485868</anchor>
      <arglist>(const Velocity &amp;velA, const Length2 &amp;relA, const Velocity &amp;velB, const Length2 &amp;relB) noexcept</arglist>
    </member>
    <member kind="function">
      <type>InvMass</type>
      <name>GetEffectiveInvMass</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab0e7f6b99f8d46a62c739d0df5ba8c1d</anchor>
      <arglist>(const InvRotInertia &amp;invRotI, const Length2 &amp;p, const UnitVec &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; UnitVec &gt;</type>
      <name>GetFwdNormalsVector</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac32cdb280579f9cc50ec0831c9d8c690</anchor>
      <arglist>(const std::vector&lt; Length2 &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>GetNormalized</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5955bf7b1c0cdfa36d11adea236d9af4</anchor>
      <arglist>(const Position &amp;val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Sweep</type>
      <name>GetNormalized</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a09b21383c1a73afea37f11e0ba906a76</anchor>
      <arglist>(Sweep sweep) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>GetPosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6b5dbaa10626a6248fa5b6d12c226906</anchor>
      <arglist>(const Position &amp;pos0, const Position &amp;pos1, Real beta) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetReflectionMatrix</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8f838d67cae62210ba00d7214a8c5715</anchor>
      <arglist>(const UnitVec &amp;axis)</arglist>
    </member>
    <member kind="function">
      <type>Transformation</type>
      <name>GetTransform0</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8128f59808ffb8ab56cc4d9528422b16</anchor>
      <arglist>(const Sweep &amp;sweep) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Transformation</type>
      <name>GetTransform1</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3047f53ab4e594f414832db427f03d6c</anchor>
      <arglist>(const Sweep &amp;sweep) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Transformation</type>
      <name>GetTransformation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1c8db589cd3a6e20401aeeecb6cccf66</anchor>
      <arglist>(const Length2 &amp;ctr, const UnitVec &amp;rot, const Length2 &amp;localCtr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Transformation</type>
      <name>GetTransformation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad4e88b3ed13792435ff7f7fe7bfe087a</anchor>
      <arglist>(const Position &amp;pos, const Length2 &amp;local_ctr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Transformation</type>
      <name>GetTransformation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a07e3239745b17cc4dfac4f26b7f179ba</anchor>
      <arglist>(const Sweep &amp;sweep, const UnitIntervalFF&lt; Real &gt; beta) noexcept</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetUnitVector</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6bd25518f48c10a51a89b63e4d5103bb</anchor>
      <arglist>(const Vector2&lt; T &gt; &amp;value, const UnitVec &amp;fallback=UnitVec::GetDefaultFallback()) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vec2</type>
      <name>GetVec2</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5341790c7d8beeb73ac576c1af2c4189</anchor>
      <arglist>(const UnitVec &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>InverseRotate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af6d5a93cce69057cdeffc538005fa4d4</anchor>
      <arglist>(const Vector2&lt; T &gt; &amp;vector, const UnitVec &amp;angle) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length2</type>
      <name>InverseTransform</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1fe3bd742eb5fc09e94e8a49084f144e</anchor>
      <arglist>(const Length2 &amp;v, const Transformation &amp;xfm) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsUnderActive</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9af102f967f219132acef68f51888f5c</anchor>
      <arglist>(const Velocity &amp;velocity, const LinearVelocity &amp;linSleepTol, const AngularVelocity &amp;angSleepTol) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Transformation</type>
      <name>Mul</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2ee12b6e0f384806e2dbb27a90a6cd7f</anchor>
      <arglist>(const Transformation &amp;A, const Transformation &amp;B) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Transformation</type>
      <name>MulT</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad9854545199d1abb2a6521895bf63831</anchor>
      <arglist>(const Transformation &amp;A, const Transformation &amp;B) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector2&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a82ae08d9c525e8510b8d7261fcf0d1c2</anchor>
      <arglist>(const playrho::detail::Checked&lt; T, U, NoExcept &gt; &amp;s, const UnitVec &amp;u) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector2&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abbaeb9fbb737e31245d2496c0828a90c</anchor>
      <arglist>(const T &amp;s, const UnitVec &amp;u) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector2&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5beaf709e090543a768ca7b40713e1b2</anchor>
      <arglist>(const UnitVec &amp;u, const playrho::detail::Checked&lt; T, U, NoExcept &gt; &amp;s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector2&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a34807856e636bd697d186de1071be30b</anchor>
      <arglist>(const UnitVec &amp;u, const T &amp;s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vec2</type>
      <name>operator/</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4986f4a662d45c82d02992bcea6334d6</anchor>
      <arglist>(const UnitVec &amp;u, const UnitVec::value_type s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Rotate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1f1ba31bf2edbc4d39df42026c472e03</anchor>
      <arglist>(const Vector2&lt; T &gt; &amp;vector, const UnitVec &amp;angle) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length2</type>
      <name>Transform</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a707ad4b4a0259ae05a5b3d722fafc74c</anchor>
      <arglist>(const Length2 &amp;v, const Transformation &amp;xfm) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Math.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>Math_8hpp.html</filename>
    <includes id="Matrix_8hpp" name="Matrix.hpp" local="no" imported="no">playrho/Matrix.hpp</includes>
    <includes id="NonNegative_8hpp" name="NonNegative.hpp" local="no" imported="no">playrho/NonNegative.hpp</includes>
    <includes id="Real_8hpp" name="Real.hpp" local="no" imported="no">playrho/Real.hpp</includes>
    <includes id="Span_8hpp" name="Span.hpp" local="no" imported="no">playrho/Span.hpp</includes>
    <includes id="Units_8hpp" name="Units.hpp" local="no" imported="no">playrho/Units.hpp</includes>
    <includes id="Vector_8hpp" name="Vector.hpp" local="no" imported="no">playrho/Vector.hpp</includes>
    <includes id="Vector2_8hpp" name="Vector2.hpp" local="no" imported="no">playrho/Vector2.hpp</includes>
    <includes id="Vector3_8hpp" name="Vector3.hpp" local="no" imported="no">playrho/Vector3.hpp</includes>
    <namespace>playrho</namespace>
    <member kind="function">
      <type>constexpr auto</type>
      <name>AlmostEqual</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga8b872c5026531f33636758bb11b167e6</anchor>
      <arglist>(T a, T b, int ulp=4) -&gt; std::enable_if_t&lt; IsArithmeticV&lt; T &gt;, bool &gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>AlmostZero</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga994ed50293b78dff53a5c7bce78602bf</anchor>
      <arglist>(const T &amp;value) -&gt; decltype(abs(value)&lt; std::numeric_limits&lt; T &gt;::min())</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>Atan2</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gab870a9188fcc77c905807fa718a8268d</anchor>
      <arglist>(T y, T x)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>Average</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga5928e1bb2ea4a8d60673314ff46a83cf</anchor>
      <arglist>(const T &amp;span)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Bisect</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gad9807960f6f6e39b0449aec22d646669</anchor>
      <arglist>(const T &amp;a1, const T &amp;a2) -&gt; decltype((a1+a2)/2)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>cfloor</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga3f6e8b69eaeee408d3894b59629cffe9</anchor>
      <arglist>(T v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>ComputeCentroid</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gae769785f0540a4b8960b282f6b105c14</anchor>
      <arglist>(const Span&lt; const Length2 &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Cross</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gab5164277624274fde39d33fd4f0f5dd5</anchor>
      <arglist>(const T1 &amp;a, const T2 &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>ctrunc</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gaff0508a648e02202d025b83e46973e45</anchor>
      <arglist>(T v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Dot</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga08e3eae87277d85db13cce6b12facf1e</anchor>
      <arglist>(const T1 &amp;a, const T2 &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngle</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga941d2e26e203e19b567a018570417be3</anchor>
      <arglist>(const Vector2&lt; T &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>NonNegativeFF&lt; Area &gt;</type>
      <name>GetAreaOfCircle</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga007d43d0fd5ce900118dd41e3197d887</anchor>
      <arglist>(Length radius)</arglist>
    </member>
    <member kind="function">
      <type>NonNegativeFF&lt; Area &gt;</type>
      <name>GetAreaOfPolygon</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga760effc058042418453697e733937b2f</anchor>
      <arglist>(const Span&lt; const Length2 &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Length2 &gt;</type>
      <name>GetCircleVertices</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga338c586cf1a29f27ee334d061fa59b5d</anchor>
      <arglist>(Length radius, std::size_t slices, Angle start=0_deg, Real turns=Real(1))</arglist>
    </member>
    <member kind="function">
      <type>constexpr Angle</type>
      <name>GetFwdRotationalAngle</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga5d41854b91fcfb6b8ea05e7b8c92e304</anchor>
      <arglist>(const Angle &amp;a1, const Angle &amp;a2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetInverse22</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga0a9354b34edeb8433cd3062aecb78143</anchor>
      <arglist>(const Mat33 &amp;value) noexcept -&gt; Mat33</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetMagnitude</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gafe323c1c5ab88d30d18413a3c1f10abb</anchor>
      <arglist>(const T &amp;value) noexcept(noexcept(sqrt(GetMagnitudeSquared(value)))) -&gt; decltype(sqrt(GetMagnitudeSquared(value)))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetMagnitudeSquared</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga36866f7061dfa4d056405aa5da0daf84</anchor>
      <arglist>(const T &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetModuloNext</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga81dbf936e69c8d2ecc9ca3600c6be3a1</anchor>
      <arglist>(T value, const T count) noexcept -&gt; decltype(++value,(value&lt; count)? value:static_cast&lt; T &gt;(0), T())</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetModuloPrev</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga6434759234bd5e94759bf10cc4eb5ac5</anchor>
      <arglist>(const T value, const T count) noexcept -&gt; decltype((value ? value :count) - static_cast&lt; T &gt;(1), T())</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetNormalized</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga156a2abff11f978a8df25efbf0c10147</anchor>
      <arglist>(Angle value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>SecondMomentOfArea</type>
      <name>GetPolarMoment</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gaee743e28b24b01d9101b8a2e7bd72284</anchor>
      <arglist>(const Span&lt; const Length2 &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Angle</type>
      <name>GetRevRotationalAngle</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga1413e02cc41bf9943071baa2ae242c27</anchor>
      <arglist>(const Angle &amp;a1, const Angle &amp;a2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetShortestDelta</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gac9b72aa4a587e552a586a42494d614c1</anchor>
      <arglist>(Angle a0, Angle a1) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetSymInverse33</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga39333b6fc4de2a8f365b74194e42ceef</anchor>
      <arglist>(const Mat33 &amp;value) noexcept -&gt; Mat33</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vec2</type>
      <name>InverseTransform</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga68c69326c22bafb811d6e00b9e6966cc</anchor>
      <arglist>(const Vec2 &amp;v, const Mat22 &amp;A) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Invert</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga01639d99c5401d526aeb5c6df075e153</anchor>
      <arglist>(const Matrix22&lt; IN_TYPE &gt; &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>IsOdd</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga96fac7df522251c1cc54aeafbfe3b737</anchor>
      <arglist>(const T &amp;val) -&gt; decltype((val % 2) !=T{})</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>IsPowerOfTwo</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga08b9672d78dbe1aa5275a9c514b422f5</anchor>
      <arglist>(const T &amp;n) -&gt; decltype(n &amp;&amp;!(n &amp;(n - 1)))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>MakeUnsigned</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aee56c4a29a6dd23450e8be8027929f6c</anchor>
      <arglist>(const T &amp;arg) noexcept -&gt; std::enable_if_t&lt; std::is_signed_v&lt; T &gt;, std::make_unsigned_t&lt; T &gt;&gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>ModuloViaFmod</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gab53c16bcb68dd36d3b18027a2ac6b1b2</anchor>
      <arglist>(T dividend, T divisor)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>ModuloViaTrunc</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga84e7cb2a415fcb956202c8d7e1b1d200</anchor>
      <arglist>(T dividend, T divisor) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mat22</type>
      <name>MulT</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gab471bae6413067374ab8d8262533e402</anchor>
      <arglist>(const Mat22 &amp;A, const Mat22 &amp;B) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>NextPowerOfTwo</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gac9c45595993e763f220e4018c3780058</anchor>
      <arglist>(T x) -&gt; decltype((x|(x &gt;&gt; 1u)), T(++x))</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>Normalize</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga0c7d2525a406c1f83c0574e46a2cee32</anchor>
      <arglist>(Vec2 &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>RoundOff</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga1502fbf5063c1f5dbedafe215895ad29</anchor>
      <arglist>(const T &amp;value, unsigned precision=DefaultRoundOffPrecission) -&gt; decltype(round(value *static_cast&lt; T &gt;(precision))/static_cast&lt; T &gt;(precision))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>RoundOff</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga1ceb2daa8b41c4834408662c43e5abda</anchor>
      <arglist>(const Vec2 &amp;value, std::uint32_t precision=DefaultRoundOffPrecission) -&gt; Vec2</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Secant</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga30837f12d652c4e51406db0f1cd11a3a</anchor>
      <arglist>(const T &amp;target, const U &amp;a1, const T &amp;s1, const U &amp;a2, const T &amp;s2) -&gt; decltype(a1+(target - s1) *(a2 - a1)/(s2 - s1))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Solve</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga1dfb22979400417701de8582bb6d76ad</anchor>
      <arglist>(const Matrix22&lt; U &gt; &amp;mat, const Vector2&lt; T &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Solve22</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga844e39448ab76470e60db668b1815ee0</anchor>
      <arglist>(const Mat33 &amp;mat, const Vector2&lt; T &gt; &amp;b) noexcept -&gt; Vector2&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Solve33</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gab5eb451a3aff0db8ef5bcbb3d67a18df</anchor>
      <arglist>(const Mat33 &amp;mat, const Vector3&lt; T &gt; &amp;b) noexcept -&gt; Vector3&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Square</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga4000cee8b1fc5a9ab6a5cfe29eb645b6</anchor>
      <arglist>(T t) noexcept(noexcept(t *t)) -&gt; decltype(t *t)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>ToSigned</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga3410f58d0023e2a0d6ae6ad85da9508c</anchor>
      <arglist>(const T &amp;value) -&gt; decltype(static_cast&lt; std::make_signed_t&lt; T &gt;&gt;(value))</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vec2</type>
      <name>Transform</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gaa8489f7d571594e36194a437ea93898a</anchor>
      <arglist>(const Vec2 &amp;v, const Mat33 &amp;A) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Transform</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga17fa159bf4195bff228c3fda9252a5b1</anchor>
      <arglist>(const Vector&lt; T1, M &gt; &amp;v, const Matrix&lt; T2, M, N &gt; &amp;m) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultRoundOffPrecission</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga2e94545b5052523414ec03d0e95e2297</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MotorJointConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>MotorJointConf_8hpp.html</filename>
    <includes id="NonNegative_8hpp" name="NonNegative.hpp" local="no" imported="no">playrho/NonNegative.hpp</includes>
    <includes id="Span_8hpp" name="Span.hpp" local="no" imported="no">playrho/Span.hpp</includes>
    <includes id="TypeInfo_8hpp" name="TypeInfo.hpp" local="no" imported="no">playrho/TypeInfo.hpp</includes>
    <includes id="JointConf_8hpp" name="JointConf.hpp" local="no" imported="no">playrho/d2/JointConf.hpp</includes>
    <includes id="d2_2Math_8hpp" name="Math.hpp" local="no" imported="no">playrho/d2/Math.hpp</includes>
    <class kind="struct">playrho::d2::MotorJointConf</class>
    <class kind="struct">playrho::detail::TypeInfo&lt; playrho::d2::MotorJointConf &gt;</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetAngularError</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac3f517e88d5b384e337d3322881c5886</anchor>
      <arglist>(const MotorJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetAngularOffset</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a75db6ad844d4be5361364e49907b24f8</anchor>
      <arglist>(const MotorJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetCorrectionFactor</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa5e4489f264227f6c20010c1838248db</anchor>
      <arglist>(const MotorJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLinearError</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab1e80b7fb2a127c7bef5388890d3ee0e</anchor>
      <arglist>(const MotorJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLinearOffset</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a53e7afd4eb1bc197703f3d68c4ffd934</anchor>
      <arglist>(const MotorJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLocalAnchorA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6bff2eef6c3ab00e21a7a497dfa69b02</anchor>
      <arglist>(const MotorJointConf &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLocalAnchorB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aff7518dbaba68503c8534f3aa1bc1baf</anchor>
      <arglist>(const MotorJointConf &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetMaxForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2316866330d122410cad54477dea24c9</anchor>
      <arglist>(const MotorJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetMaxTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>addea3c1c41374755038085922785f96d</anchor>
      <arglist>(const MotorJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MotorJointConf</type>
      <name>GetMotorJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9030301cdd51e2084c30689dc8ddb6f5</anchor>
      <arglist>(const Joint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>MotorJointConf</type>
      <name>GetMotorJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a46260d9a957fe6cc073f2e484d2f5b9c</anchor>
      <arglist>(const World &amp;world, BodyID bA, BodyID bB)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a06f9133e78c1d318a5a4ecca1b5c5dad</anchor>
      <arglist>(MotorJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adb73921dd33efab19ea30f62abca8839</anchor>
      <arglist>(const MotorJointConf &amp;lhs, const MotorJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1b19f08799b5719ae26c054a7d6f2da5</anchor>
      <arglist>(const MotorJointConf &amp;lhs, const MotorJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetAngularOffset</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab185fa3719432e9026a44e602279f8d1</anchor>
      <arglist>(MotorJointConf &amp;object, Angle value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetCorrectionFactor</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5f373e05ffdf359e2f995aec4e5489c0</anchor>
      <arglist>(MotorJointConf &amp;object, Real value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetLinearOffset</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4ad5fe5276577c9a253a776fd803a2c2</anchor>
      <arglist>(MotorJointConf &amp;object, const Length2 &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetMaxForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a309119086874940563a7e3a4b91c9cc2</anchor>
      <arglist>(MotorJointConf &amp;object, NonNegative&lt; Force &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetMaxTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a740454a9bdb11a84bfc34bad37908030</anchor>
      <arglist>(MotorJointConf &amp;object, NonNegative&lt; Torque &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7b1aabf4a880937e88e2e3af6386e77f</anchor>
      <arglist>(MotorJointConf &amp;, const Length2 &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3f7c5115b8ff1c2d24d6e9fd771b08d0</anchor>
      <arglist>(const MotorJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3145c7419ce09acb3cc104fa76aa7815</anchor>
      <arglist>(MotorJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MultiShapeConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>MultiShapeConf_8hpp.html</filename>
    <includes id="TypeInfo_8hpp" name="TypeInfo.hpp" local="no" imported="no">playrho/TypeInfo.hpp</includes>
    <includes id="ConvexHull_8hpp" name="ConvexHull.hpp" local="no" imported="no">playrho/d2/ConvexHull.hpp</includes>
    <includes id="ShapeConf_8hpp" name="ShapeConf.hpp" local="no" imported="no">playrho/d2/ShapeConf.hpp</includes>
    <includes id="DistanceProxy_8hpp" name="DistanceProxy.hpp" local="no" imported="no">playrho/d2/DistanceProxy.hpp</includes>
    <includes id="MassData_8hpp" name="MassData.hpp" local="no" imported="no">playrho/d2/MassData.hpp</includes>
    <includes id="d2_2Math_8hpp" name="Math.hpp" local="no" imported="no">playrho/d2/Math.hpp</includes>
    <class kind="struct">playrho::d2::MultiShapeConf</class>
    <class kind="struct">playrho::detail::TypeInfo&lt; playrho::d2::MultiShapeConf &gt;</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>DistanceProxy</type>
      <name>GetChild</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a20acfdc5ce307d90cfef42908be8720b</anchor>
      <arglist>(const MultiShapeConf &amp;arg, ChildCounter index)</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetChildCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6da28327ee2857e706b89789d56a3598</anchor>
      <arglist>(const MultiShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac6f6f3f87b9fe23f90e740351c4513e5</anchor>
      <arglist>(const MultiShapeConf &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a520079de7cf100a20a169fc57b77b5c0</anchor>
      <arglist>(const MultiShapeConf &amp;arg, ChildCounter index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abad1906bf9f008e1519d6e2ce95c792b</anchor>
      <arglist>(const MultiShapeConf &amp;lhs, const MultiShapeConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ada69d48759a92fa8273e98b7e0bb69c5</anchor>
      <arglist>(const MultiShapeConf &amp;lhs, const MultiShapeConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Rotate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae2eca4703501e9eb91cc3abc40cf2ee8</anchor>
      <arglist>(MultiShapeConf &amp;arg, const UnitVec &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Scale</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a77b65c2f92a455f0dc39eb260125586b</anchor>
      <arglist>(MultiShapeConf &amp;arg, const Vec2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2db7d1b9465c7f6180c42183d2ec4d5e</anchor>
      <arglist>(MultiShapeConf &amp;arg, ChildCounter index, NonNegative&lt; Length &gt; value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Translate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a82e629d0f812ce569968cf20183e0c06</anchor>
      <arglist>(MultiShapeConf &amp;arg, const Length2 &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NgonWithFwdNormals.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>NgonWithFwdNormals_8hpp.html</filename>
    <includes id="d2_2Math_8hpp" name="Math.hpp" local="no" imported="no">playrho/d2/Math.hpp</includes>
    <class kind="class">playrho::d2::NgonWithFwdNormals</class>
    <class kind="class">playrho::d2::NgonWithFwdNormals&lt; static_cast&lt; std::size_t &gt;(-1)&gt;</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>std::array&lt; UnitVec, N &gt;</type>
      <name>GetFwdNormalsArray</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a03e5b2dc2081cc8e0fc608ff79e78a89</anchor>
      <arglist>(const std::array&lt; Length2, N &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function">
      <type>std::array&lt; UnitVec, sizeof...(ints)&gt;</type>
      <name>GetFwdNormalsArray</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a642d004cc56b550c7fc6ff0fc6cb3311</anchor>
      <arglist>(const std::array&lt; Length2, sizeof...(ints)&gt; &amp;vertices, std::integer_sequence&lt; T, ints... &gt; int_seq)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PointStates.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>PointStates_8hpp.html</filename>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">playrho/Settings.hpp</includes>
    <includes id="PointState_8hpp" name="PointState.hpp" local="no" imported="no">playrho/PointState.hpp</includes>
    <class kind="struct">playrho::d2::PointStates</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>PointStates</type>
      <name>GetPointStates</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae48de2e5ef109c667912e5db7b170d94</anchor>
      <arglist>(const Manifold &amp;manifold1, const Manifold &amp;manifold2) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PolygonShapeConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>PolygonShapeConf_8hpp.html</filename>
    <includes id="InvalidArgument_8hpp" name="InvalidArgument.hpp" local="no" imported="no">playrho/InvalidArgument.hpp</includes>
    <includes id="Matrix_8hpp" name="Matrix.hpp" local="no" imported="no">playrho/Matrix.hpp</includes>
    <includes id="NonNegative_8hpp" name="NonNegative.hpp" local="no" imported="no">playrho/NonNegative.hpp</includes>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">playrho/Settings.hpp</includes>
    <includes id="Span_8hpp" name="Span.hpp" local="no" imported="no">playrho/Span.hpp</includes>
    <includes id="Units_8hpp" name="Units.hpp" local="no" imported="no">playrho/Units.hpp</includes>
    <includes id="Vector2_8hpp" name="Vector2.hpp" local="no" imported="no">playrho/Vector2.hpp</includes>
    <includes id="detail_2Templates_8hpp" name="Templates.hpp" local="no" imported="no">playrho/detail/Templates.hpp</includes>
    <includes id="detail_2TypeInfo_8hpp" name="TypeInfo.hpp" local="no" imported="no">playrho/detail/TypeInfo.hpp</includes>
    <includes id="DistanceProxy_8hpp" name="DistanceProxy.hpp" local="no" imported="no">playrho/d2/DistanceProxy.hpp</includes>
    <includes id="MassData_8hpp" name="MassData.hpp" local="no" imported="no">playrho/d2/MassData.hpp</includes>
    <includes id="NgonWithFwdNormals_8hpp" name="NgonWithFwdNormals.hpp" local="no" imported="no">playrho/d2/NgonWithFwdNormals.hpp</includes>
    <includes id="ShapeConf_8hpp" name="ShapeConf.hpp" local="no" imported="no">playrho/d2/ShapeConf.hpp</includes>
    <includes id="Transformation_8hpp" name="Transformation.hpp" local="no" imported="no">playrho/d2/Transformation.hpp</includes>
    <includes id="UnitVec_8hpp" name="UnitVec.hpp" local="no" imported="no">playrho/d2/UnitVec.hpp</includes>
    <includes id="VertexSet_8hpp" name="VertexSet.hpp" local="no" imported="no">playrho/d2/VertexSet.hpp</includes>
    <class kind="struct">playrho::d2::PolygonShapeConf</class>
    <class kind="struct">playrho::detail::TypeInfo&lt; playrho::d2::PolygonShapeConf &gt;</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>DistanceProxy</type>
      <name>GetChild</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a13041b2a9f585bc57cd2daad5afe69a3</anchor>
      <arglist>(const PolygonShapeConf &amp;arg, ChildCounter index)</arglist>
    </member>
    <member kind="function">
      <type>constexpr ChildCounter</type>
      <name>GetChildCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aecd3d6d3ce6bf86f6b0c9684c05d63bc</anchor>
      <arglist>(const PolygonShapeConf &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a69182cba2886716e95849f5a3a71fd8b</anchor>
      <arglist>(const PolygonShapeConf &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a17a8a83f5b2b14e4615b24934ef3642f</anchor>
      <arglist>(const PolygonShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a559385a58b96c078031f5d7c0b29330f</anchor>
      <arglist>(const PolygonShapeConf &amp;arg, ChildCounter) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Rotate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acd56c5552483657111ca8422eaf2eb1a</anchor>
      <arglist>(PolygonShapeConf &amp;arg, const UnitVec &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Scale</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5f04cbafbf3303265bee6b767c688f49</anchor>
      <arglist>(PolygonShapeConf &amp;arg, const Vec2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7d0ce0b3d57d4aa443a9f0486f38fdc7</anchor>
      <arglist>(PolygonShapeConf &amp;arg, ChildCounter, NonNegative&lt; Length &gt; value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a40ed160d5f82a8186d96914e4139781f</anchor>
      <arglist>(PolygonShapeConf &amp;arg, NonNegative&lt; Length &gt; value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transform</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8a6138547e9f6220a96e67364432f43a</anchor>
      <arglist>(PolygonShapeConf &amp;arg, const Mat22 &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Translate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae5deab5b9989a6f467a44720d2bf4000</anchor>
      <arglist>(PolygonShapeConf &amp;arg, const Length2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Validate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0254e96c6b1df87a80cf44dc29fc2017</anchor>
      <arglist>(const Span&lt; const Length2 &gt; &amp;verts)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Position.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>Position_8hpp.html</filename>
    <includes id="Real_8hpp" name="Real.hpp" local="no" imported="no">playrho/Real.hpp</includes>
    <includes id="Templates_8hpp" name="Templates.hpp" local="no" imported="no">playrho/Templates.hpp</includes>
    <includes id="Units_8hpp" name="Units.hpp" local="no" imported="no">playrho/Units.hpp</includes>
    <includes id="Vector2_8hpp" name="Vector2.hpp" local="no" imported="no">playrho/Vector2.hpp</includes>
    <class kind="struct">playrho::d2::Position</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aa4eafabdd97553a750feb39943d629da</anchor>
      <arglist>(const d2::Position &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a920e4ebf45a599f01060d56b280adc74</anchor>
      <arglist>(const Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Position</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af31710833f717897050fa1e9981ebb95</anchor>
      <arglist>(const Position &amp;pos, const Real scalar)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Position</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab6cbd956958f8a1cd6726ad4e0cf2e43</anchor>
      <arglist>(const Real scalar, const Position &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Position</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adc427276624c31301f4d2c3c202497d8</anchor>
      <arglist>(const Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Position</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8e75f2489f1991855f31108826613c6f</anchor>
      <arglist>(const Position &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Position &amp;</type>
      <name>operator+=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adad2c25d2579c31f2091a842e17fa2c3</anchor>
      <arglist>(Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Position</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab4a62d780748e8a22c6fe64234f6d121</anchor>
      <arglist>(const Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Position</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acf4c47e7d8cba3a76dcdc9fa4b79d242</anchor>
      <arglist>(const Position &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Position &amp;</type>
      <name>operator-=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3f8a057d7496ce6e5c72debd2361de5c</anchor>
      <arglist>(Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5e0589100dc43e1301d6b8b945ccb37c</anchor>
      <arglist>(const Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PositionConstraint.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>PositionConstraint_8hpp.html</filename>
    <includes id="BodyID_8hpp" name="BodyID.hpp" local="no" imported="no">playrho/BodyID.hpp</includes>
    <includes id="NonNegative_8hpp" name="NonNegative.hpp" local="no" imported="no">playrho/NonNegative.hpp</includes>
    <includes id="Manifold_8hpp" name="Manifold.hpp" local="no" imported="no">playrho/d2/Manifold.hpp</includes>
    <class kind="struct">playrho::d2::PositionConstraint</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
  </compound>
  <compound kind="file">
    <name>PositionSolution.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>PositionSolution_8hpp.html</filename>
    <includes id="d2_2Math_8hpp" name="Math.hpp" local="no" imported="no">playrho/d2/Math.hpp</includes>
    <includes id="Position_8hpp" name="Position.hpp" local="no" imported="no">playrho/d2/Position.hpp</includes>
    <class kind="struct">playrho::d2::PositionSolution</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>PositionSolution</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7f07199b005b40c692586f0a11602a81</anchor>
      <arglist>(const PositionSolution &amp;lhs, const PositionSolution &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PositionSolution</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afd7544c1dace2373fc283a0a64c29068</anchor>
      <arglist>(const PositionSolution &amp;lhs, const PositionSolution &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PositionSolverManifold.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>PositionSolverManifold_8hpp.html</filename>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">playrho/Settings.hpp</includes>
    <includes id="Manifold_8hpp" name="Manifold.hpp" local="no" imported="no">playrho/d2/Manifold.hpp</includes>
    <includes id="d2_2Math_8hpp" name="Math.hpp" local="no" imported="no">playrho/d2/Math.hpp</includes>
    <class kind="struct">playrho::d2::PositionSolverManifold</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>PositionSolverManifold</type>
      <name>GetPSM</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa9987f7f8471dbe26d486e2602661e78</anchor>
      <arglist>(const Manifold &amp;manifold, Manifold::size_type index, const Transformation &amp;xfA, const Transformation &amp;xfB)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PrismaticJointConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>PrismaticJointConf_8hpp.html</filename>
    <includes id="LimitState_8hpp" name="LimitState.hpp" local="no" imported="no">playrho/LimitState.hpp</includes>
    <includes id="Span_8hpp" name="Span.hpp" local="no" imported="no">playrho/Span.hpp</includes>
    <includes id="TypeInfo_8hpp" name="TypeInfo.hpp" local="no" imported="no">playrho/TypeInfo.hpp</includes>
    <includes id="JointConf_8hpp" name="JointConf.hpp" local="no" imported="no">playrho/d2/JointConf.hpp</includes>
    <includes id="d2_2Math_8hpp" name="Math.hpp" local="no" imported="no">playrho/d2/Math.hpp</includes>
    <includes id="UnitVec_8hpp" name="UnitVec.hpp" local="no" imported="no">playrho/d2/UnitVec.hpp</includes>
    <class kind="struct">playrho::d2::PrismaticJointConf</class>
    <class kind="struct">playrho::detail::TypeInfo&lt; playrho::d2::PrismaticJointConf &gt;</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a609cdefd3186585f2718bd19ba81c950</anchor>
      <arglist>(const PrismaticJointConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLinearLowerLimit</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2972598e6c903720d93d1aba138ec7b3</anchor>
      <arglist>(const PrismaticJointConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a975ab609242a9cc7d13298e4e4bd1d46</anchor>
      <arglist>(const PrismaticJointConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLinearUpperLimit</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a239db9ab5446fbb27eb532c45965cbe4</anchor>
      <arglist>(const PrismaticJointConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity</type>
      <name>GetLinearVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afb637a0308bb0036946100bfa08059d8</anchor>
      <arglist>(const World &amp;world, const PrismaticJointConf &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PrismaticJointConf</type>
      <name>GetPrismaticJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a60b9a9ec9672825ae4fc6a33ff268cbe</anchor>
      <arglist>(const Joint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>PrismaticJointConf</type>
      <name>GetPrismaticJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afff6ba4fcb7fcb7917f12d741ad42452</anchor>
      <arglist>(const World &amp;world, BodyID bA, BodyID bB, const Length2 &amp;anchor, const UnitVec &amp;axis)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acae3917a1b537360c522418d93203b26</anchor>
      <arglist>(PrismaticJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adeb8e9c029b86567348620b30e693bc7</anchor>
      <arglist>(const PrismaticJointConf &amp;lhs, const PrismaticJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af90207a13837614365ee1b1f331ccb34</anchor>
      <arglist>(const PrismaticJointConf &amp;lhs, const PrismaticJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetLinearLimits</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab3e9cb2455b78052970feaabe8cf3b1b</anchor>
      <arglist>(PrismaticJointConf &amp;conf, Length lower, Length upper) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetMaxMotorForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a354d65b6b0cac0916b4788e0ce1a5470</anchor>
      <arglist>(PrismaticJointConf &amp;object, Force value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afd69a0ec99e9a354fff052aeb7deefc9</anchor>
      <arglist>(PrismaticJointConf &amp;, const Length2 &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a12567507e75af75aaffa3e83bffcd7a1</anchor>
      <arglist>(const PrismaticJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7a180e50dd8e1ddb37389794a8ebcaa8</anchor>
      <arglist>(PrismaticJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PulleyJointConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>PulleyJointConf_8hpp.html</filename>
    <includes id="Span_8hpp" name="Span.hpp" local="no" imported="no">playrho/Span.hpp</includes>
    <includes id="TypeInfo_8hpp" name="TypeInfo.hpp" local="no" imported="no">playrho/TypeInfo.hpp</includes>
    <includes id="JointConf_8hpp" name="JointConf.hpp" local="no" imported="no">playrho/d2/JointConf.hpp</includes>
    <includes id="d2_2Math_8hpp" name="Math.hpp" local="no" imported="no">playrho/d2/Math.hpp</includes>
    <includes id="UnitVec_8hpp" name="UnitVec.hpp" local="no" imported="no">playrho/d2/UnitVec.hpp</includes>
    <class kind="struct">playrho::d2::PulleyJointConf</class>
    <class kind="struct">playrho::detail::TypeInfo&lt; playrho::d2::PulleyJointConf &gt;</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>constexpr AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad042f7000a43ec5b29154a07465005f6</anchor>
      <arglist>(const PulleyJointConf &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLengthA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a94c0bc2a8291d96ff45e0d157a9d5bf3</anchor>
      <arglist>(const PulleyJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLengthB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aac6b715e0df3e5be4be5ccae4ac4fa36</anchor>
      <arglist>(const PulleyJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a587b3fc0018a0aba1d156dcd26147d1d</anchor>
      <arglist>(const PulleyJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PulleyJointConf</type>
      <name>GetPulleyJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4ee7b170b4d490f78974c11f781b4778</anchor>
      <arglist>(const Joint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>PulleyJointConf</type>
      <name>GetPulleyJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4d0694f5aabe00ea59f92e2d0fc0cc7b</anchor>
      <arglist>(const World &amp;world, BodyID bA, BodyID bB, const Length2 &amp;groundA, const Length2 &amp;groundB, const Length2 &amp;anchorA, const Length2 &amp;anchorB)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab29fb30c103527ebbe3f2a945dc3edee</anchor>
      <arglist>(PulleyJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3ae2ced4c2ea4e92078eb0f6277007e9</anchor>
      <arglist>(const PulleyJointConf &amp;lhs, const PulleyJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4085412245af82c9b4fec44a41132496</anchor>
      <arglist>(const PulleyJointConf &amp;lhs, const PulleyJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetRatio</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abe7de7c24d8d14d4dd2a34e2ecc386b3</anchor>
      <arglist>(PulleyJointConf &amp;object, Real value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6491ae989f42c8614f9ce5211621ad36</anchor>
      <arglist>(PulleyJointConf &amp;object, const Length2 &amp;newOrigin) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a94f2c321061e7e2fc469ca131f53667e</anchor>
      <arglist>(const PulleyJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a76aae4606d9668f08836bbd9072ecb7f</anchor>
      <arglist>(PulleyJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RayCastInput.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>d2_2RayCastInput_8hpp.html</filename>
    <includes id="detail_2RayCastInput_8hpp" name="RayCastInput.hpp" local="no" imported="no">playrho/detail/RayCastInput.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="typedef">
      <type>playrho::detail::RayCastInput&lt; 2 &gt;</type>
      <name>RayCastInput</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adf053dc4cae3fabb24f6e3c8b8697ffb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RayCastInput.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/detail/</path>
    <filename>detail_2RayCastInput_8hpp.html</filename>
    <includes id="Vector_8hpp" name="Vector.hpp" local="no" imported="no">playrho/Vector.hpp</includes>
    <includes id="UnitInterval_8hpp" name="UnitInterval.hpp" local="no" imported="no">playrho/UnitInterval.hpp</includes>
    <includes id="Units_8hpp" name="Units.hpp" local="no" imported="no">playrho/Units.hpp</includes>
    <class kind="struct">playrho::detail::RayCastInput</class>
    <namespace>playrho</namespace>
    <namespace>playrho::detail</namespace>
  </compound>
  <compound kind="file">
    <name>RayCastOutput.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>RayCastOutput_8hpp.html</filename>
    <includes id="BodyID_8hpp" name="BodyID.hpp" local="no" imported="no">playrho/BodyID.hpp</includes>
    <includes id="RayCastOpcode_8hpp" name="RayCastOpcode.hpp" local="no" imported="no">playrho/RayCastOpcode.hpp</includes>
    <includes id="ShapeID_8hpp" name="ShapeID.hpp" local="no" imported="no">playrho/ShapeID.hpp</includes>
    <includes id="UnitInterval_8hpp" name="UnitInterval.hpp" local="no" imported="no">playrho/UnitInterval.hpp</includes>
    <includes id="Vector2_8hpp" name="Vector2.hpp" local="no" imported="no">playrho/Vector2.hpp</includes>
    <includes id="d2_2RayCastInput_8hpp" name="RayCastInput.hpp" local="no" imported="no">playrho/d2/RayCastInput.hpp</includes>
    <includes id="UnitVec_8hpp" name="UnitVec.hpp" local="no" imported="no">playrho/d2/UnitVec.hpp</includes>
    <class kind="struct">playrho::d2::RayCastHit</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <namespace>playrho::detail</namespace>
    <member kind="typedef">
      <type>std::function&lt; Real(BodyID body, ShapeID shape, ChildCounter child, const RayCastInput &amp;input)&gt;</type>
      <name>DynamicTreeRayCastCB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a62151a56febad3c36f515717f3e2340c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::optional&lt; RayCastHit &gt;</type>
      <name>RayCastOutput</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a44ee8d7d4fd7ea935b7d952f7834027f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; RayCastOpcode(BodyID body, ShapeID shape, ChildCounter child, const Length2 &amp;point, UnitVec normal)&gt;</type>
      <name>ShapeRayCastCB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a717d1df22f7ce6211e7d2019459714f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>ga425e9dc1c0e263bf7484ef6ef2cde86b</anchor>
      <arglist>(const ::playrho::detail::AABB&lt; 2 &gt; &amp;aabb, const RayCastInput &amp;input) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>ga3dad3478ded2886d14ed536a6c97cfb1</anchor>
      <arglist>(const DistanceProxy &amp;proxy, const RayCastInput &amp;input, const Transformation &amp;transform) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gadf0ec62e1852e3bc9b017eae4a5616b4</anchor>
      <arglist>(const DynamicTree &amp;tree, RayCastInput input, const DynamicTreeRayCastCB &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>ga6ed6eafc72f707833ee7079bf62487ad</anchor>
      <arglist>(const Shape &amp;shape, ChildCounter childIndex, const RayCastInput &amp;input, const Transformation &amp;transform) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gaf241136582e7ccf95db82be1184c9f16</anchor>
      <arglist>(const World &amp;world, const RayCastInput &amp;input, const ShapeRayCastCB &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gaa2b257514c434e44a5ea5839c959bea9</anchor>
      <arglist>(Length radius, const Length2 &amp;location, const RayCastInput &amp;input) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RevoluteJointConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>RevoluteJointConf_8hpp.html</filename>
    <includes id="LimitState_8hpp" name="LimitState.hpp" local="no" imported="no">playrho/LimitState.hpp</includes>
    <includes id="Span_8hpp" name="Span.hpp" local="no" imported="no">playrho/Span.hpp</includes>
    <includes id="TypeInfo_8hpp" name="TypeInfo.hpp" local="no" imported="no">playrho/TypeInfo.hpp</includes>
    <includes id="JointConf_8hpp" name="JointConf.hpp" local="no" imported="no">playrho/d2/JointConf.hpp</includes>
    <includes id="d2_2Math_8hpp" name="Math.hpp" local="no" imported="no">playrho/d2/Math.hpp</includes>
    <class kind="struct">playrho::d2::RevoluteJointConf</class>
    <class kind="struct">playrho::detail::TypeInfo&lt; playrho::d2::RevoluteJointConf &gt;</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngle</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a39d784bea582d1df91f3eeeb42b50597</anchor>
      <arglist>(const World &amp;world, const RevoluteJointConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Angle</type>
      <name>GetAngularLowerLimit</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afd8850ec299f0679c41ca58081408de8</anchor>
      <arglist>(const RevoluteJointConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4ee40ca4a9dbe09390f0ff493f276dac</anchor>
      <arglist>(const RevoluteJointConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Angle</type>
      <name>GetAngularUpperLimit</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0f475e87122dc3f396a975f55b1c70d0</anchor>
      <arglist>(const RevoluteJointConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetAngularVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa5a936f0f945fdc524637bf1ae532e4f</anchor>
      <arglist>(const World &amp;world, const RevoluteJointConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2cae96cc4b8f16e7a9ce6abd543f09c1</anchor>
      <arglist>(const RevoluteJointConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RevoluteJointConf</type>
      <name>GetRevoluteJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6f970888f175e45d5b45dcf0af24f5ef</anchor>
      <arglist>(const Joint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>RevoluteJointConf</type>
      <name>GetRevoluteJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa558eda7b5c2906a3ff15c486174dd03</anchor>
      <arglist>(const World &amp;world, BodyID bodyA, BodyID bodyB, const Length2 &amp;anchor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aeeaeb2eb144e3351d62abf4ecf4d0644</anchor>
      <arglist>(RevoluteJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1f1939c47dfdcf306663d56d87a9afd2</anchor>
      <arglist>(const RevoluteJointConf &amp;lhs, const RevoluteJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a79d7e1a69ae37d6ab92378ebac7fb2c7</anchor>
      <arglist>(const RevoluteJointConf &amp;lhs, const RevoluteJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetAngularLimits</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae5635ff98f64bcbf6a31cba670913afc</anchor>
      <arglist>(RevoluteJointConf &amp;object, Angle lower, Angle upper) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetMaxMotorTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac5613ecd1ba9cd47dcfa45191c137dbd</anchor>
      <arglist>(RevoluteJointConf &amp;object, Torque value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af7ebe3d8362ba3517d73e536888ca270</anchor>
      <arglist>(RevoluteJointConf &amp;, const Length2 &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6585c2b02389656769b96ed15380c8b2</anchor>
      <arglist>(const RevoluteJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab7a0db9aab1e9070a17a8e664f277bf4</anchor>
      <arglist>(RevoluteJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RopeJointConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>RopeJointConf_8hpp.html</filename>
    <includes id="LimitState_8hpp" name="LimitState.hpp" local="no" imported="no">playrho/LimitState.hpp</includes>
    <includes id="Span_8hpp" name="Span.hpp" local="no" imported="no">playrho/Span.hpp</includes>
    <includes id="TypeInfo_8hpp" name="TypeInfo.hpp" local="no" imported="no">playrho/TypeInfo.hpp</includes>
    <includes id="d2_2Math_8hpp" name="Math.hpp" local="no" imported="no">playrho/d2/Math.hpp</includes>
    <includes id="JointConf_8hpp" name="JointConf.hpp" local="no" imported="no">playrho/d2/JointConf.hpp</includes>
    <includes id="UnitVec_8hpp" name="UnitVec.hpp" local="no" imported="no">playrho/d2/UnitVec.hpp</includes>
    <class kind="struct">playrho::d2::RopeJointConf</class>
    <class kind="struct">playrho::detail::TypeInfo&lt; playrho::d2::RopeJointConf &gt;</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>constexpr AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af3c61329399916ae2b063e6ba94ffb6e</anchor>
      <arglist>(const RopeJointConf &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac7acc7a694d7729620e48300eb157d7b</anchor>
      <arglist>(const RopeJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetMaxLength</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad5cf9d398d3e370e806a070fdbb8d685</anchor>
      <arglist>(const RopeJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RopeJointConf</type>
      <name>GetRopeJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4bcb4898327bdb354f620110c116558e</anchor>
      <arglist>(const Joint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac30996c0f0d0484ca8c69728ec22a73f</anchor>
      <arglist>(RopeJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af88a635d83573cbd0ec11f17f4526778</anchor>
      <arglist>(const RopeJointConf &amp;lhs, const RopeJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0d485fc6df03e3052d96da519f35585d</anchor>
      <arglist>(const RopeJointConf &amp;lhs, const RopeJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetMaxLength</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aeeffd09d05131a961e0d3bd87f94c889</anchor>
      <arglist>(RopeJointConf &amp;object, Length value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad7f4d500e1470889c5896aefbbc2f2b2</anchor>
      <arglist>(RopeJointConf &amp;, const Length2 &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aae101ea7dfa846ac20307fcd44877614</anchor>
      <arglist>(const RopeJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3c4430c9f2c7e3a8a05652fb51c04898</anchor>
      <arglist>(RopeJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Shape.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>Shape_8hpp.html</filename>
    <includes id="InvalidArgument_8hpp" name="InvalidArgument.hpp" local="no" imported="no">playrho/InvalidArgument.hpp</includes>
    <includes id="Filter_8hpp" name="Filter.hpp" local="no" imported="no">playrho/Filter.hpp</includes>
    <includes id="NonNegative_8hpp" name="NonNegative.hpp" local="no" imported="no">playrho/NonNegative.hpp</includes>
    <includes id="TypeInfo_8hpp" name="TypeInfo.hpp" local="no" imported="no">playrho/TypeInfo.hpp</includes>
    <includes id="DistanceProxy_8hpp" name="DistanceProxy.hpp" local="no" imported="no">playrho/d2/DistanceProxy.hpp</includes>
    <includes id="MassData_8hpp" name="MassData.hpp" local="no" imported="no">playrho/d2/MassData.hpp</includes>
    <includes id="d2_2Math_8hpp" name="Math.hpp" local="no" imported="no">playrho/d2/Math.hpp</includes>
    <includes id="ShapeConcept_8hpp" name="ShapeConcept.hpp" local="no" imported="no">playrho/d2/detail/ShapeConcept.hpp</includes>
    <includes id="ShapeModel_8hpp" name="ShapeModel.hpp" local="no" imported="no">playrho/d2/detail/ShapeModel.hpp</includes>
    <class kind="class">playrho::d2::Shape</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>DistanceProxy</type>
      <name>GetChild</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af3e0b1a42f4c103d313a46942536b2ba</anchor>
      <arglist>(const Shape &amp;shape, ChildCounter index)</arglist>
    </member>
    <member kind="function">
      <type>DistanceProxy</type>
      <name>GetChild</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0025ba197461f8876cda9c97b5ca0364</anchor>
      <arglist>(Shape &amp;&amp;shape, ChildCounter index)=delete</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetChildCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a84eab47d880f50ed7b191c2bce198d00</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>GetData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9d716987feab31bac7d07bb19cb89599</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; AreaDensity &gt;</type>
      <name>GetDensity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1e3ed738b9082f9bfd3358a19d9aa97d</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Filter</type>
      <name>GetFilter</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2af48effcd34bfea6f2622ad0b525c31</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegativeFF&lt; Real &gt;</type>
      <name>GetFriction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1e78385069dd9f0bb162bf17051a0706</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a00465050cc83944a3873c9bfe48a7392</anchor>
      <arglist>(const Shape &amp;shape)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetRestitution</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a73fdd9b13d08d04db4ad170afac115b7</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TypeID</type>
      <name>GetType</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a175816624556bf32f41f1c3b248495de</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="function">
      <type>VertexCounter</type>
      <name>GetVertexCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad164dccb6b5dcf68fbcd9e7918f17eec</anchor>
      <arglist>(const Shape &amp;shape, ChildCounter index)</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2b940ecf05bfbf8ae3910cacbc7e2264</anchor>
      <arglist>(const Shape &amp;shape, ChildCounter idx)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSensor</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a758f0ba36affe9a3aba066285cf710d7</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a531eec1b236203c64a6618a44c94eb59</anchor>
      <arglist>(const Shape &amp;lhs, const Shape &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a511146553469b7cac8c01113002718e6</anchor>
      <arglist>(const Shape &amp;lhs, const Shape &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Rotate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab0b1aceac8f4dcb138ebc97c17ea3e88</anchor>
      <arglist>(Shape &amp;shape, const UnitVec &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Scale</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac37a9ab36e66240e0a2af9ce84848b13</anchor>
      <arglist>(Shape &amp;shape, const Vec2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDensity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7dd9e271fe95b29479d8c848a752e617</anchor>
      <arglist>(Shape &amp;shape, NonNegative&lt; AreaDensity &gt; value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFilter</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac3ffdf7e6c840eb894becc90325bf147</anchor>
      <arglist>(Shape &amp;shape, Filter value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFriction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a66a134067ed894aa7c399662d92a0726</anchor>
      <arglist>(Shape &amp;shape, NonNegative&lt; Real &gt; value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRestitution</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a50475f29c614ca0678d3d6d8e67f2ef8</anchor>
      <arglist>(Shape &amp;shape, Real value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSensor</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae3786c04d20cbf2f9b06d2a1d07032d8</anchor>
      <arglist>(Shape &amp;shape, bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aee078d02eba554f515d90f765673ce21</anchor>
      <arglist>(Shape &amp;shape, ChildCounter idx, NonNegative&lt; Length &gt; value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ShouldCollide</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a252601c955ff120821c067c7fd9ebf6c</anchor>
      <arglist>(const Shape &amp;a, const Shape &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestPoint</name>
      <anchorfile>group__TestPointGroup.html</anchorfile>
      <anchor>ga1e3631fa4bdf10ca60c8f52e8d49762e</anchor>
      <arglist>(const Shape &amp;shape, const Length2 &amp;point) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Translate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abc9efda4c138189178045d93806cbfbc</anchor>
      <arglist>(Shape &amp;shape, const Length2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>TypeCast</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2552f9d7b9b8d2c5cf4b5ef71140b709</anchor>
      <arglist>(const Shape &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>std::add_pointer_t&lt; std::add_const_t&lt; T &gt; &gt;</type>
      <name>TypeCast</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a732fa5d1da2c5d3292bdbcfaab4f971d</anchor>
      <arglist>(const Shape *value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ShapeConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>ShapeConf_8hpp.html</filename>
    <includes id="Filter_8hpp" name="Filter.hpp" local="no" imported="no">playrho/Filter.hpp</includes>
    <includes id="Finite_8hpp" name="Finite.hpp" local="no" imported="no">playrho/Finite.hpp</includes>
    <includes id="NonNegative_8hpp" name="NonNegative.hpp" local="no" imported="no">playrho/NonNegative.hpp</includes>
    <includes id="Real_8hpp" name="Real.hpp" local="no" imported="no">playrho/Real.hpp</includes>
    <includes id="Units_8hpp" name="Units.hpp" local="no" imported="no">playrho/Units.hpp</includes>
    <class kind="struct">playrho::d2::BaseShapeConf</class>
    <class kind="struct">playrho::d2::ShapeBuilder</class>
    <class kind="struct">playrho::d2::ShapeConf</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>constexpr NonNegative&lt; AreaDensity &gt;</type>
      <name>GetDensity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adb24a76e3c29dd4f1f5bc283cfef1ef1</anchor>
      <arglist>(const BaseShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Filter</type>
      <name>GetFilter</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0b7acd1eb614ad8608479fc442dcfbc8</anchor>
      <arglist>(const BaseShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr NonNegativeFF&lt; Real &gt;</type>
      <name>GetFriction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6a4bdfe31fb64399135f589df7f27e35</anchor>
      <arglist>(const BaseShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Finite&lt; Real &gt;</type>
      <name>GetRestitution</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6727ddfbceb514f2dc7bfe7bebf3fd48</anchor>
      <arglist>(const BaseShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsSensor</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4705f71d8ddb1ceae9eb2a23b9874fd6</anchor>
      <arglist>(const BaseShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDensity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a568348f551f30b873f93160146ff8640</anchor>
      <arglist>(BaseShapeConf &amp;arg, NonNegative&lt; AreaDensity &gt; value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFilter</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a92586c39f279062c63dd0a9ff0a00c3c</anchor>
      <arglist>(BaseShapeConf &amp;arg, Filter value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFriction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa6aced677219438736a3a79c4470b87c</anchor>
      <arglist>(BaseShapeConf &amp;arg, NonNegative&lt; Real &gt; value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRestitution</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0a2e260faa2ee0dd76e3a1bd013870e5</anchor>
      <arglist>(BaseShapeConf &amp;arg, Real value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSensor</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4aa17670b395d1f9fab126570a2d4f6e</anchor>
      <arglist>(BaseShapeConf &amp;arg, bool value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Simplex.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>Simplex_8hpp.html</filename>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">playrho/Math.hpp</includes>
    <includes id="detail_2Templates_8hpp" name="Templates.hpp" local="no" imported="no">playrho/detail/Templates.hpp</includes>
    <includes id="ArrayList_8hpp" name="ArrayList.hpp" local="no" imported="no">playrho/ArrayList.hpp</includes>
    <includes id="Real_8hpp" name="Real.hpp" local="no" imported="no">playrho/Real.hpp</includes>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">playrho/Settings.hpp</includes>
    <includes id="Units_8hpp" name="Units.hpp" local="no" imported="no">playrho/Units.hpp</includes>
    <includes id="Vector2_8hpp" name="Vector2.hpp" local="no" imported="no">playrho/Vector2.hpp</includes>
    <includes id="SimplexEdge_8hpp" name="SimplexEdge.hpp" local="no" imported="no">playrho/d2/SimplexEdge.hpp</includes>
    <class kind="struct">playrho::d2::Simplex::Cache</class>
    <class kind="class">playrho::d2::Simplex</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="typedef">
      <type>ArrayList&lt; SimplexEdge, MaxSimplexEdges, std::remove_const_t&lt; decltype(MaxSimplexEdges)&gt; &gt;</type>
      <name>SimplexEdges</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a26b81a15ce5270a9e255ab52602964f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>CalcSearchDirection</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8eafa8c052954d863e81d00251d51194</anchor>
      <arglist>(const SimplexEdges &amp;simplexEdges) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length2</type>
      <name>GetClosestPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af47d53841069d289b59d6de41551f45c</anchor>
      <arglist>(const Simplex &amp;simplex)</arglist>
    </member>
    <member kind="function">
      <type>IndexPair3</type>
      <name>GetIndexPairs</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a70613779e152f647af4f80dce352d83c</anchor>
      <arglist>(const SimplexEdges &amp;collection) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetScaledDelta</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9695b1513472b0c245d4f98b97090efd</anchor>
      <arglist>(const Simplex &amp;simplex, Simplex::size_type index)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SimplexEdge.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>SimplexEdge_8hpp.html</filename>
    <includes id="d2_2Math_8hpp" name="Math.hpp" local="no" imported="no">playrho/d2/Math.hpp</includes>
    <class kind="class">playrho::d2::SimplexEdge</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>constexpr Length2</type>
      <name>GetPointDelta</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aec59914613f2974127f04b9eca11ae27</anchor>
      <arglist>(const SimplexEdge &amp;sv) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af4e2940f5d62d022276ae74c8b8eab7c</anchor>
      <arglist>(const SimplexEdge &amp;lhs, const SimplexEdge &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa893e8793d5802697a38d73e4939834d</anchor>
      <arglist>(const SimplexEdge &amp;lhs, const SimplexEdge &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sweep.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>Sweep_8hpp.html</filename>
    <includes id="Real_8hpp" name="Real.hpp" local="no" imported="no">playrho/Real.hpp</includes>
    <includes id="Templates_8hpp" name="Templates.hpp" local="no" imported="no">playrho/Templates.hpp</includes>
    <includes id="Units_8hpp" name="Units.hpp" local="no" imported="no">playrho/Units.hpp</includes>
    <includes id="Vector2_8hpp" name="Vector2.hpp" local="no" imported="no">playrho/Vector2.hpp</includes>
    <includes id="ZeroToUnderOne_8hpp" name="ZeroToUnderOne.hpp" local="no" imported="no">playrho/ZeroToUnderOne.hpp</includes>
    <includes id="Position_8hpp" name="Position.hpp" local="no" imported="no">playrho/d2/Position.hpp</includes>
    <class kind="struct">playrho::d2::Sweep</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>Sweep</type>
      <name>Advance0</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9f1f1a039d714b800386dea3f97f3ed3</anchor>
      <arglist>(const Sweep &amp;sweep, ZeroToUnderOneFF&lt; Real &gt; alpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4eebf111910b8b036f4caca5e01fcab3</anchor>
      <arglist>(const d2::Sweep &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af0f08a3cbef074f5f78272c205967888</anchor>
      <arglist>(const Sweep &amp;lhs, const Sweep &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af317b3462727e3832e11d157b7e0b7b4</anchor>
      <arglist>(const Sweep &amp;lhs, const Sweep &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLocalCenter</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac4ef7260bbcab43966bde5b1e8b8a284</anchor>
      <arglist>(Sweep &amp;sweep, const Length2 &amp;value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TargetJointConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>TargetJointConf_8hpp.html</filename>
    <includes id="Span_8hpp" name="Span.hpp" local="no" imported="no">playrho/Span.hpp</includes>
    <includes id="TypeInfo_8hpp" name="TypeInfo.hpp" local="no" imported="no">playrho/TypeInfo.hpp</includes>
    <includes id="JointConf_8hpp" name="JointConf.hpp" local="no" imported="no">playrho/d2/JointConf.hpp</includes>
    <includes id="d2_2Math_8hpp" name="Math.hpp" local="no" imported="no">playrho/d2/Math.hpp</includes>
    <class kind="struct">playrho::d2::TargetJointConf</class>
    <class kind="struct">playrho::detail::TypeInfo&lt; playrho::d2::TargetJointConf &gt;</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>constexpr AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afa5cbad1175b924fab7ca3259d3ba8a9</anchor>
      <arglist>(const TargetJointConf &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Mass22</type>
      <name>GetEffectiveMassMatrix</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1bc864f4ad3d6622d4c9444cfcb90680</anchor>
      <arglist>(const TargetJointConf &amp;object, const BodyConstraint &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7ec73e83dfde52a4e59c7ef6099e5073</anchor>
      <arglist>(const TargetJointConf &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLocalAnchorA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a742f3193b44e8038c6e21455f2cc3630</anchor>
      <arglist>(const TargetJointConf &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetMaxForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5433a140e014287406113e1ce6508dae</anchor>
      <arglist>(const TargetJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetTarget</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a643e49fe049c3befd1f928e4d732493c</anchor>
      <arglist>(const TargetJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TargetJointConf</type>
      <name>GetTargetJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a881239528e40fd0f59f8ef0b6c08994f</anchor>
      <arglist>(const Joint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a99ba8add0250f7782622a97b1a2ee209</anchor>
      <arglist>(TargetJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2264176e0da3eefdb8e592dd1f931355</anchor>
      <arglist>(const TargetJointConf &amp;lhs, const TargetJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a29e3173ac86b6e5186a733708f38a42d</anchor>
      <arglist>(const TargetJointConf &amp;lhs, const TargetJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetDampingRatio</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a93ccadc0666446729427c72fbdac4ad4</anchor>
      <arglist>(TargetJointConf &amp;object, Real value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetFrequency</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac9971494480e00e4c3fa99cba906339e</anchor>
      <arglist>(TargetJointConf &amp;object, NonNegative&lt; Frequency &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetMaxForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a26488bda71d5ddb9df78975b2f37cb03</anchor>
      <arglist>(TargetJointConf &amp;object, NonNegative&lt; Force &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetTarget</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af3c4565c108e29e4d157795b643ba1b6</anchor>
      <arglist>(TargetJointConf &amp;object, const Length2 &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9d14d5505620acfa85582ea26fa733eb</anchor>
      <arglist>(TargetJointConf &amp;object, const Length2 &amp;newOrigin)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac6a35a91f26dd7abc9fa09dd1792f677</anchor>
      <arglist>(const TargetJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4427e1dc0fa606538d154d1eaadc3791</anchor>
      <arglist>(TargetJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Transformation.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>Transformation_8hpp.html</filename>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">playrho/Settings.hpp</includes>
    <includes id="Vector2_8hpp" name="Vector2.hpp" local="no" imported="no">playrho/Vector2.hpp</includes>
    <includes id="UnitVec_8hpp" name="UnitVec.hpp" local="no" imported="no">playrho/d2/UnitVec.hpp</includes>
    <class kind="struct">playrho::d2::Transformation</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>constexpr UnitVec</type>
      <name>GetDirection</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a850723b278d7e003b0be5f2c0f7435f1</anchor>
      <arglist>(const Transformation &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length2</type>
      <name>GetLocation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad3978702132a5caf87ad3cbec808b116</anchor>
      <arglist>(const Transformation &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>abdecea4e39775053f705ca921b5080fe</anchor>
      <arglist>(const d2::Transformation &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac100cc2e77031bd058367006ddd2ebe1</anchor>
      <arglist>(const Transformation &amp;lhs, const Transformation &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9f366fc4f9a298d3dded719b628a9933</anchor>
      <arglist>(const Transformation &amp;lhs, const Transformation &amp;rhs) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Transform_identity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac330e66ae1b4cbbfd851406256b18972</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UnitVec.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>UnitVec_8hpp.html</filename>
    <includes id="InvalidArgument_8hpp" name="InvalidArgument.hpp" local="no" imported="no">playrho/InvalidArgument.hpp</includes>
    <includes id="Real_8hpp" name="Real.hpp" local="no" imported="no">playrho/Real.hpp</includes>
    <includes id="RealConstants_8hpp" name="RealConstants.hpp" local="no" imported="no">playrho/RealConstants.hpp</includes>
    <includes id="Templates_8hpp" name="Templates.hpp" local="no" imported="no">playrho/Templates.hpp</includes>
    <includes id="Units_8hpp" name="Units.hpp" local="no" imported="no">playrho/Units.hpp</includes>
    <class kind="class">std::tuple_element&lt; I, playrho::d2::UnitVec &gt;</class>
    <class kind="class">std::tuple_size&lt; playrho::d2::UnitVec &gt;</class>
    <class kind="class">playrho::d2::UnitVec</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>d2::UnitVec</type>
      <name>abs</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac862a8609b82126d0683ecb38a498087</anchor>
      <arglist>(const d2::UnitVec &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec::value_type</type>
      <name>get</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a885021be21642c4a65d5729a0f0cb8b3</anchor>
      <arglist>(const UnitVec &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec::value_type</type>
      <name>get&lt; 0 &gt;</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a449f8d62d52b980177ca57f8766a2159</anchor>
      <arglist>(const UnitVec &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec::value_type</type>
      <name>get&lt; 1 &gt;</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a93e4609be8116731e3d32f6e4206bd49</anchor>
      <arglist>(const UnitVec &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec</type>
      <name>GetFwdPerpendicular</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afea67a580dfedfa9a2a5efd40a636f18</anchor>
      <arglist>(const UnitVec &amp;vector) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec</type>
      <name>GetRevPerpendicular</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2e109190d59d6d1a154094fb566547b3</anchor>
      <arglist>(const UnitVec &amp;vector) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetX</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adab7becf1945a89fa8459e8c2853478a</anchor>
      <arglist>(const UnitVec &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec</type>
      <name>GetXAxis</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a60d775fd7f677ce835dc086bf372bd95</anchor>
      <arglist>(const UnitVec &amp;rot) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetY</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a23717005f46c309d31dfbb9f0e1b9daf</anchor>
      <arglist>(const UnitVec &amp;value) -&gt; decltype(get&lt; 1 &gt;(value))</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec</type>
      <name>GetYAxis</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a88ce203fb25392d44f80d66a588ff3a0</anchor>
      <arglist>(const UnitVec &amp;rot) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec</type>
      <name>InverseRotate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0aaf238b97bd4c64a0be19bc2c4a98b1</anchor>
      <arglist>(const UnitVec &amp;vector, const UnitVec &amp;angle) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a5351f2762c5c98b723679795e0a79287</anchor>
      <arglist>(const d2::UnitVec &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a42c4215f528a7440dd54829e0ade57d8</anchor>
      <arglist>(const UnitVec &amp;a, const UnitVec &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4f49bd881fdc6418565529a072b91d54</anchor>
      <arglist>(::std::ostream &amp;os, const UnitVec &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adfa134c88da67d566b3881a9792afd5d</anchor>
      <arglist>(const UnitVec &amp;a, const UnitVec &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec</type>
      <name>Rotate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a91765420d707cd5cadc2feac5a8d6c03</anchor>
      <arglist>(const UnitVec &amp;vector, const UnitVec &amp;angle) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Velocity.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>Velocity_8hpp.html</filename>
    <includes id="Real_8hpp" name="Real.hpp" local="no" imported="no">playrho/Real.hpp</includes>
    <includes id="Templates_8hpp" name="Templates.hpp" local="no" imported="no">playrho/Templates.hpp</includes>
    <includes id="Units_8hpp" name="Units.hpp" local="no" imported="no">playrho/Units.hpp</includes>
    <includes id="Vector2_8hpp" name="Vector2.hpp" local="no" imported="no">playrho/Vector2.hpp</includes>
    <class kind="struct">playrho::d2::Velocity</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="typedef">
      <type>std::pair&lt; Velocity, Velocity &gt;</type>
      <name>VelocityPair</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa577189e0996ba8d7897fa12b80726c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Velocity</type>
      <name>Cap</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a92a5c879d39bc3aadbf6d19ae5104b07</anchor>
      <arglist>(Velocity velocity, Time h, const MovementConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a904477c2aa4c83f49b1c55f393bd79d2</anchor>
      <arglist>(const d2::Velocity &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a50aa6c2021393ced745d056c34b3bc07</anchor>
      <arglist>(const Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a285d8d7bdef58a4c7210516b1060beef</anchor>
      <arglist>(const Real lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5d52ed09352bfd1dd80dc6b138a19f55</anchor>
      <arglist>(const Velocity &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity &amp;</type>
      <name>operator*=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7083f8551c8713a94d38f614a7ebc3b5</anchor>
      <arglist>(Velocity &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7608d9d4b5ffcc571a17bacf9faa411e</anchor>
      <arglist>(const Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acf1a262569fd1d300ef359200d514d6a</anchor>
      <arglist>(const Velocity &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity &amp;</type>
      <name>operator+=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3be07a7714bf76d380af60fa8ef623d3</anchor>
      <arglist>(Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab2f3370383aaf9a8443cacef7841c5a0</anchor>
      <arglist>(const Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab9cbc07fb71929600cae9ef2f69e35ac</anchor>
      <arglist>(const Velocity &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity &amp;</type>
      <name>operator-=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad2577d7502ee2442b81d0e6570c00d6f</anchor>
      <arglist>(Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity</type>
      <name>operator/</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aec5f4967a3c7e58ccf6c9fb4aafa90a1</anchor>
      <arglist>(const Velocity &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity &amp;</type>
      <name>operator/=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afafe86dc357999a8933a71f73dcce818</anchor>
      <arglist>(Velocity &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afe4f2bcd98877c4562293dfe2dbcfa8b</anchor>
      <arglist>(const Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VelocityConstraint.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>VelocityConstraint_8hpp.html</filename>
    <includes id="BodyID_8hpp" name="BodyID.hpp" local="no" imported="no">playrho/BodyID.hpp</includes>
    <includes id="Matrix_8hpp" name="Matrix.hpp" local="no" imported="no">playrho/Matrix.hpp</includes>
    <includes id="Real_8hpp" name="Real.hpp" local="no" imported="no">playrho/Real.hpp</includes>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">playrho/Settings.hpp</includes>
    <includes id="Span_8hpp" name="Span.hpp" local="no" imported="no">playrho/Span.hpp</includes>
    <includes id="Units_8hpp" name="Units.hpp" local="no" imported="no">playrho/Units.hpp</includes>
    <includes id="Vector_8hpp" name="Vector.hpp" local="no" imported="no">playrho/Vector.hpp</includes>
    <includes id="Vector2_8hpp" name="Vector2.hpp" local="no" imported="no">playrho/Vector2.hpp</includes>
    <includes id="Vector3_8hpp" name="Vector3.hpp" local="no" imported="no">playrho/Vector3.hpp</includes>
    <includes id="BodyConstraint_8hpp" name="BodyConstraint.hpp" local="no" imported="no">playrho/d2/BodyConstraint.hpp</includes>
    <includes id="UnitVec_8hpp" name="UnitVec.hpp" local="no" imported="no">playrho/d2/UnitVec.hpp</includes>
    <class kind="struct">playrho::d2::VelocityConstraint::Conf</class>
    <class kind="struct">playrho::d2::VelocityConstraint::Point</class>
    <class kind="class">playrho::d2::VelocityConstraint</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetNormal</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a505e0ba1aa4e4cdef90f4726d8f8c866</anchor>
      <arglist>(const VelocityConstraint &amp;vc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Momentum</type>
      <name>GetNormalImpulseAtPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a238cff049e361d27dcb889d50ea67613</anchor>
      <arglist>(const VelocityConstraint &amp;vc, VelocityConstraint::size_type index)</arglist>
    </member>
    <member kind="function">
      <type>Momentum2</type>
      <name>GetNormalImpulses</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4145b0ae4d099402770893bffc3ed4aa</anchor>
      <arglist>(const VelocityConstraint &amp;vc)</arglist>
    </member>
    <member kind="function">
      <type>Mass</type>
      <name>GetNormalMassAtPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aaf5dd1d8868baa0e0cea2cf19b39cb95</anchor>
      <arglist>(const VelocityConstraint &amp;vc, VelocityConstraint::size_type index)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetPointRelPosA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a68cc03f13897094111403a1ac4a049c8</anchor>
      <arglist>(const VelocityConstraint &amp;vc, VelocityConstraint::size_type index)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetPointRelPosB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6ee37ce310f1b1c648d9839a484c029a</anchor>
      <arglist>(const VelocityConstraint &amp;vc, VelocityConstraint::size_type index)</arglist>
    </member>
    <member kind="function">
      <type>VelocityConstraint::Conf</type>
      <name>GetRegVelocityConstraintConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3be2a456143f7f1db48944c54ece5f7d</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetTangent</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a12eb87f33057fe3f442b0ec676377957</anchor>
      <arglist>(const VelocityConstraint &amp;vc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Momentum</type>
      <name>GetTangentImpulseAtPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0b3e102432766123da35ec35f806d6f8</anchor>
      <arglist>(const VelocityConstraint &amp;vc, VelocityConstraint::size_type index)</arglist>
    </member>
    <member kind="function">
      <type>Momentum2</type>
      <name>GetTangentImpulses</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a998e3c3312725cd900878cf71f2cf6e5</anchor>
      <arglist>(const VelocityConstraint &amp;vc)</arglist>
    </member>
    <member kind="function">
      <type>Mass</type>
      <name>GetTangentMassAtPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4e72bcca6e5c6a3f0386f9fa2127f41d</anchor>
      <arglist>(const VelocityConstraint &amp;vc, VelocityConstraint::size_type index)</arglist>
    </member>
    <member kind="function">
      <type>VelocityConstraint::Conf</type>
      <name>GetToiVelocityConstraintConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad85899bcfb7e549fe5739759da490fad</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity</type>
      <name>GetVelocityBiasAtPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad29f5f0f1292fa56396d8ed8cbbd1817</anchor>
      <arglist>(const VelocityConstraint &amp;vc, VelocityConstraint::size_type index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNormalImpulseAtPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae7f7d7dbe5e33cfbb08cdb9190ea8f8b</anchor>
      <arglist>(VelocityConstraint &amp;vc, VelocityConstraint::size_type index, Momentum value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNormalImpulses</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a68f6d6cfb548c58e6fa86f9efb4013d9</anchor>
      <arglist>(VelocityConstraint &amp;vc, const Momentum2 &amp;impulses)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTangentImpulseAtPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3736992d15f28f25f8e02fc17e5e3e27</anchor>
      <arglist>(VelocityConstraint &amp;vc, VelocityConstraint::size_type index, Momentum value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTangentImpulses</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab1312ca66a29887b4c3cc4b2a3f2dc8b</anchor>
      <arglist>(VelocityConstraint &amp;vc, const Momentum2 &amp;impulses)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VertexSet.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>VertexSet_8hpp.html</filename>
    <includes id="d2_2Math_8hpp" name="Math.hpp" local="no" imported="no">playrho/d2/Math.hpp</includes>
    <class kind="class">playrho::d2::VertexSet</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
  </compound>
  <compound kind="file">
    <name>WeldJointConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>WeldJointConf_8hpp.html</filename>
    <includes id="Span_8hpp" name="Span.hpp" local="no" imported="no">playrho/Span.hpp</includes>
    <includes id="TypeInfo_8hpp" name="TypeInfo.hpp" local="no" imported="no">playrho/TypeInfo.hpp</includes>
    <includes id="JointConf_8hpp" name="JointConf.hpp" local="no" imported="no">playrho/d2/JointConf.hpp</includes>
    <includes id="d2_2Math_8hpp" name="Math.hpp" local="no" imported="no">playrho/d2/Math.hpp</includes>
    <class kind="struct">playrho::detail::TypeInfo&lt; playrho::d2::WeldJointConf &gt;</class>
    <class kind="struct">playrho::d2::WeldJointConf</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>constexpr AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3739f4255fc019f68cd74d5c21867845</anchor>
      <arglist>(const WeldJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2c609024f0b536db041b19c8f8869479</anchor>
      <arglist>(const WeldJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>WeldJointConf</type>
      <name>GetWeldJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8617e3ffbdfb19c9387220bd54ab2816</anchor>
      <arglist>(const Joint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>WeldJointConf</type>
      <name>GetWeldJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ada0462adccf3be8ff8fd1a5912515cce</anchor>
      <arglist>(const World &amp;world, BodyID bodyA, BodyID bodyB, const Length2 &amp;anchor=Length2{})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3beba31fb3519b89d540849dbaf91150</anchor>
      <arglist>(WeldJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3c84131d3c779d955813d70eface1bd9</anchor>
      <arglist>(const WeldJointConf &amp;lhs, const WeldJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ade363e29ce1af1766680bde06e5a8d5c</anchor>
      <arglist>(const WeldJointConf &amp;lhs, const WeldJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetDampingRatio</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a58977ddd709fa03560c34fcb92949f42</anchor>
      <arglist>(WeldJointConf &amp;object, Real value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetFrequency</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acafa97d5359a1791ded4ccbc48a0cfaa</anchor>
      <arglist>(WeldJointConf &amp;object, NonNegative&lt; Frequency &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aeda6621d8761f8343b4b1ed7046d7387</anchor>
      <arglist>(WeldJointConf &amp;, const Length2 &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3d4a5b24405938d56f73ad48a3acd8ad</anchor>
      <arglist>(const WeldJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a19fb7bbc791d835cf7d611d8e736dc46</anchor>
      <arglist>(WeldJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WheelJointConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>WheelJointConf_8hpp.html</filename>
    <includes id="BodyID_8hpp" name="BodyID.hpp" local="no" imported="no">playrho/BodyID.hpp</includes>
    <includes id="NonNegative_8hpp" name="NonNegative.hpp" local="no" imported="no">playrho/NonNegative.hpp</includes>
    <includes id="Real_8hpp" name="Real.hpp" local="no" imported="no">playrho/Real.hpp</includes>
    <includes id="Span_8hpp" name="Span.hpp" local="no" imported="no">playrho/Span.hpp</includes>
    <includes id="Units_8hpp" name="Units.hpp" local="no" imported="no">playrho/Units.hpp</includes>
    <includes id="Vector2_8hpp" name="Vector2.hpp" local="no" imported="no">playrho/Vector2.hpp</includes>
    <includes id="detail_2TypeInfo_8hpp" name="TypeInfo.hpp" local="no" imported="no">playrho/detail/TypeInfo.hpp</includes>
    <includes id="JointConf_8hpp" name="JointConf.hpp" local="no" imported="no">playrho/d2/JointConf.hpp</includes>
    <includes id="d2_2Math_8hpp" name="Math.hpp" local="no" imported="no">playrho/d2/Math.hpp</includes>
    <includes id="UnitVec_8hpp" name="UnitVec.hpp" local="no" imported="no">playrho/d2/UnitVec.hpp</includes>
    <class kind="struct">playrho::detail::TypeInfo&lt; playrho::d2::WheelJointConf &gt;</class>
    <class kind="struct">playrho::d2::WheelJointConf</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetAngularVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a26cbba51ee6306bed9808c6490e1d7e6</anchor>
      <arglist>(const World &amp;world, const WheelJointConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aef25b1a360e19b38a39af5a4b776eceb</anchor>
      <arglist>(const WheelJointConf &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>WheelJointConf</type>
      <name>GetWheelJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a09bee9b2ea071b0d56b092a3c59f08f7</anchor>
      <arglist>(const Joint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>WheelJointConf</type>
      <name>GetWheelJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a794344cb9f0c8c53b362170279bbc505</anchor>
      <arglist>(const World &amp;world, BodyID bodyA, BodyID bodyB, const Length2 &amp;anchor, const UnitVec &amp;axis=UnitVec::GetRight())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3af85da0bf2e50418b415a24e9fcde17</anchor>
      <arglist>(WheelJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a378a180b24295fc6b58fa5385792b26b</anchor>
      <arglist>(const WheelJointConf &amp;lhs, const WheelJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a749db75cd678bd280e02f2d382bbce2a</anchor>
      <arglist>(const WheelJointConf &amp;lhs, const WheelJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetDampingRatio</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae7f1530d1c2de2df859dfae6eb23d141</anchor>
      <arglist>(WheelJointConf &amp;object, Real value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetFrequency</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adcd79908a087d2c25629aa14895bf49c</anchor>
      <arglist>(WheelJointConf &amp;object, NonNegative&lt; Frequency &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetMaxMotorTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7f82a394a8c0f5a020f8647ce0a34d39</anchor>
      <arglist>(WheelJointConf &amp;object, Torque value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af9f2e8564393a81a357767951bf5a80b</anchor>
      <arglist>(WheelJointConf &amp;, const Length2 &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5c228c1e8031955681fbdac786112a40</anchor>
      <arglist>(const WheelJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6b64392b83cc7874dd884cf6f8bd6375</anchor>
      <arglist>(WheelJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>World.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>World_8hpp.html</filename>
    <includes id="BodyID_8hpp" name="BodyID.hpp" local="no" imported="no">playrho/BodyID.hpp</includes>
    <includes id="BodyShapeFunction_8hpp" name="BodyShapeFunction.hpp" local="no" imported="no">playrho/BodyShapeFunction.hpp</includes>
    <includes id="Contact_8hpp" name="Contact.hpp" local="no" imported="no">playrho/Contact.hpp</includes>
    <includes id="ContactFunction_8hpp" name="ContactFunction.hpp" local="no" imported="no">playrho/ContactFunction.hpp</includes>
    <includes id="ContactID_8hpp" name="ContactID.hpp" local="no" imported="no">playrho/ContactID.hpp</includes>
    <includes id="ContactKey_8hpp" name="ContactKey.hpp" local="no" imported="no">playrho/ContactKey.hpp</includes>
    <includes id="Interval_8hpp" name="Interval.hpp" local="no" imported="no">playrho/Interval.hpp</includes>
    <includes id="KeyedContactID_8hpp" name="KeyedContactID.hpp" local="no" imported="no">playrho/KeyedContactID.hpp</includes>
    <includes id="JointFunction_8hpp" name="JointFunction.hpp" local="no" imported="no">playrho/JointFunction.hpp</includes>
    <includes id="JointID_8hpp" name="JointID.hpp" local="no" imported="no">playrho/JointID.hpp</includes>
    <includes id="Positive_8hpp" name="Positive.hpp" local="no" imported="no">playrho/Positive.hpp</includes>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">playrho/Settings.hpp</includes>
    <includes id="ShapeFunction_8hpp" name="ShapeFunction.hpp" local="no" imported="no">playrho/ShapeFunction.hpp</includes>
    <includes id="ShapeID_8hpp" name="ShapeID.hpp" local="no" imported="no">playrho/ShapeID.hpp</includes>
    <includes id="StepConf_8hpp" name="StepConf.hpp" local="no" imported="no">playrho/StepConf.hpp</includes>
    <includes id="StepStats_8hpp" name="StepStats.hpp" local="no" imported="no">playrho/StepStats.hpp</includes>
    <includes id="TypeInfo_8hpp" name="TypeInfo.hpp" local="no" imported="no">playrho/TypeInfo.hpp</includes>
    <includes id="Units_8hpp" name="Units.hpp" local="no" imported="no">playrho/Units.hpp</includes>
    <includes id="Vector2_8hpp" name="Vector2.hpp" local="no" imported="no">playrho/Vector2.hpp</includes>
    <includes id="BodyConf_8hpp" name="BodyConf.hpp" local="no" imported="no">playrho/d2/BodyConf.hpp</includes>
    <includes id="Body_8hpp" name="Body.hpp" local="no" imported="no">playrho/d2/Body.hpp</includes>
    <includes id="ContactImpulsesFunction_8hpp" name="ContactImpulsesFunction.hpp" local="no" imported="no">playrho/d2/ContactImpulsesFunction.hpp</includes>
    <includes id="ContactManifoldFunction_8hpp" name="ContactManifoldFunction.hpp" local="no" imported="no">playrho/d2/ContactManifoldFunction.hpp</includes>
    <includes id="Joint_8hpp" name="Joint.hpp" local="no" imported="no">playrho/d2/Joint.hpp</includes>
    <includes id="Manifold_8hpp" name="Manifold.hpp" local="no" imported="no">playrho/d2/Manifold.hpp</includes>
    <includes id="Shape_8hpp" name="Shape.hpp" local="no" imported="no">playrho/d2/Shape.hpp</includes>
    <includes id="WorldConf_8hpp" name="WorldConf.hpp" local="no" imported="no">playrho/d2/WorldConf.hpp</includes>
    <includes id="WorldConcept_8hpp" name="WorldConcept.hpp" local="no" imported="no">playrho/d2/detail/WorldConcept.hpp</includes>
    <includes id="WorldModel_8hpp" name="WorldModel.hpp" local="no" imported="no">playrho/d2/detail/WorldModel.hpp</includes>
    <class kind="class">playrho::d2::World</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae87aedd0a1a4a5077df893173042fc4c</anchor>
      <arglist>(World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>CreateBody</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9d451d642b4be1c355a908b7c67df344</anchor>
      <arglist>(World &amp;world, const Body &amp;body=Body{}, bool resetMassData=true)</arglist>
    </member>
    <member kind="function">
      <type>JointID</type>
      <name>CreateJoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab62165739ca2e022cf67ce1f5d21b748</anchor>
      <arglist>(World &amp;world, const Joint &amp;def)</arglist>
    </member>
    <member kind="function">
      <type>JointID</type>
      <name>CreateJoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae2daf9b23558da46e3662b2405f97156</anchor>
      <arglist>(World &amp;world, const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>ShapeID</type>
      <name>CreateShape</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4ce8ced3a725faadab6912a877e83e84</anchor>
      <arglist>(World &amp;world, const Shape &amp;def)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>CreateShape</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a305401791bf73ad8008d2640a827c840</anchor>
      <arglist>(World &amp;world, const T &amp;shapeConf) -&gt; decltype(CreateShape(world, Shape{shapeConf}))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Destroy</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a38d693783590ad4f2376b40c76d72421</anchor>
      <arglist>(World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Destroy</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a503b6e581e06acddba228870c9b02ecc</anchor>
      <arglist>(World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Destroy</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af671bead11c1d96c2678aa5514e47980</anchor>
      <arglist>(World &amp;world, ShapeID id)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; BodyID &gt;</type>
      <name>GetBodies</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a78a12867ea3d68d3821a07763190f37f</anchor>
      <arglist>(const World &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; BodyID &gt;</type>
      <name>GetBodiesForProxies</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6be81e1e32495bd3e6de237765831ad4</anchor>
      <arglist>(const World &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>Body</type>
      <name>GetBody</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6eddac09719eac9ed2b5568aa501a5ad</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>GetBodyRange</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a30bdf2cbfb38cda5adb13d4392d58db8</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Contact</type>
      <name>GetContact</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae7500112dec144247372bb0d8144da01</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>ContactCounter</type>
      <name>GetContactCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac7b6c00fbd4fc40a4957bd082c9437b4</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ContactCounter</type>
      <name>GetContactRange</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0e521b2fb4712f8439c4a10db445319f</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; KeyedContactID &gt;</type>
      <name>GetContacts</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa159007c7db3aef168555f6f31c1339f</anchor>
      <arglist>(const World &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::tuple&lt; ContactKey, ContactID &gt; &gt;</type>
      <name>GetContacts</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a63dd046df182bd4b8664bcb0ee0f50e5</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>Frequency</type>
      <name>GetInvDeltaTime</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6f42cba222329b61fa640780dff9d65f</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Joint</type>
      <name>GetJoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2fe778a54a4821fbc2272e4a1709108c</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>JointCounter</type>
      <name>GetJointCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7484e45a19ce38178de17a2f0bfdb519</anchor>
      <arglist>(const World &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>JointCounter</type>
      <name>GetJointRange</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0994cdd14b2f67fe7a014969af6d7a7e</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; JointID &gt;</type>
      <name>GetJoints</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a02359170455e95f3876ce76a1f019cc9</anchor>
      <arglist>(const World &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::pair&lt; BodyID, JointID &gt; &gt;</type>
      <name>GetJoints</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a46d383e6e9a6c7473fdfb4199fa56915</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>Manifold</type>
      <name>GetManifold</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a191eed2d8b3f745e46af7c6696f68a5c</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; pmr::StatsResource::Stats &gt;</type>
      <name>GetResourceStats</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae42faf85c15ca7fd83c575ccb30554f4</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Shape</type>
      <name>GetShape</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acd71793915ccc5c37d3c118ff5745e9e</anchor>
      <arglist>(const World &amp;world, ShapeID id)</arglist>
    </member>
    <member kind="function">
      <type>ShapeCounter</type>
      <name>GetShapeRange</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a917c505a2bf7a77aab1b098e5be801f6</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ShapeID &gt;</type>
      <name>GetShapes</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7feade3e47e5048e8eab9eef13e66fc4</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetSubStepping</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aefd48d7d94be6707b5915991eeb10bd4</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const DynamicTree &amp;</type>
      <name>GetTree</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0ae8db40f173456ea951e5a3425456aa</anchor>
      <arglist>(const World &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>TypeID</type>
      <name>GetType</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a702a1c0c8e91f2563cac325a9220334d</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Interval&lt; Positive&lt; Length &gt; &gt;</type>
      <name>GetVertexRadiusInterval</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af51eca4a1cbd1b9b0d6024218f52db0f</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLocked</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a33795886ef465e14b67184086d935eca</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsStepComplete</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6b939d4c41803a36fb4e725c725be6ec</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a47e9c59a6cb338c3efe5596b516acb6e</anchor>
      <arglist>(const World &amp;lhs, const World &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa6dff1837844ca0252c35b5c5b47b0b8</anchor>
      <arglist>(const World &amp;lhs, const World &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAccelerations</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae23446b68b07e35cff2b642c5573acfe</anchor>
      <arglist>(World &amp;world, F fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBeginContactListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a880cac829986da4266dc3dfc494087b3</anchor>
      <arglist>(World &amp;world, ContactFunction listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBody</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aed0353c7d828c09741e9cef5afcdac27</anchor>
      <arglist>(World &amp;world, BodyID id, const Body &amp;body)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetContact</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a41e7dc075e9d5c06758a13220a9770aa</anchor>
      <arglist>(World &amp;world, ContactID id, const Contact &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDetachListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab2f27f6d0cf885a8aeedff93c7a89e74</anchor>
      <arglist>(World &amp;world, BodyShapeFunction listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEndContactListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acc2df0eb14c5759fff8c99dcfc2f724c</anchor>
      <arglist>(World &amp;world, ContactFunction listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetJoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afbfa66410905c15a49d7bb2994ce0485</anchor>
      <arglist>(World &amp;world, JointID id, const Joint &amp;def)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetJoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac07ce291e8ce59c988ee4bafca890059</anchor>
      <arglist>(World &amp;world, JointID id, const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetJointDestructionListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a182e738c16bf84f7579af7be2cd26628</anchor>
      <arglist>(World &amp;world, JointFunction listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPostSolveContactListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a18585a140d9ad815d0127e90308218ff</anchor>
      <arglist>(World &amp;world, ContactImpulsesFunction listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPreSolveContactListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aee2466f745bdaf3aa6ce438864d8742b</anchor>
      <arglist>(World &amp;world, ContactManifoldFunction listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetShape</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae1860c7a7f4a5f1fb3095412d25fd12b</anchor>
      <arglist>(World &amp;world, ShapeID, const Shape &amp;def)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetShapeDestructionListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2dc5e1d5b3122d2c37959573eda21c30</anchor>
      <arglist>(World &amp;world, ShapeFunction listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSubStepping</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af9f3ac5da2b016acb04d3e73419b08d9</anchor>
      <arglist>(World &amp;world, bool flag) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a00500c9a4303825cdcbaa80fa78000f6</anchor>
      <arglist>(World &amp;world, const Length2 &amp;newOrigin)</arglist>
    </member>
    <member kind="function">
      <type>StepStats</type>
      <name>Step</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a360c1123ecc81b089d4f5b1a579e3501</anchor>
      <arglist>(World &amp;world, const StepConf &amp;conf=StepConf{})</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>TypeCast</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7493a5895010c14c51c60b3a0a62b0c4</anchor>
      <arglist>(const World &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>std::add_pointer_t&lt; std::add_const_t&lt; T &gt; &gt;</type>
      <name>TypeCast</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a243e8f538484555fb01e735363bd1c3f</anchor>
      <arglist>(const World *value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>TypeCast</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a144d9b00180e9b914d070c7a8fc0a186</anchor>
      <arglist>(World &amp;&amp;value)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>TypeCast</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a188e9f5b3bcd077a6e2ee611cc0b5693</anchor>
      <arglist>(World &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>std::add_pointer_t&lt; T &gt;</type>
      <name>TypeCast</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a41f03a4347ea33b9f5cb8469155e2f93</anchor>
      <arglist>(World *value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WorldBody.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>WorldBody_8hpp.html</filename>
    <includes id="BodyID_8hpp" name="BodyID.hpp" local="no" imported="no">playrho/BodyID.hpp</includes>
    <includes id="BodyType_8hpp" name="BodyType.hpp" local="no" imported="no">playrho/BodyType.hpp</includes>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">playrho/Math.hpp</includes>
    <includes id="NonNegative_8hpp" name="NonNegative.hpp" local="no" imported="no">playrho/NonNegative.hpp</includes>
    <includes id="Real_8hpp" name="Real.hpp" local="no" imported="no">playrho/Real.hpp</includes>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">playrho/Settings.hpp</includes>
    <includes id="ShapeID_8hpp" name="ShapeID.hpp" local="no" imported="no">playrho/ShapeID.hpp</includes>
    <includes id="Units_8hpp" name="Units.hpp" local="no" imported="no">playrho/Units.hpp</includes>
    <includes id="Vector2_8hpp" name="Vector2.hpp" local="no" imported="no">playrho/Vector2.hpp</includes>
    <includes id="Acceleration_8hpp" name="Acceleration.hpp" local="no" imported="no">playrho/d2/Acceleration.hpp</includes>
    <includes id="MassData_8hpp" name="MassData.hpp" local="no" imported="no">playrho/d2/MassData.hpp</includes>
    <includes id="d2_2Math_8hpp" name="Math.hpp" local="no" imported="no">playrho/d2/Math.hpp</includes>
    <includes id="Position_8hpp" name="Position.hpp" local="no" imported="no">playrho/d2/Position.hpp</includes>
    <includes id="Transformation_8hpp" name="Transformation.hpp" local="no" imported="no">playrho/d2/Transformation.hpp</includes>
    <includes id="UnitVec_8hpp" name="UnitVec.hpp" local="no" imported="no">playrho/d2/UnitVec.hpp</includes>
    <includes id="Velocity_8hpp" name="Velocity.hpp" local="no" imported="no">playrho/d2/Velocity.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>void</type>
      <name>ApplyAngularImpulse</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac1fdf2a580376eb10458b1025b9fea7d</anchor>
      <arglist>(World &amp;world, BodyID id, AngularMomentum impulse)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a210cc8d0a8072f34ce6875605c8309ec</anchor>
      <arglist>(World &amp;world, BodyID id, const Force2 &amp;force, const Length2 &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyForceToCenter</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac7a5e9073194a89035ad2f060435542b</anchor>
      <arglist>(World &amp;world, BodyID id, const Force2 &amp;force)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyLinearImpulse</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa9baf89bccc6de73ac64876157520a0b</anchor>
      <arglist>(World &amp;world, BodyID id, const Momentum2 &amp;impulse, const Length2 &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a970e0811c7166057450106756442a9b7</anchor>
      <arglist>(World &amp;world, BodyID id, Torque torque)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Attach</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a34a65c18db1c7daa25bb41c5c43671da</anchor>
      <arglist>(World &amp;world, BodyID id, const Shape &amp;shape, bool resetMassData=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Attach</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4957e6f46a121ed3a8556301baa68d84</anchor>
      <arglist>(World &amp;world, BodyID id, ShapeID shapeID, bool resetMassData=true)</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>Awaken</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7d6dc1cf5798915c8782b55a9c190a95</anchor>
      <arglist>(World &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Awaken</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4968cdffa51be385b42f978f3226901d</anchor>
      <arglist>(World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>Acceleration</type>
      <name>CalcGravitationalAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8be54a280b6e7d4af783fb33ce00ede4</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearForces</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1af6a33d54c562234a4ba6f70f03cc62</anchor>
      <arglist>(World &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>ComputeMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9737040be9601c29cd9a3e3ee5a0b7ce</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>CreateBody</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6f804d53e422e2acbc45443c26c3e20e</anchor>
      <arglist>(World &amp;world, const BodyConf &amp;def, bool resetMassData=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Detach</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4dcf1092640934b376e09bb8ba6679f5</anchor>
      <arglist>(World &amp;world, BodyID id, bool resetMassData=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Detach</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a360a1facb140358f7df6160beded7918</anchor>
      <arglist>(World &amp;world, BodyID id, ShapeID shapeID, bool resetMassData=true)</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>FindClosestBody</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a79b87dd5723bbca53647199735376788</anchor>
      <arglist>(const World &amp;world, const Length2 &amp;location)</arglist>
    </member>
    <member kind="function">
      <type>Acceleration</type>
      <name>GetAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a349255e3e102807d3271788b753ec4a1</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngle</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a960d46a2aebfa5fdd2c84deaecf72d97</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>AngularAcceleration</type>
      <name>GetAngularAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a82d0d7b3fee1fa94eebf775f5a733c3a</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>Frequency</type>
      <name>GetAngularDamping</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4431c1a715e8bf4bccf785ba28bcad2a</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetAngularVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a116c82c48643c1ef6199d27e9b9dd882</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>GetAwakeCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab2ab9325a9628489049f16f50f1004b8</anchor>
      <arglist>(const World &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>GetBodyCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a171edc74ab3a2a7f742cb84fc9f5179b</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Force2</type>
      <name>GetCentripetalForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a73e45567d84fa1cee2c5b44ac90d48df</anchor>
      <arglist>(const World &amp;world, BodyID id, const Length2 &amp;axis)</arglist>
    </member>
    <member kind="function">
      <type>InvMass</type>
      <name>GetInvMass</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a387f5afc43f72963dfed787d73d6f710</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>InvRotInertia</type>
      <name>GetInvRotInertia</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac4273178a15531c968b0f0523f934c02</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>LinearAcceleration2</type>
      <name>GetLinearAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5d3238160010427c10aabe15d0f7e5c8</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>Frequency</type>
      <name>GetLinearDamping</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6fcd3073d408b707765b005046171c38</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity2</type>
      <name>GetLinearVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afb257e46e441021d64884e95c400fa0f</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalCenter</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aea0ce2fd155103bc574acd4721711b60</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac93113a8f2585e325504a6b56b85329e</anchor>
      <arglist>(const World &amp;world, BodyID id, const Length2 &amp;worldPoint)</arglist>
    </member>
    <member kind="function">
      <type>RotInertia</type>
      <name>GetLocalRotInertia</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad374df7cc8d1a5a9a186e0ae8a7c8cb3</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetLocalVector</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae06bc4d6dc0dd90c8be5bb0227710c33</anchor>
      <arglist>(const World &amp;world, BodyID body, const UnitVec &amp;uv)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aabf27f5cfd9092be041a781d24cfa9a1</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>Mass</type>
      <name>GetMass</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad51a22660fa68bff534e3ae5bbcaba38</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a873904ef02cab072a393ef4554c17ea3</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>GetPosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9fe7fe17864539ef49018ae954c9e8b8</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>RotInertia</type>
      <name>GetRotInertia</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8cc24a20ec1f33d8e51baf8bc435406a</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>ShapeCounter</type>
      <name>GetShapeCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7fccfcf3a3ce2a40c9b419dc842405e6</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>Transformation</type>
      <name>GetTransformation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a119217120ee832be062e644e69f81f3f</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>BodyType</type>
      <name>GetType</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a07b6032c68b1c5dee9a154bce7ada73b</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>Velocity</type>
      <name>GetVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a145ecfa14ac3d146d7f442bf2d539663</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetWorldCenter</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a512537a11ee3092c6e4b92b75775d791</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>GetWorldIndex</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a996363f01d1e5541587e6fb1548a946e</anchor>
      <arglist>(const World &amp;, BodyID id) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetWorldPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2c7b440f52475ea8487d8f14898f232a</anchor>
      <arglist>(const World &amp;world, BodyID id, const Length2 &amp;localPoint)</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetWorldVector</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>accaf3b08287d4bc8e5e5849d5b7278a8</anchor>
      <arglist>(const World &amp;world, BodyID id, const UnitVec &amp;localVector)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAccelerable</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aad7fe73cb5cb6fa0d4751b75321c74a4</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAwake</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abed580c38bd00b1d1fd4630a6ced6455</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af9d96732535ab2bf54f893a5f303aa1f</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsFixedRotation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a093a89e483a95856f09ffc708c01da40</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsImpenetrable</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1feac67043e5c5bc7b03346152b54a18</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMassDataDirty</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a165e32c9934fc211bf795177e6d4a1b8</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSleepingAllowed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a010d3e8e537c49f185c1d7596c4f5d95</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSpeedable</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6a717b9d04c75204f920ffdd2a328b65</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abcc0106fc9f817be879a12eacf51d7c4</anchor>
      <arglist>(World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RotateAboutLocalPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab025fcf3b6ec8d854b6733553ab761eb</anchor>
      <arglist>(World &amp;world, BodyID id, Angle amount, const Length2 &amp;localPoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RotateAboutWorldPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a864d5a471e5f374e2c64597d4f365905</anchor>
      <arglist>(World &amp;world, BodyID id, Angle amount, const Length2 &amp;worldPoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa54209d9914dc6b28199d6a5b61ec65d</anchor>
      <arglist>(World &amp;world, BodyID id, AngularAcceleration value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a90c725278eed08fcbd5be9b3c84fccda</anchor>
      <arglist>(World &amp;world, BodyID id, const Acceleration &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4081d3673c39c222a55160ebdc927e70</anchor>
      <arglist>(World &amp;world, BodyID id, const LinearAcceleration2 &amp;linear, AngularAcceleration angular)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9cd44a40a868bd6d0310d2d3c2dc459a</anchor>
      <arglist>(World &amp;world, BodyID id, const LinearAcceleration2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAccelerations</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1edccefc8d2c0098aba63be3b3867bd8</anchor>
      <arglist>(World &amp;world, const Acceleration &amp;acceleration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAccelerations</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8d9b3c878827b84738f2f11fa0c63382</anchor>
      <arglist>(World &amp;world, const LinearAcceleration2 &amp;acceleration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngle</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3c4cbd32001fd7d3f41a355e826c0943</anchor>
      <arglist>(World &amp;world, BodyID id, Angle value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngularDamping</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad49fab241f156095a3f67bec13b77e13</anchor>
      <arglist>(World &amp;world, BodyID id, NonNegative&lt; Frequency &gt; angularDamping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAwake</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a518c4ace07672ab660d3b06d19119e9b</anchor>
      <arglist>(World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2931ac0be705378c3756ae6bace58719</anchor>
      <arglist>(World &amp;world, BodyID id, bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFixedRotation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6547268e83b5a3997d4a0547a0d666a4</anchor>
      <arglist>(World &amp;world, BodyID id, bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a39b7e0d452a14fb2845064c471f90e95</anchor>
      <arglist>(World &amp;world, BodyID id, const Force2 &amp;force, const Length2 &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetImpenetrable</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a029210d59bda7ebb8bdf23aab8c51097</anchor>
      <arglist>(World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetImpenetrable</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adb8a3d49c66601ec5953d19714aa9759</anchor>
      <arglist>(World &amp;world, BodyID id, bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLinearDamping</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a903d8c1171dcef65e4d1577feba1d94d</anchor>
      <arglist>(World &amp;world, BodyID id, NonNegative&lt; Frequency &gt; linearDamping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLocation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4e28d0cd6793d71a03ec47ded844e29c</anchor>
      <arglist>(World &amp;world, BodyID id, const Length2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af8092e3e0fa0591f0941aca0829f2c60</anchor>
      <arglist>(World &amp;world, BodyID id, const MassData &amp;massData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSleepingAllowed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a551a2c1a64dc294bb29e73a5ec08eedf</anchor>
      <arglist>(World &amp;world, BodyID, bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a15fe0eff376d7e62b9bb5247e066a5b8</anchor>
      <arglist>(World &amp;world, BodyID id, Torque torque)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTransform</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a46058bb93704b80b5e41bab8c0b5e66a</anchor>
      <arglist>(World &amp;world, BodyID id, const Length2 &amp;location, Angle angle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTransformation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5e7c46bb395656fb280d69e75fccfd64</anchor>
      <arglist>(World &amp;world, BodyID id, const Transformation &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetType</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6f7e900839bdbf4d1092e58c9d85c8a0</anchor>
      <arglist>(World &amp;world, BodyID id, BodyType value, bool resetMassData=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa46b52291d03b0e117252dff120f1f05</anchor>
      <arglist>(World &amp;world, BodyID id, AngularVelocity value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a958659c4d6119f29fb735f45a91b58bc</anchor>
      <arglist>(World &amp;world, BodyID id, const LinearVelocity2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4a9fbc9171174e9e5e38bc1a6d59cacc</anchor>
      <arglist>(World &amp;world, BodyID id, const Velocity &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetAwake</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aad1b782ca7b1ff3909ed10de206a2b67</anchor>
      <arglist>(World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetImpenetrable</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afc1e2d3de61b7fd4f3f458df7d70ffcf</anchor>
      <arglist>(World &amp;world, BodyID id)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WorldConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>WorldConf_8hpp.html</filename>
    <includes id="Interval_8hpp" name="Interval.hpp" local="no" imported="no">playrho/Interval.hpp</includes>
    <includes id="Positive_8hpp" name="Positive.hpp" local="no" imported="no">playrho/Positive.hpp</includes>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">playrho/Settings.hpp</includes>
    <includes id="Units_8hpp" name="Units.hpp" local="no" imported="no">playrho/Units.hpp</includes>
    <class kind="struct">playrho::d2::WorldConf</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
  </compound>
  <compound kind="file">
    <name>WorldContact.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>WorldContact_8hpp.html</filename>
    <includes id="BodyID_8hpp" name="BodyID.hpp" local="no" imported="no">playrho/BodyID.hpp</includes>
    <includes id="ContactID_8hpp" name="ContactID.hpp" local="no" imported="no">playrho/ContactID.hpp</includes>
    <includes id="KeyedContactID_8hpp" name="KeyedContactID.hpp" local="no" imported="no">playrho/KeyedContactID.hpp</includes>
    <includes id="NonNegative_8hpp" name="NonNegative.hpp" local="no" imported="no">playrho/NonNegative.hpp</includes>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">playrho/Settings.hpp</includes>
    <includes id="ShapeID_8hpp" name="ShapeID.hpp" local="no" imported="no">playrho/ShapeID.hpp</includes>
    <includes id="UnitInterval_8hpp" name="UnitInterval.hpp" local="no" imported="no">playrho/UnitInterval.hpp</includes>
    <includes id="WorldManifold_8hpp" name="WorldManifold.hpp" local="no" imported="no">playrho/d2/WorldManifold.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>BodyID</type>
      <name>GetBodyA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9f73171f71b2dd994f143384f09c9b27</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>GetBodyB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afecd2b398a06faf9d320f05ff00a5e1a</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetChildIndexA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aede095c028bcc203dca6946899a60734</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetChildIndexB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab674d51ad97e1f1d1f84c4fe9529643c</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetDefaultFriction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab39473e22885808ad7ffe6fab3b935ac</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetDefaultRestitution</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abe36e56eae83f3d2c57890a113095a99</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>NonNegativeFF&lt; Real &gt;</type>
      <name>GetFriction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7a6ff8e497fd3f3dbd3d31d043628b6c</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetRestitution</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acb30a1979153e86f38fea289f09a739a</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>ShapeID</type>
      <name>GetShapeA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a94a1320811507b6601ff8224e1469c23</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>ShapeID</type>
      <name>GetShapeB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae5df527a800c51b570b382547d06dda4</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity</type>
      <name>GetTangentSpeed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab468e8fb931cb9871644d49625ab5f8e</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; UnitIntervalFF&lt; Real &gt; &gt;</type>
      <name>GetToi</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a00955d16b773879aeb7f58194c2401b3</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>TimestepIters</type>
      <name>GetToiCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aeef0047d9c45e36b6db6bbdd0ead0569</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>ContactCounter</type>
      <name>GetTouchingCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a85a86553103a715dd904a4962d4f4403</anchor>
      <arglist>(const World &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>WorldManifold</type>
      <name>GetWorldManifold</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a070b99ac8d041f13a9db2c18adbf5dc5</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasValidToi</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7b93e5c7f12212cbd45e9cb755e11461</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAwake</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8b61e7ea48b0c07aa9bfa9417087c78e</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a17fc8450e2c49bba0f07be62c7cefbc0</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsTouching</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a50f925cd4a62e0bdad087cba2561efba</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>NeedsFiltering</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a06bdf092ec9098a9c0277832ba0ddbc2</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>NeedsUpdating</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a09cc9e0e457c86495cee4d26e3370bc5</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetFriction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a74979affb98f9307f121fd8f4f63910d</anchor>
      <arglist>(World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetRestitution</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af23360c9130e209a06ae0c111f274876</anchor>
      <arglist>(World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAwake</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2abab9a7a8ac13206bd48bd50b5deea9</anchor>
      <arglist>(World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6697fe2c98475f859b797a8a2532d8f1</anchor>
      <arglist>(World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae6e78139be823080998e2cf046601977</anchor>
      <arglist>(World &amp;world, ContactID id, bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFriction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9079208b96f79157ed5bb706c6fc670b</anchor>
      <arglist>(World &amp;world, ContactID id, NonNegative&lt; Real &gt; friction)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRestitution</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aecff580894139a75b0d1d9ffe7370414</anchor>
      <arglist>(World &amp;world, ContactID id, Real restitution)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTangentSpeed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae06d14b7ecfae56d31f305e3a96c9c99</anchor>
      <arglist>(World &amp;world, ContactID id, LinearVelocity value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6102d5afed1fb068ed3e46ef6f8cc1e9</anchor>
      <arglist>(World &amp;world, ContactID id)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WorldJoint.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>WorldJoint_8hpp.html</filename>
    <includes id="BodyID_8hpp" name="BodyID.hpp" local="no" imported="no">playrho/BodyID.hpp</includes>
    <includes id="JointID_8hpp" name="JointID.hpp" local="no" imported="no">playrho/JointID.hpp</includes>
    <includes id="LimitState_8hpp" name="LimitState.hpp" local="no" imported="no">playrho/LimitState.hpp</includes>
    <includes id="Joint_8hpp" name="Joint.hpp" local="no" imported="no">playrho/d2/Joint.hpp</includes>
    <includes id="d2_2Math_8hpp" name="Math.hpp" local="no" imported="no">playrho/d2/Math.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>void</type>
      <name>EnableLimit</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0d57dd5ce4216de4314346eb4ea1305c</anchor>
      <arglist>(World &amp;world, JointID id, bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnableMotor</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2a704ef43cd271708ab9f08355a1a20f</anchor>
      <arglist>(World &amp;world, JointID id, bool value)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetAnchorA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad181805be2366d99ffb13155baf40065</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetAnchorB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac23fd0777ed5a5310a2374d1f93c572d</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngle</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4ce296061c68b9afd61afa015d526596</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngularLowerLimit</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a07d97bfe3c88aea660bc327b3b8bc7f2</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>RotInertia</type>
      <name>GetAngularMass</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abfa7ba64b9136c5b05d0e1c72cf008e9</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>AngularMomentum</type>
      <name>GetAngularMotorImpulse</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a40396a921cdcbdfcdd69d60f65115f40</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngularOffset</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a542fc5366b9f67894c79c6dd714c211c</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7bb53ab723d5ccfbd11f4bd4479c3e45</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngularUpperLimit</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a774d95df3b7b44c06cd8f4b1f8cd2ace</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetAngularVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af5b790fffd5fdb045193b191c62045df</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>GetBodyA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0300037821d009ead20907713390c4ac</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>GetBodyB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aed37686447579052f3f82d3c0d97e513</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetCollideConnected</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8dcb8b5dfef16109fe874fa2b13667ea</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetCurrentLengthA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8b3c1e78795081eebc7b567769e16a2b</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetCurrentLengthB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a94983125c58f61c88da00e54dda0ef16</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetDampingRatio</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afe631daac24a87eceec2c430ea8a7752</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Frequency</type>
      <name>GetFrequency</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3c773e75400526e2b287b78e93685b9d</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetGroundAnchorA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acb29d9229831d8cdb59085a3e3356489</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetGroundAnchorB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1987d685729c33479c3e46e94a6c189d</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetJointTranslation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9148649a69f324b0f355a52e7cad8896</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetLength</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a49225b519382602123b1745c7a32c517</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>LimitState</type>
      <name>GetLimitState</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0c2f573475b5472494e2154c2f58829e</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Momentum</type>
      <name>GetLinearMotorImpulse</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a420b9120142421be0e3cec7ccef61c0e</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLinearOffset</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a208fd111e05f9fe8b0e29013bc7c5a89</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a07b4f8e28195af1a6d2f6f417934896e</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalAnchorA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aeab676a9e447ebb4320d98c1f77f8c83</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalAnchorB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aecacf3a817fd4e067aa8f0be9410f26d</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetLocalXAxisA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae355c113ee44c5caa94fbcd0730caed4</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetLocalYAxisA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac5cfbd895c67ce6e9a30a04ed066f542</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Torque</type>
      <name>GetMaxMotorTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a02ad4a3b9d6a550e5c89bd4f524b3035</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Force</type>
      <name>GetMotorForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3e6c752f15d341da441a3b7541bf8791</anchor>
      <arglist>(const World &amp;world, JointID id, Frequency inv_dt)</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetMotorSpeed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a24212189ddc5e89f33e4dd824f6ba2cd</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Torque</type>
      <name>GetMotorTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2eb6880ff8f81a8555c092138e0c6759</anchor>
      <arglist>(const World &amp;world, JointID id, Frequency inv_dt)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetRatio</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3cd8188130775b777b8c23406d7f831a</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetReferenceAngle</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a044ce59887833c716436be7f7266cc72</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetTarget</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac6924974a0f657a5a7ef921dfb5b9942</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>TypeID</type>
      <name>GetType</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae6ab0847fbe19102000cc9ae17903e9b</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>JointCounter</type>
      <name>GetWorldIndex</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae1afa531bb6d75a36ba55b80b695b300</anchor>
      <arglist>(const World &amp;, JointID id) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab67913b4948e1dcee7cba4f1014d8920</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLimitEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af1ad82bc9fdafe702099906752c6d0a1</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMotorEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afa3bc1d0e5bdc859c162ea16f2430a1f</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngularLimits</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0f759f40426050ec965e5bfc4a124f0a</anchor>
      <arglist>(World &amp;world, JointID id, Angle lower, Angle upper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngularOffset</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aefa369cb629e680306047672c26caf70</anchor>
      <arglist>(World &amp;world, JointID id, Angle value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAwake</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2673279eda44acaa8a7c66c24d7c2a3b</anchor>
      <arglist>(World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFrequency</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a678331653d08b6fd5ccc921bfc67889a</anchor>
      <arglist>(World &amp;world, JointID id, Frequency value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLinearOffset</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a622b1c82bfde56c1f78cc63f91d74471</anchor>
      <arglist>(World &amp;world, JointID id, const Length2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMaxMotorTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a97d4ebbad7ada4326fa315f5b1a6862b</anchor>
      <arglist>(World &amp;world, JointID id, Torque value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMotorSpeed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a80007981c3345c9dba4b22d67a1c8c18</anchor>
      <arglist>(World &amp;world, JointID id, AngularVelocity value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTarget</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a00ca74c362e50abf92c9bf3f2e05ae83</anchor>
      <arglist>(World &amp;world, JointID id, const Length2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a984dd54058bf81e66883369711224eef</anchor>
      <arglist>(World &amp;world, JointID id, const Length2 &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WorldManifold.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>WorldManifold_8hpp.html</filename>
    <includes id="d2_2Math_8hpp" name="Math.hpp" local="no" imported="no">playrho/d2/Math.hpp</includes>
    <class kind="struct">playrho::d2::WorldManifold::PointData</class>
    <class kind="class">playrho::d2::WorldManifold</class>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>WorldManifold</type>
      <name>GetWorldManifold</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0b45ff683dc29efc7eab1ada41caba66</anchor>
      <arglist>(const Manifold &amp;manifold, const Transformation &amp;xfA, Length radiusA, const Transformation &amp;xfB, Length radiusB)</arglist>
    </member>
    <member kind="function">
      <type>WorldManifold</type>
      <name>GetWorldManifold</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8dade39cd10c24856a8ee7b6e7265d18</anchor>
      <arglist>(const World &amp;world, const Contact &amp;contact, const Manifold &amp;manifold)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WorldMisc.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>WorldMisc_8hpp.html</filename>
    <includes id="BodyID_8hpp" name="BodyID.hpp" local="no" imported="no">playrho/BodyID.hpp</includes>
    <includes id="JointID_8hpp" name="JointID.hpp" local="no" imported="no">playrho/JointID.hpp</includes>
    <includes id="ContactID_8hpp" name="ContactID.hpp" local="no" imported="no">playrho/ContactID.hpp</includes>
    <includes id="StepConf_8hpp" name="StepConf.hpp" local="no" imported="no">playrho/StepConf.hpp</includes>
    <includes id="StepStats_8hpp" name="StepStats.hpp" local="no" imported="no">playrho/StepStats.hpp</includes>
    <includes id="ShapeID_8hpp" name="ShapeID.hpp" local="no" imported="no">playrho/ShapeID.hpp</includes>
    <includes id="d2_2Math_8hpp" name="Math.hpp" local="no" imported="no">playrho/d2/Math.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>StepStats</type>
      <name>Step</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1cd60871c106267bad097bca5e4a069f</anchor>
      <arglist>(World &amp;world, Time delta, TimestepIters velocityIterations=StepConf::DefaultRegVelocityIters, TimestepIters positionIterations=StepConf::DefaultRegPositionIters)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WorldShape.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/d2/</path>
    <filename>WorldShape_8hpp.html</filename>
    <includes id="BodyID_8hpp" name="BodyID.hpp" local="no" imported="no">playrho/BodyID.hpp</includes>
    <includes id="NonNegative_8hpp" name="NonNegative.hpp" local="no" imported="no">playrho/NonNegative.hpp</includes>
    <includes id="Real_8hpp" name="Real.hpp" local="no" imported="no">playrho/Real.hpp</includes>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">playrho/Settings.hpp</includes>
    <includes id="ShapeID_8hpp" name="ShapeID.hpp" local="no" imported="no">playrho/ShapeID.hpp</includes>
    <includes id="Span_8hpp" name="Span.hpp" local="no" imported="no">playrho/Span.hpp</includes>
    <includes id="TypeInfo_8hpp" name="TypeInfo.hpp" local="no" imported="no">playrho/TypeInfo.hpp</includes>
    <includes id="Units_8hpp" name="Units.hpp" local="no" imported="no">playrho/Units.hpp</includes>
    <includes id="Vector2_8hpp" name="Vector2.hpp" local="no" imported="no">playrho/Vector2.hpp</includes>
    <includes id="MassData_8hpp" name="MassData.hpp" local="no" imported="no">playrho/d2/MassData.hpp</includes>
    <includes id="UnitVec_8hpp" name="UnitVec.hpp" local="no" imported="no">playrho/d2/UnitVec.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="function">
      <type>MassData</type>
      <name>ComputeMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a282b579e1b618ce55e558363e7a26756</anchor>
      <arglist>(const World &amp;world, const Span&lt; const ShapeID &gt; &amp;ids)</arglist>
    </member>
    <member kind="function">
      <type>ShapeCounter</type>
      <name>GetAssociationCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a14fe4bcfe6eb37fc67d9f435879797c2</anchor>
      <arglist>(const World &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>NonNegativeFF&lt; Real &gt;</type>
      <name>GetDefaultFriction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9a52dff01e38af18a66d4e57113dbfd2</anchor>
      <arglist>(const Shape &amp;a, const Shape &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetDefaultRestitution</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9f95d5dcbd922f118fc591dc9efcaddd</anchor>
      <arglist>(const Shape &amp;a, const Shape &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; AreaDensity &gt;</type>
      <name>GetDensity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a08ec208608b8af0963d07cfbe67e9b05</anchor>
      <arglist>(const World &amp;world, ShapeID id)</arglist>
    </member>
    <member kind="function">
      <type>Filter</type>
      <name>GetFilterData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa0a2c5e5746924e329cdf96e36fe56c0</anchor>
      <arglist>(const World &amp;world, ShapeID id)</arglist>
    </member>
    <member kind="function">
      <type>NonNegativeFF&lt; Real &gt;</type>
      <name>GetFriction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abc8bdbee3ee5263518f3d08cf99c9316</anchor>
      <arglist>(const World &amp;world, ShapeID id)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a391db3e534902745c2717862b0a46a21</anchor>
      <arglist>(const World &amp;world, ShapeID id)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetRestitution</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a856b5d93bb4315e256ab0027b15974ce</anchor>
      <arglist>(const World &amp;world, ShapeID id)</arglist>
    </member>
    <member kind="function">
      <type>TypeID</type>
      <name>GetType</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a615141263d66d791ee852f4bca85b21f</anchor>
      <arglist>(const World &amp;world, ShapeID id)</arglist>
    </member>
    <member kind="function">
      <type>ShapeCounter</type>
      <name>GetUsedShapesCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a60f56df55fce1755d74eb063f79cac2a</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSensor</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a665355c07d233360cb9193c3c2784c40</anchor>
      <arglist>(const World &amp;world, ShapeID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Rotate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a072fb192e919d06301143d085a9659c9</anchor>
      <arglist>(World &amp;world, ShapeID id, const UnitVec &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Scale</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a11fd8847943d6b15a493828bc6431484</anchor>
      <arglist>(World &amp;world, ShapeID id, const Vec2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDensity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0c0e7d5ddd3b96d71e388bda5249aa5f</anchor>
      <arglist>(World &amp;world, ShapeID id, NonNegative&lt; AreaDensity &gt; value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFilterData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af219909208e61cf0efe0317d56c34b8c</anchor>
      <arglist>(World &amp;world, ShapeID id, const Filter &amp;filter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFriction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9d128e6893b3c795aa7f60da0b44ad29</anchor>
      <arglist>(World &amp;world, ShapeID id, NonNegative&lt; Real &gt; value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRestitution</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2124c9985cb2f7f9d3f1604f7cfd3c32</anchor>
      <arglist>(World &amp;world, ShapeID id, Real value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSensor</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab4709c553f0899dc0734f212d3ef9e18</anchor>
      <arglist>(World &amp;world, ShapeID id, bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestPoint</name>
      <anchorfile>group__TestPointGroup.html</anchorfile>
      <anchor>ga01b5749ce9597dbf099b3aa15259c9b9</anchor>
      <arglist>(const World &amp;world, BodyID bodyId, ShapeID shapeId, const Length2 &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Translate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a64472e1b31d714f95510a56e134e1c84</anchor>
      <arglist>(World &amp;world, ShapeID id, const Length2 &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Defines.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>Defines_8hpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>PLAYRHO_VERSION_MAJOR</name>
      <anchorfile>Defines_8hpp.html</anchorfile>
      <anchor>a41268d3a8d4c44ea4a34b5c56b23af3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PLAYRHO_VERSION_MINOR</name>
      <anchorfile>Defines_8hpp.html</anchorfile>
      <anchor>adff4f3be58a8199a03ca2e4fed33bc8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PLAYRHO_VERSION_PATCH</name>
      <anchorfile>Defines_8hpp.html</anchorfile>
      <anchor>a73d1d6b2456563d16000850f8f9b8687</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Checked.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/detail/</path>
    <filename>Checked_8hpp.html</filename>
    <includes id="InvalidArgument_8hpp" name="InvalidArgument.hpp" local="no" imported="no">playrho/InvalidArgument.hpp</includes>
    <includes id="Templates_8hpp" name="Templates.hpp" local="no" imported="no">playrho/Templates.hpp</includes>
    <class kind="class">playrho::detail::Checked</class>
    <class kind="struct">playrho::detail::Checked::IsChecked</class>
    <class kind="struct">playrho::detail::Checked::IsChecked&lt; Checked&lt; V, C, N &gt; &gt;</class>
    <class kind="struct">playrho::detail::NoOpChecker</class>
    <namespace>playrho</namespace>
    <namespace>playrho::detail</namespace>
    <member kind="typedef">
      <type>Checked&lt; T &gt;</type>
      <name>DefaultCheckedValue</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga11cabdc538bf7282d5da49a1f85186d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a32383015bf171dea637b7a959b7421fa</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;() !=std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs) !=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a4994d33050437f2bd04ce28f82c6cfa9</anchor>
      <arglist>(const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(ValueType(lhs) !=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a1710820c42a3d0fa04fdd7b03ccda485</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;rhs) -&gt; decltype(lhs !=ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a62ccb41874a11ae208e4d2a1840aa898</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) *RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a0daf3badd07c3d8a8f75e372aeb10620</anchor>
      <arglist>(const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;lhs, const Other &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliableV&lt; Checked&lt; ValueType, Checker, NoExcept &gt;, Other &gt;, decltype(ValueType() *Other())&gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a0c81bd1815fccef0be17df1909886ee3</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliableV&lt; Other, Checked&lt; ValueType, Checker, NoExcept &gt;&gt;, decltype(Other() *ValueType())&gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>ad61c4c34236f778ed47268224850b24e</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)+RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>ab36ff5f373eaf2d495dce40c42e6c792</anchor>
      <arglist>(const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(ValueType(lhs)+rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>ac9cf08de554c2029b6bbb90d1890d1d2</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;rhs) -&gt; decltype(lhs+ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a66f17c27ae07bb4d3402817a6f8d52f1</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) - RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>ab093280c9b756a1aa417ff530bae5072</anchor>
      <arglist>(const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(ValueType(lhs) - rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>ae42c345584e1f5fc449daf5e1bfe1b74</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;rhs) -&gt; decltype(lhs - ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>aa6546914bb51e238fe23f2da6de2d4eb</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)/RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a7afdc583a043ed1144ffd3a8bc254221</anchor>
      <arglist>(const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(ValueType(lhs)/rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a6df49c6b71fae2abdb05858e444b94d2</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;rhs) -&gt; decltype(lhs/ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a00e22b3d70171c770fe2fe13afdff11c</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a8b5a8d7ecc5a2fd34c979a4ed7ee67b8</anchor>
      <arglist>(const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(ValueType(lhs)&lt; ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>ab1151c88c9fdcd11cb39197aad9e2f9a</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;rhs) -&gt; decltype(ValueType(lhs)&lt; ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a7f06e1143875dde6f350188cd20b307b</anchor>
      <arglist>(::std::ostream &amp;os, const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;value) -&gt; decltype(os&lt;&lt; ValueType(value))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a92f80c500536c9ace9c266ca095d4ce2</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>aeff78aa037fbc86ce1958b1658ed2510</anchor>
      <arglist>(const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(ValueType(lhs)&lt;=ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>adeb25d8b74e7403ebd78bf324b8101dc</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;rhs) -&gt; decltype(ValueType(lhs)&lt;=ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a8f2e536c4b87e31dd0d088bb64712b70</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;()==std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs)==RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a50beca9c94a84b533dda16d5612c99c1</anchor>
      <arglist>(const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(ValueType(lhs)==rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a3122c1c3be1d11d9e824e227cf58e4f3</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;rhs) -&gt; decltype(lhs==ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a65ffa1dc8fdac606f09d7f1258d76697</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a7db684b2001572866a76004dc188482b</anchor>
      <arglist>(const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(ValueType(lhs) &gt; ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>ae925670316f198c098c65a2d9fb2e68d</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;rhs) -&gt; decltype(ValueType(lhs) &gt; ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a0d2b20e9a7652cad0cb713a9b466268d</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a79e613ff5f9b13c13408daab2deae491</anchor>
      <arglist>(const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(ValueType(lhs) &gt;=ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>ab9994a039bbf093c9b0e0faddd272dab</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;rhs) -&gt; decltype(ValueType(lhs) &gt;=ValueType(rhs))</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CheckedMath.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/detail/</path>
    <filename>CheckedMath_8hpp.html</filename>
    <includes id="Checked_8hpp" name="Checked.hpp" local="no" imported="no">playrho/detail/Checked.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::detail</namespace>
    <member kind="function">
      <type>auto</type>
      <name>abs</name>
      <anchorfile>group__CheckedMath.html</anchorfile>
      <anchor>ga00fab6b331741e415a52e5155467a0bf</anchor>
      <arglist>(const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;arg) -&gt; decltype(Checked&lt; ValueType, Checker, false &gt;(abs(arg.get())))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>nextafter</name>
      <anchorfile>group__CheckedMath.html</anchorfile>
      <anchor>gab11ee26fa0cd543fd5f2eebf9c0c30b3</anchor>
      <arglist>(const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;from, const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;to) -&gt; decltype(Checked&lt; ValueType, Checker, false &gt;(nextafter(from.get(), to.get())))</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FiniteChecker.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/detail/</path>
    <filename>FiniteChecker_8hpp.html</filename>
    <includes id="Math_8hpp" name="Math.hpp" local="no" imported="no">playrho/Math.hpp</includes>
    <class kind="struct">playrho::detail::FiniteChecker</class>
    <namespace>playrho</namespace>
    <namespace>playrho::detail</namespace>
  </compound>
  <compound kind="file">
    <name>IndexingNamedType.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/detail/</path>
    <filename>IndexingNamedType_8hpp.html</filename>
    <class kind="struct">std::hash&lt;::playrho::detail::IndexingNamedType&lt; T, Tag &gt; &gt;</class>
    <class kind="class">playrho::detail::IndexingNamedType</class>
    <namespace>playrho</namespace>
    <namespace>playrho::detail</namespace>
    <member kind="function">
      <type>constexpr const T &amp;</type>
      <name>UnderlyingValue</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a9fd3da1620a73e1af4ee63e6f51fb99f</anchor>
      <arglist>(const IndexingNamedType&lt; T, Tag &gt; &amp;o) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T &amp;</type>
      <name>UnderlyingValue</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a1d0098650ef88d80a47b40dea3c234e2</anchor>
      <arglist>(IndexingNamedType&lt; T, Tag &gt; &amp;o) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NegativeChecker.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/detail/</path>
    <filename>NegativeChecker_8hpp.html</filename>
    <class kind="struct">playrho::detail::NegativeChecker</class>
    <namespace>playrho</namespace>
    <namespace>playrho::detail</namespace>
  </compound>
  <compound kind="file">
    <name>NonNegativeChecker.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/detail/</path>
    <filename>NonNegativeChecker_8hpp.html</filename>
    <class kind="struct">playrho::detail::NonNegativeChecker</class>
    <namespace>playrho</namespace>
    <namespace>playrho::detail</namespace>
  </compound>
  <compound kind="file">
    <name>NonPositiveChecker.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/detail/</path>
    <filename>NonPositiveChecker_8hpp.html</filename>
    <class kind="struct">playrho::detail::NonPositiveChecker</class>
    <namespace>playrho</namespace>
    <namespace>playrho::detail</namespace>
  </compound>
  <compound kind="file">
    <name>NonZeroChecker.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/detail/</path>
    <filename>NonZeroChecker_8hpp.html</filename>
    <class kind="struct">playrho::detail::NonZeroChecker</class>
    <namespace>playrho</namespace>
    <namespace>playrho::detail</namespace>
  </compound>
  <compound kind="file">
    <name>PositiveChecker.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/detail/</path>
    <filename>PositiveChecker_8hpp.html</filename>
    <class kind="struct">playrho::detail::PositiveChecker</class>
    <namespace>playrho</namespace>
    <namespace>playrho::detail</namespace>
  </compound>
  <compound kind="file">
    <name>Templates.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/detail/</path>
    <filename>detail_2Templates_8hpp.html</filename>
    <class kind="struct">playrho::detail::detector</class>
    <class kind="struct">playrho::detail::detector&lt; Default, std::void_t&lt; Op&lt; Args... &gt; &gt;, Op, Args... &gt;</class>
    <class kind="struct">playrho::detail::HasFunctor</class>
    <class kind="struct">playrho::detail::HasFunctor&lt; Type, Return(Args...)&gt;</class>
    <class kind="struct">playrho::detail::is_narrowing_conversion</class>
    <class kind="struct">playrho::detail::is_narrowing_conversion_impl</class>
    <class kind="struct">playrho::detail::is_narrowing_conversion_impl&lt; From, To, std::void_t&lt; decltype(To{std::declval&lt; From &gt;()})&gt; &gt;</class>
    <class kind="struct">playrho::detail::IsAddable</class>
    <class kind="struct">playrho::detail::IsAddable&lt; T1, T2, std::void_t&lt; decltype(T1{}+T2{})&gt; &gt;</class>
    <class kind="struct">playrho::detail::IsArithmetic</class>
    <class kind="struct">playrho::detail::IsArithmetic&lt; T, std::void_t&lt; decltype(T{}+T{}), decltype(T{} - T{}), decltype(T{} *T{}), decltype(T{}/T{})&gt; &gt;</class>
    <class kind="struct">playrho::detail::IsDivisable</class>
    <class kind="struct">playrho::detail::IsDivisable&lt; T1, T2, std::void_t&lt; decltype(T1{}/T2{})&gt; &gt;</class>
    <class kind="struct">playrho::detail::IsEqualityComparable</class>
    <class kind="struct">playrho::detail::IsEqualityComparable&lt; T1, T2, std::void_t&lt; decltype(T1{}==T2{})&gt; &gt;</class>
    <class kind="struct">playrho::detail::IsInequalityComparable</class>
    <class kind="struct">playrho::detail::IsInequalityComparable&lt; T1, T2, std::void_t&lt; decltype(T1{} !=T2{})&gt; &gt;</class>
    <class kind="struct">playrho::detail::IsIterable</class>
    <class kind="struct">playrho::detail::IsIterable&lt; T, std::void_t&lt; decltype(begin(std::declval&lt; T &gt;())), decltype(end(std::declval&lt; T &gt;())), decltype(++std::declval&lt; decltype(begin(std::declval&lt; T &amp; &gt;()))&amp; &gt;()), decltype(*begin(std::declval&lt; T &gt;()))&gt; &gt;</class>
    <class kind="struct">playrho::detail::IsMultipliable</class>
    <class kind="struct">playrho::detail::IsMultipliable&lt; T1, T2, std::void_t&lt; decltype(T1{} *T2{})&gt; &gt;</class>
    <class kind="struct">playrho::detail::IsReverseIterable</class>
    <class kind="struct">playrho::detail::IsReverseIterable&lt; T, std::void_t&lt; decltype(rbegin(std::declval&lt; T &gt;())), decltype(rend(std::declval&lt; T &gt;())), decltype(++std::declval&lt; decltype(rbegin(std::declval&lt; T &amp; &gt;()))&amp; &gt;()), decltype(*rbegin(std::declval&lt; T &gt;()))&gt; &gt;</class>
    <class kind="struct">playrho::detail::nonesuch</class>
    <namespace>playrho</namespace>
    <namespace>playrho::detail</namespace>
    <member kind="typedef">
      <type>typename detector&lt; nonesuch, void, Op, Args... &gt;::value_t</type>
      <name>is_detected</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>ae939b4363f647e9faea094982a311cb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>IsFull</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a9c6ef61517707043fb5fd0891647687f</anchor>
      <arglist>(const T &amp;arg) -&gt; decltype(size(arg)==max_size(arg))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>max_size</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>aaa616ce7863431ef4a242233299ac2e3</anchor>
      <arglist>(const T &amp;arg) -&gt; decltype(arg.max_size())</arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_detected_v</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>af266549017154893e0ba701cfe4af898</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Templates.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>Templates_8hpp.html</filename>
    <includes id="detail_2Templates_8hpp" name="Templates.hpp" local="no" imported="no">playrho/detail/Templates.hpp</includes>
    <class kind="struct">playrho::LexicographicalGreater</class>
    <class kind="struct">playrho::LexicographicalGreaterEqual</class>
    <class kind="struct">playrho::LexicographicalLess</class>
    <class kind="struct">playrho::LexicographicalLessEqual</class>
    <class kind="struct">playrho::ReversionWrapper</class>
    <namespace>playrho</namespace>
    <member kind="typedef">
      <type>std::enable_if_t&lt;!std::is_same_v&lt; DecayedType, Check &gt;, DecayedType &gt;</type>
      <name>DecayedTypeIfNotSame</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad26feaced5599b43b28c4de2a2f861b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::HasFunctor&lt; Type, Return()&gt;</type>
      <name>HasNullaryFunctor</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a938af6ffa35b77fb176a9533d9b2f902</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::HasFunctor&lt; Type, Return(Arg)&gt;</type>
      <name>HasUnaryFunctor</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9f7d6112b6c359e797237cf305277451</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>begin</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a429625691c6a45944e55fe50f9a59199</anchor>
      <arglist>(ReversionWrapper&lt; T &gt; w)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>end</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a370e741c22960aad46732cdc0353f428</anchor>
      <arglist>(ReversionWrapper&lt; T &gt; w)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Equal</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a322b53a66a869cf225db329fc8c07f90</anchor>
      <arglist>(InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2) -&gt; decltype(first1==last1, first2==last2,++first1,++first2, *first1== *first2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>EraseAll</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aa5b77298f0fc2a2ae88ececbc3fb23d1</anchor>
      <arglist>(T &amp;container, const U &amp;value) -&gt; decltype(distance(container.erase(remove(begin(container), end(container), value), end(container)), end(container)))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>EraseFirst</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad559996a9d085eb07a18b5b88525761f</anchor>
      <arglist>(T &amp;container, const U &amp;value) -&gt; decltype(container.erase(find(begin(container), end(container), value)) !=end(container))</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a048e0ad2c0fac1472430520c115466eb</anchor>
      <arglist>(const std::size_t &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a7dde95b5e9b50eb6552368d0c57cfc88</anchor>
      <arglist>(const T &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; IsReverseIterableV&lt; T &gt;, ReversionWrapper&lt; T &gt; &gt;</type>
      <name>Reverse</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a1de374e7d6af7b68b654b657d756468a</anchor>
      <arglist>(T &amp;&amp;iterable)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>IsAddableV</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a41ba382902aedb57e9c98fc250ec2bf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>IsArithmeticV</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aa9c55e27192da826391d895835f02b17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>IsDivisableV</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>abdcd4932a27b9347d3afbae550fa57d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>IsEqualityComparableV</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a7e66a2bc90bba3e9b065c20da1f5d468</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>IsInequalityComparableV</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a137a2dd0c34c1efb94ea6f5b89dba530</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>IsIterableV</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ae2f251f126cac1015f8636e99ac0f4db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>IsMultipliableV</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a3c2c0d8136a2aabd56742fbedf6c00ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>IsReverseIterableV</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>adaec996c65bbbcac537113d83ee753c5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TypeInfo.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/detail/</path>
    <filename>detail_2TypeInfo_8hpp.html</filename>
    <class kind="struct">playrho::detail::TypeInfo</class>
    <namespace>playrho</namespace>
    <namespace>playrho::detail</namespace>
    <member kind="function">
      <type>const char *</type>
      <name>GetNameForTypeInfo</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a087b4a408ef8d082849973a442a24208</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>TypeNameAsString</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a228b07f06592b994f9692fd50d071220</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TypeInfo.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>TypeInfo_8hpp.html</filename>
    <includes id="detail_2TypeInfo_8hpp" name="TypeInfo.hpp" local="no" imported="no">playrho/detail/TypeInfo.hpp</includes>
    <class kind="class">playrho::TypeID</class>
    <namespace>playrho</namespace>
    <member kind="function">
      <type>const char *</type>
      <name>GetName</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a64ed2f85beec0b69745b971ce3d028ac</anchor>
      <arglist>(const TypeID &amp;id) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TypeID</type>
      <name>GetTypeID</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a23d832d9a5d4ee71d8ab03b1f07d46c5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>TypeID</type>
      <name>GetTypeID</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac87b4d8c11b416f868a72b7c43463adb</anchor>
      <arglist>(const T &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const char *</type>
      <name>GetTypeName</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a267edfe760bf1c787ca0487b93e0c719</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>underlying_type.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/detail/</path>
    <filename>underlying__type_8hpp.html</filename>
    <class kind="struct">playrho::detail::has_underlying_type_member</class>
    <class kind="struct">playrho::detail::has_underlying_type_member&lt; T, std::void_t&lt; typename T::underlying_type &gt; &gt;</class>
    <class kind="struct">playrho::detail::underlying_type</class>
    <class kind="struct">playrho::detail::underlying_type&lt; T, std::enable_if_t&lt; has_underlying_type_member&lt; T &gt;::value &gt; &gt;</class>
    <class kind="struct">playrho::detail::underlying_type&lt; T, std::enable_if_t&lt; std::is_enum_v&lt; T &gt; &gt; &gt;</class>
    <namespace>playrho</namespace>
    <namespace>playrho::detail</namespace>
    <member kind="typedef">
      <type>typename underlying_type&lt; T &gt;::type</type>
      <name>underlying_type_t</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a2ddc4b148d5e38a5a59954a1f503e901</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UnitIntervalChecker.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/detail/</path>
    <filename>UnitIntervalChecker_8hpp.html</filename>
    <class kind="struct">playrho::detail::UnitIntervalChecker</class>
    <namespace>playrho</namespace>
    <namespace>playrho::detail</namespace>
  </compound>
  <compound kind="file">
    <name>Wider.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/detail/</path>
    <filename>Wider_8hpp.html</filename>
    <includes id="Defines_8hpp" name="Defines.hpp" local="no" imported="no">playrho/Defines.hpp</includes>
    <class kind="struct">playrho::detail::Wider</class>
    <class kind="struct">playrho::detail::Wider&lt; double &gt;</class>
    <class kind="struct">playrho::detail::Wider&lt; float &gt;</class>
    <class kind="struct">playrho::detail::Wider&lt; std::int16_t &gt;</class>
    <class kind="struct">playrho::detail::Wider&lt; std::int32_t &gt;</class>
    <class kind="struct">playrho::detail::Wider&lt; std::int8_t &gt;</class>
    <class kind="struct">playrho::detail::Wider&lt; std::uint16_t &gt;</class>
    <class kind="struct">playrho::detail::Wider&lt; std::uint32_t &gt;</class>
    <class kind="struct">playrho::detail::Wider&lt; std::uint8_t &gt;</class>
    <namespace>playrho</namespace>
    <namespace>playrho::detail</namespace>
  </compound>
  <compound kind="file">
    <name>ZeroToUnderOneChecker.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/detail/</path>
    <filename>ZeroToUnderOneChecker_8hpp.html</filename>
    <class kind="struct">playrho::detail::ZeroToUnderOneChecker</class>
    <namespace>playrho</namespace>
    <namespace>playrho::detail</namespace>
  </compound>
  <compound kind="file">
    <name>DynamicMemory.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>DynamicMemory_8hpp.html</filename>
    <namespace>playrho</namespace>
    <member kind="function">
      <type>void *</type>
      <name>Alloc</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a516a3bbb73371cdc53f348b67f43bb1f</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>AllocArray</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2943dd9a79b7fc1fa196af1208b00388</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Free</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a62c138018c11ab3c255b410f2dedd7d2</anchor>
      <arglist>(void *mem)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>Realloc</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>adb651f620aefb4ee65ec0cc8c10b27b0</anchor>
      <arglist>(void *ptr, std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>ReallocArray</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a197482cbffdd702c8926a00f42a76e62</anchor>
      <arglist>(T *ptr, std::size_t count)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Filter.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>Filter_8hpp.html</filename>
    <class kind="struct">playrho::Filter</class>
    <namespace>playrho</namespace>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab71806508440416ef208f51580a6c50c</anchor>
      <arglist>(const Filter lhs, const Filter rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9cecc5b25e8e89a47a552caf672bd69c</anchor>
      <arglist>(const Filter lhs, const Filter rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ShouldCollide</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a223329721a8138f316898ed9a4877250</anchor>
      <arglist>(const Filter filterA, const Filter filterB) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Finite.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>Finite_8hpp.html</filename>
    <includes id="Checked_8hpp" name="Checked.hpp" local="no" imported="no">playrho/detail/Checked.hpp</includes>
    <includes id="FiniteChecker_8hpp" name="FiniteChecker.hpp" local="no" imported="no">playrho/detail/FiniteChecker.hpp</includes>
    <namespace>playrho</namespace>
    <member kind="typedef">
      <type>detail::Checked&lt; T, detail::FiniteChecker&lt; T &gt; &gt;</type>
      <name>Finite</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga60e4df9fe0eb8c6732b0316face647ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::Checked&lt; T, detail::FiniteChecker&lt; T &gt;, true &gt;</type>
      <name>FiniteFF</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga5c4898ce94c2c3bd2059864e7466ed12</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FlagGuard.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>FlagGuard_8hpp.html</filename>
    <class kind="class">playrho::FlagGuard</class>
    <namespace>playrho</namespace>
  </compound>
  <compound kind="file">
    <name>GrowableStack.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>GrowableStack_8hpp.html</filename>
    <includes id="DynamicMemory_8hpp" name="DynamicMemory.hpp" local="no" imported="no">playrho/DynamicMemory.hpp</includes>
    <includes id="detail_2Templates_8hpp" name="Templates.hpp" local="no" imported="no">playrho/detail/Templates.hpp</includes>
    <class kind="class">playrho::GrowableStack</class>
    <namespace>playrho</namespace>
  </compound>
  <compound kind="file">
    <name>Interval.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>Interval_8hpp.html</filename>
    <includes id="NonNegative_8hpp" name="NonNegative.hpp" local="no" imported="no">playrho/NonNegative.hpp</includes>
    <class kind="class">playrho::Interval</class>
    <namespace>playrho</namespace>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetCenter</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a8abbe9590460876ec82bf7dd801fb1f0</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;v) noexcept(noexcept((v.GetMin()+v.GetMax())/2))</arglist>
    </member>
    <member kind="function">
      <type>constexpr Interval&lt; T &gt;</type>
      <name>GetIntersection</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4baf1dd76711ae5151d0ee07a8b345d0</anchor>
      <arglist>(Interval&lt; T &gt; a, const Interval&lt; T &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetSize</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a64b898ee30ff659e61f3bfdcc78cc233</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;v) noexcept(noexcept(v.GetMax() - v.GetMin()))</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsEntirelyAfter</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>abc6f0d8de107567baafd2ff6770ded72</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;a, const Interval&lt; T &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsEntirelyBefore</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a537b76dc4bd198e60d148282e032533c</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;a, const Interval&lt; T &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsEntirelyEnclosing</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a32133337daeb0dd2b8b5a78f42a8a526</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;a, const Interval&lt; T &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsIntersecting</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab9dc0da0330f8a1c23b44b919f02fed7</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;a, const Interval&lt; T &gt; &amp;b) noexcept(noexcept(T{}&lt; T{}) &amp;&amp;noexcept(T{} &gt;=T{}))</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a861fb100d29d58d6f26f3767017886b3</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;a, const Interval&lt; T &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a815e65e38974a8bb60ef0a096bea0241</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;lhs, const Interval&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>acd5053c1cb8807f6296852e4a8c657d2</anchor>
      <arglist>(::std::ostream &amp;os, const Interval&lt; T &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>adbf50e7e086182f69dc09e011aef6345</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;lhs, const Interval&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac1b97d7e2f5894048236948061068fb5</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;a, const Interval&lt; T &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>acc58a55aab3f8bdd7ea411a6b2a4ddfb</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;lhs, const Interval&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>acca7f35c089808652f6c5d6c06a85ae7</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;lhs, const Interval&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Intervals.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>Intervals_8hpp.html</filename>
    <includes id="Interval_8hpp" name="Interval.hpp" local="no" imported="no">playrho/Interval.hpp</includes>
    <includes id="Units_8hpp" name="Units.hpp" local="no" imported="no">playrho/Units.hpp</includes>
    <namespace>playrho</namespace>
  </compound>
  <compound kind="file">
    <name>InvalidArgument.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>InvalidArgument_8hpp.html</filename>
    <class kind="class">playrho::InvalidArgument</class>
    <namespace>playrho</namespace>
  </compound>
  <compound kind="file">
    <name>Island.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>Island_8hpp.html</filename>
    <includes id="BodyID_8hpp" name="BodyID.hpp" local="no" imported="no">playrho/BodyID.hpp</includes>
    <includes id="ContactID_8hpp" name="ContactID.hpp" local="no" imported="no">playrho/ContactID.hpp</includes>
    <includes id="JointID_8hpp" name="JointID.hpp" local="no" imported="no">playrho/JointID.hpp</includes>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">playrho/Settings.hpp</includes>
    <includes id="Templates_8hpp" name="Templates.hpp" local="no" imported="no">playrho/Templates.hpp</includes>
    <class kind="struct">playrho::Island</class>
    <namespace>playrho</namespace>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad21356f425ceb245286afe5a7b3b9b7b</anchor>
      <arglist>(Island &amp;island) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>Count</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>abddcd2c8f0eff0c93d899e8ddcc6308a</anchor>
      <arglist>(const Island &amp;island, BodyID entry)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>Count</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a898248ef79f7b944f24106f73c3a0fcd</anchor>
      <arglist>(const Island &amp;island, ContactID entry)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>Count</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a54f9744256467cb8d34121dba6dbe294</anchor>
      <arglist>(const Island &amp;island, JointID entry)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsFullOfBodies</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad81cfb61a8aae11d28836a542584dd7f</anchor>
      <arglist>(const Island &amp;island)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsFullOfContacts</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a0613fe306ae99ce5ca98798c757a3dc2</anchor>
      <arglist>(const Island &amp;island)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reserve</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a64d8dfd5b476a5ec95500dbb121f27c7</anchor>
      <arglist>(Island &amp;island, BodyCounter bodies, ContactCounter contacts, JointCounter joints)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Sort</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ae889e4744cedfd0684d20ef3b7f48652</anchor>
      <arglist>(Island &amp;island) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IslandStats.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>IslandStats_8hpp.html</filename>
    <includes id="Units_8hpp" name="Units.hpp" local="no" imported="no">playrho/Units.hpp</includes>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">playrho/Settings.hpp</includes>
    <class kind="struct">playrho::IslandStats</class>
    <namespace>playrho</namespace>
  </compound>
  <compound kind="file">
    <name>JointFunction.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>JointFunction_8hpp.html</filename>
    <includes id="JointID_8hpp" name="JointID.hpp" local="no" imported="no">playrho/JointID.hpp</includes>
    <namespace>playrho</namespace>
    <member kind="typedef">
      <type>std::function&lt; void(JointID)&gt;</type>
      <name>JointFunction</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>addebc455127a1209e0543ce6a853ebaa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>JointID.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>JointID_8hpp.html</filename>
    <includes id="IndexingNamedType_8hpp" name="IndexingNamedType.hpp" local="no" imported="no">playrho/detail/IndexingNamedType.hpp</includes>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">playrho/Settings.hpp</includes>
    <namespace>playrho</namespace>
    <member kind="typedef">
      <type>detail::IndexingNamedType&lt; JointCounter, struct JointIdentifier &gt;</type>
      <name>JointID</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a8e3114be8fb50493389d7991db4f2b3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a7144be2e84f00033cbbadfae783092ed</anchor>
      <arglist>(const JointID &amp;value) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>InvalidJointID</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a67d10419efd6effdd41617992a76cbcd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>KeyedContactID.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>KeyedContactID_8hpp.html</filename>
    <includes id="ContactKey_8hpp" name="ContactKey.hpp" local="no" imported="no">playrho/ContactKey.hpp</includes>
    <includes id="ContactID_8hpp" name="ContactID.hpp" local="no" imported="no">playrho/ContactID.hpp</includes>
    <namespace>playrho</namespace>
    <member kind="typedef">
      <type>std::pair&lt; ContactKey, ContactID &gt;</type>
      <name>KeyedContactID</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4191fb4470c5c3670c83670c53eac824</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LengthError.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>LengthError_8hpp.html</filename>
    <class kind="class">playrho::LengthError</class>
    <namespace>playrho</namespace>
  </compound>
  <compound kind="file">
    <name>LimitState.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>LimitState_8hpp.html</filename>
    <namespace>playrho</namespace>
    <member kind="enumeration">
      <type></type>
      <name>LimitState</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a854ac3ed65c77740c30c5d097b11435c</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceplayrho.html" anchor="a854ac3ed65c77740c30c5d097b11435ca1f7b8a0fe66401e83219c7a6b7271e77">e_inactiveLimit</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a854ac3ed65c77740c30c5d097b11435cab5be4dc895bc396de7129733217d2d1d">e_atLowerLimit</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a854ac3ed65c77740c30c5d097b11435ca719db30ca9dc11b4ef7229efab6efb59">e_atUpperLimit</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a854ac3ed65c77740c30c5d097b11435ca4737f7baf9c11f81fc69998ca490edab">e_equalLimits</enumvalue>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ToString</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ae1cc0c131aa223cdb66e6eab1511d410</anchor>
      <arglist>(LimitState val) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Matrix.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>Matrix_8hpp.html</filename>
    <includes id="Vector_8hpp" name="Vector.hpp" local="no" imported="no">playrho/Vector.hpp</includes>
    <includes id="Vector2_8hpp" name="Vector2.hpp" local="no" imported="no">playrho/Vector2.hpp</includes>
    <includes id="Real_8hpp" name="Real.hpp" local="no" imported="no">playrho/Real.hpp</includes>
    <includes id="Units_8hpp" name="Units.hpp" local="no" imported="no">playrho/Units.hpp</includes>
    <class kind="struct">playrho::detail::IsMatrix</class>
    <class kind="struct">playrho::detail::IsMatrix&lt; Vector&lt; Vector&lt; T, N &gt;, M &gt; &gt;</class>
    <class kind="struct">playrho::detail::IsSquareMatrix</class>
    <class kind="struct">playrho::detail::IsSquareMatrix&lt; Vector&lt; Vector&lt; T, M &gt;, M &gt; &gt;</class>
    <namespace>playrho</namespace>
    <namespace>playrho::detail</namespace>
    <member kind="typedef">
      <type>Matrix22&lt; InvMass &gt;</type>
      <name>InvMass22</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a507cf0b47bd41371f90aa8f78f1d7c8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix22&lt; Mass &gt;</type>
      <name>Mass22</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a358c8036b278316ab41b3f35b56342a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix22&lt; Real &gt;</type>
      <name>Mat22</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a02c09bb6556e3168c0085871358d2f71</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix33&lt; Real &gt;</type>
      <name>Mat33</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aabd44d74c5bc530c9b6676c6a61e6b31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; Vector&lt; T, N &gt;, M &gt;</type>
      <name>Matrix</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>acbf97bd8e3f0f2ce4588735388f4089a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; T, 2, 2 &gt;</type>
      <name>Matrix22</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a26aabbb6723402cb9e12cf32e17beebc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; T, 3, 3 &gt;</type>
      <name>Matrix33</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a92e228aada1d7ca23d9f6c2c9ce3b415</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt;!IsVectorV&lt; T &gt;, Vector&lt; Vector&lt; T, 1 &gt;, N &gt; &gt;</type>
      <name>GetColumnMatrix</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9d367e915b012ac8ebfdbfd2817a40ae</anchor>
      <arglist>(Vector&lt; T, N &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsSquareMatrixV&lt; T &gt;, T &gt;</type>
      <name>GetIdentity</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aff2ccc0dc9ac07175382084cee633e49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt;!IsVectorV&lt; T &gt;, Matrix&lt; T, N, N &gt; &gt;</type>
      <name>GetIdentityMatrix</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a40b372974bcf478fe0254a0a29a2dd14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt;!IsVectorV&lt; T &gt;, Vector&lt; Vector&lt; T, N &gt;, 1 &gt; &gt;</type>
      <name>GetRowMatrix</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a38be88271d1aa1c71ad994a9d5e1df77</anchor>
      <arglist>(Vector&lt; T, N &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a0fa02e6b0d55e9363ad4afb89a755fc1</anchor>
      <arglist>(const Mat22 &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a41f0c49a750ed51bb02cef10158e8d7f</anchor>
      <arglist>(const Matrix&lt; T, M, N &gt; &amp;lhs, const Matrix&lt; T, M, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a89118d71eeeffa541c76f6d566a8546d</anchor>
      <arglist>(const Matrix&lt; T, M, N &gt; &amp;lhs, const Matrix&lt; T, M, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>IsMatrixV</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a83567b7faf3c7de0399b0b88fe1cc9f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>IsSquareMatrixV</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a14b74d27a9f43c1f37aca5ee84aa6f97</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MovementConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>MovementConf_8hpp.html</filename>
    <includes id="Units_8hpp" name="Units.hpp" local="no" imported="no">playrho/Units.hpp</includes>
    <class kind="struct">playrho::MovementConf</class>
    <namespace>playrho</namespace>
    <member kind="function">
      <type>MovementConf</type>
      <name>GetMovementConf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a43351fde9d622f4762a47e6618daf2f7</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Negative.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>Negative_8hpp.html</filename>
    <includes id="Checked_8hpp" name="Checked.hpp" local="no" imported="no">playrho/detail/Checked.hpp</includes>
    <includes id="NegativeChecker_8hpp" name="NegativeChecker.hpp" local="no" imported="no">playrho/detail/NegativeChecker.hpp</includes>
    <namespace>playrho</namespace>
    <member kind="typedef">
      <type>detail::Checked&lt; T, detail::NegativeChecker&lt; T &gt; &gt;</type>
      <name>Negative</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>gae249aaac842934d7f33e0f90012c409a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::Checked&lt; T, detail::NegativeChecker&lt; T &gt;, true &gt;</type>
      <name>NegativeFF</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga9d1fdcdd87aa834539d3b58cdee6db3d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NonNegative.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>NonNegative_8hpp.html</filename>
    <includes id="Checked_8hpp" name="Checked.hpp" local="no" imported="no">playrho/detail/Checked.hpp</includes>
    <includes id="NonNegativeChecker_8hpp" name="NonNegativeChecker.hpp" local="no" imported="no">playrho/detail/NonNegativeChecker.hpp</includes>
    <namespace>playrho</namespace>
    <member kind="typedef">
      <type>detail::Checked&lt; T, detail::NonNegativeChecker&lt; T &gt; &gt;</type>
      <name>NonNegative</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga7ab2310a74db36363887ad368d5c3118</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::Checked&lt; T, detail::NonNegativeChecker&lt; T &gt;, true &gt;</type>
      <name>NonNegativeFF</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>gafcee23e546ebf8053221fa14741f0dc9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NonPositive.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>NonPositive_8hpp.html</filename>
    <includes id="Checked_8hpp" name="Checked.hpp" local="no" imported="no">playrho/detail/Checked.hpp</includes>
    <includes id="NonPositiveChecker_8hpp" name="NonPositiveChecker.hpp" local="no" imported="no">playrho/detail/NonPositiveChecker.hpp</includes>
    <namespace>playrho</namespace>
    <member kind="typedef">
      <type>detail::Checked&lt; T, detail::NonPositiveChecker&lt; T &gt; &gt;</type>
      <name>NonPositive</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga631ddc4411751edeb5acbbeeb3ea622b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::Checked&lt; T, detail::NonPositiveChecker&lt; T &gt;, true &gt;</type>
      <name>NonPositiveFF</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>gabcc3093225e2a92cd20e21719cddc120</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NonZero.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>NonZero_8hpp.html</filename>
    <includes id="Checked_8hpp" name="Checked.hpp" local="no" imported="no">playrho/detail/Checked.hpp</includes>
    <includes id="NonZeroChecker_8hpp" name="NonZeroChecker.hpp" local="no" imported="no">playrho/detail/NonZeroChecker.hpp</includes>
    <namespace>playrho</namespace>
    <member kind="typedef">
      <type>std::enable_if_t&lt; std::is_pointer_v&lt; T &gt;, detail::Checked&lt; T, detail::NonZeroChecker&lt; T &gt; &gt;&gt;</type>
      <name>NonNull</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga9a1e056867aa49f7ac5d12a557fef88c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::enable_if_t&lt; std::is_pointer_v&lt; T &gt;, detail::Checked&lt; T, detail::NonZeroChecker&lt; T &gt;, true &gt; &gt;</type>
      <name>NonNullFF</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga11e09f5578ccdd32e48595e68bad4cea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::enable_if_t&lt;!std::is_pointer_v&lt; T &gt;, detail::Checked&lt; T, detail::NonZeroChecker&lt; T &gt; &gt;&gt;</type>
      <name>NonZero</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga02f02efffaeefcfeb7bd228ef7da12a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::enable_if_t&lt;!std::is_pointer_v&lt; T &gt;, detail::Checked&lt; T, detail::NonZeroChecker&lt; T &gt;, true &gt; &gt;</type>
      <name>NonZeroFF</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga7b3ab69bdace3bd39222135fc9646225</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ObjectPool.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>ObjectPool_8hpp.html</filename>
    <class kind="class">playrho::ObjectPool</class>
    <namespace>playrho</namespace>
    <member kind="function">
      <type>ObjectPool&lt; T &gt;::size_type</type>
      <name>used</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a70ce59a4d103ae2a050ea60a2f767d1c</anchor>
      <arglist>(const ObjectPool&lt; T &gt; &amp;array) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PointState.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>PointState_8hpp.html</filename>
    <namespace>playrho</namespace>
    <member kind="enumeration">
      <type></type>
      <name>PointState</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a06f67e158a928ef59e4263facac8fb0b</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceplayrho.html" anchor="a06f67e158a928ef59e4263facac8fb0babbb93ef26e3c101ff11cdd21cab08a94">Null</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a06f67e158a928ef59e4263facac8fb0baec211f7c20af43e742bf2570c3cb84f9">Add</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a06f67e158a928ef59e4263facac8fb0ba5a7dacb6e9b5ba37e22f825429355174">Persist</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a06f67e158a928ef59e4263facac8fb0ba1063e38cb53d94d386f21227fcd84717">Remove</enumvalue>
    </member>
  </compound>
  <compound kind="file">
    <name>Positive.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>Positive_8hpp.html</filename>
    <includes id="Checked_8hpp" name="Checked.hpp" local="no" imported="no">playrho/detail/Checked.hpp</includes>
    <includes id="PositiveChecker_8hpp" name="PositiveChecker.hpp" local="no" imported="no">playrho/detail/PositiveChecker.hpp</includes>
    <class kind="class">std::numeric_limits&lt;::playrho::Positive&lt; T &gt; &gt;</class>
    <namespace>playrho</namespace>
    <member kind="typedef">
      <type>detail::Checked&lt; T, detail::PositiveChecker&lt; T &gt; &gt;</type>
      <name>Positive</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga1fce58e6740bd8d9f025e08472071a9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::Checked&lt; T, detail::PositiveChecker&lt; T &gt;, true &gt;</type>
      <name>PositiveFF</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga521f0650a33330a43eafb31ecb6d4ae5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RayCastOpcode.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>RayCastOpcode_8hpp.html</filename>
    <namespace>playrho</namespace>
    <member kind="enumeration">
      <type></type>
      <name>RayCastOpcode</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a66189f1fe36ac717e284ab1099171106</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceplayrho.html" anchor="a66189f1fe36ac717e284ab1099171106a056fa3d840f48b7bfbbd68c19a4797b3">Terminate</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a66189f1fe36ac717e284ab1099171106aaf8767ee039cdc51717435bb815da593">IgnoreFixture</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a66189f1fe36ac717e284ab1099171106a8dcfe18b6245b17c9cd69d5af7ef1847">ClipRay</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a66189f1fe36ac717e284ab1099171106a4592f28dc9d11de3ce507bebafd9de16">ResetRay</enumvalue>
    </member>
  </compound>
  <compound kind="file">
    <name>Real.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>Real_8hpp.html</filename>
    <includes id="Templates_8hpp" name="Templates.hpp" local="no" imported="no">playrho/Templates.hpp</includes>
    <namespace>playrho</namespace>
    <member kind="typedef">
      <type>float</type>
      <name>Real</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a1fc125070a08100d083a1360f7167f87</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RealConstants.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>RealConstants_8hpp.html</filename>
    <includes id="Real_8hpp" name="Real.hpp" local="no" imported="no">playrho/Real.hpp</includes>
    <namespace>playrho</namespace>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Centi</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>ga0367ca8edd23b32c868e3fe5f79082ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Deci</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>ga5a49a7e54c1b478f5b1cc882aa55f2d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Giga</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>ga66ca2124fd143e2433bb2f409dc83f92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Kilo</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>gae537180a6f4ceb3a3192ee623fc2c8bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Mega</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>gad7b2132b6101f0d7f6b3658147025168</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Peta</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>ga590efc6f9c2013056da85de7ab4e84ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Pi</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a3fe0bdbb0ea9c449b7504f7c75840993</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>SquareRootTwo</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aae1bd392cbafcb91d60633c893ff0742</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Tera</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>gaf30f732f080ece0b4e695da15e9da2a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Yotta</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>ga57179cfbd588c3d24609ad449a94bb0a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Settings.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>Settings_8hpp.html</filename>
    <includes id="Real_8hpp" name="Real.hpp" local="no" imported="no">playrho/Real.hpp</includes>
    <includes id="RealConstants_8hpp" name="RealConstants.hpp" local="no" imported="no">playrho/RealConstants.hpp</includes>
    <includes id="Units_8hpp" name="Units.hpp" local="no" imported="no">playrho/Units.hpp</includes>
    <includes id="WiderType_8hpp" name="WiderType.hpp" local="no" imported="no">playrho/WiderType.hpp</includes>
    <namespace>playrho</namespace>
    <member kind="typedef">
      <type>std::remove_const_t&lt; decltype(MaxBodies)&gt;</type>
      <name>BodyCounter</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a261b3039a098762462a17164898bb647</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const_t&lt; decltype(MaxChildCount)&gt;</type>
      <name>ChildCounter</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a0e937a573db2db27b95156590ef5dd12</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>WiderType&lt; BodyCounter &gt;</type>
      <name>ContactCounter</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a5fd824505590e2ca67e0ef804ede6e34</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ContactCounter</type>
      <name>DynamicTreeSize</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a1b77ef4b74a0e14a9d2f7cea193b2245</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const_t&lt; decltype(MaxJoints)&gt;</type>
      <name>JointCounter</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a3fff859979ed48e0d223d1584eb985c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const_t&lt; decltype(MaxShapes)&gt;</type>
      <name>ShapeCounter</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a238bb543bc4c65753c931c94c8bd70cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::uint8_t</type>
      <name>TimestepIters</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a3898807006fd29cd5c4fc2e1a9cf5536</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const_t&lt; decltype(MaxShapeVertices)&gt;</type>
      <name>VertexCounter</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4505f6a4017695c48bd81225eaf9c28a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultAabbExtension</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a3dd06178e859667c8f65b26c4e91972e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultAngularSleepTolerance</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a31907e80be5889667f03ef86ee3bbf0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultAngularSlop</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>adfccbc3cd8cc0bb78701f62e041acdba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultCirclesRatio</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac12a28e4c1a2b9138c79d895d3ccb3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultDistanceMultiplier</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab2898b34e4bf5fe5af48939ec34e48f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultLinearSleepTolerance</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a490b0d336b7a74ae18cf57632eeb7aa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultLinearSlop</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad91e53ba44755653e34147d39695a0a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultMaxAngularCorrection</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac8fea4a93f741aa800e943957fd23656</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultMaxDistanceIters</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>adea893c840466088049edc292dcc9dcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultMaxLinearCorrection</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aa7d2cfbedb9200e2ed973eb18cc3b23b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultMaxRotation</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a36c3a1adc34421b07e930a06ce905db1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultMaxSubSteps</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aa678e38c906502e06a90f31e2acc952a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultMaxToiIters</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab6c87be197db81dde7d9f64ddd888bae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultMaxToiRootIters</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad369e106022da8a461ed8a515014ee17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultMaxTranslation</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a6b71ffce08877ce941d29616eb907114</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultMaxVertexRadius</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a7beadf6067bdf66f48ee9b94c337d252</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultMinStillTimeToSleep</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a0e76508577c61a5bc9cc3107d60f3c1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultMinVertexRadius</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a174cfa632eb92c15bc2e48e7d09d216a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultRegMinMomentum</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab8eb622479d2ffb28ce1a4e88e8a211f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultStepFrequency</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a65202bedf970d0db4ad0d3e22ab3a0dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultStepTime</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a51e5b3bf0a53f853c75244a15b08caee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultToiMinMomentum</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a88e51d5b5ce397624e803df05ff1c013</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultVelocityThreshold</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a6497dbff92f4140c03fb29f7dc80093d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Invalid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ae4c4c9f92abc8bb90f494053a8e04375</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>InvalidContactIndex</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4ecc8cc059a2a3fa056888a1d405e4bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>InvalidVertex</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a49c511e18a6b72260126cf763c1cd8df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>MaxBodies</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a7b821c4b23566defba0fd2917d95f0ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>MaxChildCount</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>af33623a59b7c701aead6d06e88dc2cc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>MaxContacts</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a5ac18ab5fe22782c56d7ab92b397468e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>MaxFloat</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a527c4658d275e6c04ba4b4c9f28d688b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>MaxJoints</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a69cde8c9e938d138a9a4ae8355501684</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>MaxManifoldPoints</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aae670387c8f37f8812082b1838e18863</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>MaxShapes</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2e673e5e335bf14ece1382b582f2163b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>MaxShapeVertices</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a0774f630ff2e5b9ed9e5f322700d44e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>MaxSimplexEdges</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a95591102a273a4d301f3f795d463b9ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ShapeFunction.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>ShapeFunction_8hpp.html</filename>
    <includes id="ShapeID_8hpp" name="ShapeID.hpp" local="no" imported="no">playrho/ShapeID.hpp</includes>
    <namespace>playrho</namespace>
    <member kind="typedef">
      <type>std::function&lt; void(ShapeID)&gt;</type>
      <name>ShapeFunction</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab3c103ca9fa0984be180fdf4adea623e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ShapeID.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>ShapeID_8hpp.html</filename>
    <includes id="IndexingNamedType_8hpp" name="IndexingNamedType.hpp" local="no" imported="no">playrho/detail/IndexingNamedType.hpp</includes>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">playrho/Settings.hpp</includes>
    <namespace>playrho</namespace>
    <member kind="typedef">
      <type>detail::IndexingNamedType&lt; ShapeCounter, struct ShapeIdentifier &gt;</type>
      <name>ShapeID</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a664fbedb33a4af92883576fbee62fd28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>abcaa90580702a0b52b67e21d863eaf83</anchor>
      <arglist>(const ShapeID &amp;value) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>InvalidShapeID</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a7cf47dd833aad177ac33142cfc5e6bc3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Span.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>Span_8hpp.html</filename>
    <includes id="Templates_8hpp" name="Templates.hpp" local="no" imported="no">playrho/Templates.hpp</includes>
    <class kind="class">playrho::Span</class>
    <namespace>playrho</namespace>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a124127e30fbdbb52415324763e22a8f9</anchor>
      <arglist>(const Span&lt; T &gt; &amp;lhs, const Span&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a6fc572571fefb5d41ec6414843392d4a</anchor>
      <arglist>(const Span&lt; T &gt; &amp;lhs, const Span&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StackAllocator.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>StackAllocator_8hpp.html</filename>
    <class kind="struct">playrho::StackAllocator::Conf</class>
    <class kind="class">playrho::StackAllocator</class>
    <namespace>playrho</namespace>
  </compound>
  <compound kind="file">
    <name>StepConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>StepConf_8hpp.html</filename>
    <includes id="NonNegative_8hpp" name="NonNegative.hpp" local="no" imported="no">playrho/NonNegative.hpp</includes>
    <includes id="Positive_8hpp" name="Positive.hpp" local="no" imported="no">playrho/Positive.hpp</includes>
    <includes id="Real_8hpp" name="Real.hpp" local="no" imported="no">playrho/Real.hpp</includes>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">playrho/Settings.hpp</includes>
    <includes id="Units_8hpp" name="Units.hpp" local="no" imported="no">playrho/Units.hpp</includes>
    <class kind="struct">playrho::StepConf</class>
    <namespace>playrho</namespace>
    <member kind="function">
      <type>Length</type>
      <name>GetMaxRegLinearCorrection</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a396f543b42eadf60ef9e730edc77912c</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMaxTranslationWithinTolerance</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aa0aadd87d13ef022c24b3c4feed422d3</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StepStats.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>StepStats_8hpp.html</filename>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">playrho/Settings.hpp</includes>
    <includes id="Units_8hpp" name="Units.hpp" local="no" imported="no">playrho/Units.hpp</includes>
    <class kind="struct">playrho::PreStepStats</class>
    <class kind="struct">playrho::RegStepStats</class>
    <class kind="struct">playrho::StepStats</class>
    <class kind="struct">playrho::ToiStepStats</class>
    <namespace>playrho</namespace>
    <member kind="function">
      <type>RegStepStats &amp;</type>
      <name>Update</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9b942aee8449be45b89aea3b870ad76b</anchor>
      <arglist>(RegStepStats &amp;lhs, const IslandStats &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>to_underlying.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>to__underlying_8hpp.html</filename>
    <includes id="underlying__type_8hpp" name="underlying_type.hpp" local="no" imported="no">playrho/detail/underlying_type.hpp</includes>
    <namespace>playrho</namespace>
    <member kind="function">
      <type>constexpr auto</type>
      <name>to_underlying</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4b3ffaf4d26f2f410c72befd4f9b0ec6</anchor>
      <arglist>(T value) noexcept -&gt; detail::underlying_type_t&lt; T &gt;</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ToiConf.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>ToiConf_8hpp.html</filename>
    <includes id="NonNegative_8hpp" name="NonNegative.hpp" local="no" imported="no">playrho/NonNegative.hpp</includes>
    <includes id="Real_8hpp" name="Real.hpp" local="no" imported="no">playrho/Real.hpp</includes>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">playrho/Settings.hpp</includes>
    <includes id="UnitInterval_8hpp" name="UnitInterval.hpp" local="no" imported="no">playrho/UnitInterval.hpp</includes>
    <includes id="Units_8hpp" name="Units.hpp" local="no" imported="no">playrho/Units.hpp</includes>
    <class kind="struct">playrho::ToiConf</class>
    <namespace>playrho</namespace>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetDefaultToiConf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4dd2e3047d7ac0836f8921a496e8d432</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ToiConf</type>
      <name>GetToiConf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9864179cb9a35cb6665d429656ad0e9b</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ToiOutput.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>ToiOutput_8hpp.html</filename>
    <includes id="Real_8hpp" name="Real.hpp" local="no" imported="no">playrho/Real.hpp</includes>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">playrho/Settings.hpp</includes>
    <includes id="UnitInterval_8hpp" name="UnitInterval.hpp" local="no" imported="no">playrho/UnitInterval.hpp</includes>
    <includes id="WiderType_8hpp" name="WiderType.hpp" local="no" imported="no">playrho/WiderType.hpp</includes>
    <class kind="struct">playrho::ToiOutput::Statistics</class>
    <class kind="struct">playrho::ToiOutput</class>
    <namespace>playrho</namespace>
    <member kind="function">
      <type>const char *</type>
      <name>GetName</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad04315ff1bed5ea49e5a0990893e7976</anchor>
      <arglist>(ToiOutput::State state) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UnitInterval.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>UnitInterval_8hpp.html</filename>
    <includes id="Checked_8hpp" name="Checked.hpp" local="no" imported="no">playrho/detail/Checked.hpp</includes>
    <includes id="UnitIntervalChecker_8hpp" name="UnitIntervalChecker.hpp" local="no" imported="no">playrho/detail/UnitIntervalChecker.hpp</includes>
    <namespace>playrho</namespace>
    <member kind="typedef">
      <type>detail::Checked&lt; T, detail::UnitIntervalChecker&lt; T &gt; &gt;</type>
      <name>UnitInterval</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga4a5a66199e77439cdac1b5a16831484e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::Checked&lt; T, detail::UnitIntervalChecker&lt; T &gt;, true &gt;</type>
      <name>UnitIntervalFF</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga309960da94ba655d5101c19da5c55c1b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Units.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>Units_8hpp.html</filename>
    <includes id="Real_8hpp" name="Real.hpp" local="no" imported="no">playrho/Real.hpp</includes>
    <includes id="RealConstants_8hpp" name="RealConstants.hpp" local="no" imported="no">playrho/RealConstants.hpp</includes>
    <includes id="Templates_8hpp" name="Templates.hpp" local="no" imported="no">playrho/Templates.hpp</includes>
    <includes id="to__underlying_8hpp" name="to_underlying.hpp" local="no" imported="no">playrho/to_underlying.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::detail</namespace>
    <member kind="typedef">
      <type>Real</type>
      <name>acceleration</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>aefbb6a898514981d80d8a599a6faed34</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::plane_angle</type>
      <name>Angle</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gabb35ed422281bfdf3c41a276958898fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Real</type>
      <name>angular_acceleration</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a097ed777e057559e1843beed7f261053</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Real</type>
      <name>angular_momentum</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a368271e29c9ca2fa4a81619932918883</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Real</type>
      <name>angular_velocity</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a57bc0b9cfe8671823ac510034a03cc0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::angular_acceleration</type>
      <name>AngularAcceleration</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga240f19679aa74a8999d4093089351f22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::angular_momentum</type>
      <name>AngularMomentum</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga747a451cf2286bc935336043c212b74d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::angular_velocity</type>
      <name>AngularVelocity</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga8b4603a98e526262c2e4adfe99510672</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Real</type>
      <name>area</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a9eb7643b1171765729a3cd3129e8ec71</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::area</type>
      <name>Area</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga708ceb55bdc6043d445776d1886802eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::surface_density</type>
      <name>AreaDensity</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga6bcf1d1de9ef60a9833c222efe7ffd57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Real</type>
      <name>force</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a9245466a701c0ace6d5c9ee85826a254</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::force</type>
      <name>Force</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gad51dd88ec6a5b3bf384dc89a63019d9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Real</type>
      <name>frequency</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a1281aab63b535f7dd4cbcce87f7d6706</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::frequency</type>
      <name>Frequency</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga526d114a9d34d7237ed3e41829ab3eff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(std::declval&lt; T &amp; &gt;().get())</type>
      <name>get_member_type</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a03090ab2b73fa40dbf842caf9cf4f19f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Real</type>
      <name>inverse_mass</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a4e0fe544dc91c5df25ce8858ee1dda8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Real</type>
      <name>inverse_moment_of_inertia</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a7057f55e349ca3586994f4a94bb3a5c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::inverse_mass</type>
      <name>InvMass</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gab878660e71529c9163185103d206f9f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::inverse_moment_of_inertia</type>
      <name>InvRotInertia</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga8ec7c3082c9a05e095b45f6b1c7caaaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Real</type>
      <name>length</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a89abc2eb85f9ce5226d4cd969ab4cdce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::length</type>
      <name>Length</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga8705f1923f7cff39bf09f6d01989770d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::acceleration</type>
      <name>LinearAcceleration</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gaea2069744ddc1c5068705b00f957451a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::velocity</type>
      <name>LinearVelocity</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gaf4434fe902be456f845c8e478bd48f97</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Real</type>
      <name>mass</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a38a46160145a84da9c500ffd0df5e1bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::mass</type>
      <name>Mass</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gaaf74540633aeb472114381118842149e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Real</type>
      <name>moment_of_inertia</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>ad1d3c743f682c8b2631e7d77b82d6498</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Real</type>
      <name>momentum</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>ac761581120ca23f745cf4f362c975bd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::momentum</type>
      <name>Momentum</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gad36b742307f9f19c2c8c95e9372a3613</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Real</type>
      <name>plane_angle</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a4d1bc56caf9abb64fdb8d1dd180d7394</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::moment_of_inertia</type>
      <name>RotInertia</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga81349200b6a963bf87885ab7e89e981d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Real</type>
      <name>second_moment_of_area</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a658b54e98a49b6b4719d84643981de3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::second_moment_of_area</type>
      <name>SecondMomentOfArea</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga687546b31c191aeeacf223bdbebe6747</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Real</type>
      <name>surface_density</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a5d70a4f74cac574d76e8dfcfee292895</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Real</type>
      <name>time</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>aec06718803b60f89a200ed9207508f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::time</type>
      <name>Time</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gaa4842e1cf025b86cafb4b09c0f51bc18</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Real</type>
      <name>torque</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>af3257d2b875169550aa6628cbd523356</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::torque</type>
      <name>Torque</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga1acd0787ea4caa9725577e0aa2fdc9b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Real</type>
      <name>velocity</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a07bf078d023635979d9fd9bda324a16e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_cm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga8265c747e9b00e05f54f0aee1a4fdbf7</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_cm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga9a1d9f65f4ef9fdc77b5393cced60d0e</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Time</type>
      <name>operator&quot;&quot;_d</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga4699929ce883b631701b929a3a4a1511</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Time</type>
      <name>operator&quot;&quot;_d</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga1124541f25e0b4e9024f3da77b60ce29</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Angle</type>
      <name>operator&quot;&quot;_deg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gad590043c44d46c43cf3e38bbb231ec8d</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Angle</type>
      <name>operator&quot;&quot;_deg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga1a68411c9bee133e430474fecd57df06</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_dm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga58b222eced4c7ed60fd64bb6c3ba48e9</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_dm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga9beacde5d50cff177d145f33530e0ced</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mass</type>
      <name>operator&quot;&quot;_g</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gac348f2b6f845962edbc4fc12b326abbc</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mass</type>
      <name>operator&quot;&quot;_g</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga41c7f5697708c39baa2004b88bd4040c</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_Gm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gad6a94286306b5fc6540f06c33c4c6f5b</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_Gm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga05ef5a19b234b013f397d727a647898a</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Time</type>
      <name>operator&quot;&quot;_h</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga0f4ecfc991b77fa7038f6d26ae391f10</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Time</type>
      <name>operator&quot;&quot;_h</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga70c986f4d0ec946de664094ab57d467f</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Frequency</type>
      <name>operator&quot;&quot;_Hz</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gada3861ed51714dec5584f5ac2eccb351</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Frequency</type>
      <name>operator&quot;&quot;_Hz</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gabc754da89d9edea817c08ec30248f51e</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mass</type>
      <name>operator&quot;&quot;_kg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gab37a1df675967bc0408835763b38eb9b</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mass</type>
      <name>operator&quot;&quot;_kg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga1ec30bdee6208ced65e61642dc51a57a</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AreaDensity</type>
      <name>operator&quot;&quot;_kgpm2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga35d81e0c97d9e681cde91485230c0b11</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AreaDensity</type>
      <name>operator&quot;&quot;_kgpm2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga3102ca198b5559fcd97d9a847ddafdf9</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_km</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gae0d611695e995c22b52ba406e3d938af</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_km</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gafeb3f293ac0ab46917302e403bd41be8</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr LinearVelocity</type>
      <name>operator&quot;&quot;_kps</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga0f62968533e8cd267de90c1afa366d29</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr LinearVelocity</type>
      <name>operator&quot;&quot;_kps</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gae2a535f5043fab4f1d085061b85c2a8c</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_m</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gaab1d37a1ac19ffdb90d209251c9be0af</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_m</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga8a14e71e7bcc58c55976face61eed135</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Area</type>
      <name>operator&quot;&quot;_m2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga61eb3c1eb2284bb30dcb127c0ca730db</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Area</type>
      <name>operator&quot;&quot;_m2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga20a403f71b8175cfb90bc4d970909301</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Time</type>
      <name>operator&quot;&quot;_min</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga0b1a7f4abf19d284ab6db1da9b47de8b</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Time</type>
      <name>operator&quot;&quot;_min</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga212e5deefc8ccc59e0d81d1b1a76f01d</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_Mm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gafdb01dc5edc19a0616bae6f98bcd4b25</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_Mm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gade5160c838dead45f9d2f43297642923</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr LinearVelocity</type>
      <name>operator&quot;&quot;_mps</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gafff79dc3f94f4e1ee0f38eaf65b7e475</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr LinearVelocity</type>
      <name>operator&quot;&quot;_mps</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga29c9f5a17cc4033b8fd3e9486eec80e6</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr LinearAcceleration</type>
      <name>operator&quot;&quot;_mps2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gad1433e48714ffae291e3122d6ae60686</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr LinearAcceleration</type>
      <name>operator&quot;&quot;_mps2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga93977e9c554959304f2d4212d373a3c6</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Force</type>
      <name>operator&quot;&quot;_N</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gab0c745951bdfb935ce193ce74add4f7f</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Force</type>
      <name>operator&quot;&quot;_N</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga50e6a3c896dea20d70bfd5d7664e2830</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Torque</type>
      <name>operator&quot;&quot;_Nm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gaf9b52e6dd8edf9b4342075e88be348ed</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Torque</type>
      <name>operator&quot;&quot;_Nm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gaf5c1a86e9698626ca29c2ea17f3eee1d</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum</type>
      <name>operator&quot;&quot;_Ns</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gaf456e41b17a6b04735df20d018dfe914</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum</type>
      <name>operator&quot;&quot;_Ns</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gafa460cc2672c862e9b7834bfa49440fc</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mass</type>
      <name>operator&quot;&quot;_Pg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga829ed7d59fb256a65f91ff2a38dffe1f</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mass</type>
      <name>operator&quot;&quot;_Pg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga8125aed99d289a1b80e057cedd64e13b</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Angle</type>
      <name>operator&quot;&quot;_rad</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga56b7f8881f697bfc5f6c88d268e96543</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Angle</type>
      <name>operator&quot;&quot;_rad</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga7f7706f4df8f50a57e186d6cc68b02bc</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AngularVelocity</type>
      <name>operator&quot;&quot;_rpm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga9af2088bf38db720f2dca4c8db627b3f</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AngularVelocity</type>
      <name>operator&quot;&quot;_rpm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga473416136af75cf3600844ad6eb975eb</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Time</type>
      <name>operator&quot;&quot;_s</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gae7e1888c6386ab9832491aef18039e0c</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Time</type>
      <name>operator&quot;&quot;_s</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga5b793a1f4b1c3cce7996c1a55d4e0575</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mass</type>
      <name>operator&quot;&quot;_Yg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga9960d0aeddc327fa55019ebb6bb98c4a</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mass</type>
      <name>operator&quot;&quot;_Yg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga1255eade62dd2acd569300e17da4d578</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>StripUnit</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab48e50a80b0fd16dfd70ee70307ad296</anchor>
      <arglist>(const T &amp;value) -&gt; std::enable_if_t&lt; IsArithmeticV&lt; T &gt; &amp;&amp;!detail::is_detected_v&lt; detail::get_member_type, T &gt;, T &gt;</arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>BigG</name>
      <anchorfile>group__UnitConstants.html</anchorfile>
      <anchor>ga4435a07d3cb65258172c132b134c02fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>CubicMeter</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga0107011ec7329a9ac267119f7ff941bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Degree</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gaf0840a4c6fcfa4ed0f1e25820fea0ca3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DegreePerSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga987ba57899c87b7d6734d046d1c854b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DegreePerSquareSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga7a7cdea552b0f98a011b3287850433a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>EarthlyLinearAcceleration</name>
      <anchorfile>group__UnitConstants.html</anchorfile>
      <anchor>ga770e7e3c14510e96d5115b36988e5dde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>hertz</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>af1e0c512dc16bc8796eaffc38727193d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Hertz</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gadef54036b9480e0cf730100688e20570</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>HoursPerDay</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a7228ae83382d96e5316a2da46d61b5e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>kilogram</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a90daaeb1a99f74ec5f8c859c293e798d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Kilogram</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gad4ca745853415c1b3df906848978df9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>kilogram_per_square_meter</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a0496d072cedb43873f5558c5e5a4c0e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>KilogramPerSquareMeter</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga64416f646855741c31802eb689760ba8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>meter</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a573a42126bffa5d938fac528d015eaa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Meter</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gab5d1d9c70d11cff5fb552e939de39b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>meter_per_second</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a4e352c62d4a20f166b0eb0d529404943</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>meter_per_second_squared</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a9306a61d0f8717e859093dd09277ae92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>MeterPerSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga9d80fc94ec9d5990d2fa6b9e4b67267d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>MeterPerSquareSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga0bc87db1f0fbc1b5f1ae9b44c66b6e82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>MinutesPerHour</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a02d0486631c08763de5623dddac4931d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>newton</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a39a63c7fa9f3a8a7d2aa3ed6c375861d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Newton</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gac88db74a1ddb390655f0837d9c970f76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>newton_meter</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a60bc3b612446a1b018a7bdffa78a47c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>NewtonMeter</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gab920bd1046410474258f9e8630e557a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>NewtonMeterSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gae55524173aec32daa74def2b8dddc0bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>NewtonSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga64db6556e1824d11178c3d68301c2adc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>radian</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>afd99f222426ee977eb5660bbd03b05a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Radian</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gaebbe3f5282db32af8292500e505e21e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>radian_per_second</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a4b05a88d44049ecb87ed2945a30b78f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>RadianPerSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga446e46852ff69dee446aadc44635865c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>RadianPerSquareSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga0da7c45fe3ebc86d397e684154033742</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>RevolutionsPerMinute</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga46b97afc56560699033e7c3fb480a4f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>second</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a7e50c73b42174eea9c09e8fec3805919</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Second</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga6dacec03532687e9bac4ac6a882b35ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>SecondsPerMinute</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>ada8f7d778a105c363715baf196d71bfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>square_meter</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a8098710bf36c4d3d9fc8f47614f3238a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>SquareMeter</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga1fb0acbda4409a1a132baf7df83b9870</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>SquareRadian</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga941b3913fd0dd86a33e695cd9b73318f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>SquareSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga64467fca61de8c359a4e019f977ff320</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Vector.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>Vector_8hpp.html</filename>
    <includes id="InvalidArgument_8hpp" name="InvalidArgument.hpp" local="no" imported="no">playrho/InvalidArgument.hpp</includes>
    <includes id="Real_8hpp" name="Real.hpp" local="no" imported="no">playrho/Real.hpp</includes>
    <includes id="Templates_8hpp" name="Templates.hpp" local="no" imported="no">playrho/Templates.hpp</includes>
    <class kind="struct">playrho::detail::IsVector</class>
    <class kind="struct">playrho::detail::IsVector&lt; Vector&lt; T, N &gt; &gt;</class>
    <class kind="class">std::tuple_element&lt; I, playrho::Vector&lt; T, N &gt; &gt;</class>
    <class kind="class">std::tuple_size&lt; playrho::Vector&lt; T, N &gt; &gt;</class>
    <class kind="struct">playrho::Vector</class>
    <namespace>playrho</namespace>
    <namespace>playrho::detail</namespace>
    <member kind="function">
      <type>constexpr auto</type>
      <name>abs</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a594091c0fcb9865f2d102f3b8ee973b3</anchor>
      <arglist>(const Vector&lt; T, N &gt; &amp;v) noexcept -&gt; decltype(abs(T{}), Vector&lt; T, N &gt;{})</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>get</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a32a27488878deb0db4face63ec9749b1</anchor>
      <arglist>(const Vector&lt; T, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>get</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aa10d9373a7aa5e3492fee0877900f738</anchor>
      <arglist>(Vector&lt; T, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetX</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a97da0937ffb65980d65b6ce06e839f3f</anchor>
      <arglist>(const Vector&lt; T, N &gt; &amp;value) -&gt; decltype(get&lt; 0 &gt;(value))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetX</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aa756520228b8263fe552931f66882d39</anchor>
      <arglist>(Vector&lt; T, N &gt; &amp;value) -&gt; decltype(get&lt; 0 &gt;(value))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetY</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a048efa57c5e7a10eec78126f8d0f3ab4</anchor>
      <arglist>(const Vector&lt; T, N &gt; &amp;value) -&gt; decltype(get&lt; 1 &gt;(value))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetY</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a653020af6186410ade265e09b6196ca5</anchor>
      <arglist>(Vector&lt; T, N &gt; &amp;value) -&gt; decltype(get&lt; 1 &gt;(value))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetZ</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a3ca6251fe41049230563ab530a9e7f81</anchor>
      <arglist>(const Vector&lt; T, N &gt; &amp;value) -&gt; decltype(get&lt; 2 &gt;(value))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetZ</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab58db5b079020b9fbf4fbb674a7eb01d</anchor>
      <arglist>(Vector&lt; T, N &gt; &amp;value) -&gt; decltype(get&lt; 2 &gt;(value))</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a0e16f08723028c63f043c1ad42891b11</anchor>
      <arglist>(const Vector&lt; T, N &gt; &amp;lhs, const Vector&lt; T, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliableV&lt; T1, T2 &gt; &amp;&amp;!IsVectorV&lt; T1 &gt;, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2722bc95da32ec0b7f65c9dff9aa0dcc</anchor>
      <arglist>(const T1 &amp;s, const Vector&lt; T2, N &gt; &amp;a) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliableV&lt; T1, T2 &gt; &amp;&amp;!IsVectorV&lt; T1 &gt;, Vector&lt; OT, B &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a225cd9989faf6ae44c6bf24f84c2edf7</anchor>
      <arglist>(const Vector&lt; T1, A &gt; &amp;lhs, const Vector&lt; Vector&lt; T2, B &gt;, A &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliableV&lt; T1, T2 &gt; &amp;&amp;!IsVectorV&lt; T2 &gt;, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a17bf68739331457fd06d2ac83a971ce7</anchor>
      <arglist>(const Vector&lt; T1, N &gt; &amp;a, const T2 &amp;s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliableV&lt; T1, T2 &gt; &amp;&amp;!IsVectorV&lt; T2 &gt;, Vector&lt; OT, B &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a32931066a82b41864b61d9c0389d6712</anchor>
      <arglist>(const Vector&lt; Vector&lt; T1, A &gt;, B &gt; &amp;lhs, const Vector&lt; T2, A &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliableV&lt; T1, T2 &gt;, Vector&lt; Vector&lt; OT, C &gt;, A &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a53d7a33cd41bce2acd1d6b8292487981</anchor>
      <arglist>(const Vector&lt; Vector&lt; T1, B &gt;, A &gt; &amp;lhs, const Vector&lt; Vector&lt; T2, C &gt;, B &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; T1, decltype(T1{} *T2{})&gt;, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator*=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>af081fa6bf4de6ca0c13938151e91dbb6</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; T, decltype(T{}+T{})&gt;, Vector&lt; T, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad9320003d829a8e98e1e77bcd28adab4</anchor>
      <arglist>(Vector&lt; T, N &gt; lhs, const Vector&lt; T, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; T, decltype(+T{})&gt;, Vector&lt; T, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ae70d6dcc29a595bcc1a08b80d06f6e10</anchor>
      <arglist>(Vector&lt; T, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; T, decltype(T{}+T{})&gt;, Vector&lt; T, N &gt; &amp; &gt;</type>
      <name>operator+=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a319c9b996615a5d406c9db90f5e4578f</anchor>
      <arglist>(Vector&lt; T, N &gt; &amp;lhs, const Vector&lt; T, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; T, decltype(T{} - T{})&gt;, Vector&lt; T, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a1ea7b0293964b22ae57e18fc36518d75</anchor>
      <arglist>(Vector&lt; T, N &gt; lhs, const Vector&lt; T, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; T, decltype(-T{})&gt;, Vector&lt; T, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a30c1fd567af542eaca195272f717e6bd</anchor>
      <arglist>(Vector&lt; T, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; T, decltype(T{} - T{})&gt;, Vector&lt; T, N &gt; &amp; &gt;</type>
      <name>operator-=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a6fba1d15bc6902dca10efe3a579d1c0a</anchor>
      <arglist>(Vector&lt; T, N &gt; &amp;lhs, const Vector&lt; T, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsDivisableV&lt; T1, T2 &gt; &amp;&amp;!IsVectorV&lt; T2 &gt;, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a6da12fe999b8b56930c6cbd9dd4cd920</anchor>
      <arglist>(const Vector&lt; T1, N &gt; &amp;a, const T2 &amp;s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; T1, decltype(T1{}/T2{})&gt;, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator/=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a8af63c98286091483bcd8bc55a8072d1</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4eaedfa824fd2df1b6450a875b144ed0</anchor>
      <arglist>(const Vector&lt; T0, N0 &gt; &amp;lhs, const Vector&lt; T1, N1 &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a6bda91572806860fa512fff0f01a001b</anchor>
      <arglist>(::std::ostream &amp;os, const Vector&lt; T, N &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab0d92fceef8d7757ae713bd166391c21</anchor>
      <arglist>(const Vector&lt; T, N &gt; &amp;lhs, const Vector&lt; T, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>IsVectorV</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a168449a74e78ad00c9d22f1017de05f7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Vector2.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>Vector2_8hpp.html</filename>
    <includes id="Real_8hpp" name="Real.hpp" local="no" imported="no">playrho/Real.hpp</includes>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">playrho/Settings.hpp</includes>
    <includes id="Units_8hpp" name="Units.hpp" local="no" imported="no">playrho/Units.hpp</includes>
    <includes id="Vector_8hpp" name="Vector.hpp" local="no" imported="no">playrho/Vector.hpp</includes>
    <namespace>playrho</namespace>
    <namespace>playrho::d2</namespace>
    <member kind="typedef">
      <type>Vector2&lt; Force &gt;</type>
      <name>Force2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2d09dc7b51321c052b071485357ca1f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector2&lt; InvMass &gt;</type>
      <name>InvMass2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab4f2424eab18780894e83bbc4127fe67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector2&lt; Length &gt;</type>
      <name>Length2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a7dc68cd0ce177e175ae0bb6c39db158d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector2&lt; LinearAcceleration &gt;</type>
      <name>LinearAcceleration2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a5822921028100052d4c6dfb43c7f6c4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector2&lt; LinearVelocity &gt;</type>
      <name>LinearVelocity2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2faa31bff8794a0c4191d8b042f7deeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector2&lt; Mass &gt;</type>
      <name>Mass2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>acfba2b26f22dcc026361ed5a0ccf3966</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector2&lt; Momentum &gt;</type>
      <name>Momentum2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a1fa6ffb2e67c2e2f620eed088412b146</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector2&lt; Real &gt;</type>
      <name>Vec2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad93c0cd83df090aba6593ffac4b628ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; T, 2 &gt;</type>
      <name>Vector2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a97243f194a9406d0fdcf5f6f833851ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetFwdPerpendicular</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a25080522fd228616931476a49b5295d3</anchor>
      <arglist>(const Vector2&lt; T &gt; &amp;vector) noexcept -&gt; Vector2&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetRevPerpendicular</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a6526ea72d722d9cccd28199e6e917fb3</anchor>
      <arglist>(const Vector2&lt; T &gt; &amp;vector) noexcept -&gt; Vector2&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetVec2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ae60cf2dee0c139d2d97580c0620819ab</anchor>
      <arglist>(const Vector2&lt; Real &gt; &amp;value) -&gt; Vec2</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetVec2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a54e07128f6626a7f9dbe5e973a9fba19</anchor>
      <arglist>(const Vector2&lt; T &gt; &amp;value) -&gt; decltype(Vec2{static_cast&lt; Real &gt;(get&lt; 0 &gt;(value).value()), static_cast&lt; Real &gt;(get&lt; 1 &gt;(value).value())})</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab698eb521c2d14d3d88ee3ac4cacd7c6</anchor>
      <arglist>(const Vector2&lt; TYPE &gt; &amp;value) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>EarthlyGravity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ababb5cdb48a1960a30aed40859075dee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>InvalidLength2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2525da093ca5647aa7493b07eed63520</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Vector3.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>Vector3_8hpp.html</filename>
    <includes id="Real_8hpp" name="Real.hpp" local="no" imported="no">playrho/Real.hpp</includes>
    <includes id="Settings_8hpp" name="Settings.hpp" local="no" imported="no">playrho/Settings.hpp</includes>
    <includes id="Vector_8hpp" name="Vector.hpp" local="no" imported="no">playrho/Vector.hpp</includes>
    <namespace>playrho</namespace>
    <member kind="typedef">
      <type>Vector3&lt; InvMass &gt;</type>
      <name>InvMass3</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9d3b57b56d804cd09ae743e670e866d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector3&lt; Mass &gt;</type>
      <name>Mass3</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a996c0271f83c70e94b485ff59bb468a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector3&lt; Real &gt;</type>
      <name>Vec3</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a63f6dcdf3763052ea25099973c7c00ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; T, 3 &gt;</type>
      <name>Vector3</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad07b44f811ac4c7551067fb1d3554ec5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a0fa02e6b0d55e9363ad4afb89a755fc1</anchor>
      <arglist>(const Mat22 &amp;value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Version.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>Version_8hpp.html</filename>
    <class kind="struct">playrho::Version</class>
    <namespace>playrho</namespace>
    <member kind="function">
      <type>constexpr auto</type>
      <name>compare</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a5ff2551e46a5f342484d8f0ec42c44e3</anchor>
      <arglist>(const Version &amp;lhs, const Version &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetBuildDetails</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>adcc4cbaff2da580cdaa7f8e2e45c4856</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Version</type>
      <name>GetVersion</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>af43ad5413c876b34dcf8430c045986cc</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a1b902ac6a7cd1b01dc4a4981889d2820</anchor>
      <arglist>(const Version &amp;lhs, const Version &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9664edec057808e7df69e801e1f9012f</anchor>
      <arglist>(const Version &amp;lhs, const Version &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aafdb22d94f848eebd4aff498f3fba0c4</anchor>
      <arglist>(const Version &amp;lhs, const Version &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a1a26000facbed802f63693ad132ea5e4</anchor>
      <arglist>(const Version &amp;lhs, const Version &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab826df98026c84dcfa3cf694d6f8e63e</anchor>
      <arglist>(const Version &amp;lhs, const Version &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a30424693f3f723867383b08f1735bdd3</anchor>
      <arglist>(const Version &amp;lhs, const Version &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WiderType.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>WiderType_8hpp.html</filename>
    <includes id="Wider_8hpp" name="Wider.hpp" local="no" imported="no">playrho/detail/Wider.hpp</includes>
    <namespace>playrho</namespace>
    <member kind="typedef">
      <type>typename detail::Wider&lt; T &gt;::type</type>
      <name>WiderType</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a0d090b6b86609a8e93cb933b2b223e63</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WrongState.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>WrongState_8hpp.html</filename>
    <class kind="class">playrho::WrongState</class>
    <namespace>playrho</namespace>
  </compound>
  <compound kind="file">
    <name>ZeroToUnderOne.hpp</name>
    <path>/home/runner/work/PlayRho/PlayRho/repo/master/Library/include/playrho/</path>
    <filename>ZeroToUnderOne_8hpp.html</filename>
    <includes id="Checked_8hpp" name="Checked.hpp" local="no" imported="no">playrho/detail/Checked.hpp</includes>
    <includes id="ZeroToUnderOneChecker_8hpp" name="ZeroToUnderOneChecker.hpp" local="no" imported="no">playrho/detail/ZeroToUnderOneChecker.hpp</includes>
    <namespace>playrho</namespace>
    <member kind="typedef">
      <type>detail::Checked&lt; T, detail::ZeroToUnderOneChecker&lt; T &gt; &gt;</type>
      <name>ZeroToUnderOne</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga6d33fe002089badc48d22d99ec924ee4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::Checked&lt; T, detail::ZeroToUnderOneChecker&lt; T &gt;, true &gt;</type>
      <name>ZeroToUnderOneFF</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga82f43e0e8a9fa443bc746a5f865effef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::AABB</name>
    <filename>structplayrho_1_1detail_1_1AABB.html</filename>
    <templarg>N</templarg>
    <member kind="typedef">
      <type>Vector&lt; Length, N &gt;</type>
      <name>Location</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a426297e1ee24415f28a18264c827a590</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>AABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a29c582acce4e7411bfabb2c95a907794</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>AABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a12f5cd4be9c11169b2a3f9766e9f1341</anchor>
      <arglist>(const Location a, const Location b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>AABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a8d711b996ba48c40f238a636a0c8b0dd</anchor>
      <arglist>(const Location p) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>AABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>abded54cf0fe4192b2163e5aac76eafbb</anchor>
      <arglist>(std::enable_if_t&lt; sizeof...(Tail)+1==N, LengthInterval &gt; head, Tail... tail) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>LengthInterval</type>
      <name>ranges</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a5a73ebcc0bfb844da97b93f9b9d85b6f</anchor>
      <arglist>[N]</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>Contains</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>aeccc4adba69c5f7bbf4c0c3724ae1fcc</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;a, const AABB&lt; N &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt; &amp;</type>
      <name>Fatten</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a3b93a03d7da33af6899f8997a3b254ce</anchor>
      <arglist>(AABB&lt; N &gt; &amp;var, const NonNegative&lt; Length &gt; amount) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; Length, N &gt;</type>
      <name>GetCenter</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>aa5c9f951c0b82a2cdecdc7d559ca34d4</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; Length, N &gt;</type>
      <name>GetDimensions</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a3f0de4fdd4cecf5567090bf345c42ead</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt;</type>
      <name>GetDisplacedAABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a1d14a66e8a7cca9d84a04736e498e1a2</anchor>
      <arglist>(AABB&lt; N &gt; aabb, const Vector&lt; Length, N &gt; displacement)</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt;</type>
      <name>GetEnclosingAABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>af0034e680404f80e04d94699d42ed07d</anchor>
      <arglist>(AABB&lt; N &gt; a, const AABB&lt; N &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; Length, N &gt;</type>
      <name>GetExtents</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a869cd35cc1b8a53bfdedd47f2b6b9000</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt;</type>
      <name>GetFattenedAABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a3f169758eb050baf511b152fb5177735</anchor>
      <arglist>(AABB&lt; N &gt; aabb, const Length amount)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; Length, N &gt;</type>
      <name>GetLowerBound</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>aad63477b5cea2c8275ecedff1f3f9530</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt;</type>
      <name>GetMovedAABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a74557026c35a580c45dfc12f0c2bc6c0</anchor>
      <arglist>(AABB&lt; N &gt; aabb, const Vector&lt; Length, N &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>GetPerimeter</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a8f7f7fdc94ace092c3c65acbe6522752</anchor>
      <arglist>(const AABB &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; Length, N &gt;</type>
      <name>GetUpperBound</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a98a4a10ae8cc38664e56b99a5ef40ba6</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt; &amp;</type>
      <name>Include</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a5daa9c97e0b9a5dcf45681bf596639c3</anchor>
      <arglist>(AABB&lt; N &gt; &amp;var, const AABB&lt; N &gt; &amp;val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt; &amp;</type>
      <name>Include</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>aa5638faaf78557603c3e60b945f0c415</anchor>
      <arglist>(AABB&lt; N &gt; &amp;var, const Vector&lt; Length, N &gt; &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>abe2471568df9b5635f92209b8d25be38</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>ac7738d0953158fb06eada28384bde27b</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>aa3edeccc850d69e6165e5a5523e5b406</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>ae9459aea2a9cd94f8089837a09f41003</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a76b557d909c21ff5256aeb1a9d3b8c05</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a48d06003e414f652104fd195b308d296</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>TestOverlap</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a9ad73cec0b99cb943f354a290c7f9bfc</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;a, const AABB&lt; N &gt; &amp;b) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AABB&lt; 2 &gt;</name>
    <filename>structplayrho_1_1detail_1_1AABB.html</filename>
    <member kind="typedef">
      <type>Vector&lt; Length, N &gt;</type>
      <name>Location</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a426297e1ee24415f28a18264c827a590</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>AABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a29c582acce4e7411bfabb2c95a907794</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>AABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a12f5cd4be9c11169b2a3f9766e9f1341</anchor>
      <arglist>(const Location a, const Location b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>AABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a8d711b996ba48c40f238a636a0c8b0dd</anchor>
      <arglist>(const Location p) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>AABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>abded54cf0fe4192b2163e5aac76eafbb</anchor>
      <arglist>(std::enable_if_t&lt; sizeof...(Tail)+1==N, LengthInterval &gt; head, Tail... tail) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>LengthInterval</type>
      <name>ranges</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a5a73ebcc0bfb844da97b93f9b9d85b6f</anchor>
      <arglist>[N]</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>Contains</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>aeccc4adba69c5f7bbf4c0c3724ae1fcc</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;a, const AABB&lt; N &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt; &amp;</type>
      <name>Fatten</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a3b93a03d7da33af6899f8997a3b254ce</anchor>
      <arglist>(AABB&lt; N &gt; &amp;var, const NonNegative&lt; Length &gt; amount) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; Length, N &gt;</type>
      <name>GetCenter</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>aa5c9f951c0b82a2cdecdc7d559ca34d4</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; Length, N &gt;</type>
      <name>GetDimensions</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a3f0de4fdd4cecf5567090bf345c42ead</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt;</type>
      <name>GetDisplacedAABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a1d14a66e8a7cca9d84a04736e498e1a2</anchor>
      <arglist>(AABB&lt; N &gt; aabb, const Vector&lt; Length, N &gt; displacement)</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt;</type>
      <name>GetEnclosingAABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>af0034e680404f80e04d94699d42ed07d</anchor>
      <arglist>(AABB&lt; N &gt; a, const AABB&lt; N &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; Length, N &gt;</type>
      <name>GetExtents</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a869cd35cc1b8a53bfdedd47f2b6b9000</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt;</type>
      <name>GetFattenedAABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a3f169758eb050baf511b152fb5177735</anchor>
      <arglist>(AABB&lt; N &gt; aabb, const Length amount)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; Length, N &gt;</type>
      <name>GetLowerBound</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>aad63477b5cea2c8275ecedff1f3f9530</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt;</type>
      <name>GetMovedAABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a74557026c35a580c45dfc12f0c2bc6c0</anchor>
      <arglist>(AABB&lt; N &gt; aabb, const Vector&lt; Length, N &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>GetPerimeter</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a8f7f7fdc94ace092c3c65acbe6522752</anchor>
      <arglist>(const AABB &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; Length, N &gt;</type>
      <name>GetUpperBound</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a98a4a10ae8cc38664e56b99a5ef40ba6</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt; &amp;</type>
      <name>Include</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a5daa9c97e0b9a5dcf45681bf596639c3</anchor>
      <arglist>(AABB&lt; N &gt; &amp;var, const AABB&lt; N &gt; &amp;val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt; &amp;</type>
      <name>Include</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>aa5638faaf78557603c3e60b945f0c415</anchor>
      <arglist>(AABB&lt; N &gt; &amp;var, const Vector&lt; Length, N &gt; &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>abe2471568df9b5635f92209b8d25be38</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>ac7738d0953158fb06eada28384bde27b</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>aa3edeccc850d69e6165e5a5523e5b406</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>ae9459aea2a9cd94f8089837a09f41003</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a76b557d909c21ff5256aeb1a9d3b8c05</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a48d06003e414f652104fd195b308d296</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>TestOverlap</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a9ad73cec0b99cb943f354a290c7f9bfc</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;a, const AABB&lt; N &gt; &amp;b) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::AabbTreeWorld</name>
    <filename>classplayrho_1_1d2_1_1AabbTreeWorld.html</filename>
    <class kind="struct">playrho::d2::AabbTreeWorld::ContactUpdateConf</class>
    <member kind="typedef">
      <type>std::tuple&lt; ContactKey, Contactable, Contactable &gt;</type>
      <name>ProxyKey</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>a4c210fb56e0a86863cca565389623398</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AabbTreeWorld</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>a3ccc2406e8265a40a14fb71be604440b</anchor>
      <arglist>(AabbTreeWorld &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AabbTreeWorld</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>aefe5423b193a1e4b54f879010da52122</anchor>
      <arglist>(const AabbTreeWorld &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AabbTreeWorld</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>ab395cbbc2353f369793024aa7e50310e</anchor>
      <arglist>(const WorldConf &amp;conf=WorldConf{})</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AabbTreeWorld</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>abb5742627377026ed5cf98486a707f6a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>AabbTreeWorld &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>a15f4da998240e7b8f2b5b0813aadecd5</anchor>
      <arglist>(AabbTreeWorld &amp;&amp;other)=delete</arglist>
    </member>
    <member kind="function">
      <type>AabbTreeWorld &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>a674b00b69776277e89bb5bc3a9bcaae4</anchor>
      <arglist>(const AabbTreeWorld &amp;other)=delete</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>Clear</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>a8dabd80c639dec161a055797f40c2d86</anchor>
      <arglist>(AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend BodyID</type>
      <name>CreateBody</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>abc134e4c96f8c802584f38a18cb057c6</anchor>
      <arglist>(AabbTreeWorld &amp;world, Body body)</arglist>
    </member>
    <member kind="friend">
      <type>friend JointID</type>
      <name>CreateJoint</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>aa2d8aefae116fc83e64b522a5c73db09</anchor>
      <arglist>(AabbTreeWorld &amp;world, Joint def)</arglist>
    </member>
    <member kind="friend">
      <type>friend ShapeID</type>
      <name>CreateShape</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>abcb8f93c1c373e3475f2df1a2e12aba7</anchor>
      <arglist>(AabbTreeWorld &amp;world, Shape def)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>Destroy</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>a99a6c32e43317f4486102ae9a8fb4779</anchor>
      <arglist>(AabbTreeWorld &amp;world, BodyID id)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>Destroy</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>a0e2fff698d60627f36ea7fd3e844fe06</anchor>
      <arglist>(AabbTreeWorld &amp;world, JointID id)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>Destroy</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>aca96782dad3c0157442004ad1934e60a</anchor>
      <arglist>(AabbTreeWorld &amp;world, ShapeID id)</arglist>
    </member>
    <member kind="friend">
      <type>friend const BodyIDs &amp;</type>
      <name>GetBodies</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>a9e67100c85a477c3c67eb4ac9253e64f</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend const BodyIDs &amp;</type>
      <name>GetBodiesForProxies</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>a762d0679579fbb33847c12a066b6c8a6</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend const Body &amp;</type>
      <name>GetBody</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>adf56a78f49370b6526994a16d40e03fc</anchor>
      <arglist>(const AabbTreeWorld &amp;world, BodyID id)</arglist>
    </member>
    <member kind="friend">
      <type>friend BodyCounter</type>
      <name>GetBodyRange</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>afd6bd9a8f0b81dcbeb6cca6a098343e0</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend const Contact &amp;</type>
      <name>GetContact</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>abedf134e2dd35b6392a1225011bba7ea</anchor>
      <arglist>(const AabbTreeWorld &amp;world, ContactID id)</arglist>
    </member>
    <member kind="friend">
      <type>friend ContactCounter</type>
      <name>GetContactRange</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>a63a852d0bae346489f96669e57242ff5</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend KeyedContactIDs</type>
      <name>GetContacts</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>a76afff988091762ad3822ac3c86ea879</anchor>
      <arglist>(const AabbTreeWorld &amp;world)</arglist>
    </member>
    <member kind="friend">
      <type>friend const BodyContactIDs &amp;</type>
      <name>GetContacts</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>a8c62f86a14830bdf0876cfa3fc18cf22</anchor>
      <arglist>(const AabbTreeWorld &amp;world, BodyID id)</arglist>
    </member>
    <member kind="friend">
      <type>friend const BodyShapeIDs &amp;</type>
      <name>GetFixturesForProxies</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>af17a101558dad3dc0e9448602f0aa515</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend Frequency</type>
      <name>GetInvDeltaTime</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>acc63db6b4934e96cc71e5979c96fff51</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend const Joint &amp;</type>
      <name>GetJoint</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>a8e151fdb8e3958e9f82c90bc7c484419</anchor>
      <arglist>(const AabbTreeWorld &amp;world, JointID id)</arglist>
    </member>
    <member kind="friend">
      <type>friend JointCounter</type>
      <name>GetJointRange</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>a5ee5bcf270433e310aa6c47919ac8e61</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend const JointIDs &amp;</type>
      <name>GetJoints</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>aff9adb62f8fe3b643f5d6f28c904e543</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend const BodyJointIDs &amp;</type>
      <name>GetJoints</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>a7e5bf05e94015960f50125fe5e164b24</anchor>
      <arglist>(const AabbTreeWorld &amp;world, BodyID id)</arglist>
    </member>
    <member kind="friend">
      <type>friend const Manifold &amp;</type>
      <name>GetManifold</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>a87c2f9b6cbe7dd8f5dca1283cc584bb4</anchor>
      <arglist>(const AabbTreeWorld &amp;world, ContactID id)</arglist>
    </member>
    <member kind="friend">
      <type>friend const ProxyIDs &amp;</type>
      <name>GetProxies</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>a24c574e233970c28a513126441b75bef</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend const ProxyIDs &amp;</type>
      <name>GetProxies</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>a3ea45e84278758d191ea6e84a6580f6b</anchor>
      <arglist>(const AabbTreeWorld &amp;world, BodyID id)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::optional&lt; pmr::StatsResource::Stats &gt;</type>
      <name>GetResourceStats</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>a19c368be46ff6490712223019ff5dd55</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend const Shape &amp;</type>
      <name>GetShape</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>a67fb660513bea3322b086a2702e35351</anchor>
      <arglist>(const AabbTreeWorld &amp;world, ShapeID id)</arglist>
    </member>
    <member kind="friend">
      <type>friend ShapeCounter</type>
      <name>GetShapeRange</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>a69a1235c0d82bd65f72812cba91b29ab</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>GetSubStepping</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>a0f53b469c25d0684656d8654eeddb34f</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend const DynamicTree &amp;</type>
      <name>GetTree</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>a753f356527124ffcbb173a1652104e2e</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend Interval&lt; Positive&lt; Length &gt; &gt;</type>
      <name>GetVertexRadiusInterval</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>adfb6dafc68a7e86453c6942cc2da883d</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>IsDestroyed</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>ad4ca8f693d313cd432a32c9233969eae</anchor>
      <arglist>(const AabbTreeWorld &amp;world, BodyID id) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>IsDestroyed</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>a34f8ea7692b997172c6a6cb1b21988bd</anchor>
      <arglist>(const AabbTreeWorld &amp;world, ContactID id) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>IsDestroyed</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>a305ecc515ef0eafaf69dbea9a56281c5</anchor>
      <arglist>(const AabbTreeWorld &amp;world, JointID id) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>IsDestroyed</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>a823b4040dd7eaa3caab6bfffacf231b3</anchor>
      <arglist>(const AabbTreeWorld &amp;world, ShapeID id) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>IsLocked</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>af7b61eec5e4faf8c8c8aea5516a0de3f</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>IsStepComplete</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>a6cd8c5658e5ba4625cfadebc00398578</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>a241562d36e2cde72eca865b07682f729</anchor>
      <arglist>(const AabbTreeWorld &amp;lhs, const AabbTreeWorld &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>a99cb0625d46a6e18ff9618b3c363297f</anchor>
      <arglist>(const AabbTreeWorld &amp;lhs, const AabbTreeWorld &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>SetBeginContactListener</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>af4c06d86a07e89fa6bb07470f7750be4</anchor>
      <arglist>(AabbTreeWorld &amp;world, ContactFunction listener) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>SetBody</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>a6f71e23277706f0d39ba35089731793e</anchor>
      <arglist>(AabbTreeWorld &amp;world, BodyID id, Body value)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>SetContact</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>adbfa7b9148da7a062e24904a07dea772</anchor>
      <arglist>(AabbTreeWorld &amp;world, ContactID id, Contact value)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>SetDetachListener</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>ac99f57d9c10abd44796ac2af7c799709</anchor>
      <arglist>(AabbTreeWorld &amp;world, BodyShapeFunction listener) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>SetEndContactListener</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>a5f43eae1290967aa563b0648560ae24c</anchor>
      <arglist>(AabbTreeWorld &amp;world, ContactFunction listener) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>SetJoint</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>a147ad2650478168965d46f2d81030d9e</anchor>
      <arglist>(AabbTreeWorld &amp;world, JointID id, Joint def)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>SetJointDestructionListener</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>a0e1c6d88535dda4f800ae3083e62a915</anchor>
      <arglist>(AabbTreeWorld &amp;world, JointFunction listener) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>SetPostSolveContactListener</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>a6f4ec60e37e8300979d7a4b7d775c938</anchor>
      <arglist>(AabbTreeWorld &amp;world, ContactImpulsesFunction listener) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>SetPreSolveContactListener</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>a23f311326f5b9a72119dd60f21bf72d2</anchor>
      <arglist>(AabbTreeWorld &amp;world, ContactManifoldFunction listener) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>SetShape</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>afe1a5f3596116d180aa68837ce531a0c</anchor>
      <arglist>(AabbTreeWorld &amp;world, ShapeID id, Shape def)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>SetShapeDestructionListener</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>ae8f7a3e77d99d19e5ca7e934957ab655</anchor>
      <arglist>(AabbTreeWorld &amp;world, ShapeFunction listener) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>SetSubStepping</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>a4cfb501e18332a033c1b3db9ecfe8f3a</anchor>
      <arglist>(AabbTreeWorld &amp;world, bool flag) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>ShiftOrigin</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>a7f4dbcac83a7d4c21eae21d1e0989560</anchor>
      <arglist>(AabbTreeWorld &amp;world, const Length2 &amp;newOrigin)</arglist>
    </member>
    <member kind="friend">
      <type>friend StepStats</type>
      <name>Step</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>a05bf70fba33665bd9d8d53a16551fd16</anchor>
      <arglist>(AabbTreeWorld &amp;world, const StepConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Attach</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>ac5554379d3d2da283d46aec0e2878679</anchor>
      <arglist>(AabbTreeWorld &amp;world, BodyID id, ShapeID shapeID)</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>CreateBody</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>a6ff82074833d25757d3347cfeb6f7617</anchor>
      <arglist>(AabbTreeWorld &amp;world, const BodyConf &amp;def)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Detach</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>aa3c2c314d982d579c76d709d506303d1</anchor>
      <arglist>(AabbTreeWorld &amp;world, BodyID id, ShapeID shapeID)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; ShapeID &gt; &amp;</type>
      <name>GetShapes</name>
      <anchorfile>classplayrho_1_1d2_1_1AabbTreeWorld.html</anchorfile>
      <anchor>acfab29b1905bb96932cbca5f9b924344</anchor>
      <arglist>(const AabbTreeWorld &amp;world, BodyID id)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::Acceleration</name>
    <filename>structplayrho_1_1d2_1_1Acceleration.html</filename>
    <member kind="variable">
      <type>AngularAcceleration</type>
      <name>angular</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>ac9389483ab188239f61e5d0d5a8b672c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinearAcceleration2</type>
      <name>linear</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>aede18b49c56f6f4612c1bbb601ab5e00</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>a81b1dd82c9c8f3ec7c80b0c53e818239</anchor>
      <arglist>(const d2::Acceleration &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>a4442cd95fcdc4e62463d3e294fc7a303</anchor>
      <arglist>(const Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>a69bd254b1dac7999ffb0d0a8cb73f64e</anchor>
      <arglist>(const Acceleration &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>a19e063d352181298469b751c99cad684</anchor>
      <arglist>(const Real lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration &amp;</type>
      <name>operator*=</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>a381123f80f2c54ad37576e703eeb68a4</anchor>
      <arglist>(Acceleration &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>af1ae3bcd38f85eedaab9cfb290de1ba2</anchor>
      <arglist>(const Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>a33f1fdc4c279009a88f064ca1dd3ff59</anchor>
      <arglist>(const Acceleration &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration &amp;</type>
      <name>operator+=</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>aae7afb9157770b54dde00ee05cc3f586</anchor>
      <arglist>(Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>af4082a55e3d2a0600855a5b626f19f41</anchor>
      <arglist>(const Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>af2f8aaffda4163a6733ef5aff24414e0</anchor>
      <arglist>(const Acceleration &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration &amp;</type>
      <name>operator-=</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>a66e903f6e66753963a1bd82295759ddb</anchor>
      <arglist>(Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration</type>
      <name>operator/</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>a9b895b5b826bc5349fbd007bd6e9683b</anchor>
      <arglist>(const Acceleration &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration &amp;</type>
      <name>operator/=</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>a80f242d8a02779e3c73ebb380a7476c1</anchor>
      <arglist>(Acceleration &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>a4e08ccbbdba321adad44c940d95c52fb</anchor>
      <arglist>(const Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::ArrayList</name>
    <filename>classplayrho_1_1ArrayList.html</filename>
    <templarg></templarg>
    <templarg>MAXSIZE</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_iterator</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a67d25d47adbeac65ed4bea542508d585</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_pointer</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a6ea227fdda27a9eb27c75e7881f5359e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a9598e98e956084e8a985eb86a7d790d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>iterator</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>ab79fff9cc4061fc1857faadaa01a82a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a86536dff65b9476b50aed3fdafb49389</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a59f556a1f62d74ed8f1da7b6109c0ce4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SIZE_TYPE</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a61b0e98b64a2ff13fdce771be01a2d6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>ac1216e39960d164d47a6b5884ede3e82</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>ArrayList</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>ae0a0b6bd32144390f273082b870d6e87</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>ArrayList</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>acc6134e3744f38fc35c49dad4de917fe</anchor>
      <arglist>(const ArrayList &amp;other) noexcept(std::is_nothrow_copy_assignable_v&lt; T &gt;)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>ArrayList</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a0c7d748234c4e03424cdb1fb74239cac</anchor>
      <arglist>(const Span&lt; const value_type &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>ArrayList</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>ae26c71f54bd440eff44fd2971238e607</anchor>
      <arglist>(std::initializer_list&lt; value_type &gt; list)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArrayList&lt; playrho::detail::IndexingNamedType, MaxShapes &gt;</name>
    <filename>classplayrho_1_1ArrayList.html</filename>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_iterator</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a67d25d47adbeac65ed4bea542508d585</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_pointer</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a6ea227fdda27a9eb27c75e7881f5359e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a9598e98e956084e8a985eb86a7d790d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>iterator</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>ab79fff9cc4061fc1857faadaa01a82a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a86536dff65b9476b50aed3fdafb49389</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a59f556a1f62d74ed8f1da7b6109c0ce4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a61b0e98b64a2ff13fdce771be01a2d6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>playrho::detail::IndexingNamedType</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>ac1216e39960d164d47a6b5884ede3e82</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>ArrayList</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>ae0a0b6bd32144390f273082b870d6e87</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>ArrayList</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>acc6134e3744f38fc35c49dad4de917fe</anchor>
      <arglist>(const ArrayList &amp;other) noexcept(std::is_nothrow_copy_assignable_v&lt; playrho::detail::IndexingNamedType &gt;)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>ArrayList</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a0c7d748234c4e03424cdb1fb74239cac</anchor>
      <arglist>(const Span&lt; const value_type &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>ArrayList</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>ae26c71f54bd440eff44fd2971238e607</anchor>
      <arglist>(std::initializer_list&lt; value_type &gt; list)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArrayList&lt; Real, MaxSimplexEdges, std::remove_const_t&lt; decltype(MaxSimplexEdges)&gt; &gt;</name>
    <filename>classplayrho_1_1ArrayList.html</filename>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_iterator</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a67d25d47adbeac65ed4bea542508d585</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_pointer</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a6ea227fdda27a9eb27c75e7881f5359e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a9598e98e956084e8a985eb86a7d790d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>iterator</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>ab79fff9cc4061fc1857faadaa01a82a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a86536dff65b9476b50aed3fdafb49389</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a59f556a1f62d74ed8f1da7b6109c0ce4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const_t&lt; decltype(MaxSimplexEdges)&gt;</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a61b0e98b64a2ff13fdce771be01a2d6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Real</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>ac1216e39960d164d47a6b5884ede3e82</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>ArrayList</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>ae0a0b6bd32144390f273082b870d6e87</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>ArrayList</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>acc6134e3744f38fc35c49dad4de917fe</anchor>
      <arglist>(const ArrayList &amp;other) noexcept(std::is_nothrow_copy_assignable_v&lt; Real &gt;)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>ArrayList</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a0c7d748234c4e03424cdb1fb74239cac</anchor>
      <arglist>(const Span&lt; const value_type &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>ArrayList</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>ae26c71f54bd440eff44fd2971238e607</anchor>
      <arglist>(std::initializer_list&lt; value_type &gt; list)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArrayList&lt; SimplexEdge, MaxSimplexEdges, std::remove_const_t&lt; decltype(MaxSimplexEdges)&gt; &gt;</name>
    <filename>classplayrho_1_1ArrayList.html</filename>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_iterator</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a67d25d47adbeac65ed4bea542508d585</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_pointer</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a6ea227fdda27a9eb27c75e7881f5359e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a9598e98e956084e8a985eb86a7d790d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>iterator</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>ab79fff9cc4061fc1857faadaa01a82a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a86536dff65b9476b50aed3fdafb49389</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a59f556a1f62d74ed8f1da7b6109c0ce4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const_t&lt; decltype(MaxSimplexEdges)&gt;</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a61b0e98b64a2ff13fdce771be01a2d6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SimplexEdge</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>ac1216e39960d164d47a6b5884ede3e82</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>ArrayList</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>ae0a0b6bd32144390f273082b870d6e87</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>ArrayList</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>acc6134e3744f38fc35c49dad4de917fe</anchor>
      <arglist>(const ArrayList &amp;other) noexcept(std::is_nothrow_copy_assignable_v&lt; SimplexEdge &gt;)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>ArrayList</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a0c7d748234c4e03424cdb1fb74239cac</anchor>
      <arglist>(const Span&lt; const value_type &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>ArrayList</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>ae26c71f54bd440eff44fd2971238e607</anchor>
      <arglist>(std::initializer_list&lt; value_type &gt; list)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::BaseShapeConf</name>
    <filename>structplayrho_1_1d2_1_1BaseShapeConf.html</filename>
    <member kind="variable">
      <type>NonNegative&lt; AreaDensity &gt;</type>
      <name>density</name>
      <anchorfile>structplayrho_1_1d2_1_1BaseShapeConf.html</anchorfile>
      <anchor>abe78bd0fbe69b87761bc6aa967cf4656</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Filter</type>
      <name>filter</name>
      <anchorfile>structplayrho_1_1d2_1_1BaseShapeConf.html</anchorfile>
      <anchor>a4e322dc83f5db0c30352a3f70019cbab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Real &gt;</type>
      <name>friction</name>
      <anchorfile>structplayrho_1_1d2_1_1BaseShapeConf.html</anchorfile>
      <anchor>a42d4e4d6a9e35758935d3dda2c1272e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isSensor</name>
      <anchorfile>structplayrho_1_1d2_1_1BaseShapeConf.html</anchorfile>
      <anchor>ab6550d58b28ff8938cbd609dff1fc01f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Finite&lt; Real &gt;</type>
      <name>restitution</name>
      <anchorfile>structplayrho_1_1d2_1_1BaseShapeConf.html</anchorfile>
      <anchor>ac8ee84f3f378c7b60df0a413b14955a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultDensity</name>
      <anchorfile>structplayrho_1_1d2_1_1BaseShapeConf.html</anchorfile>
      <anchor>ac5ff22770c1ce87b672e5f34b22947e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultFilter</name>
      <anchorfile>structplayrho_1_1d2_1_1BaseShapeConf.html</anchorfile>
      <anchor>a47f4a667aee5bef3078eb5e9914d9452</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultFriction</name>
      <anchorfile>structplayrho_1_1d2_1_1BaseShapeConf.html</anchorfile>
      <anchor>a7cea7ca25af41adaddb33332dc36dd6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultIsSensor</name>
      <anchorfile>structplayrho_1_1d2_1_1BaseShapeConf.html</anchorfile>
      <anchor>a535c323318cf490e8222bb46f172bfb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const auto</type>
      <name>DefaultRestitution</name>
      <anchorfile>structplayrho_1_1d2_1_1BaseShapeConf.html</anchorfile>
      <anchor>a564185a78d47104e20c27acbe7cd39a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr NonNegative&lt; AreaDensity &gt;</type>
      <name>GetDensity</name>
      <anchorfile>structplayrho_1_1d2_1_1BaseShapeConf.html</anchorfile>
      <anchor>adb24a76e3c29dd4f1f5bc283cfef1ef1</anchor>
      <arglist>(const BaseShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Filter</type>
      <name>GetFilter</name>
      <anchorfile>structplayrho_1_1d2_1_1BaseShapeConf.html</anchorfile>
      <anchor>a0b7acd1eb614ad8608479fc442dcfbc8</anchor>
      <arglist>(const BaseShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr NonNegativeFF&lt; Real &gt;</type>
      <name>GetFriction</name>
      <anchorfile>structplayrho_1_1d2_1_1BaseShapeConf.html</anchorfile>
      <anchor>a6a4bdfe31fb64399135f589df7f27e35</anchor>
      <arglist>(const BaseShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Finite&lt; Real &gt;</type>
      <name>GetRestitution</name>
      <anchorfile>structplayrho_1_1d2_1_1BaseShapeConf.html</anchorfile>
      <anchor>a6727ddfbceb514f2dc7bfe7bebf3fd48</anchor>
      <arglist>(const BaseShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsSensor</name>
      <anchorfile>structplayrho_1_1d2_1_1BaseShapeConf.html</anchorfile>
      <anchor>a4705f71d8ddb1ceae9eb2a23b9874fd6</anchor>
      <arglist>(const BaseShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDensity</name>
      <anchorfile>structplayrho_1_1d2_1_1BaseShapeConf.html</anchorfile>
      <anchor>a568348f551f30b873f93160146ff8640</anchor>
      <arglist>(BaseShapeConf &amp;arg, NonNegative&lt; AreaDensity &gt; value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFilter</name>
      <anchorfile>structplayrho_1_1d2_1_1BaseShapeConf.html</anchorfile>
      <anchor>a92586c39f279062c63dd0a9ff0a00c3c</anchor>
      <arglist>(BaseShapeConf &amp;arg, Filter value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFriction</name>
      <anchorfile>structplayrho_1_1d2_1_1BaseShapeConf.html</anchorfile>
      <anchor>aa6aced677219438736a3a79c4470b87c</anchor>
      <arglist>(BaseShapeConf &amp;arg, NonNegative&lt; Real &gt; value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRestitution</name>
      <anchorfile>structplayrho_1_1d2_1_1BaseShapeConf.html</anchorfile>
      <anchor>a0a2e260faa2ee0dd76e3a1bd013870e5</anchor>
      <arglist>(BaseShapeConf &amp;arg, Real value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSensor</name>
      <anchorfile>structplayrho_1_1d2_1_1BaseShapeConf.html</anchorfile>
      <anchor>a4aa17670b395d1f9fab126570a2d4f6e</anchor>
      <arglist>(BaseShapeConf &amp;arg, bool value)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::BlockAllocator::Block</name>
    <filename>structplayrho_1_1BlockAllocator_1_1Block.html</filename>
    <member kind="variable">
      <type>Block *</type>
      <name>next</name>
      <anchorfile>structplayrho_1_1BlockAllocator_1_1Block.html</anchorfile>
      <anchor>a456ace9ee2ed5e10cd918c50154d8030</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::BlockAllocator</name>
    <filename>classplayrho_1_1BlockAllocator.html</filename>
    <class kind="struct">playrho::BlockAllocator::Block</class>
    <class kind="struct">playrho::BlockAllocator::Chunk</class>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1BlockAllocator.html</anchorfile>
      <anchor>ae039f1fd9e0cdafe92d108cf5dc3d663</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>Allocate</name>
      <anchorfile>classplayrho_1_1BlockAllocator.html</anchorfile>
      <anchor>abbb25555e5d25ed67a4748136ff7b8ed</anchor>
      <arglist>(size_type n)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>AllocateArray</name>
      <anchorfile>classplayrho_1_1BlockAllocator.html</anchorfile>
      <anchor>a10c24f4502f0aedf3195da11635e241f</anchor>
      <arglist>(size_type n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classplayrho_1_1BlockAllocator.html</anchorfile>
      <anchor>a12d8426f4a31b8ed042b2a62699d04e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Free</name>
      <anchorfile>classplayrho_1_1BlockAllocator.html</anchorfile>
      <anchor>a06536ee49cdb1a8c2f79de7522c8bd33</anchor>
      <arglist>(void *p, size_type n)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetChunkCount</name>
      <anchorfile>classplayrho_1_1BlockAllocator.html</anchorfile>
      <anchor>a8bec3ad25a09721b7e4ec1bac8b4325c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>GetChunkArrayIncrement</name>
      <anchorfile>classplayrho_1_1BlockAllocator.html</anchorfile>
      <anchor>ab7c12c70d3cb3bc9f8a896efb4d301fd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>GetMaxBlockSize</name>
      <anchorfile>classplayrho_1_1BlockAllocator.html</anchorfile>
      <anchor>a5aa7655c98fb927d7bc7a2fc936ec6cc</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr std::size_t</type>
      <name>AllocatorBlockSizes</name>
      <anchorfile>classplayrho_1_1BlockAllocator.html</anchorfile>
      <anchor>a30d1ffdd655947d098207ef826e44e8f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>ChunkArrayIncrement</name>
      <anchorfile>classplayrho_1_1BlockAllocator.html</anchorfile>
      <anchor>ac18179ec3684a0ea35d0a8461083f51d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>ChunkSize</name>
      <anchorfile>classplayrho_1_1BlockAllocator.html</anchorfile>
      <anchor>a81416ab2b8d29effab799523726c9cef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::BlockDeallocator</name>
    <filename>structplayrho_1_1BlockDeallocator.html</filename>
    <member kind="typedef">
      <type>BlockAllocator::size_type</type>
      <name>size_type</name>
      <anchorfile>structplayrho_1_1BlockDeallocator.html</anchorfile>
      <anchor>a605c69aa30125de98e51e6ef94df25dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>BlockDeallocator</name>
      <anchorfile>structplayrho_1_1BlockDeallocator.html</anchorfile>
      <anchor>a147dbe714e39709d7264135610f1759c</anchor>
      <arglist>(BlockAllocator *a, size_type n) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structplayrho_1_1BlockDeallocator.html</anchorfile>
      <anchor>a74b07482606dc48a34b5117904256f3e</anchor>
      <arglist>(void *p) const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>BlockAllocator *</type>
      <name>allocator</name>
      <anchorfile>structplayrho_1_1BlockDeallocator.html</anchorfile>
      <anchor>adc65140a048daae726102b98ef3b7191</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_type</type>
      <name>nelem</name>
      <anchorfile>structplayrho_1_1BlockDeallocator.html</anchorfile>
      <anchor>ab0c4e625ef174b6bf21fb072cde901b4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::Body</name>
    <filename>classplayrho_1_1d2_1_1Body.html</filename>
    <member kind="enumvalue">
      <name>e_accelerationFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1a029de9b5dc46e0aeafb5d4a1d07de68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_autoSleepFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1af96fd45879ce62d9185e7fdaf5da305c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_awakeFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1a2d0838d2a70832764fca9f12290e316e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_enabledFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1ab642621a09cb53da442bf6c07c735a2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_fixedRotationFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1a221d6e987279b06446f29148ea305584</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_impenetrableFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1a9636c5bffb473d210e5b096dba69d13b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_massDataDirtyFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1ab2cc56a0f6625365566461c2ad259885</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_velocityFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1a1c6a6996666ee68cb63f0a5574632b25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Flag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_awakeFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1a2d0838d2a70832764fca9f12290e316e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_autoSleepFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1af96fd45879ce62d9185e7fdaf5da305c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_impenetrableFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1a9636c5bffb473d210e5b096dba69d13b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_fixedRotationFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1a221d6e987279b06446f29148ea305584</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_enabledFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1ab642621a09cb53da442bf6c07c735a2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_velocityFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1a1c6a6996666ee68cb63f0a5574632b25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_accelerationFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1a029de9b5dc46e0aeafb5d4a1d07de68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_massDataDirtyFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1ab2cc56a0f6625365566461c2ad259885</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::uint16_t</type>
      <name>FlagsType</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a14412adef525843359094736776c0cc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Body</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ac55d448e1bde256f0dbf7824fb1deaa3</anchor>
      <arglist>(const BodyConf &amp;bd=GetDefaultBodyConf())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Advance0</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a60069dabb41d21b3720f3e1fe68c6702</anchor>
      <arglist>(ZeroToUnderOneFF&lt; Real &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Body &amp;</type>
      <name>Attach</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a3566096889324eb250b5def78428385b</anchor>
      <arglist>(ShapeID shapeId)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Detach</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a7b3ced75366a6a8e6dab9a43fd55984a</anchor>
      <arglist>(ShapeID shapeId)</arglist>
    </member>
    <member kind="function">
      <type>AngularAcceleration</type>
      <name>GetAngularAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a6d1817724aad0e2655c16c4721a75d48</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Frequency &gt;</type>
      <name>GetAngularDamping</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a1e7bc9caea686d310a1cc2aee805b5ae</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>FlagsType</type>
      <name>GetFlags</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a809ae0e9bf9ee289fb3e570cb6cf25dd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegativeFF&lt; InvMass &gt;</type>
      <name>GetInvMass</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>afab0a390c2d7e16f64db6f4ddbfdc975</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegativeFF&lt; InvRotInertia &gt;</type>
      <name>GetInvRotInertia</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a8ff3d44b2739fb3b066270db4be2da7a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearAcceleration2</type>
      <name>GetLinearAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ad408734219c952c485b18375b26365aa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Frequency &gt;</type>
      <name>GetLinearDamping</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a9fc8e671e71c96267e77714f1e95d9dd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; ShapeID &gt; &amp;</type>
      <name>GetShapes</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>abd3e55def4a2dbffd86150cc9f83f98d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Sweep &amp;</type>
      <name>GetSweep</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a100b4822505143079cde749303494809</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Transformation &amp;</type>
      <name>GetTransformation</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a7987170b5f0cd8224735b960f06fcf59</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyType</type>
      <name>GetType</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a91f44b797b80539941b65a15c2ffee5d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Time</type>
      <name>GetUnderActiveTime</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>abc897bc2cda122d02fccdb3c5c11049d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Velocity</type>
      <name>GetVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a60d609b9f5c0a1d568b3fc42d169c428</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>JustSetVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a70e7705910ea350a7721bf5477e1f391</anchor>
      <arglist>(const Velocity &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetAlpha0</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a5eb5335800a6e5b0b37e946f0d011fd2</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>abb921582a11b07be4c8ac81c43787176</anchor>
      <arglist>(const LinearAcceleration2 &amp;linear, AngularAcceleration angular) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngularDamping</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a85169a6266e1ecfa2e25ecc12175218a</anchor>
      <arglist>(NonNegative&lt; Frequency &gt; angularDamping) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAwake</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a794c4c1b8c24aedb959c5031a5ecde69</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAwakeFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ae06b70496e35fc753fab2733824f76eb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a2f3382a712a5573c2a476050d60513a3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFixedRotation</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ad73e9bd7dbdeaaaa4618cbb06559dd34</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetImpenetrable</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a50b9cf4b6ab620a4442cf19a4ee39923</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetInvMassData</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>aeaaabca11d576c36c966da926fcde2db</anchor>
      <arglist>(NonNegative&lt; InvMass &gt; invMass, NonNegative&lt; InvRotInertia &gt; invRotI) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLinearDamping</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>acd5523b855b544fe285d0fa5a23c3398</anchor>
      <arglist>(NonNegative&lt; Frequency &gt; linearDamping) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPosition0</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>aa75a3dd698cd9472908f86a9903c0aad</anchor>
      <arglist>(const Position &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPosition1</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a4e1fdd99a0729a63a6a699b59e14b9a8</anchor>
      <arglist>(const Position &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetShapes</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a5ae2cb923c532dba000fb448a9ec801c</anchor>
      <arglist>(std::vector&lt; ShapeID &gt; value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSleepingAllowed</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a96bfa8ab63b3246ed714573661ea3618</anchor>
      <arglist>(bool flag) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSweep</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>aff436223b960a71937476dea03117d9c</anchor>
      <arglist>(const Sweep &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetType</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a18dac43bb044e0d0f5b5dc461a7b9bea</anchor>
      <arglist>(BodyType value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetUnderActiveTime</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a0a6f3e57e6a9b132f30f3d3f85ca5802</anchor>
      <arglist>(Time value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a32b0b95d49a70472d8667fc97959151c</anchor>
      <arglist>(const Velocity &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetAwake</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a7821d9464b36b49ddb893ef9c2c262fb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetAwakeFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a93a71d2a1b85e02d33548c6672437599</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a0caf1447c287fcfa4833726acd263439</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetImpenetrable</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ac0a4e7da62712ec6e5c10f8637b59eca</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FlagsType</type>
      <name>GetFlags</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a137e2e62f0ad8b1b21695955fd3b900e</anchor>
      <arglist>(BodyType type) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FlagsType</type>
      <name>GetFlags</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>accc993b94d08acd0603cbec51a1d30b4</anchor>
      <arglist>(const BodyConf &amp;bd) noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultAngularDamping</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>aa12ed6cef17df4e573c151ae76539d00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultLinearDamping</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a25520091dfb6f5bf5b6bcb09817b3107</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyAngularImpulse</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a5d1467095e23488ca1344a26336aae8f</anchor>
      <arglist>(Body &amp;body, AngularMomentum impulse) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyLinearImpulse</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a822028bbec557a6caf1040105f78244f</anchor>
      <arglist>(Body &amp;body, const Momentum2 &amp;impulse, const Length2 &amp;point) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Awaken</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a4834708af29bcc9ae39ebfc2b9f580f6</anchor>
      <arglist>(Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Acceleration</type>
      <name>GetAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>acafaac4ef15f7416f464dff9b19780fa</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngle</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a93f21ae0c92245d912cb91a99e756946</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AngularAcceleration</type>
      <name>GetAngularAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a986b11edba421b23879fa363c557f1e5</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Frequency &gt;</type>
      <name>GetAngularDamping</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a7543270614333c0aa69df56877a3a1bd</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetAngularVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a306635dbd11f92ad1020a386fce7b7c2</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyConf</type>
      <name>GetBodyConf</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a26bbc90e5b2c4192b598dfeefc692196</anchor>
      <arglist>(const Body &amp;body)</arglist>
    </member>
    <member kind="function">
      <type>Body::FlagsType</type>
      <name>GetFlags</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a21071397aafb9df4a10e1abde2d11421</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Force2</type>
      <name>GetForce</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a82eaa61b6bddf682fe315f09830e2bfc</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegativeFF&lt; InvMass &gt;</type>
      <name>GetInvMass</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a7d74493ba9108b54a9900eb8319ede92</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegativeFF&lt; InvRotInertia &gt;</type>
      <name>GetInvRotInertia</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a4c2a6d79f4824a9d3d9971b60a865e47</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearAcceleration2</type>
      <name>GetLinearAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>aef76fc5d7813af886e28e8033e9d019d</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Frequency &gt;</type>
      <name>GetLinearDamping</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a19b401f474facc647922e54a7aa60aa8</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity2</type>
      <name>GetLinearVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a3802163b90f631b001eaa0201be419c9</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity2</type>
      <name>GetLinearVelocityFromLocalPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a35436f653d3b5cad6584a34e530e825e</anchor>
      <arglist>(const Body &amp;body, const Length2 &amp;localPoint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity2</type>
      <name>GetLinearVelocityFromWorldPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a9139b405ca94083b92bb773c43cf5abe</anchor>
      <arglist>(const Body &amp;body, const Length2 &amp;worldPoint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ac687607740e4b5d123eba7d7c3b8a3f3</anchor>
      <arglist>(const Body &amp;body, const Length2 &amp;worldPoint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RotInertia</type>
      <name>GetLocalRotInertia</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>accc0736257251f381353661320af972e</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetLocalVector</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ad524fa0b4ae0f8847070328bdee06572</anchor>
      <arglist>(const Body &amp;body, const UnitVec &amp;uv) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocation</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a8a6f694cab71d0db91049dc0908de63f</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Mass</type>
      <name>GetMass</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a3c355eb58981b97e5901fa7d04052507</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>GetPosition</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a1ee2be09f607ec37050c91dc3a5d0f92</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>GetPosition0</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a295726fcb0ed9f3bd0a8cc3288f5f552</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>GetPosition1</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a77de45b3fab735d0f87a0978a622a9c0</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RotInertia</type>
      <name>GetRotInertia</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a4c4c855f042444d0122919f8c1559ccb</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; ShapeID &gt; &amp;</type>
      <name>GetShapes</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a63b209948a3e0c8c4904f7ff662abfd5</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Sweep &amp;</type>
      <name>GetSweep</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a83c03ab97ee5e1a0cdb1a41a62050ccc</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Torque</type>
      <name>GetTorque</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a18e2ece8e057b22c240cf681aca400b5</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Transformation &amp;</type>
      <name>GetTransformation</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a798bf0d73d9cdbbaad16af6fd13cfed0</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyType</type>
      <name>GetType</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a421d2110404320428fd02b2d0b70a062</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Time</type>
      <name>GetUnderActiveTime</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a1192c89bb1512e70b1fb878c1b29a452</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Velocity</type>
      <name>GetVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a13ee26a73a0987dbb7c825539590719d</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Velocity</type>
      <name>GetVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ab873f18f1e540da43881e7f2dadeb7b1</anchor>
      <arglist>(const Body &amp;body, Time h) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetWorldPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a5eba7c0bd135eb4e0445063929639961</anchor>
      <arglist>(const Body &amp;body, const Length2 &amp;localPoint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetWorldVector</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a4bf32a6c0d4ac08ef187ac68d14886dc</anchor>
      <arglist>(const Body &amp;body, const Length2 &amp;localVector) noexcept</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetWorldVector</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>abd3a5456b15768fa846cb40d6b32a259</anchor>
      <arglist>(const Body &amp;body, const UnitVec &amp;localVector) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAccelerable</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ad1f05a05c6dd9eb2a1564cc10032f16c</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAwake</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a139df81757401545db36e6fc6f030d75</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ab930c47cedb9dc4fe0d6e178e7651d54</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsFixedRotation</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a91940e85abf08596f625348315452e3d</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsImpenetrable</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a8c4170f49badbf1881f371cfb5f466a7</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMassDataDirty</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af3540987384e881f23e28f5a9c710ae1</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSleepingAllowed</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a1cde4db895479e9ddd34c70425811699</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSpeedable</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a81c7a4d7696e9cb367f241afdbbe2727</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ad57faa5642b6526d57f2f066cb74c3a9</anchor>
      <arglist>(const Body &amp;lhs, const Body &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a2e61d578b8ec391d98178299024b5c4f</anchor>
      <arglist>(const Body &amp;lhs, const Body &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a5907db10db49a1e6d7f8b8bc59dfa8e8</anchor>
      <arglist>(Body &amp;body, AngularAcceleration value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a005d180107a41f007d4c495abdebd06f</anchor>
      <arglist>(Body &amp;body, const Acceleration &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>aaab26b27ef305db5fd455a7bfb3206f0</anchor>
      <arglist>(Body &amp;body, const LinearAcceleration2 &amp;linear, AngularAcceleration angular) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a9455cc8ec4240be80b646f9430abe1e4</anchor>
      <arglist>(Body &amp;body, const LinearAcceleration2 &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngle</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a74f2e2a8032d7b5291345a26eaefb466</anchor>
      <arglist>(Body &amp;body, Angle value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngularDamping</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a344a9753e8cd6fb046a57e82d2206d60</anchor>
      <arglist>(Body &amp;body, NonNegative&lt; Frequency &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAwake</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a60201ffd45e0d810ff5d4fb90fd0bc4b</anchor>
      <arglist>(Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>abfae76ec0240c61e85bed996119d130e</anchor>
      <arglist>(Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a88826de33b9ad1fe847120458fe3a836</anchor>
      <arglist>(Body &amp;body, bool value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFixedRotation</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a546de4c838854e1d2bee174a4cf264e5</anchor>
      <arglist>(Body &amp;body, bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetImpenetrable</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>aaf57ca63655e6eaeac4d9e65a8e7be4a</anchor>
      <arglist>(Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLinearDamping</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a9901b5b3ddb898a60f216007adace0de</anchor>
      <arglist>(Body &amp;body, NonNegative&lt; Frequency &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLocation</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a76402b6c315dc2ed79b40b531306403a</anchor>
      <arglist>(Body &amp;body, const Length2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMass</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af26ae548ac842dfc9c1da2230b224870</anchor>
      <arglist>(Body &amp;body, Mass mass)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPosition0</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>acedc779293d6c9cacd1cb15ae0fe9600</anchor>
      <arglist>(Body &amp;body, const Position &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPosition1</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>aaefd53390bb21fa5e3b17f59ad320c4e</anchor>
      <arglist>(Body &amp;body, const Position &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRotInertia</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a6c126330f4880228831cbacb1fb81df6</anchor>
      <arglist>(Body &amp;body, RotInertia value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSleepingAllowed</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a54802d32ec837cdf5669744c20dca3df</anchor>
      <arglist>(Body &amp;body, bool value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSweep</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a1f30cb6266cb2f950ea5fdb5aae58d1b</anchor>
      <arglist>(Body &amp;body, const Sweep &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTransformation</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ad4c0253fd8704a22847a80fd634620a2</anchor>
      <arglist>(Body &amp;body, const Transformation &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetType</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a2a12afea1828cb69ef94cbfa86018069</anchor>
      <arglist>(Body &amp;body, BodyType value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>adc771e5dfb30f44b8b71f15cd9e5f950</anchor>
      <arglist>(Body &amp;body, AngularVelocity value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a6a3b4ab8ab7e96a8cac1cb64a9c401c6</anchor>
      <arglist>(Body &amp;body, const LinearVelocity2 &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>adddd763be5890fad18f5a3dd9d2b4d38</anchor>
      <arglist>(Body &amp;body, const Velocity &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Unawaken</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>abdfbff06306e4ecb71f6d4b2136eea7c</anchor>
      <arglist>(Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetAwake</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>afce7db62d828a84a94e8c6222d9111a6</anchor>
      <arglist>(Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a5f8f4bd2d2daa7bbd38dbe9b0919f08e</anchor>
      <arglist>(Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetImpenetrable</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a2ba4e5cbd12444be971a3ef0a09e9931</anchor>
      <arglist>(Body &amp;body) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::BodyConf</name>
    <filename>structplayrho_1_1d2_1_1BodyConf.html</filename>
    <member kind="function">
      <type>constexpr BodyConf &amp;</type>
      <name>Use</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a6cb9c460a5cae05876e35a061751f4f9</anchor>
      <arglist>(BodyType t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyConf &amp;</type>
      <name>Use</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>abd37e5a3e31a8c63c8f2a29854365523</anchor>
      <arglist>(const Position &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyConf &amp;</type>
      <name>Use</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a61e497b4af762c93bb99b28abf3bd3da</anchor>
      <arglist>(const Sweep &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyConf &amp;</type>
      <name>Use</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>aa0a447c063bc36705495ca21d1e34149</anchor>
      <arglist>(const Velocity &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyConf &amp;</type>
      <name>Use</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>ab64009aa08d09620a49e0e945c86834f</anchor>
      <arglist>(ShapeID v)</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyConf &amp;</type>
      <name>Use</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>acd046ae22f76aa0bd4fde41125f2acd8</anchor>
      <arglist>(Span&lt; const ShapeID &gt; v)</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyConf &amp;</type>
      <name>UseAllowSleep</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a3a1cd093faf3a5372ee5141fc6abf2d7</anchor>
      <arglist>(bool value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyConf &amp;</type>
      <name>UseAngle</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a1d046aac55ea235655d0866728a4d26b</anchor>
      <arglist>(Angle a) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyConf &amp;</type>
      <name>UseAngularAcceleration</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a03e07243945428ca19b4ad753ce12e60</anchor>
      <arglist>(AngularAcceleration v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyConf &amp;</type>
      <name>UseAngularDamping</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a396cdc82c429d6e63c4d22bf8051bc64</anchor>
      <arglist>(NonNegative&lt; Frequency &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyConf &amp;</type>
      <name>UseAngularVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a6355fffffd67dd4a2078e0d1151a5c4d</anchor>
      <arglist>(AngularVelocity v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyConf &amp;</type>
      <name>UseAwake</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a72f8c52f313ac9373bedaf389c36e5f4</anchor>
      <arglist>(bool value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyConf &amp;</type>
      <name>UseBullet</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>ae9c18c40110df721ad618d3dd0fcc6cb</anchor>
      <arglist>(bool value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyConf &amp;</type>
      <name>UseEnabled</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a480439c21d12b079cd8fc5e6dd645ba4</anchor>
      <arglist>(bool value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyConf &amp;</type>
      <name>UseFixedRotation</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>ae1537c26b15e8c24b3ce6ec3a43b40fa</anchor>
      <arglist>(bool value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyConf &amp;</type>
      <name>UseInvMass</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>ad59f4df4f63fc99d5e461be6a0fce8c8</anchor>
      <arglist>(const NonNegative&lt; InvMass &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyConf &amp;</type>
      <name>UseInvRotI</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>ad085ed12cf69bc6de06c971c3b0e99ea</anchor>
      <arglist>(const NonNegative&lt; InvRotInertia &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyConf &amp;</type>
      <name>UseLinearAcceleration</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>af0c1aa4a29b75c37880351e181ecbefc</anchor>
      <arglist>(const LinearAcceleration2 &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyConf &amp;</type>
      <name>UseLinearDamping</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a62abc258fbb6ae02e04a34bbee355684</anchor>
      <arglist>(NonNegative&lt; Frequency &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyConf &amp;</type>
      <name>UseLinearVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a42645afc946b8ba3415b7452488482e4</anchor>
      <arglist>(const LinearVelocity2 &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyConf &amp;</type>
      <name>UseLocation</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>aa4e1fe1403ad7d0e385dfe2dba0ada91</anchor>
      <arglist>(const Length2 &amp;l) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyConf &amp;</type>
      <name>UseMassDataDirty</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>afbe2214b980cd5964d469b55dbb5c8b3</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyConf &amp;</type>
      <name>UseType</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a49ce681752862a2f5466df143cd8a0f0</anchor>
      <arglist>(BodyType t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyConf &amp;</type>
      <name>UseUnderActiveTime</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a2b4e162e3432a14f827cfc6d492fc51a</anchor>
      <arglist>(Time v) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>allowSleep</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a9ff6df501796f81620a27a612c9cfa8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AngularAcceleration</type>
      <name>angularAcceleration</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a79881dcf474db656032f5834391c1e32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Frequency &gt;</type>
      <name>angularDamping</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>acd247e252ae4e8a5ece40382e0b0be49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AngularVelocity</type>
      <name>angularVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a3034b706dd80b92a0f391911daba2679</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>awake</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a860f348c00843664f24f9bf42d0ee31c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>bullet</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a635dab49119a08c2ddbe1c082c502e29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enabled</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a20ba510bb1a2641244d3cdb27be45a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>fixedRotation</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>aaa88fe1ed7c981bef6bafcadde8472d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; InvMass &gt;</type>
      <name>invMass</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>af8d49c36fd0ad1df8592e40dd05f6a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; InvRotInertia &gt;</type>
      <name>invRotI</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a8a82bd37c9a2121f634e791ece5078b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinearAcceleration2</type>
      <name>linearAcceleration</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>aca2c87d68e5476d3c1443a5360fac747</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Frequency &gt;</type>
      <name>linearDamping</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a403ac9e5010e1cf2cd831c6e14b26c10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinearVelocity2</type>
      <name>linearVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a505089bd57b75722c4b7c2e77738ee98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>massDataDirty</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>af4bd4c3c52ae6dbf353f0abc4f1b44c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ArrayList&lt; ShapeID, MaxShapes &gt;</type>
      <name>shapes</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>aabf75cf288f695d10aa3a8c5e4c47513</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Sweep</type>
      <name>sweep</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a7eaf7a9aab1d445634a41b18f8d05ca0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BodyType</type>
      <name>type</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a3f1a14b4e932c2e1fa3d78d8b069ec23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Time</type>
      <name>underActiveTime</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>af9559f3076e32dc79e9455d07c666b3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultAllowSleep</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a688926eb9d90b5b4155d71c7e2b7328b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultAngularAcceleration</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a0e95bc64a9135b0a8e38cd29ea91780a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultAngularDamping</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a97e861b9bdcb1894b6c1f36c94afa7ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultAngularVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a6f815035f23b3d49332b378303f2a54a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultAwake</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>ad59f007a4c54d5aee078da5bee364992</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultBodyType</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a9cf3c0ef173a0e487076ba9a5d17f7d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultBullet</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a3bee0b0a60d22fda96d3966f07c0b436</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultEnabled</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a646c47658e54222fd6fa6510b501cee9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultFixedRotation</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a64493e668016622d1ed9770da3535a9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultInvMass</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a272cd7ba1f8904ddd77b64ddbe09f210</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultInvRotI</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a307570b1c9ea8467bb5877184b30eed9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultLinearAcceleration</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a4e3392d4b10e1d31bb36d492a853c57e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultLinearDamping</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a38de11455c591607d258087fedf7d8bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultLinearVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a3cee9202022cf1a2107906f6ce94c729</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultMassDataDirty</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>afcb41740f7bd0b66cbe21cdb361a809a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultSweep</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>ac197faa4bbb38c8fca8be1d70e44f8e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultUnderActiveTime</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>ab12a044a711bcc013de27912b11c7710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>MaxShapes</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a2a6999995e7f6eb1d8136254edc69dd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetAngle</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a6e36744b63f83418fefcdc1642acbbf8</anchor>
      <arglist>(const BodyConf &amp;conf) noexcept -&gt; Angle</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyConf</type>
      <name>GetDefaultBodyConf</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>af6c1034a2366e6ef466253aea8a13829</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLocation</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>af305801683ef38d8ef1fbd65a5f8fa55</anchor>
      <arglist>(const BodyConf &amp;conf) noexcept -&gt; Length2</arglist>
    </member>
    <member kind="function">
      <type>Transformation</type>
      <name>GetTransformation</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a178733ef87c116856614750d49785cd5</anchor>
      <arglist>(const BodyConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a50e186f203ad0d5f7c851058802978fd</anchor>
      <arglist>(const BodyConf &amp;lhs, const BodyConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a0106f5ff990330d8e8afcd906cefa75a</anchor>
      <arglist>(const BodyConf &amp;lhs, const BodyConf &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::BodyConstraint</name>
    <filename>classplayrho_1_1d2_1_1BodyConstraint.html</filename>
    <member kind="function">
      <type>constexpr</type>
      <name>BodyConstraint</name>
      <anchorfile>classplayrho_1_1d2_1_1BodyConstraint.html</anchorfile>
      <anchor>acd5a582fd0003c33e1e0ec33e483f8a0</anchor>
      <arglist>(InvMass invMass, InvRotInertia invRotI, const Length2 &amp;localCenter, const Position &amp;position, const Velocity &amp;velocity) noexcept</arglist>
    </member>
    <member kind="function">
      <type>InvMass</type>
      <name>GetInvMass</name>
      <anchorfile>classplayrho_1_1d2_1_1BodyConstraint.html</anchorfile>
      <anchor>a328ec8b7b4d3e950ac42697d7597c61a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>InvRotInertia</type>
      <name>GetInvRotInertia</name>
      <anchorfile>classplayrho_1_1d2_1_1BodyConstraint.html</anchorfile>
      <anchor>aa4794ccca1702fce9599a9a160737b4a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalCenter</name>
      <anchorfile>classplayrho_1_1d2_1_1BodyConstraint.html</anchorfile>
      <anchor>a31da1c05473e3f5dc3d03a4dee43b1ea</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>GetPosition</name>
      <anchorfile>classplayrho_1_1d2_1_1BodyConstraint.html</anchorfile>
      <anchor>aee75c449b34cc293956e72d2d4c0cc66</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Velocity</type>
      <name>GetVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1BodyConstraint.html</anchorfile>
      <anchor>ac67a11b5d917548f54bbf08935f0506c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyConstraint &amp;</type>
      <name>SetPosition</name>
      <anchorfile>classplayrho_1_1d2_1_1BodyConstraint.html</anchorfile>
      <anchor>a029a000b5ed14578c451483630beb487</anchor>
      <arglist>(const Position &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyConstraint &amp;</type>
      <name>SetVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1BodyConstraint.html</anchorfile>
      <anchor>a50a8d3716f6263cdfa096eb357e2d7c9</anchor>
      <arglist>(const Velocity &amp;value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::pmr::PoolMemoryResource::BufferRecord</name>
    <filename>classplayrho_1_1pmr_1_1PoolMemoryResource_1_1BufferRecord.html</filename>
    <member kind="function">
      <type></type>
      <name>BufferRecord</name>
      <anchorfile>classplayrho_1_1pmr_1_1PoolMemoryResource_1_1BufferRecord.html</anchorfile>
      <anchor>a0e84c20006ae2999e7ef0bd00b8f349c</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BufferRecord</name>
      <anchorfile>classplayrho_1_1pmr_1_1PoolMemoryResource_1_1BufferRecord.html</anchorfile>
      <anchor>aba0d0ae7bb15e7944815d725096212c4</anchor>
      <arglist>(BufferRecord &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BufferRecord</name>
      <anchorfile>classplayrho_1_1pmr_1_1PoolMemoryResource_1_1BufferRecord.html</anchorfile>
      <anchor>a6392cb75ff04df732522efd53faee9fb</anchor>
      <arglist>(const BufferRecord &amp;other)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BufferRecord</name>
      <anchorfile>classplayrho_1_1pmr_1_1PoolMemoryResource_1_1BufferRecord.html</anchorfile>
      <anchor>a2ee26f9e57b36081c470379ddad1f6f0</anchor>
      <arglist>(void *p, std::size_t n, std::size_t a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BufferRecord</name>
      <anchorfile>classplayrho_1_1pmr_1_1PoolMemoryResource_1_1BufferRecord.html</anchorfile>
      <anchor>a4b47781c4a9395ce6e877f0675a302c5</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>alignment</name>
      <anchorfile>classplayrho_1_1pmr_1_1PoolMemoryResource_1_1BufferRecord.html</anchorfile>
      <anchor>a3274315b72bc5c87daf3cbeba3bfd916</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocate</name>
      <anchorfile>classplayrho_1_1pmr_1_1PoolMemoryResource_1_1BufferRecord.html</anchorfile>
      <anchor>a454e743b96b21cc9b7e7d3d76e879468</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>BufferRecord &amp;</type>
      <name>assign</name>
      <anchorfile>classplayrho_1_1pmr_1_1PoolMemoryResource_1_1BufferRecord.html</anchorfile>
      <anchor>a657231629e65f79004bb0f4518c01b06</anchor>
      <arglist>(void *p, std::size_t n, std::size_t a) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>data</name>
      <anchorfile>classplayrho_1_1pmr_1_1PoolMemoryResource_1_1BufferRecord.html</anchorfile>
      <anchor>adbfed1ad59f2401f74b8eafb739ef9a9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocate</name>
      <anchorfile>classplayrho_1_1pmr_1_1PoolMemoryResource_1_1BufferRecord.html</anchorfile>
      <anchor>a0590cc1384cfcc744f62cb63eebc4d4b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_allocated</name>
      <anchorfile>classplayrho_1_1pmr_1_1PoolMemoryResource_1_1BufferRecord.html</anchorfile>
      <anchor>a45f104741b40fc71016ce536090cac96</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>BufferRecord &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1pmr_1_1PoolMemoryResource_1_1BufferRecord.html</anchorfile>
      <anchor>ac1fea7078bacd1a6a6e278940aed8933</anchor>
      <arglist>(BufferRecord &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BufferRecord &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1pmr_1_1PoolMemoryResource_1_1BufferRecord.html</anchorfile>
      <anchor>a95c75bd4468b446971c4d5db66e3b777</anchor>
      <arglist>(const BufferRecord &amp;other)=delete</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classplayrho_1_1pmr_1_1PoolMemoryResource_1_1BufferRecord.html</anchorfile>
      <anchor>ab42f7faecfb32213cec2ebfeebf3036c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ssize_t</type>
      <name>ssize</name>
      <anchorfile>classplayrho_1_1pmr_1_1PoolMemoryResource_1_1BufferRecord.html</anchorfile>
      <anchor>ad46fcc07d254fb41a59113747d07e1ec</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::Simplex::Cache</name>
    <filename>structplayrho_1_1d2_1_1Simplex_1_1Cache.html</filename>
    <member kind="variable">
      <type>IndexPair3</type>
      <name>indices</name>
      <anchorfile>structplayrho_1_1d2_1_1Simplex_1_1Cache.html</anchorfile>
      <anchor>a1f737deec07431d60875cb33adc9d5dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>metric</name>
      <anchorfile>structplayrho_1_1d2_1_1Simplex_1_1Cache.html</anchorfile>
      <anchor>a8b4b052c3bbcad4f0459b19da5cd69d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::ChainShapeConf</name>
    <filename>structplayrho_1_1d2_1_1ChainShapeConf.html</filename>
    <base>ShapeBuilder&lt; ChainShapeConf &gt;</base>
    <class kind="class">playrho::d2::ChainShapeConf::VerticesWithNormals</class>
    <member kind="function">
      <type>ChainShapeConf &amp;</type>
      <name>Add</name>
      <anchorfile>structplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>a050cde99615da966971db9a2a2221599</anchor>
      <arglist>(const Length2 &amp;vertex)</arglist>
    </member>
    <member kind="function">
      <type>DistanceProxy</type>
      <name>GetChild</name>
      <anchorfile>structplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>aad58b3ff7b02274deaac614b0799aa3a</anchor>
      <arglist>(ChildCounter index) const</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetChildCount</name>
      <anchorfile>structplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>a93f5443670a216ba6ec1f91503196d87</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>structplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>acf3a62f07bbb6fdaeb1cbc962d62feb8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetNormal</name>
      <anchorfile>structplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>ad9fc03054ddd0ad4e6b7ef87bb90296b</anchor>
      <arglist>(ChildCounter index) const</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetVertex</name>
      <anchorfile>structplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>af93574aab3c319909a163bf47b9c5f3f</anchor>
      <arglist>(ChildCounter index) const</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetVertexCount</name>
      <anchorfile>structplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>a5e70b4b91eee211bfd66f4f8c35f4694</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ChainShapeConf &amp;</type>
      <name>Rotate</name>
      <anchorfile>structplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>a43a360caa00691592b20979a0074eb85</anchor>
      <arglist>(const UnitVec &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>ChainShapeConf &amp;</type>
      <name>Scale</name>
      <anchorfile>structplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>afe80efb1b52f6aaa66efc2ae4a10a3d2</anchor>
      <arglist>(const Vec2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>ChainShapeConf &amp;</type>
      <name>Set</name>
      <anchorfile>structplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>a3e152a2ade140d44de91350012e5ba70</anchor>
      <arglist>(std::vector&lt; Length2 &gt; vertices)</arglist>
    </member>
    <member kind="function">
      <type>ChainShapeConf &amp;</type>
      <name>Translate</name>
      <anchorfile>structplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>add6b71b4cd924b7319674810753ce748</anchor>
      <arglist>(const Length2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>ChainShapeConf &amp;</type>
      <name>UseVertexRadius</name>
      <anchorfile>structplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>a9decae5ce2d539ef3c2cf60618147f36</anchor>
      <arglist>(NonNegative&lt; Length &gt; value) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr NonNegative&lt; Length &gt;</type>
      <name>GetDefaultVertexRadius</name>
      <anchorfile>structplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>abbd9e21a6b8f40b76a2d9efa021126d1</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>VerticesWithNormals</type>
      <name>segments</name>
      <anchorfile>structplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>ae74cfc2bcab5ba60f69511afcd968906</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Length &gt;</type>
      <name>vertexRadius</name>
      <anchorfile>structplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>ae913f960a60acc99531e36bb04a47819</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultVertexRadius</name>
      <anchorfile>structplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>a5699086378a35b19977a0ba9945cfe36</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>ad44c87454b3202c77105e5859f1ee276</anchor>
      <arglist>(const ChainShapeConf &amp;lhs, const ChainShapeConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>a0beaec4204c1bbce524ed5d27cff04fc</anchor>
      <arglist>(const ChainShapeConf &amp;lhs, const ChainShapeConf &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::detail::Checked</name>
    <filename>classplayrho_1_1detail_1_1Checked.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>NoExcept</templarg>
    <class kind="struct">playrho::detail::Checked::IsChecked</class>
    <class kind="struct">playrho::detail::Checked::IsChecked&lt; Checked&lt; V, C, N &gt; &gt;</class>
    <member kind="typedef">
      <type>Checker</type>
      <name>checker_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0126d8ae64781661f7a81abd5c2c3b32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InvalidArgument</type>
      <name>exception_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a6e1de9cc039b2ac32262d38e7ea90a3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_pointer_t&lt; ValueType &gt;</type>
      <name>remove_pointer_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a5195c96ea6ee491e75d93ce702553cda</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ValueType</type>
      <name>underlying_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a9e35f866c948764bbd1a9f8621b0181f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aafb88ef5ee8cb239f0ec9334a68d83de</anchor>
      <arglist>() noexcept(NoExcept)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a50a11eeca99e03d961cf4655f1d58206</anchor>
      <arglist>(const Checked&lt; OtherValueType, OtherChecker, OtherNoExcept &gt; &amp;other) noexcept(NoExcept)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a4ae56dcc4a01f7db4a387f9e05ceec32</anchor>
      <arglist>(const Checked&lt; ValueType, Checker, OtherNoExcept &gt; &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7f59a65c81a2710b4c278c4d795a6f02</anchor>
      <arglist>(U &amp;&amp;value) noexcept(NoExcept)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7f59a65c81a2710b4c278c4d795a6f02</anchor>
      <arglist>(U &amp;&amp;value) noexcept(NoExcept)</arglist>
    </member>
    <member kind="function">
      <type>constexpr underlying_type</type>
      <name>get</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aaf48e8aea8c64680c2f07cab120992df</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator U</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a78d9cc78de4ae6098d27b6e6268b0097</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator U</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a78d9cc78de4ae6098d27b6e6268b0097</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_pointer_v&lt; U &gt;, remove_pointer_type &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a58a650224561db5ff826180b981d9267</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_pointer_v&lt; U &gt;, U &gt;</type>
      <name>operator-&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>abdc6cb3efdad41ab79f87561dfdefc86</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>ThrowIfInvalid</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a1083c9dc2ffa1226d565f2637882e2a6</anchor>
      <arglist>(const underlying_type &amp;value) -&gt; decltype((void) exception_type(Checker{}(value)), std::declval&lt; void &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>Validate</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7fdfb1b35df6487d1f043ef26c6055f2</anchor>
      <arglist>(const underlying_type &amp;value) noexcept(NoExcept) -&gt; decltype(ThrowIfInvalid(value), underlying_type{})</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a32383015bf171dea637b7a959b7421fa</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;() !=std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs) !=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a4994d33050437f2bd04ce28f82c6cfa9</anchor>
      <arglist>(const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(ValueType(lhs) !=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a1710820c42a3d0fa04fdd7b03ccda485</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;rhs) -&gt; decltype(lhs !=ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a62ccb41874a11ae208e4d2a1840aa898</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) *RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0daf3badd07c3d8a8f75e372aeb10620</anchor>
      <arglist>(const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;lhs, const Other &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliableV&lt; Checked&lt; ValueType, Checker, NoExcept &gt;, Other &gt;, decltype(ValueType() *Other())&gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0c81bd1815fccef0be17df1909886ee3</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliableV&lt; Other, Checked&lt; ValueType, Checker, NoExcept &gt;&gt;, decltype(Other() *ValueType())&gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ad61c4c34236f778ed47268224850b24e</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)+RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab36ff5f373eaf2d495dce40c42e6c792</anchor>
      <arglist>(const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(ValueType(lhs)+rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ac9cf08de554c2029b6bbb90d1890d1d2</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;rhs) -&gt; decltype(lhs+ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a66f17c27ae07bb4d3402817a6f8d52f1</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) - RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab093280c9b756a1aa417ff530bae5072</anchor>
      <arglist>(const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(ValueType(lhs) - rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ae42c345584e1f5fc449daf5e1bfe1b74</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;rhs) -&gt; decltype(lhs - ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aa6546914bb51e238fe23f2da6de2d4eb</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)/RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7afdc583a043ed1144ffd3a8bc254221</anchor>
      <arglist>(const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(ValueType(lhs)/rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a6df49c6b71fae2abdb05858e444b94d2</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;rhs) -&gt; decltype(lhs/ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a00e22b3d70171c770fe2fe13afdff11c</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a8b5a8d7ecc5a2fd34c979a4ed7ee67b8</anchor>
      <arglist>(const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(ValueType(lhs)&lt; ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab1151c88c9fdcd11cb39197aad9e2f9a</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;rhs) -&gt; decltype(ValueType(lhs)&lt; ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7f06e1143875dde6f350188cd20b307b</anchor>
      <arglist>(::std::ostream &amp;os, const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;value) -&gt; decltype(os&lt;&lt; ValueType(value))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a92f80c500536c9ace9c266ca095d4ce2</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aeff78aa037fbc86ce1958b1658ed2510</anchor>
      <arglist>(const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(ValueType(lhs)&lt;=ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>adeb25d8b74e7403ebd78bf324b8101dc</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;rhs) -&gt; decltype(ValueType(lhs)&lt;=ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a8f2e536c4b87e31dd0d088bb64712b70</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;()==std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs)==RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a50beca9c94a84b533dda16d5612c99c1</anchor>
      <arglist>(const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(ValueType(lhs)==rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a3122c1c3be1d11d9e824e227cf58e4f3</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;rhs) -&gt; decltype(lhs==ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a65ffa1dc8fdac606f09d7f1258d76697</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7db684b2001572866a76004dc188482b</anchor>
      <arglist>(const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(ValueType(lhs) &gt; ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ae925670316f198c098c65a2d9fb2e68d</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;rhs) -&gt; decltype(ValueType(lhs) &gt; ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0d2b20e9a7652cad0cb713a9b466268d</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a79e613ff5f9b13c13408daab2deae491</anchor>
      <arglist>(const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(ValueType(lhs) &gt;=ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab9994a039bbf093c9b0e0faddd272dab</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;rhs) -&gt; decltype(ValueType(lhs) &gt;=ValueType(rhs))</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Checked&lt; Angle &gt;</name>
    <filename>classplayrho_1_1detail_1_1Checked.html</filename>
    <member kind="typedef">
      <type>NoOpChecker&lt; Angle &gt;</type>
      <name>checker_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0126d8ae64781661f7a81abd5c2c3b32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InvalidArgument</type>
      <name>exception_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a6e1de9cc039b2ac32262d38e7ea90a3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_pointer_t&lt; Angle &gt;</type>
      <name>remove_pointer_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a5195c96ea6ee491e75d93ce702553cda</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Angle</type>
      <name>underlying_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a9e35f866c948764bbd1a9f8621b0181f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aafb88ef5ee8cb239f0ec9334a68d83de</anchor>
      <arglist>() noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a4ae56dcc4a01f7db4a387f9e05ceec32</anchor>
      <arglist>(const Checked&lt; Angle, NoOpChecker&lt; Angle &gt;, OtherNoExcept &gt; &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a50a11eeca99e03d961cf4655f1d58206</anchor>
      <arglist>(const Checked&lt; OtherValueType, OtherChecker, OtherNoExcept &gt; &amp;other) noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7f59a65c81a2710b4c278c4d795a6f02</anchor>
      <arglist>(U &amp;&amp;value) noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7f59a65c81a2710b4c278c4d795a6f02</anchor>
      <arglist>(U &amp;&amp;value) noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>constexpr underlying_type</type>
      <name>get</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aaf48e8aea8c64680c2f07cab120992df</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator U</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a78d9cc78de4ae6098d27b6e6268b0097</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator U</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a78d9cc78de4ae6098d27b6e6268b0097</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_pointer_v&lt; U &gt;, remove_pointer_type &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a58a650224561db5ff826180b981d9267</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_pointer_v&lt; U &gt;, U &gt;</type>
      <name>operator-&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>abdc6cb3efdad41ab79f87561dfdefc86</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>ThrowIfInvalid</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a1083c9dc2ffa1226d565f2637882e2a6</anchor>
      <arglist>(const underlying_type &amp;value) -&gt; decltype((void) exception_type(NoOpChecker&lt; Angle &gt; {}(value)), std::declval&lt; void &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>Validate</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7fdfb1b35df6487d1f043ef26c6055f2</anchor>
      <arglist>(const underlying_type &amp;value) noexcept(false) -&gt; decltype(ThrowIfInvalid(value), underlying_type{})</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a4994d33050437f2bd04ce28f82c6cfa9</anchor>
      <arglist>(const Checked&lt; Angle, NoOpChecker&lt; Angle &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Angle(lhs) !=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a32383015bf171dea637b7a959b7421fa</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;() !=std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs) !=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a1710820c42a3d0fa04fdd7b03ccda485</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Angle, NoOpChecker&lt; Angle &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs !=Angle(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0daf3badd07c3d8a8f75e372aeb10620</anchor>
      <arglist>(const Checked&lt; Angle, NoOpChecker&lt; Angle &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliableV&lt; Checked&lt; Angle, NoOpChecker&lt; Angle &gt;, false &gt;, Other &gt;, decltype(Angle() *Other())&gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a62ccb41874a11ae208e4d2a1840aa898</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) *RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0c81bd1815fccef0be17df1909886ee3</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Angle, NoOpChecker&lt; Angle &gt;, false &gt; &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliableV&lt; Other, Checked&lt; Angle, NoOpChecker&lt; Angle &gt;, false &gt;&gt;, decltype(Other() *Angle())&gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab36ff5f373eaf2d495dce40c42e6c792</anchor>
      <arglist>(const Checked&lt; Angle, NoOpChecker&lt; Angle &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Angle(lhs)+rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ad61c4c34236f778ed47268224850b24e</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)+RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ac9cf08de554c2029b6bbb90d1890d1d2</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Angle, NoOpChecker&lt; Angle &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs+Angle(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab093280c9b756a1aa417ff530bae5072</anchor>
      <arglist>(const Checked&lt; Angle, NoOpChecker&lt; Angle &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Angle(lhs) - rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a66f17c27ae07bb4d3402817a6f8d52f1</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) - RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ae42c345584e1f5fc449daf5e1bfe1b74</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Angle, NoOpChecker&lt; Angle &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs - Angle(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7afdc583a043ed1144ffd3a8bc254221</anchor>
      <arglist>(const Checked&lt; Angle, NoOpChecker&lt; Angle &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Angle(lhs)/rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aa6546914bb51e238fe23f2da6de2d4eb</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)/RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a6df49c6b71fae2abdb05858e444b94d2</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Angle, NoOpChecker&lt; Angle &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs/Angle(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a8b5a8d7ecc5a2fd34c979a4ed7ee67b8</anchor>
      <arglist>(const Checked&lt; Angle, NoOpChecker&lt; Angle &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Angle(lhs)&lt; Angle(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a00e22b3d70171c770fe2fe13afdff11c</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab1151c88c9fdcd11cb39197aad9e2f9a</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Angle, NoOpChecker&lt; Angle &gt;, false &gt; &amp;rhs) -&gt; decltype(Angle(lhs)&lt; Angle(rhs))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7f06e1143875dde6f350188cd20b307b</anchor>
      <arglist>(::std::ostream &amp;os, const Checked&lt; Angle, NoOpChecker&lt; Angle &gt;, false &gt; &amp;value) -&gt; decltype(os&lt;&lt; Angle(value))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aeff78aa037fbc86ce1958b1658ed2510</anchor>
      <arglist>(const Checked&lt; Angle, NoOpChecker&lt; Angle &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Angle(lhs)&lt;=Angle(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a92f80c500536c9ace9c266ca095d4ce2</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>adeb25d8b74e7403ebd78bf324b8101dc</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Angle, NoOpChecker&lt; Angle &gt;, false &gt; &amp;rhs) -&gt; decltype(Angle(lhs)&lt;=Angle(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a50beca9c94a84b533dda16d5612c99c1</anchor>
      <arglist>(const Checked&lt; Angle, NoOpChecker&lt; Angle &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Angle(lhs)==rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a8f2e536c4b87e31dd0d088bb64712b70</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;()==std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs)==RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a3122c1c3be1d11d9e824e227cf58e4f3</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Angle, NoOpChecker&lt; Angle &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs==Angle(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7db684b2001572866a76004dc188482b</anchor>
      <arglist>(const Checked&lt; Angle, NoOpChecker&lt; Angle &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Angle(lhs) &gt; Angle(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a65ffa1dc8fdac606f09d7f1258d76697</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ae925670316f198c098c65a2d9fb2e68d</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Angle, NoOpChecker&lt; Angle &gt;, false &gt; &amp;rhs) -&gt; decltype(Angle(lhs) &gt; Angle(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a79e613ff5f9b13c13408daab2deae491</anchor>
      <arglist>(const Checked&lt; Angle, NoOpChecker&lt; Angle &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Angle(lhs) &gt;=Angle(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0d2b20e9a7652cad0cb713a9b466268d</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab9994a039bbf093c9b0e0faddd272dab</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Angle, NoOpChecker&lt; Angle &gt;, false &gt; &amp;rhs) -&gt; decltype(Angle(lhs) &gt;=Angle(rhs))</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Checked&lt; AreaDensity &gt;</name>
    <filename>classplayrho_1_1detail_1_1Checked.html</filename>
    <member kind="typedef">
      <type>NoOpChecker&lt; AreaDensity &gt;</type>
      <name>checker_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0126d8ae64781661f7a81abd5c2c3b32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InvalidArgument</type>
      <name>exception_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a6e1de9cc039b2ac32262d38e7ea90a3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_pointer_t&lt; AreaDensity &gt;</type>
      <name>remove_pointer_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a5195c96ea6ee491e75d93ce702553cda</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AreaDensity</type>
      <name>underlying_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a9e35f866c948764bbd1a9f8621b0181f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aafb88ef5ee8cb239f0ec9334a68d83de</anchor>
      <arglist>() noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a4ae56dcc4a01f7db4a387f9e05ceec32</anchor>
      <arglist>(const Checked&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt;, OtherNoExcept &gt; &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a50a11eeca99e03d961cf4655f1d58206</anchor>
      <arglist>(const Checked&lt; OtherValueType, OtherChecker, OtherNoExcept &gt; &amp;other) noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7f59a65c81a2710b4c278c4d795a6f02</anchor>
      <arglist>(U &amp;&amp;value) noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7f59a65c81a2710b4c278c4d795a6f02</anchor>
      <arglist>(U &amp;&amp;value) noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>constexpr underlying_type</type>
      <name>get</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aaf48e8aea8c64680c2f07cab120992df</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator U</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a78d9cc78de4ae6098d27b6e6268b0097</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator U</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a78d9cc78de4ae6098d27b6e6268b0097</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_pointer_v&lt; U &gt;, remove_pointer_type &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a58a650224561db5ff826180b981d9267</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_pointer_v&lt; U &gt;, U &gt;</type>
      <name>operator-&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>abdc6cb3efdad41ab79f87561dfdefc86</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>ThrowIfInvalid</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a1083c9dc2ffa1226d565f2637882e2a6</anchor>
      <arglist>(const underlying_type &amp;value) -&gt; decltype((void) exception_type(NoOpChecker&lt; AreaDensity &gt; {}(value)), std::declval&lt; void &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>Validate</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7fdfb1b35df6487d1f043ef26c6055f2</anchor>
      <arglist>(const underlying_type &amp;value) noexcept(false) -&gt; decltype(ThrowIfInvalid(value), underlying_type{})</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a4994d33050437f2bd04ce28f82c6cfa9</anchor>
      <arglist>(const Checked&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(AreaDensity(lhs) !=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a32383015bf171dea637b7a959b7421fa</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;() !=std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs) !=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a1710820c42a3d0fa04fdd7b03ccda485</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs !=AreaDensity(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0daf3badd07c3d8a8f75e372aeb10620</anchor>
      <arglist>(const Checked&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliableV&lt; Checked&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt;, false &gt;, Other &gt;, decltype(AreaDensity() *Other())&gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a62ccb41874a11ae208e4d2a1840aa898</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) *RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0c81bd1815fccef0be17df1909886ee3</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt;, false &gt; &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliableV&lt; Other, Checked&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt;, false &gt;&gt;, decltype(Other() *AreaDensity())&gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab36ff5f373eaf2d495dce40c42e6c792</anchor>
      <arglist>(const Checked&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(AreaDensity(lhs)+rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ad61c4c34236f778ed47268224850b24e</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)+RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ac9cf08de554c2029b6bbb90d1890d1d2</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs+AreaDensity(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab093280c9b756a1aa417ff530bae5072</anchor>
      <arglist>(const Checked&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(AreaDensity(lhs) - rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a66f17c27ae07bb4d3402817a6f8d52f1</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) - RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ae42c345584e1f5fc449daf5e1bfe1b74</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs - AreaDensity(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7afdc583a043ed1144ffd3a8bc254221</anchor>
      <arglist>(const Checked&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(AreaDensity(lhs)/rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aa6546914bb51e238fe23f2da6de2d4eb</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)/RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a6df49c6b71fae2abdb05858e444b94d2</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs/AreaDensity(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a8b5a8d7ecc5a2fd34c979a4ed7ee67b8</anchor>
      <arglist>(const Checked&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(AreaDensity(lhs)&lt; AreaDensity(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a00e22b3d70171c770fe2fe13afdff11c</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab1151c88c9fdcd11cb39197aad9e2f9a</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt;, false &gt; &amp;rhs) -&gt; decltype(AreaDensity(lhs)&lt; AreaDensity(rhs))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7f06e1143875dde6f350188cd20b307b</anchor>
      <arglist>(::std::ostream &amp;os, const Checked&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt;, false &gt; &amp;value) -&gt; decltype(os&lt;&lt; AreaDensity(value))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aeff78aa037fbc86ce1958b1658ed2510</anchor>
      <arglist>(const Checked&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(AreaDensity(lhs)&lt;=AreaDensity(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a92f80c500536c9ace9c266ca095d4ce2</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>adeb25d8b74e7403ebd78bf324b8101dc</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt;, false &gt; &amp;rhs) -&gt; decltype(AreaDensity(lhs)&lt;=AreaDensity(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a50beca9c94a84b533dda16d5612c99c1</anchor>
      <arglist>(const Checked&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(AreaDensity(lhs)==rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a8f2e536c4b87e31dd0d088bb64712b70</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;()==std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs)==RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a3122c1c3be1d11d9e824e227cf58e4f3</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs==AreaDensity(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7db684b2001572866a76004dc188482b</anchor>
      <arglist>(const Checked&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(AreaDensity(lhs) &gt; AreaDensity(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a65ffa1dc8fdac606f09d7f1258d76697</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ae925670316f198c098c65a2d9fb2e68d</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt;, false &gt; &amp;rhs) -&gt; decltype(AreaDensity(lhs) &gt; AreaDensity(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a79e613ff5f9b13c13408daab2deae491</anchor>
      <arglist>(const Checked&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(AreaDensity(lhs) &gt;=AreaDensity(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0d2b20e9a7652cad0cb713a9b466268d</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab9994a039bbf093c9b0e0faddd272dab</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt;, false &gt; &amp;rhs) -&gt; decltype(AreaDensity(lhs) &gt;=AreaDensity(rhs))</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Checked&lt; Force &gt;</name>
    <filename>classplayrho_1_1detail_1_1Checked.html</filename>
    <member kind="typedef">
      <type>NoOpChecker&lt; Force &gt;</type>
      <name>checker_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0126d8ae64781661f7a81abd5c2c3b32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InvalidArgument</type>
      <name>exception_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a6e1de9cc039b2ac32262d38e7ea90a3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_pointer_t&lt; Force &gt;</type>
      <name>remove_pointer_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a5195c96ea6ee491e75d93ce702553cda</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Force</type>
      <name>underlying_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a9e35f866c948764bbd1a9f8621b0181f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aafb88ef5ee8cb239f0ec9334a68d83de</anchor>
      <arglist>() noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a4ae56dcc4a01f7db4a387f9e05ceec32</anchor>
      <arglist>(const Checked&lt; Force, NoOpChecker&lt; Force &gt;, OtherNoExcept &gt; &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a50a11eeca99e03d961cf4655f1d58206</anchor>
      <arglist>(const Checked&lt; OtherValueType, OtherChecker, OtherNoExcept &gt; &amp;other) noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7f59a65c81a2710b4c278c4d795a6f02</anchor>
      <arglist>(U &amp;&amp;value) noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7f59a65c81a2710b4c278c4d795a6f02</anchor>
      <arglist>(U &amp;&amp;value) noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>constexpr underlying_type</type>
      <name>get</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aaf48e8aea8c64680c2f07cab120992df</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator U</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a78d9cc78de4ae6098d27b6e6268b0097</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator U</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a78d9cc78de4ae6098d27b6e6268b0097</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_pointer_v&lt; U &gt;, remove_pointer_type &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a58a650224561db5ff826180b981d9267</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_pointer_v&lt; U &gt;, U &gt;</type>
      <name>operator-&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>abdc6cb3efdad41ab79f87561dfdefc86</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>ThrowIfInvalid</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a1083c9dc2ffa1226d565f2637882e2a6</anchor>
      <arglist>(const underlying_type &amp;value) -&gt; decltype((void) exception_type(NoOpChecker&lt; Force &gt; {}(value)), std::declval&lt; void &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>Validate</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7fdfb1b35df6487d1f043ef26c6055f2</anchor>
      <arglist>(const underlying_type &amp;value) noexcept(false) -&gt; decltype(ThrowIfInvalid(value), underlying_type{})</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a4994d33050437f2bd04ce28f82c6cfa9</anchor>
      <arglist>(const Checked&lt; Force, NoOpChecker&lt; Force &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Force(lhs) !=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a32383015bf171dea637b7a959b7421fa</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;() !=std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs) !=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a1710820c42a3d0fa04fdd7b03ccda485</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Force, NoOpChecker&lt; Force &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs !=Force(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0daf3badd07c3d8a8f75e372aeb10620</anchor>
      <arglist>(const Checked&lt; Force, NoOpChecker&lt; Force &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliableV&lt; Checked&lt; Force, NoOpChecker&lt; Force &gt;, false &gt;, Other &gt;, decltype(Force() *Other())&gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a62ccb41874a11ae208e4d2a1840aa898</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) *RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0c81bd1815fccef0be17df1909886ee3</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Force, NoOpChecker&lt; Force &gt;, false &gt; &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliableV&lt; Other, Checked&lt; Force, NoOpChecker&lt; Force &gt;, false &gt;&gt;, decltype(Other() *Force())&gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab36ff5f373eaf2d495dce40c42e6c792</anchor>
      <arglist>(const Checked&lt; Force, NoOpChecker&lt; Force &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Force(lhs)+rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ad61c4c34236f778ed47268224850b24e</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)+RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ac9cf08de554c2029b6bbb90d1890d1d2</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Force, NoOpChecker&lt; Force &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs+Force(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab093280c9b756a1aa417ff530bae5072</anchor>
      <arglist>(const Checked&lt; Force, NoOpChecker&lt; Force &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Force(lhs) - rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a66f17c27ae07bb4d3402817a6f8d52f1</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) - RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ae42c345584e1f5fc449daf5e1bfe1b74</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Force, NoOpChecker&lt; Force &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs - Force(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7afdc583a043ed1144ffd3a8bc254221</anchor>
      <arglist>(const Checked&lt; Force, NoOpChecker&lt; Force &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Force(lhs)/rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aa6546914bb51e238fe23f2da6de2d4eb</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)/RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a6df49c6b71fae2abdb05858e444b94d2</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Force, NoOpChecker&lt; Force &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs/Force(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a8b5a8d7ecc5a2fd34c979a4ed7ee67b8</anchor>
      <arglist>(const Checked&lt; Force, NoOpChecker&lt; Force &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Force(lhs)&lt; Force(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a00e22b3d70171c770fe2fe13afdff11c</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab1151c88c9fdcd11cb39197aad9e2f9a</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Force, NoOpChecker&lt; Force &gt;, false &gt; &amp;rhs) -&gt; decltype(Force(lhs)&lt; Force(rhs))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7f06e1143875dde6f350188cd20b307b</anchor>
      <arglist>(::std::ostream &amp;os, const Checked&lt; Force, NoOpChecker&lt; Force &gt;, false &gt; &amp;value) -&gt; decltype(os&lt;&lt; Force(value))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aeff78aa037fbc86ce1958b1658ed2510</anchor>
      <arglist>(const Checked&lt; Force, NoOpChecker&lt; Force &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Force(lhs)&lt;=Force(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a92f80c500536c9ace9c266ca095d4ce2</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>adeb25d8b74e7403ebd78bf324b8101dc</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Force, NoOpChecker&lt; Force &gt;, false &gt; &amp;rhs) -&gt; decltype(Force(lhs)&lt;=Force(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a50beca9c94a84b533dda16d5612c99c1</anchor>
      <arglist>(const Checked&lt; Force, NoOpChecker&lt; Force &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Force(lhs)==rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a8f2e536c4b87e31dd0d088bb64712b70</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;()==std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs)==RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a3122c1c3be1d11d9e824e227cf58e4f3</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Force, NoOpChecker&lt; Force &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs==Force(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7db684b2001572866a76004dc188482b</anchor>
      <arglist>(const Checked&lt; Force, NoOpChecker&lt; Force &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Force(lhs) &gt; Force(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a65ffa1dc8fdac606f09d7f1258d76697</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ae925670316f198c098c65a2d9fb2e68d</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Force, NoOpChecker&lt; Force &gt;, false &gt; &amp;rhs) -&gt; decltype(Force(lhs) &gt; Force(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a79e613ff5f9b13c13408daab2deae491</anchor>
      <arglist>(const Checked&lt; Force, NoOpChecker&lt; Force &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Force(lhs) &gt;=Force(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0d2b20e9a7652cad0cb713a9b466268d</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab9994a039bbf093c9b0e0faddd272dab</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Force, NoOpChecker&lt; Force &gt;, false &gt; &amp;rhs) -&gt; decltype(Force(lhs) &gt;=Force(rhs))</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Checked&lt; Frequency &gt;</name>
    <filename>classplayrho_1_1detail_1_1Checked.html</filename>
    <member kind="typedef">
      <type>NoOpChecker&lt; Frequency &gt;</type>
      <name>checker_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0126d8ae64781661f7a81abd5c2c3b32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InvalidArgument</type>
      <name>exception_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a6e1de9cc039b2ac32262d38e7ea90a3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_pointer_t&lt; Frequency &gt;</type>
      <name>remove_pointer_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a5195c96ea6ee491e75d93ce702553cda</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Frequency</type>
      <name>underlying_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a9e35f866c948764bbd1a9f8621b0181f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aafb88ef5ee8cb239f0ec9334a68d83de</anchor>
      <arglist>() noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a4ae56dcc4a01f7db4a387f9e05ceec32</anchor>
      <arglist>(const Checked&lt; Frequency, NoOpChecker&lt; Frequency &gt;, OtherNoExcept &gt; &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a50a11eeca99e03d961cf4655f1d58206</anchor>
      <arglist>(const Checked&lt; OtherValueType, OtherChecker, OtherNoExcept &gt; &amp;other) noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7f59a65c81a2710b4c278c4d795a6f02</anchor>
      <arglist>(U &amp;&amp;value) noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7f59a65c81a2710b4c278c4d795a6f02</anchor>
      <arglist>(U &amp;&amp;value) noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>constexpr underlying_type</type>
      <name>get</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aaf48e8aea8c64680c2f07cab120992df</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator U</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a78d9cc78de4ae6098d27b6e6268b0097</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator U</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a78d9cc78de4ae6098d27b6e6268b0097</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_pointer_v&lt; U &gt;, remove_pointer_type &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a58a650224561db5ff826180b981d9267</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_pointer_v&lt; U &gt;, U &gt;</type>
      <name>operator-&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>abdc6cb3efdad41ab79f87561dfdefc86</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>ThrowIfInvalid</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a1083c9dc2ffa1226d565f2637882e2a6</anchor>
      <arglist>(const underlying_type &amp;value) -&gt; decltype((void) exception_type(NoOpChecker&lt; Frequency &gt; {}(value)), std::declval&lt; void &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>Validate</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7fdfb1b35df6487d1f043ef26c6055f2</anchor>
      <arglist>(const underlying_type &amp;value) noexcept(false) -&gt; decltype(ThrowIfInvalid(value), underlying_type{})</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a4994d33050437f2bd04ce28f82c6cfa9</anchor>
      <arglist>(const Checked&lt; Frequency, NoOpChecker&lt; Frequency &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Frequency(lhs) !=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a32383015bf171dea637b7a959b7421fa</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;() !=std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs) !=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a1710820c42a3d0fa04fdd7b03ccda485</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Frequency, NoOpChecker&lt; Frequency &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs !=Frequency(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0daf3badd07c3d8a8f75e372aeb10620</anchor>
      <arglist>(const Checked&lt; Frequency, NoOpChecker&lt; Frequency &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliableV&lt; Checked&lt; Frequency, NoOpChecker&lt; Frequency &gt;, false &gt;, Other &gt;, decltype(Frequency() *Other())&gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a62ccb41874a11ae208e4d2a1840aa898</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) *RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0c81bd1815fccef0be17df1909886ee3</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Frequency, NoOpChecker&lt; Frequency &gt;, false &gt; &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliableV&lt; Other, Checked&lt; Frequency, NoOpChecker&lt; Frequency &gt;, false &gt;&gt;, decltype(Other() *Frequency())&gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab36ff5f373eaf2d495dce40c42e6c792</anchor>
      <arglist>(const Checked&lt; Frequency, NoOpChecker&lt; Frequency &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Frequency(lhs)+rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ad61c4c34236f778ed47268224850b24e</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)+RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ac9cf08de554c2029b6bbb90d1890d1d2</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Frequency, NoOpChecker&lt; Frequency &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs+Frequency(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab093280c9b756a1aa417ff530bae5072</anchor>
      <arglist>(const Checked&lt; Frequency, NoOpChecker&lt; Frequency &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Frequency(lhs) - rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a66f17c27ae07bb4d3402817a6f8d52f1</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) - RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ae42c345584e1f5fc449daf5e1bfe1b74</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Frequency, NoOpChecker&lt; Frequency &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs - Frequency(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7afdc583a043ed1144ffd3a8bc254221</anchor>
      <arglist>(const Checked&lt; Frequency, NoOpChecker&lt; Frequency &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Frequency(lhs)/rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aa6546914bb51e238fe23f2da6de2d4eb</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)/RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a6df49c6b71fae2abdb05858e444b94d2</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Frequency, NoOpChecker&lt; Frequency &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs/Frequency(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a8b5a8d7ecc5a2fd34c979a4ed7ee67b8</anchor>
      <arglist>(const Checked&lt; Frequency, NoOpChecker&lt; Frequency &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Frequency(lhs)&lt; Frequency(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a00e22b3d70171c770fe2fe13afdff11c</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab1151c88c9fdcd11cb39197aad9e2f9a</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Frequency, NoOpChecker&lt; Frequency &gt;, false &gt; &amp;rhs) -&gt; decltype(Frequency(lhs)&lt; Frequency(rhs))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7f06e1143875dde6f350188cd20b307b</anchor>
      <arglist>(::std::ostream &amp;os, const Checked&lt; Frequency, NoOpChecker&lt; Frequency &gt;, false &gt; &amp;value) -&gt; decltype(os&lt;&lt; Frequency(value))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aeff78aa037fbc86ce1958b1658ed2510</anchor>
      <arglist>(const Checked&lt; Frequency, NoOpChecker&lt; Frequency &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Frequency(lhs)&lt;=Frequency(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a92f80c500536c9ace9c266ca095d4ce2</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>adeb25d8b74e7403ebd78bf324b8101dc</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Frequency, NoOpChecker&lt; Frequency &gt;, false &gt; &amp;rhs) -&gt; decltype(Frequency(lhs)&lt;=Frequency(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a50beca9c94a84b533dda16d5612c99c1</anchor>
      <arglist>(const Checked&lt; Frequency, NoOpChecker&lt; Frequency &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Frequency(lhs)==rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a8f2e536c4b87e31dd0d088bb64712b70</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;()==std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs)==RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a3122c1c3be1d11d9e824e227cf58e4f3</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Frequency, NoOpChecker&lt; Frequency &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs==Frequency(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7db684b2001572866a76004dc188482b</anchor>
      <arglist>(const Checked&lt; Frequency, NoOpChecker&lt; Frequency &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Frequency(lhs) &gt; Frequency(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a65ffa1dc8fdac606f09d7f1258d76697</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ae925670316f198c098c65a2d9fb2e68d</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Frequency, NoOpChecker&lt; Frequency &gt;, false &gt; &amp;rhs) -&gt; decltype(Frequency(lhs) &gt; Frequency(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a79e613ff5f9b13c13408daab2deae491</anchor>
      <arglist>(const Checked&lt; Frequency, NoOpChecker&lt; Frequency &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Frequency(lhs) &gt;=Frequency(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0d2b20e9a7652cad0cb713a9b466268d</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab9994a039bbf093c9b0e0faddd272dab</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Frequency, NoOpChecker&lt; Frequency &gt;, false &gt; &amp;rhs) -&gt; decltype(Frequency(lhs) &gt;=Frequency(rhs))</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Checked&lt; InvMass &gt;</name>
    <filename>classplayrho_1_1detail_1_1Checked.html</filename>
    <member kind="typedef">
      <type>NoOpChecker&lt; InvMass &gt;</type>
      <name>checker_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0126d8ae64781661f7a81abd5c2c3b32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InvalidArgument</type>
      <name>exception_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a6e1de9cc039b2ac32262d38e7ea90a3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_pointer_t&lt; InvMass &gt;</type>
      <name>remove_pointer_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a5195c96ea6ee491e75d93ce702553cda</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InvMass</type>
      <name>underlying_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a9e35f866c948764bbd1a9f8621b0181f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aafb88ef5ee8cb239f0ec9334a68d83de</anchor>
      <arglist>() noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a4ae56dcc4a01f7db4a387f9e05ceec32</anchor>
      <arglist>(const Checked&lt; InvMass, NoOpChecker&lt; InvMass &gt;, OtherNoExcept &gt; &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a50a11eeca99e03d961cf4655f1d58206</anchor>
      <arglist>(const Checked&lt; OtherValueType, OtherChecker, OtherNoExcept &gt; &amp;other) noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7f59a65c81a2710b4c278c4d795a6f02</anchor>
      <arglist>(U &amp;&amp;value) noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7f59a65c81a2710b4c278c4d795a6f02</anchor>
      <arglist>(U &amp;&amp;value) noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>constexpr underlying_type</type>
      <name>get</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aaf48e8aea8c64680c2f07cab120992df</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator U</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a78d9cc78de4ae6098d27b6e6268b0097</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator U</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a78d9cc78de4ae6098d27b6e6268b0097</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_pointer_v&lt; U &gt;, remove_pointer_type &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a58a650224561db5ff826180b981d9267</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_pointer_v&lt; U &gt;, U &gt;</type>
      <name>operator-&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>abdc6cb3efdad41ab79f87561dfdefc86</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>ThrowIfInvalid</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a1083c9dc2ffa1226d565f2637882e2a6</anchor>
      <arglist>(const underlying_type &amp;value) -&gt; decltype((void) exception_type(NoOpChecker&lt; InvMass &gt; {}(value)), std::declval&lt; void &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>Validate</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7fdfb1b35df6487d1f043ef26c6055f2</anchor>
      <arglist>(const underlying_type &amp;value) noexcept(false) -&gt; decltype(ThrowIfInvalid(value), underlying_type{})</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a4994d33050437f2bd04ce28f82c6cfa9</anchor>
      <arglist>(const Checked&lt; InvMass, NoOpChecker&lt; InvMass &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(InvMass(lhs) !=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a32383015bf171dea637b7a959b7421fa</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;() !=std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs) !=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a1710820c42a3d0fa04fdd7b03ccda485</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; InvMass, NoOpChecker&lt; InvMass &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs !=InvMass(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0daf3badd07c3d8a8f75e372aeb10620</anchor>
      <arglist>(const Checked&lt; InvMass, NoOpChecker&lt; InvMass &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliableV&lt; Checked&lt; InvMass, NoOpChecker&lt; InvMass &gt;, false &gt;, Other &gt;, decltype(InvMass() *Other())&gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a62ccb41874a11ae208e4d2a1840aa898</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) *RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0c81bd1815fccef0be17df1909886ee3</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; InvMass, NoOpChecker&lt; InvMass &gt;, false &gt; &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliableV&lt; Other, Checked&lt; InvMass, NoOpChecker&lt; InvMass &gt;, false &gt;&gt;, decltype(Other() *InvMass())&gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab36ff5f373eaf2d495dce40c42e6c792</anchor>
      <arglist>(const Checked&lt; InvMass, NoOpChecker&lt; InvMass &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(InvMass(lhs)+rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ad61c4c34236f778ed47268224850b24e</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)+RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ac9cf08de554c2029b6bbb90d1890d1d2</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; InvMass, NoOpChecker&lt; InvMass &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs+InvMass(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab093280c9b756a1aa417ff530bae5072</anchor>
      <arglist>(const Checked&lt; InvMass, NoOpChecker&lt; InvMass &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(InvMass(lhs) - rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a66f17c27ae07bb4d3402817a6f8d52f1</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) - RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ae42c345584e1f5fc449daf5e1bfe1b74</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; InvMass, NoOpChecker&lt; InvMass &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs - InvMass(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7afdc583a043ed1144ffd3a8bc254221</anchor>
      <arglist>(const Checked&lt; InvMass, NoOpChecker&lt; InvMass &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(InvMass(lhs)/rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aa6546914bb51e238fe23f2da6de2d4eb</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)/RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a6df49c6b71fae2abdb05858e444b94d2</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; InvMass, NoOpChecker&lt; InvMass &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs/InvMass(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a8b5a8d7ecc5a2fd34c979a4ed7ee67b8</anchor>
      <arglist>(const Checked&lt; InvMass, NoOpChecker&lt; InvMass &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(InvMass(lhs)&lt; InvMass(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a00e22b3d70171c770fe2fe13afdff11c</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab1151c88c9fdcd11cb39197aad9e2f9a</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; InvMass, NoOpChecker&lt; InvMass &gt;, false &gt; &amp;rhs) -&gt; decltype(InvMass(lhs)&lt; InvMass(rhs))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7f06e1143875dde6f350188cd20b307b</anchor>
      <arglist>(::std::ostream &amp;os, const Checked&lt; InvMass, NoOpChecker&lt; InvMass &gt;, false &gt; &amp;value) -&gt; decltype(os&lt;&lt; InvMass(value))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aeff78aa037fbc86ce1958b1658ed2510</anchor>
      <arglist>(const Checked&lt; InvMass, NoOpChecker&lt; InvMass &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(InvMass(lhs)&lt;=InvMass(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a92f80c500536c9ace9c266ca095d4ce2</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>adeb25d8b74e7403ebd78bf324b8101dc</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; InvMass, NoOpChecker&lt; InvMass &gt;, false &gt; &amp;rhs) -&gt; decltype(InvMass(lhs)&lt;=InvMass(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a50beca9c94a84b533dda16d5612c99c1</anchor>
      <arglist>(const Checked&lt; InvMass, NoOpChecker&lt; InvMass &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(InvMass(lhs)==rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a8f2e536c4b87e31dd0d088bb64712b70</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;()==std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs)==RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a3122c1c3be1d11d9e824e227cf58e4f3</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; InvMass, NoOpChecker&lt; InvMass &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs==InvMass(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7db684b2001572866a76004dc188482b</anchor>
      <arglist>(const Checked&lt; InvMass, NoOpChecker&lt; InvMass &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(InvMass(lhs) &gt; InvMass(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a65ffa1dc8fdac606f09d7f1258d76697</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ae925670316f198c098c65a2d9fb2e68d</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; InvMass, NoOpChecker&lt; InvMass &gt;, false &gt; &amp;rhs) -&gt; decltype(InvMass(lhs) &gt; InvMass(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a79e613ff5f9b13c13408daab2deae491</anchor>
      <arglist>(const Checked&lt; InvMass, NoOpChecker&lt; InvMass &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(InvMass(lhs) &gt;=InvMass(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0d2b20e9a7652cad0cb713a9b466268d</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab9994a039bbf093c9b0e0faddd272dab</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; InvMass, NoOpChecker&lt; InvMass &gt;, false &gt; &amp;rhs) -&gt; decltype(InvMass(lhs) &gt;=InvMass(rhs))</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Checked&lt; InvRotInertia &gt;</name>
    <filename>classplayrho_1_1detail_1_1Checked.html</filename>
    <member kind="typedef">
      <type>NoOpChecker&lt; InvRotInertia &gt;</type>
      <name>checker_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0126d8ae64781661f7a81abd5c2c3b32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InvalidArgument</type>
      <name>exception_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a6e1de9cc039b2ac32262d38e7ea90a3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_pointer_t&lt; InvRotInertia &gt;</type>
      <name>remove_pointer_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a5195c96ea6ee491e75d93ce702553cda</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InvRotInertia</type>
      <name>underlying_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a9e35f866c948764bbd1a9f8621b0181f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aafb88ef5ee8cb239f0ec9334a68d83de</anchor>
      <arglist>() noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a4ae56dcc4a01f7db4a387f9e05ceec32</anchor>
      <arglist>(const Checked&lt; InvRotInertia, NoOpChecker&lt; InvRotInertia &gt;, OtherNoExcept &gt; &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a50a11eeca99e03d961cf4655f1d58206</anchor>
      <arglist>(const Checked&lt; OtherValueType, OtherChecker, OtherNoExcept &gt; &amp;other) noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7f59a65c81a2710b4c278c4d795a6f02</anchor>
      <arglist>(U &amp;&amp;value) noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7f59a65c81a2710b4c278c4d795a6f02</anchor>
      <arglist>(U &amp;&amp;value) noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>constexpr underlying_type</type>
      <name>get</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aaf48e8aea8c64680c2f07cab120992df</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator U</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a78d9cc78de4ae6098d27b6e6268b0097</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator U</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a78d9cc78de4ae6098d27b6e6268b0097</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_pointer_v&lt; U &gt;, remove_pointer_type &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a58a650224561db5ff826180b981d9267</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_pointer_v&lt; U &gt;, U &gt;</type>
      <name>operator-&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>abdc6cb3efdad41ab79f87561dfdefc86</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>ThrowIfInvalid</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a1083c9dc2ffa1226d565f2637882e2a6</anchor>
      <arglist>(const underlying_type &amp;value) -&gt; decltype((void) exception_type(NoOpChecker&lt; InvRotInertia &gt; {}(value)), std::declval&lt; void &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>Validate</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7fdfb1b35df6487d1f043ef26c6055f2</anchor>
      <arglist>(const underlying_type &amp;value) noexcept(false) -&gt; decltype(ThrowIfInvalid(value), underlying_type{})</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a4994d33050437f2bd04ce28f82c6cfa9</anchor>
      <arglist>(const Checked&lt; InvRotInertia, NoOpChecker&lt; InvRotInertia &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(InvRotInertia(lhs) !=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a32383015bf171dea637b7a959b7421fa</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;() !=std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs) !=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a1710820c42a3d0fa04fdd7b03ccda485</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; InvRotInertia, NoOpChecker&lt; InvRotInertia &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs !=InvRotInertia(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0daf3badd07c3d8a8f75e372aeb10620</anchor>
      <arglist>(const Checked&lt; InvRotInertia, NoOpChecker&lt; InvRotInertia &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliableV&lt; Checked&lt; InvRotInertia, NoOpChecker&lt; InvRotInertia &gt;, false &gt;, Other &gt;, decltype(InvRotInertia() *Other())&gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a62ccb41874a11ae208e4d2a1840aa898</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) *RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0c81bd1815fccef0be17df1909886ee3</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; InvRotInertia, NoOpChecker&lt; InvRotInertia &gt;, false &gt; &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliableV&lt; Other, Checked&lt; InvRotInertia, NoOpChecker&lt; InvRotInertia &gt;, false &gt;&gt;, decltype(Other() *InvRotInertia())&gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab36ff5f373eaf2d495dce40c42e6c792</anchor>
      <arglist>(const Checked&lt; InvRotInertia, NoOpChecker&lt; InvRotInertia &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(InvRotInertia(lhs)+rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ad61c4c34236f778ed47268224850b24e</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)+RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ac9cf08de554c2029b6bbb90d1890d1d2</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; InvRotInertia, NoOpChecker&lt; InvRotInertia &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs+InvRotInertia(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab093280c9b756a1aa417ff530bae5072</anchor>
      <arglist>(const Checked&lt; InvRotInertia, NoOpChecker&lt; InvRotInertia &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(InvRotInertia(lhs) - rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a66f17c27ae07bb4d3402817a6f8d52f1</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) - RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ae42c345584e1f5fc449daf5e1bfe1b74</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; InvRotInertia, NoOpChecker&lt; InvRotInertia &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs - InvRotInertia(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7afdc583a043ed1144ffd3a8bc254221</anchor>
      <arglist>(const Checked&lt; InvRotInertia, NoOpChecker&lt; InvRotInertia &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(InvRotInertia(lhs)/rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aa6546914bb51e238fe23f2da6de2d4eb</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)/RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a6df49c6b71fae2abdb05858e444b94d2</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; InvRotInertia, NoOpChecker&lt; InvRotInertia &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs/InvRotInertia(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a8b5a8d7ecc5a2fd34c979a4ed7ee67b8</anchor>
      <arglist>(const Checked&lt; InvRotInertia, NoOpChecker&lt; InvRotInertia &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(InvRotInertia(lhs)&lt; InvRotInertia(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a00e22b3d70171c770fe2fe13afdff11c</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab1151c88c9fdcd11cb39197aad9e2f9a</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; InvRotInertia, NoOpChecker&lt; InvRotInertia &gt;, false &gt; &amp;rhs) -&gt; decltype(InvRotInertia(lhs)&lt; InvRotInertia(rhs))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7f06e1143875dde6f350188cd20b307b</anchor>
      <arglist>(::std::ostream &amp;os, const Checked&lt; InvRotInertia, NoOpChecker&lt; InvRotInertia &gt;, false &gt; &amp;value) -&gt; decltype(os&lt;&lt; InvRotInertia(value))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aeff78aa037fbc86ce1958b1658ed2510</anchor>
      <arglist>(const Checked&lt; InvRotInertia, NoOpChecker&lt; InvRotInertia &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(InvRotInertia(lhs)&lt;=InvRotInertia(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a92f80c500536c9ace9c266ca095d4ce2</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>adeb25d8b74e7403ebd78bf324b8101dc</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; InvRotInertia, NoOpChecker&lt; InvRotInertia &gt;, false &gt; &amp;rhs) -&gt; decltype(InvRotInertia(lhs)&lt;=InvRotInertia(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a50beca9c94a84b533dda16d5612c99c1</anchor>
      <arglist>(const Checked&lt; InvRotInertia, NoOpChecker&lt; InvRotInertia &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(InvRotInertia(lhs)==rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a8f2e536c4b87e31dd0d088bb64712b70</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;()==std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs)==RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a3122c1c3be1d11d9e824e227cf58e4f3</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; InvRotInertia, NoOpChecker&lt; InvRotInertia &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs==InvRotInertia(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7db684b2001572866a76004dc188482b</anchor>
      <arglist>(const Checked&lt; InvRotInertia, NoOpChecker&lt; InvRotInertia &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(InvRotInertia(lhs) &gt; InvRotInertia(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a65ffa1dc8fdac606f09d7f1258d76697</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ae925670316f198c098c65a2d9fb2e68d</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; InvRotInertia, NoOpChecker&lt; InvRotInertia &gt;, false &gt; &amp;rhs) -&gt; decltype(InvRotInertia(lhs) &gt; InvRotInertia(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a79e613ff5f9b13c13408daab2deae491</anchor>
      <arglist>(const Checked&lt; InvRotInertia, NoOpChecker&lt; InvRotInertia &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(InvRotInertia(lhs) &gt;=InvRotInertia(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0d2b20e9a7652cad0cb713a9b466268d</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab9994a039bbf093c9b0e0faddd272dab</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; InvRotInertia, NoOpChecker&lt; InvRotInertia &gt;, false &gt; &amp;rhs) -&gt; decltype(InvRotInertia(lhs) &gt;=InvRotInertia(rhs))</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Checked&lt; Length &gt;</name>
    <filename>classplayrho_1_1detail_1_1Checked.html</filename>
    <member kind="typedef">
      <type>NoOpChecker&lt; Length &gt;</type>
      <name>checker_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0126d8ae64781661f7a81abd5c2c3b32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InvalidArgument</type>
      <name>exception_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a6e1de9cc039b2ac32262d38e7ea90a3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_pointer_t&lt; Length &gt;</type>
      <name>remove_pointer_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a5195c96ea6ee491e75d93ce702553cda</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Length</type>
      <name>underlying_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a9e35f866c948764bbd1a9f8621b0181f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aafb88ef5ee8cb239f0ec9334a68d83de</anchor>
      <arglist>() noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a4ae56dcc4a01f7db4a387f9e05ceec32</anchor>
      <arglist>(const Checked&lt; Length, NoOpChecker&lt; Length &gt;, OtherNoExcept &gt; &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a50a11eeca99e03d961cf4655f1d58206</anchor>
      <arglist>(const Checked&lt; OtherValueType, OtherChecker, OtherNoExcept &gt; &amp;other) noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7f59a65c81a2710b4c278c4d795a6f02</anchor>
      <arglist>(U &amp;&amp;value) noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7f59a65c81a2710b4c278c4d795a6f02</anchor>
      <arglist>(U &amp;&amp;value) noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>constexpr underlying_type</type>
      <name>get</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aaf48e8aea8c64680c2f07cab120992df</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator U</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a78d9cc78de4ae6098d27b6e6268b0097</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator U</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a78d9cc78de4ae6098d27b6e6268b0097</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_pointer_v&lt; U &gt;, remove_pointer_type &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a58a650224561db5ff826180b981d9267</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_pointer_v&lt; U &gt;, U &gt;</type>
      <name>operator-&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>abdc6cb3efdad41ab79f87561dfdefc86</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>ThrowIfInvalid</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a1083c9dc2ffa1226d565f2637882e2a6</anchor>
      <arglist>(const underlying_type &amp;value) -&gt; decltype((void) exception_type(NoOpChecker&lt; Length &gt; {}(value)), std::declval&lt; void &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>Validate</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7fdfb1b35df6487d1f043ef26c6055f2</anchor>
      <arglist>(const underlying_type &amp;value) noexcept(false) -&gt; decltype(ThrowIfInvalid(value), underlying_type{})</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a4994d33050437f2bd04ce28f82c6cfa9</anchor>
      <arglist>(const Checked&lt; Length, NoOpChecker&lt; Length &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Length(lhs) !=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a32383015bf171dea637b7a959b7421fa</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;() !=std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs) !=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a1710820c42a3d0fa04fdd7b03ccda485</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Length, NoOpChecker&lt; Length &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs !=Length(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0daf3badd07c3d8a8f75e372aeb10620</anchor>
      <arglist>(const Checked&lt; Length, NoOpChecker&lt; Length &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliableV&lt; Checked&lt; Length, NoOpChecker&lt; Length &gt;, false &gt;, Other &gt;, decltype(Length() *Other())&gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a62ccb41874a11ae208e4d2a1840aa898</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) *RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0c81bd1815fccef0be17df1909886ee3</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Length, NoOpChecker&lt; Length &gt;, false &gt; &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliableV&lt; Other, Checked&lt; Length, NoOpChecker&lt; Length &gt;, false &gt;&gt;, decltype(Other() *Length())&gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab36ff5f373eaf2d495dce40c42e6c792</anchor>
      <arglist>(const Checked&lt; Length, NoOpChecker&lt; Length &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Length(lhs)+rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ad61c4c34236f778ed47268224850b24e</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)+RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ac9cf08de554c2029b6bbb90d1890d1d2</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Length, NoOpChecker&lt; Length &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs+Length(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab093280c9b756a1aa417ff530bae5072</anchor>
      <arglist>(const Checked&lt; Length, NoOpChecker&lt; Length &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Length(lhs) - rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a66f17c27ae07bb4d3402817a6f8d52f1</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) - RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ae42c345584e1f5fc449daf5e1bfe1b74</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Length, NoOpChecker&lt; Length &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs - Length(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7afdc583a043ed1144ffd3a8bc254221</anchor>
      <arglist>(const Checked&lt; Length, NoOpChecker&lt; Length &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Length(lhs)/rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aa6546914bb51e238fe23f2da6de2d4eb</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)/RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a6df49c6b71fae2abdb05858e444b94d2</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Length, NoOpChecker&lt; Length &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs/Length(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a8b5a8d7ecc5a2fd34c979a4ed7ee67b8</anchor>
      <arglist>(const Checked&lt; Length, NoOpChecker&lt; Length &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Length(lhs)&lt; Length(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a00e22b3d70171c770fe2fe13afdff11c</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab1151c88c9fdcd11cb39197aad9e2f9a</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Length, NoOpChecker&lt; Length &gt;, false &gt; &amp;rhs) -&gt; decltype(Length(lhs)&lt; Length(rhs))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7f06e1143875dde6f350188cd20b307b</anchor>
      <arglist>(::std::ostream &amp;os, const Checked&lt; Length, NoOpChecker&lt; Length &gt;, false &gt; &amp;value) -&gt; decltype(os&lt;&lt; Length(value))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aeff78aa037fbc86ce1958b1658ed2510</anchor>
      <arglist>(const Checked&lt; Length, NoOpChecker&lt; Length &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Length(lhs)&lt;=Length(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a92f80c500536c9ace9c266ca095d4ce2</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>adeb25d8b74e7403ebd78bf324b8101dc</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Length, NoOpChecker&lt; Length &gt;, false &gt; &amp;rhs) -&gt; decltype(Length(lhs)&lt;=Length(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a50beca9c94a84b533dda16d5612c99c1</anchor>
      <arglist>(const Checked&lt; Length, NoOpChecker&lt; Length &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Length(lhs)==rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a8f2e536c4b87e31dd0d088bb64712b70</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;()==std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs)==RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a3122c1c3be1d11d9e824e227cf58e4f3</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Length, NoOpChecker&lt; Length &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs==Length(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7db684b2001572866a76004dc188482b</anchor>
      <arglist>(const Checked&lt; Length, NoOpChecker&lt; Length &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Length(lhs) &gt; Length(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a65ffa1dc8fdac606f09d7f1258d76697</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ae925670316f198c098c65a2d9fb2e68d</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Length, NoOpChecker&lt; Length &gt;, false &gt; &amp;rhs) -&gt; decltype(Length(lhs) &gt; Length(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a79e613ff5f9b13c13408daab2deae491</anchor>
      <arglist>(const Checked&lt; Length, NoOpChecker&lt; Length &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Length(lhs) &gt;=Length(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0d2b20e9a7652cad0cb713a9b466268d</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab9994a039bbf093c9b0e0faddd272dab</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Length, NoOpChecker&lt; Length &gt;, false &gt; &amp;rhs) -&gt; decltype(Length(lhs) &gt;=Length(rhs))</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Checked&lt; Mass &gt;</name>
    <filename>classplayrho_1_1detail_1_1Checked.html</filename>
    <member kind="typedef">
      <type>NoOpChecker&lt; Mass &gt;</type>
      <name>checker_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0126d8ae64781661f7a81abd5c2c3b32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InvalidArgument</type>
      <name>exception_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a6e1de9cc039b2ac32262d38e7ea90a3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_pointer_t&lt; Mass &gt;</type>
      <name>remove_pointer_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a5195c96ea6ee491e75d93ce702553cda</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mass</type>
      <name>underlying_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a9e35f866c948764bbd1a9f8621b0181f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aafb88ef5ee8cb239f0ec9334a68d83de</anchor>
      <arglist>() noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a4ae56dcc4a01f7db4a387f9e05ceec32</anchor>
      <arglist>(const Checked&lt; Mass, NoOpChecker&lt; Mass &gt;, OtherNoExcept &gt; &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a50a11eeca99e03d961cf4655f1d58206</anchor>
      <arglist>(const Checked&lt; OtherValueType, OtherChecker, OtherNoExcept &gt; &amp;other) noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7f59a65c81a2710b4c278c4d795a6f02</anchor>
      <arglist>(U &amp;&amp;value) noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7f59a65c81a2710b4c278c4d795a6f02</anchor>
      <arglist>(U &amp;&amp;value) noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>constexpr underlying_type</type>
      <name>get</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aaf48e8aea8c64680c2f07cab120992df</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator U</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a78d9cc78de4ae6098d27b6e6268b0097</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator U</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a78d9cc78de4ae6098d27b6e6268b0097</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_pointer_v&lt; U &gt;, remove_pointer_type &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a58a650224561db5ff826180b981d9267</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_pointer_v&lt; U &gt;, U &gt;</type>
      <name>operator-&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>abdc6cb3efdad41ab79f87561dfdefc86</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>ThrowIfInvalid</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a1083c9dc2ffa1226d565f2637882e2a6</anchor>
      <arglist>(const underlying_type &amp;value) -&gt; decltype((void) exception_type(NoOpChecker&lt; Mass &gt; {}(value)), std::declval&lt; void &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>Validate</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7fdfb1b35df6487d1f043ef26c6055f2</anchor>
      <arglist>(const underlying_type &amp;value) noexcept(false) -&gt; decltype(ThrowIfInvalid(value), underlying_type{})</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a32383015bf171dea637b7a959b7421fa</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;() !=std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs) !=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a4994d33050437f2bd04ce28f82c6cfa9</anchor>
      <arglist>(const Checked&lt; Mass, NoOpChecker&lt; Mass &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Mass(lhs) !=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a1710820c42a3d0fa04fdd7b03ccda485</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Mass, NoOpChecker&lt; Mass &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs !=Mass(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a62ccb41874a11ae208e4d2a1840aa898</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) *RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0daf3badd07c3d8a8f75e372aeb10620</anchor>
      <arglist>(const Checked&lt; Mass, NoOpChecker&lt; Mass &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliableV&lt; Checked&lt; Mass, NoOpChecker&lt; Mass &gt;, false &gt;, Other &gt;, decltype(Mass() *Other())&gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0c81bd1815fccef0be17df1909886ee3</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Mass, NoOpChecker&lt; Mass &gt;, false &gt; &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliableV&lt; Other, Checked&lt; Mass, NoOpChecker&lt; Mass &gt;, false &gt;&gt;, decltype(Other() *Mass())&gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ad61c4c34236f778ed47268224850b24e</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)+RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab36ff5f373eaf2d495dce40c42e6c792</anchor>
      <arglist>(const Checked&lt; Mass, NoOpChecker&lt; Mass &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Mass(lhs)+rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ac9cf08de554c2029b6bbb90d1890d1d2</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Mass, NoOpChecker&lt; Mass &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs+Mass(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a66f17c27ae07bb4d3402817a6f8d52f1</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) - RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab093280c9b756a1aa417ff530bae5072</anchor>
      <arglist>(const Checked&lt; Mass, NoOpChecker&lt; Mass &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Mass(lhs) - rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ae42c345584e1f5fc449daf5e1bfe1b74</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Mass, NoOpChecker&lt; Mass &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs - Mass(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aa6546914bb51e238fe23f2da6de2d4eb</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)/RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7afdc583a043ed1144ffd3a8bc254221</anchor>
      <arglist>(const Checked&lt; Mass, NoOpChecker&lt; Mass &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Mass(lhs)/rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a6df49c6b71fae2abdb05858e444b94d2</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Mass, NoOpChecker&lt; Mass &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs/Mass(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a00e22b3d70171c770fe2fe13afdff11c</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a8b5a8d7ecc5a2fd34c979a4ed7ee67b8</anchor>
      <arglist>(const Checked&lt; Mass, NoOpChecker&lt; Mass &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Mass(lhs)&lt; Mass(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab1151c88c9fdcd11cb39197aad9e2f9a</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Mass, NoOpChecker&lt; Mass &gt;, false &gt; &amp;rhs) -&gt; decltype(Mass(lhs)&lt; Mass(rhs))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7f06e1143875dde6f350188cd20b307b</anchor>
      <arglist>(::std::ostream &amp;os, const Checked&lt; Mass, NoOpChecker&lt; Mass &gt;, false &gt; &amp;value) -&gt; decltype(os&lt;&lt; Mass(value))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a92f80c500536c9ace9c266ca095d4ce2</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aeff78aa037fbc86ce1958b1658ed2510</anchor>
      <arglist>(const Checked&lt; Mass, NoOpChecker&lt; Mass &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Mass(lhs)&lt;=Mass(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>adeb25d8b74e7403ebd78bf324b8101dc</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Mass, NoOpChecker&lt; Mass &gt;, false &gt; &amp;rhs) -&gt; decltype(Mass(lhs)&lt;=Mass(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a8f2e536c4b87e31dd0d088bb64712b70</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;()==std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs)==RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a50beca9c94a84b533dda16d5612c99c1</anchor>
      <arglist>(const Checked&lt; Mass, NoOpChecker&lt; Mass &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Mass(lhs)==rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a3122c1c3be1d11d9e824e227cf58e4f3</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Mass, NoOpChecker&lt; Mass &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs==Mass(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a65ffa1dc8fdac606f09d7f1258d76697</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7db684b2001572866a76004dc188482b</anchor>
      <arglist>(const Checked&lt; Mass, NoOpChecker&lt; Mass &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Mass(lhs) &gt; Mass(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ae925670316f198c098c65a2d9fb2e68d</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Mass, NoOpChecker&lt; Mass &gt;, false &gt; &amp;rhs) -&gt; decltype(Mass(lhs) &gt; Mass(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0d2b20e9a7652cad0cb713a9b466268d</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a79e613ff5f9b13c13408daab2deae491</anchor>
      <arglist>(const Checked&lt; Mass, NoOpChecker&lt; Mass &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Mass(lhs) &gt;=Mass(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab9994a039bbf093c9b0e0faddd272dab</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Mass, NoOpChecker&lt; Mass &gt;, false &gt; &amp;rhs) -&gt; decltype(Mass(lhs) &gt;=Mass(rhs))</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Checked&lt; Real &gt;</name>
    <filename>classplayrho_1_1detail_1_1Checked.html</filename>
    <member kind="typedef">
      <type>NoOpChecker&lt; Real &gt;</type>
      <name>checker_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0126d8ae64781661f7a81abd5c2c3b32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InvalidArgument</type>
      <name>exception_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a6e1de9cc039b2ac32262d38e7ea90a3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_pointer_t&lt; Real &gt;</type>
      <name>remove_pointer_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a5195c96ea6ee491e75d93ce702553cda</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Real</type>
      <name>underlying_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a9e35f866c948764bbd1a9f8621b0181f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aafb88ef5ee8cb239f0ec9334a68d83de</anchor>
      <arglist>() noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a50a11eeca99e03d961cf4655f1d58206</anchor>
      <arglist>(const Checked&lt; OtherValueType, OtherChecker, OtherNoExcept &gt; &amp;other) noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a4ae56dcc4a01f7db4a387f9e05ceec32</anchor>
      <arglist>(const Checked&lt; Real, NoOpChecker&lt; Real &gt;, OtherNoExcept &gt; &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7f59a65c81a2710b4c278c4d795a6f02</anchor>
      <arglist>(U &amp;&amp;value) noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7f59a65c81a2710b4c278c4d795a6f02</anchor>
      <arglist>(U &amp;&amp;value) noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>constexpr underlying_type</type>
      <name>get</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aaf48e8aea8c64680c2f07cab120992df</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator U</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a78d9cc78de4ae6098d27b6e6268b0097</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator U</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a78d9cc78de4ae6098d27b6e6268b0097</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_pointer_v&lt; U &gt;, remove_pointer_type &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a58a650224561db5ff826180b981d9267</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_pointer_v&lt; U &gt;, U &gt;</type>
      <name>operator-&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>abdc6cb3efdad41ab79f87561dfdefc86</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>ThrowIfInvalid</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a1083c9dc2ffa1226d565f2637882e2a6</anchor>
      <arglist>(const underlying_type &amp;value) -&gt; decltype((void) exception_type(NoOpChecker&lt; Real &gt; {}(value)), std::declval&lt; void &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>Validate</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7fdfb1b35df6487d1f043ef26c6055f2</anchor>
      <arglist>(const underlying_type &amp;value) noexcept(false) -&gt; decltype(ThrowIfInvalid(value), underlying_type{})</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a32383015bf171dea637b7a959b7421fa</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;() !=std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs) !=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a4994d33050437f2bd04ce28f82c6cfa9</anchor>
      <arglist>(const Checked&lt; Real, NoOpChecker&lt; Real &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Real(lhs) !=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a1710820c42a3d0fa04fdd7b03ccda485</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Real, NoOpChecker&lt; Real &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs !=Real(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a62ccb41874a11ae208e4d2a1840aa898</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) *RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0daf3badd07c3d8a8f75e372aeb10620</anchor>
      <arglist>(const Checked&lt; Real, NoOpChecker&lt; Real &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliableV&lt; Checked&lt; Real, NoOpChecker&lt; Real &gt;, false &gt;, Other &gt;, decltype(Real() *Other())&gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0c81bd1815fccef0be17df1909886ee3</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Real, NoOpChecker&lt; Real &gt;, false &gt; &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliableV&lt; Other, Checked&lt; Real, NoOpChecker&lt; Real &gt;, false &gt;&gt;, decltype(Other() *Real())&gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ad61c4c34236f778ed47268224850b24e</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)+RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab36ff5f373eaf2d495dce40c42e6c792</anchor>
      <arglist>(const Checked&lt; Real, NoOpChecker&lt; Real &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Real(lhs)+rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ac9cf08de554c2029b6bbb90d1890d1d2</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Real, NoOpChecker&lt; Real &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs+Real(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a66f17c27ae07bb4d3402817a6f8d52f1</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) - RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab093280c9b756a1aa417ff530bae5072</anchor>
      <arglist>(const Checked&lt; Real, NoOpChecker&lt; Real &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Real(lhs) - rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ae42c345584e1f5fc449daf5e1bfe1b74</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Real, NoOpChecker&lt; Real &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs - Real(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aa6546914bb51e238fe23f2da6de2d4eb</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)/RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7afdc583a043ed1144ffd3a8bc254221</anchor>
      <arglist>(const Checked&lt; Real, NoOpChecker&lt; Real &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Real(lhs)/rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a6df49c6b71fae2abdb05858e444b94d2</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Real, NoOpChecker&lt; Real &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs/Real(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a00e22b3d70171c770fe2fe13afdff11c</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a8b5a8d7ecc5a2fd34c979a4ed7ee67b8</anchor>
      <arglist>(const Checked&lt; Real, NoOpChecker&lt; Real &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Real(lhs)&lt; Real(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab1151c88c9fdcd11cb39197aad9e2f9a</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Real, NoOpChecker&lt; Real &gt;, false &gt; &amp;rhs) -&gt; decltype(Real(lhs)&lt; Real(rhs))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7f06e1143875dde6f350188cd20b307b</anchor>
      <arglist>(::std::ostream &amp;os, const Checked&lt; Real, NoOpChecker&lt; Real &gt;, false &gt; &amp;value) -&gt; decltype(os&lt;&lt; Real(value))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a92f80c500536c9ace9c266ca095d4ce2</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aeff78aa037fbc86ce1958b1658ed2510</anchor>
      <arglist>(const Checked&lt; Real, NoOpChecker&lt; Real &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Real(lhs)&lt;=Real(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>adeb25d8b74e7403ebd78bf324b8101dc</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Real, NoOpChecker&lt; Real &gt;, false &gt; &amp;rhs) -&gt; decltype(Real(lhs)&lt;=Real(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a8f2e536c4b87e31dd0d088bb64712b70</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;()==std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs)==RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a50beca9c94a84b533dda16d5612c99c1</anchor>
      <arglist>(const Checked&lt; Real, NoOpChecker&lt; Real &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Real(lhs)==rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a3122c1c3be1d11d9e824e227cf58e4f3</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Real, NoOpChecker&lt; Real &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs==Real(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a65ffa1dc8fdac606f09d7f1258d76697</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7db684b2001572866a76004dc188482b</anchor>
      <arglist>(const Checked&lt; Real, NoOpChecker&lt; Real &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Real(lhs) &gt; Real(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ae925670316f198c098c65a2d9fb2e68d</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Real, NoOpChecker&lt; Real &gt;, false &gt; &amp;rhs) -&gt; decltype(Real(lhs) &gt; Real(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0d2b20e9a7652cad0cb713a9b466268d</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a79e613ff5f9b13c13408daab2deae491</anchor>
      <arglist>(const Checked&lt; Real, NoOpChecker&lt; Real &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Real(lhs) &gt;=Real(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab9994a039bbf093c9b0e0faddd272dab</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Real, NoOpChecker&lt; Real &gt;, false &gt; &amp;rhs) -&gt; decltype(Real(lhs) &gt;=Real(rhs))</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Checked&lt; RotInertia &gt;</name>
    <filename>classplayrho_1_1detail_1_1Checked.html</filename>
    <member kind="typedef">
      <type>NoOpChecker&lt; RotInertia &gt;</type>
      <name>checker_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0126d8ae64781661f7a81abd5c2c3b32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InvalidArgument</type>
      <name>exception_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a6e1de9cc039b2ac32262d38e7ea90a3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_pointer_t&lt; RotInertia &gt;</type>
      <name>remove_pointer_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a5195c96ea6ee491e75d93ce702553cda</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RotInertia</type>
      <name>underlying_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a9e35f866c948764bbd1a9f8621b0181f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aafb88ef5ee8cb239f0ec9334a68d83de</anchor>
      <arglist>() noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a50a11eeca99e03d961cf4655f1d58206</anchor>
      <arglist>(const Checked&lt; OtherValueType, OtherChecker, OtherNoExcept &gt; &amp;other) noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a4ae56dcc4a01f7db4a387f9e05ceec32</anchor>
      <arglist>(const Checked&lt; RotInertia, NoOpChecker&lt; RotInertia &gt;, OtherNoExcept &gt; &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7f59a65c81a2710b4c278c4d795a6f02</anchor>
      <arglist>(U &amp;&amp;value) noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7f59a65c81a2710b4c278c4d795a6f02</anchor>
      <arglist>(U &amp;&amp;value) noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>constexpr underlying_type</type>
      <name>get</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aaf48e8aea8c64680c2f07cab120992df</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator U</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a78d9cc78de4ae6098d27b6e6268b0097</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator U</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a78d9cc78de4ae6098d27b6e6268b0097</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_pointer_v&lt; U &gt;, remove_pointer_type &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a58a650224561db5ff826180b981d9267</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_pointer_v&lt; U &gt;, U &gt;</type>
      <name>operator-&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>abdc6cb3efdad41ab79f87561dfdefc86</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>ThrowIfInvalid</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a1083c9dc2ffa1226d565f2637882e2a6</anchor>
      <arglist>(const underlying_type &amp;value) -&gt; decltype((void) exception_type(NoOpChecker&lt; RotInertia &gt; {}(value)), std::declval&lt; void &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>Validate</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7fdfb1b35df6487d1f043ef26c6055f2</anchor>
      <arglist>(const underlying_type &amp;value) noexcept(false) -&gt; decltype(ThrowIfInvalid(value), underlying_type{})</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a32383015bf171dea637b7a959b7421fa</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;() !=std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs) !=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a4994d33050437f2bd04ce28f82c6cfa9</anchor>
      <arglist>(const Checked&lt; RotInertia, NoOpChecker&lt; RotInertia &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(RotInertia(lhs) !=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a1710820c42a3d0fa04fdd7b03ccda485</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; RotInertia, NoOpChecker&lt; RotInertia &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs !=RotInertia(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a62ccb41874a11ae208e4d2a1840aa898</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) *RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0daf3badd07c3d8a8f75e372aeb10620</anchor>
      <arglist>(const Checked&lt; RotInertia, NoOpChecker&lt; RotInertia &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliableV&lt; Checked&lt; RotInertia, NoOpChecker&lt; RotInertia &gt;, false &gt;, Other &gt;, decltype(RotInertia() *Other())&gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0c81bd1815fccef0be17df1909886ee3</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; RotInertia, NoOpChecker&lt; RotInertia &gt;, false &gt; &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliableV&lt; Other, Checked&lt; RotInertia, NoOpChecker&lt; RotInertia &gt;, false &gt;&gt;, decltype(Other() *RotInertia())&gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ad61c4c34236f778ed47268224850b24e</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)+RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab36ff5f373eaf2d495dce40c42e6c792</anchor>
      <arglist>(const Checked&lt; RotInertia, NoOpChecker&lt; RotInertia &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(RotInertia(lhs)+rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ac9cf08de554c2029b6bbb90d1890d1d2</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; RotInertia, NoOpChecker&lt; RotInertia &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs+RotInertia(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a66f17c27ae07bb4d3402817a6f8d52f1</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) - RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab093280c9b756a1aa417ff530bae5072</anchor>
      <arglist>(const Checked&lt; RotInertia, NoOpChecker&lt; RotInertia &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(RotInertia(lhs) - rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ae42c345584e1f5fc449daf5e1bfe1b74</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; RotInertia, NoOpChecker&lt; RotInertia &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs - RotInertia(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aa6546914bb51e238fe23f2da6de2d4eb</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)/RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7afdc583a043ed1144ffd3a8bc254221</anchor>
      <arglist>(const Checked&lt; RotInertia, NoOpChecker&lt; RotInertia &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(RotInertia(lhs)/rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a6df49c6b71fae2abdb05858e444b94d2</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; RotInertia, NoOpChecker&lt; RotInertia &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs/RotInertia(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a00e22b3d70171c770fe2fe13afdff11c</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a8b5a8d7ecc5a2fd34c979a4ed7ee67b8</anchor>
      <arglist>(const Checked&lt; RotInertia, NoOpChecker&lt; RotInertia &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(RotInertia(lhs)&lt; RotInertia(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab1151c88c9fdcd11cb39197aad9e2f9a</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; RotInertia, NoOpChecker&lt; RotInertia &gt;, false &gt; &amp;rhs) -&gt; decltype(RotInertia(lhs)&lt; RotInertia(rhs))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7f06e1143875dde6f350188cd20b307b</anchor>
      <arglist>(::std::ostream &amp;os, const Checked&lt; RotInertia, NoOpChecker&lt; RotInertia &gt;, false &gt; &amp;value) -&gt; decltype(os&lt;&lt; RotInertia(value))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a92f80c500536c9ace9c266ca095d4ce2</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aeff78aa037fbc86ce1958b1658ed2510</anchor>
      <arglist>(const Checked&lt; RotInertia, NoOpChecker&lt; RotInertia &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(RotInertia(lhs)&lt;=RotInertia(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>adeb25d8b74e7403ebd78bf324b8101dc</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; RotInertia, NoOpChecker&lt; RotInertia &gt;, false &gt; &amp;rhs) -&gt; decltype(RotInertia(lhs)&lt;=RotInertia(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a8f2e536c4b87e31dd0d088bb64712b70</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;()==std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs)==RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a50beca9c94a84b533dda16d5612c99c1</anchor>
      <arglist>(const Checked&lt; RotInertia, NoOpChecker&lt; RotInertia &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(RotInertia(lhs)==rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a3122c1c3be1d11d9e824e227cf58e4f3</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; RotInertia, NoOpChecker&lt; RotInertia &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs==RotInertia(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a65ffa1dc8fdac606f09d7f1258d76697</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7db684b2001572866a76004dc188482b</anchor>
      <arglist>(const Checked&lt; RotInertia, NoOpChecker&lt; RotInertia &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(RotInertia(lhs) &gt; RotInertia(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ae925670316f198c098c65a2d9fb2e68d</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; RotInertia, NoOpChecker&lt; RotInertia &gt;, false &gt; &amp;rhs) -&gt; decltype(RotInertia(lhs) &gt; RotInertia(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0d2b20e9a7652cad0cb713a9b466268d</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a79e613ff5f9b13c13408daab2deae491</anchor>
      <arglist>(const Checked&lt; RotInertia, NoOpChecker&lt; RotInertia &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(RotInertia(lhs) &gt;=RotInertia(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab9994a039bbf093c9b0e0faddd272dab</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; RotInertia, NoOpChecker&lt; RotInertia &gt;, false &gt; &amp;rhs) -&gt; decltype(RotInertia(lhs) &gt;=RotInertia(rhs))</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Checked&lt; Torque &gt;</name>
    <filename>classplayrho_1_1detail_1_1Checked.html</filename>
    <member kind="typedef">
      <type>NoOpChecker&lt; Torque &gt;</type>
      <name>checker_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0126d8ae64781661f7a81abd5c2c3b32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InvalidArgument</type>
      <name>exception_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a6e1de9cc039b2ac32262d38e7ea90a3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_pointer_t&lt; Torque &gt;</type>
      <name>remove_pointer_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a5195c96ea6ee491e75d93ce702553cda</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Torque</type>
      <name>underlying_type</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a9e35f866c948764bbd1a9f8621b0181f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aafb88ef5ee8cb239f0ec9334a68d83de</anchor>
      <arglist>() noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a50a11eeca99e03d961cf4655f1d58206</anchor>
      <arglist>(const Checked&lt; OtherValueType, OtherChecker, OtherNoExcept &gt; &amp;other) noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a4ae56dcc4a01f7db4a387f9e05ceec32</anchor>
      <arglist>(const Checked&lt; Torque, NoOpChecker&lt; Torque &gt;, OtherNoExcept &gt; &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7f59a65c81a2710b4c278c4d795a6f02</anchor>
      <arglist>(U &amp;&amp;value) noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Checked</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7f59a65c81a2710b4c278c4d795a6f02</anchor>
      <arglist>(U &amp;&amp;value) noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>constexpr underlying_type</type>
      <name>get</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aaf48e8aea8c64680c2f07cab120992df</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator U</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a78d9cc78de4ae6098d27b6e6268b0097</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator U</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a78d9cc78de4ae6098d27b6e6268b0097</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_pointer_v&lt; U &gt;, remove_pointer_type &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a58a650224561db5ff826180b981d9267</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_pointer_v&lt; U &gt;, U &gt;</type>
      <name>operator-&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>abdc6cb3efdad41ab79f87561dfdefc86</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>ThrowIfInvalid</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a1083c9dc2ffa1226d565f2637882e2a6</anchor>
      <arglist>(const underlying_type &amp;value) -&gt; decltype((void) exception_type(NoOpChecker&lt; Torque &gt; {}(value)), std::declval&lt; void &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>Validate</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7fdfb1b35df6487d1f043ef26c6055f2</anchor>
      <arglist>(const underlying_type &amp;value) noexcept(false) -&gt; decltype(ThrowIfInvalid(value), underlying_type{})</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a32383015bf171dea637b7a959b7421fa</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;() !=std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs) !=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a4994d33050437f2bd04ce28f82c6cfa9</anchor>
      <arglist>(const Checked&lt; Torque, NoOpChecker&lt; Torque &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Torque(lhs) !=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a1710820c42a3d0fa04fdd7b03ccda485</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Torque, NoOpChecker&lt; Torque &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs !=Torque(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a62ccb41874a11ae208e4d2a1840aa898</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) *RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0daf3badd07c3d8a8f75e372aeb10620</anchor>
      <arglist>(const Checked&lt; Torque, NoOpChecker&lt; Torque &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliableV&lt; Checked&lt; Torque, NoOpChecker&lt; Torque &gt;, false &gt;, Other &gt;, decltype(Torque() *Other())&gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0c81bd1815fccef0be17df1909886ee3</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Torque, NoOpChecker&lt; Torque &gt;, false &gt; &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliableV&lt; Other, Checked&lt; Torque, NoOpChecker&lt; Torque &gt;, false &gt;&gt;, decltype(Other() *Torque())&gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ad61c4c34236f778ed47268224850b24e</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)+RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab36ff5f373eaf2d495dce40c42e6c792</anchor>
      <arglist>(const Checked&lt; Torque, NoOpChecker&lt; Torque &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Torque(lhs)+rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ac9cf08de554c2029b6bbb90d1890d1d2</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Torque, NoOpChecker&lt; Torque &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs+Torque(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a66f17c27ae07bb4d3402817a6f8d52f1</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) - RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab093280c9b756a1aa417ff530bae5072</anchor>
      <arglist>(const Checked&lt; Torque, NoOpChecker&lt; Torque &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Torque(lhs) - rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ae42c345584e1f5fc449daf5e1bfe1b74</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Torque, NoOpChecker&lt; Torque &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs - Torque(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aa6546914bb51e238fe23f2da6de2d4eb</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)/RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7afdc583a043ed1144ffd3a8bc254221</anchor>
      <arglist>(const Checked&lt; Torque, NoOpChecker&lt; Torque &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Torque(lhs)/rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a6df49c6b71fae2abdb05858e444b94d2</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Torque, NoOpChecker&lt; Torque &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs/Torque(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a00e22b3d70171c770fe2fe13afdff11c</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a8b5a8d7ecc5a2fd34c979a4ed7ee67b8</anchor>
      <arglist>(const Checked&lt; Torque, NoOpChecker&lt; Torque &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Torque(lhs)&lt; Torque(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab1151c88c9fdcd11cb39197aad9e2f9a</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Torque, NoOpChecker&lt; Torque &gt;, false &gt; &amp;rhs) -&gt; decltype(Torque(lhs)&lt; Torque(rhs))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7f06e1143875dde6f350188cd20b307b</anchor>
      <arglist>(::std::ostream &amp;os, const Checked&lt; Torque, NoOpChecker&lt; Torque &gt;, false &gt; &amp;value) -&gt; decltype(os&lt;&lt; Torque(value))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a92f80c500536c9ace9c266ca095d4ce2</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>aeff78aa037fbc86ce1958b1658ed2510</anchor>
      <arglist>(const Checked&lt; Torque, NoOpChecker&lt; Torque &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Torque(lhs)&lt;=Torque(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>adeb25d8b74e7403ebd78bf324b8101dc</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Torque, NoOpChecker&lt; Torque &gt;, false &gt; &amp;rhs) -&gt; decltype(Torque(lhs)&lt;=Torque(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a8f2e536c4b87e31dd0d088bb64712b70</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;()==std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs)==RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a50beca9c94a84b533dda16d5612c99c1</anchor>
      <arglist>(const Checked&lt; Torque, NoOpChecker&lt; Torque &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Torque(lhs)==rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a3122c1c3be1d11d9e824e227cf58e4f3</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Torque, NoOpChecker&lt; Torque &gt;, false &gt; &amp;rhs) -&gt; decltype(lhs==Torque(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a65ffa1dc8fdac606f09d7f1258d76697</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a7db684b2001572866a76004dc188482b</anchor>
      <arglist>(const Checked&lt; Torque, NoOpChecker&lt; Torque &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Torque(lhs) &gt; Torque(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ae925670316f198c098c65a2d9fb2e68d</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Torque, NoOpChecker&lt; Torque &gt;, false &gt; &amp;rhs) -&gt; decltype(Torque(lhs) &gt; Torque(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a0d2b20e9a7652cad0cb713a9b466268d</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>a79e613ff5f9b13c13408daab2deae491</anchor>
      <arglist>(const Checked&lt; Torque, NoOpChecker&lt; Torque &gt;, false &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Torque(lhs) &gt;=Torque(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1Checked.html</anchorfile>
      <anchor>ab9994a039bbf093c9b0e0faddd272dab</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; Torque, NoOpChecker&lt; Torque &gt;, false &gt; &amp;rhs) -&gt; decltype(Torque(lhs) &gt;=Torque(rhs))</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::BlockAllocator::Chunk</name>
    <filename>structplayrho_1_1BlockAllocator_1_1Chunk.html</filename>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>structplayrho_1_1BlockAllocator_1_1Chunk.html</anchorfile>
      <anchor>afb9d9f2cdbc2d42f20c8a3fb57882ac9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Block *</type>
      <name>blocks</name>
      <anchorfile>structplayrho_1_1BlockAllocator_1_1Chunk.html</anchorfile>
      <anchor>a4be991e1465ee5b0e52cceb8ee2b444a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_type</type>
      <name>blockSize</name>
      <anchorfile>structplayrho_1_1BlockAllocator_1_1Chunk.html</anchorfile>
      <anchor>a9f089d6471c64f144bfd554b13bb215e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::ClipVertex</name>
    <filename>structplayrho_1_1d2_1_1ClipVertex.html</filename>
    <member kind="variable">
      <type>ContactFeature</type>
      <name>cf</name>
      <anchorfile>structplayrho_1_1d2_1_1ClipVertex.html</anchorfile>
      <anchor>a70e36425e1773d72f724cec972fcd785</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>v</name>
      <anchorfile>structplayrho_1_1d2_1_1ClipVertex.html</anchorfile>
      <anchor>a544a8a3e5b956c7c53b8b392890f5579</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::part::Compositor</name>
    <filename>classplayrho_1_1d2_1_1part_1_1Compositor.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>auto</type>
      <name>GetChild</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1Compositor.html</anchorfile>
      <anchor>a14ee1417a36f3128ff1eb2eefaa9e70f</anchor>
      <arglist>(const Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg, ChildCounter index) noexcept(noexcept(arg.GetChild(index))) -&gt; decltype(arg.GetChild(index))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetChildCount</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1Compositor.html</anchorfile>
      <anchor>a20c8a91b6e0263149ca376334f87373c</anchor>
      <arglist>(const Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg) noexcept -&gt; decltype(arg.GetChildCount())</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetDensity</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1Compositor.html</anchorfile>
      <anchor>ab10cd53d5d760d00bcf2c751e60927f0</anchor>
      <arglist>(const Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg) noexcept -&gt; decltype(arg.density)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetDimensions</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1Compositor.html</anchorfile>
      <anchor>ad2ba5af7d41b160bb4c0a215b562c9f8</anchor>
      <arglist>(const Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg) noexcept -&gt; decltype(arg.GetDimensions())</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetFilter</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1Compositor.html</anchorfile>
      <anchor>aadd6f0f1301d226c88bda0a255443012</anchor>
      <arglist>(const Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg) noexcept -&gt; decltype(arg.filter)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetFriction</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1Compositor.html</anchorfile>
      <anchor>a70759191c4163016dd62554f528b7595</anchor>
      <arglist>(const Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg) noexcept -&gt; decltype(arg.friction)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetMassData</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1Compositor.html</anchorfile>
      <anchor>aa4f02037d00c66d1489f8ddc0a2a5887</anchor>
      <arglist>(const Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg) noexcept -&gt; decltype(arg.GetMassData(GetDensity(arg)))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetOffset</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1Compositor.html</anchorfile>
      <anchor>aa2308e6e2a8e40e46f5ce5282f33e7d8</anchor>
      <arglist>(const Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg) noexcept -&gt; decltype(arg.GetOffset())</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetRestitution</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1Compositor.html</anchorfile>
      <anchor>adb6fc0390f20176b18275ba626e87cb9</anchor>
      <arglist>(const Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg) noexcept -&gt; decltype(arg.restitution)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1Compositor.html</anchorfile>
      <anchor>ae0a7e6e072d706510de072f6c9a0d079</anchor>
      <arglist>(const Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg) noexcept(noexcept(arg.GetVertexRadius())) -&gt; decltype(arg.GetVertexRadius())</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1Compositor.html</anchorfile>
      <anchor>ad0a6615b217840ceda5e7b6e03be467b</anchor>
      <arglist>(const Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg, ChildCounter index) noexcept(noexcept(GetChild(arg, index))) -&gt; decltype(GetVertexRadius(GetChild(arg, index)))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>IsSensor</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1Compositor.html</anchorfile>
      <anchor>a09d7d95575e84168a7c82a415169dbe8</anchor>
      <arglist>(const Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg) noexcept -&gt; decltype(arg.sensor)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1Compositor.html</anchorfile>
      <anchor>a060e63c62f47ebe00d181e65d169abd3</anchor>
      <arglist>(const Compositor&lt; P11, P12, P13, P14, P15, P16 &gt; &amp;lhs, const Compositor&lt; P21, P22, P23, P24, P25, P26 &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1Compositor.html</anchorfile>
      <anchor>ac3103858eab61eaa83b37d420a71ae40</anchor>
      <arglist>(const Compositor&lt; P11, P12, P13, P14, P15, P16 &gt; &amp;lhs, const Compositor&lt; P21, P22, P23, P24, P25, P26 &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>Rotate</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1Compositor.html</anchorfile>
      <anchor>a9de5e9d13d9013dab0fc55bfec2697ec</anchor>
      <arglist>(Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg,::playrho::d2::UnitVec value) -&gt; std::enable_if_t&lt; detail::HasMemberRotateV&lt; decltype(arg)&gt;, void &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>Rotate</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1Compositor.html</anchorfile>
      <anchor>aee1652046c01cfcade1493d28db88c89</anchor>
      <arglist>(Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg,::playrho::d2::UnitVec value) -&gt; std::enable_if_t&lt;!detail::HasMemberRotateV&lt; decltype(arg)&gt;, void &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>Scale</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1Compositor.html</anchorfile>
      <anchor>a8e7a002a381cad9eb15c7e6ba1ab2e00</anchor>
      <arglist>(Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg, const Vec2 &amp;value) -&gt; std::enable_if_t&lt; detail::HasMemberScaleV&lt; decltype(arg)&gt;, void &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>Scale</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1Compositor.html</anchorfile>
      <anchor>a12723ae7c089881aa8cd1340088b75e7</anchor>
      <arglist>(Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg, const Vec2 &amp;value) -&gt; std::enable_if_t&lt;!detail::HasMemberScaleV&lt; decltype(arg)&gt;, void &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>SetDensity</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1Compositor.html</anchorfile>
      <anchor>ab46d03ffff3bb2b82be8c0091e77c6ba</anchor>
      <arglist>(Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg, NonNegative&lt; AreaDensity &gt; value) -&gt; std::enable_if_t&lt; std::is_const_v&lt; decltype(arg.density)&gt;, void &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>SetDensity</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1Compositor.html</anchorfile>
      <anchor>ac3474dff07f98ed9fa68cfa612ef529b</anchor>
      <arglist>(Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg, NonNegative&lt; AreaDensity &gt; value) -&gt; std::enable_if_t&lt;!std::is_const_v&lt; decltype(arg.density)&gt;, void &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>SetDimensions</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1Compositor.html</anchorfile>
      <anchor>a0350621543765f7b3ef9645e7a4aead1</anchor>
      <arglist>(Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg, decltype(arg.GetDimensions()) value) -&gt; decltype(arg.SetDimensions(value))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>SetFilter</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1Compositor.html</anchorfile>
      <anchor>aee25c3fc14b3a1ba49fc764f8462dff4</anchor>
      <arglist>(Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg, Filter value) -&gt; std::enable_if_t&lt; std::is_const_v&lt; decltype(arg.filter)&gt;, void &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>SetFilter</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1Compositor.html</anchorfile>
      <anchor>ae95d9ee6e7af9b236d77dc88ecdda0ff</anchor>
      <arglist>(Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg, Filter value) -&gt; std::enable_if_t&lt;!std::is_const_v&lt; decltype(arg.filter)&gt;, void &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>SetFriction</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1Compositor.html</anchorfile>
      <anchor>a23ac9fe74f6e02fdfba1100ed92c54f4</anchor>
      <arglist>(Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg, NonNegative&lt; Real &gt; value) -&gt; std::enable_if_t&lt; std::is_const_v&lt; decltype(arg.friction)&gt;, void &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>SetFriction</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1Compositor.html</anchorfile>
      <anchor>a09f290e872984197b9c7bb8b11268e0f</anchor>
      <arglist>(Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg, NonNegative&lt; Real &gt; value) -&gt; std::enable_if_t&lt;!std::is_const_v&lt; decltype(arg.friction)&gt;, void &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>SetOffset</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1Compositor.html</anchorfile>
      <anchor>a42df945f58a0fae6ee1762a10f052a1d</anchor>
      <arglist>(Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg, decltype(arg.GetOffset()) value) -&gt; decltype(arg.SetOffset(value))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>SetRestitution</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1Compositor.html</anchorfile>
      <anchor>a348e6fdf24288055752d00d8a8869b87</anchor>
      <arglist>(Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg, Real value) -&gt; std::enable_if_t&lt; std::is_const_v&lt; decltype(arg.restitution)&gt;, void &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>SetRestitution</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1Compositor.html</anchorfile>
      <anchor>acae907e2173e3c211c5fe7784f011e41</anchor>
      <arglist>(Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg, Real value) -&gt; std::enable_if_t&lt;!std::is_const_v&lt; decltype(arg.restitution)&gt;, void &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>SetSensor</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1Compositor.html</anchorfile>
      <anchor>ae8100537ddd5f7ab1716ffbb5b0515dc</anchor>
      <arglist>(Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg, bool value) -&gt; std::enable_if_t&lt; std::is_const_v&lt; decltype(arg.sensor)&gt;, void &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>SetSensor</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1Compositor.html</anchorfile>
      <anchor>ad07854cfbdaaa13c43e8e683b8806d4a</anchor>
      <arglist>(Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg, bool value) -&gt; std::enable_if_t&lt;!std::is_const_v&lt; decltype(arg.sensor)&gt;, void &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>SetVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1Compositor.html</anchorfile>
      <anchor>aa6bd61aad326db6c0cfdea867f5f83e2</anchor>
      <arglist>(Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg, ChildCounter index, decltype(arg.GetVertexRadius()) value) -&gt; decltype(arg.SetVertexRadius(index, value))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>Translate</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1Compositor.html</anchorfile>
      <anchor>aab6da22689fae9331ca99b5f85bf01cd</anchor>
      <arglist>(Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg, const Length2 &amp;value) -&gt; std::enable_if_t&lt; detail::HasMemberTranslateV&lt; decltype(arg)&gt;, void &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>Translate</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1Compositor.html</anchorfile>
      <anchor>a4084943308eccf86f9a5e6ed729e6a27</anchor>
      <arglist>(Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg, const Length2 &amp;value) -&gt; std::enable_if_t&lt;!detail::HasMemberTranslateV&lt; decltype(arg)&gt;, void &gt;</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::Manifold::Conf</name>
    <filename>structplayrho_1_1d2_1_1Manifold_1_1Conf.html</filename>
    <member kind="variable">
      <type>Length</type>
      <name>linearSlop</name>
      <anchorfile>structplayrho_1_1d2_1_1Manifold_1_1Conf.html</anchorfile>
      <anchor>ab6eeee16af7550804d91a82757aef598</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>maxCirclesRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1Manifold_1_1Conf.html</anchorfile>
      <anchor>ae311a665bbb972916ca896be04ace473</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr Manifold::Conf</type>
      <name>GetDefaultManifoldConf</name>
      <anchorfile>structplayrho_1_1d2_1_1Manifold_1_1Conf.html</anchorfile>
      <anchor>acaf37db0f0fc4d474c6a447b1032d73f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>Manifold::Conf</type>
      <name>GetManifoldConf</name>
      <anchorfile>structplayrho_1_1d2_1_1Manifold_1_1Conf.html</anchorfile>
      <anchor>aa8f1bf295c7fdae2783dfc6368f39a95</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::VelocityConstraint::Conf</name>
    <filename>structplayrho_1_1d2_1_1VelocityConstraint_1_1Conf.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>blockSolve</name>
      <anchorfile>structplayrho_1_1d2_1_1VelocityConstraint_1_1Conf.html</anchorfile>
      <anchor>adc6dd16353d5df05187f3a35c29acef6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>dtRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1VelocityConstraint_1_1Conf.html</anchorfile>
      <anchor>a318e6cdd10c95ad32829125160a8950a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinearVelocity</type>
      <name>velocityThreshold</name>
      <anchorfile>structplayrho_1_1d2_1_1VelocityConstraint_1_1Conf.html</anchorfile>
      <anchor>a26d2ea8863494e13d6c62da51181627d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::StackAllocator::Conf</name>
    <filename>structplayrho_1_1StackAllocator_1_1Conf.html</filename>
    <member kind="variable">
      <type>size_type</type>
      <name>allocation_records</name>
      <anchorfile>structplayrho_1_1StackAllocator_1_1Conf.html</anchorfile>
      <anchor>a38007c811dfeed6d390c38ede273f8a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_type</type>
      <name>preallocation_size</name>
      <anchorfile>structplayrho_1_1StackAllocator_1_1Conf.html</anchorfile>
      <anchor>a95611c9fe9f39d544614c918727cff8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultAllocationRecords</name>
      <anchorfile>structplayrho_1_1StackAllocator_1_1Conf.html</anchorfile>
      <anchor>a62d06ed9474f810fb17176785f96cfc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultPreallocationSize</name>
      <anchorfile>structplayrho_1_1StackAllocator_1_1Conf.html</anchorfile>
      <anchor>aff78f6c449d863791fc83e692cb750b0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::ConstraintSolverConf</name>
    <filename>structplayrho_1_1ConstraintSolverConf.html</filename>
    <member kind="function">
      <type>constexpr ConstraintSolverConf &amp;</type>
      <name>UseAngularSlop</name>
      <anchorfile>structplayrho_1_1ConstraintSolverConf.html</anchorfile>
      <anchor>af44f65605899416fc5ae7940e6574454</anchor>
      <arglist>(Angle value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ConstraintSolverConf &amp;</type>
      <name>UseLinearSlop</name>
      <anchorfile>structplayrho_1_1ConstraintSolverConf.html</anchorfile>
      <anchor>a41f56fac5e8c601d4acb47db3c0a4bc6</anchor>
      <arglist>(Length value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ConstraintSolverConf &amp;</type>
      <name>UseMaxAngularCorrection</name>
      <anchorfile>structplayrho_1_1ConstraintSolverConf.html</anchorfile>
      <anchor>a45ced71eb3cdf8f2afa9d2802fef0849</anchor>
      <arglist>(Angle value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ConstraintSolverConf &amp;</type>
      <name>UseMaxLinearCorrection</name>
      <anchorfile>structplayrho_1_1ConstraintSolverConf.html</anchorfile>
      <anchor>a14974ecb3d62147f64f5ceee83e625fb</anchor>
      <arglist>(Length value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ConstraintSolverConf &amp;</type>
      <name>UseResolutionRate</name>
      <anchorfile>structplayrho_1_1ConstraintSolverConf.html</anchorfile>
      <anchor>af05fd8b0c75bce6d598c8f221d42c988</anchor>
      <arglist>(Real value) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Angle</type>
      <name>angularSlop</name>
      <anchorfile>structplayrho_1_1ConstraintSolverConf.html</anchorfile>
      <anchor>adddb08435179020d3da74422d611d4e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>linearSlop</name>
      <anchorfile>structplayrho_1_1ConstraintSolverConf.html</anchorfile>
      <anchor>a0a06a89f265de0dfdefa618c6ae6c4d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Angle</type>
      <name>maxAngularCorrection</name>
      <anchorfile>structplayrho_1_1ConstraintSolverConf.html</anchorfile>
      <anchor>a253a4bc881f71c58f227fe7effa739ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>maxLinearCorrection</name>
      <anchorfile>structplayrho_1_1ConstraintSolverConf.html</anchorfile>
      <anchor>ae4b3ba29066a65128fab09298cad41df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>resolutionRate</name>
      <anchorfile>structplayrho_1_1ConstraintSolverConf.html</anchorfile>
      <anchor>ac86f35015ef9ac64623cf75040877a4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultAngularSlop</name>
      <anchorfile>structplayrho_1_1ConstraintSolverConf.html</anchorfile>
      <anchor>a6c42cb86e33f82a07d2d5a0c743cb8cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultLinearSlop</name>
      <anchorfile>structplayrho_1_1ConstraintSolverConf.html</anchorfile>
      <anchor>a73e2fccc2ffc057f819b34e3849a7dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultMaxAngularCorrection</name>
      <anchorfile>structplayrho_1_1ConstraintSolverConf.html</anchorfile>
      <anchor>ab2ed61bf1df95685c52ffab579c6a464</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultMaxLinearCorrection</name>
      <anchorfile>structplayrho_1_1ConstraintSolverConf.html</anchorfile>
      <anchor>aada40e26fa44724458c01c0d4ef3e112</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultRegResolutionRate</name>
      <anchorfile>structplayrho_1_1ConstraintSolverConf.html</anchorfile>
      <anchor>a10c0e8bec6c372aaf7c6bc24652abd8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultToiResolutionRate</name>
      <anchorfile>structplayrho_1_1ConstraintSolverConf.html</anchorfile>
      <anchor>a276b8714130c2d4067d3b69c0b789272</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::Contact</name>
    <filename>classplayrho_1_1Contact.html</filename>
    <member kind="typedef">
      <type>TimestepIters</type>
      <name>substep_type</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a302944c607d7a872a6a30c653c9f690d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Contact</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a5ddb98467de3e4ca5112ec975287bed8</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Contact</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a83c582ba97498f6070676608b691c18f</anchor>
      <arglist>(const Contactable &amp;a, const Contactable &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>FlagForFiltering</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a709ddcf537978ca11510f101eb82af52</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>FlagForUpdating</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>ab1778dfc4142bf4cb6416aa14f7c1599</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const Contactable &amp;</type>
      <name>GetContactableA</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a8ce9a82749c59d8eb5068f86729f3464</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const Contactable &amp;</type>
      <name>GetContactableB</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a9eda66634a1890d4b31bcc23fa06ea55</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr NonNegativeFF&lt; Real &gt;</type>
      <name>GetFriction</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a4ee36811118a4cc130b10282d3558b91</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Real</type>
      <name>GetRestitution</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>adb57c863aef07e7d13b37c0926ecb85d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr LinearVelocity</type>
      <name>GetTangentSpeed</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a7f2644b9da37aa32f39cd88b62d0db6c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::optional&lt; UnitIntervalFF&lt; Real &gt; &gt;</type>
      <name>GetToi</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a770273b481864b2a4e8a80ec7099ede5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr substep_type</type>
      <name>GetToiCount</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a6a9908d4288e5821aef95f11858d020a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>HasValidToi</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>ae9d59ac0715efd3beadef07cce324800</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>IncrementToiCount</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a058abb03ad0340986e1011791b2ecec3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsActive</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a67573bbae0d999aae871e19e7fc9a51e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsEnabled</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a266137342d5122459efff71d4d50b2c9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsImpenetrable</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a124ab0621dc4198266bc46d4685f17e5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsSensor</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>adc4b980422c2f14f9ebf86c9aaa76e9b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsTouching</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a7c4eb8ea621784330acd8adf6fd25448</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>NeedsFiltering</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a01f95663dc2875c378de283d1747e759</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>NeedsUpdating</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a79f278257778f91aa4f0a1ed8667f918</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetEnabled</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>ad2f355292a57505c99cda637451e1a00</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetFriction</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a96a48cd331e745442580e72533b6355d</anchor>
      <arglist>(NonNegative&lt; Real &gt; friction) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetImpenetrable</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a1b81d1a80b14ca48e337542989518299</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetIsActive</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a766ac4778e764a75ed3f91961f337ba1</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetRestitution</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>ad5a8b68b95edcd03eab802bcfff49ee7</anchor>
      <arglist>(Real restitution) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetSensor</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a0a375615134c6495008a911a1d95fc67</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetTangentSpeed</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a8ccb25cf0c94e4a8ca19ef78e1d695d1</anchor>
      <arglist>(LinearVelocity speed) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetToi</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a8b75166068cc1f2bade65ac506377ae6</anchor>
      <arglist>(const std::optional&lt; UnitIntervalFF&lt; Real &gt;&gt; &amp;toi) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetToiCount</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a870c13b36e34ae2448cf5fd5b3e6318d</anchor>
      <arglist>(substep_type value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetTouching</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a13c13eea82b1c8b468a98373b348fcc7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>UnflagForFiltering</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a2b7cfdb65414af2a216ab27764c59806</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>UnflagForUpdating</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a69b883935986a52a2d3a3343bb236e98</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>UnsetEnabled</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a9f832db8856f81e2cb5954cabb7703aa</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>UnsetImpenetrable</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a7f9fd3406b7d88acd176aadfe96dc357</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>UnsetIsActive</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>aedd71296e3e09d12b0eb339371960c68</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>UnsetIsSensor</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a51105cf87046956882da320d96e9b71d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>UnsetTouching</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a75af2c6d431157767c04a7b0ad0a6c87</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultContactable</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a8b1b9a79e20a6e9f08ea030b1b995cb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>FlagForFiltering</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>ac1efaeb0c030854ede6606021ba56d30</anchor>
      <arglist>(Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>FlagForUpdating</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>ac1ec70ebc79af5b28899b8d0a1341141</anchor>
      <arglist>(Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyID</type>
      <name>GetBodyA</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>ab6119f387b09a5ece4a552f3b3aa1565</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyID</type>
      <name>GetBodyB</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>aa747a1797c3953dfc068ce03901695ed</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ChildCounter</type>
      <name>GetChildIndexA</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a2e63c4946d742afab47f8a1c00ae2a8a</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ChildCounter</type>
      <name>GetChildIndexB</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a676e6537b55110a4aa43e3e0a113f8b9</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetFriction</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a1e3bad8be42524709861c9e728048ea2</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetOtherBody</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>ae8ddd62df538578a056ac976e42d9739</anchor>
      <arglist>(const Contact &amp;c, BodyID bodyID) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetRestitution</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a8623a4509113eb33f84ea8aba436396e</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ShapeID</type>
      <name>GetShapeA</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a3905c9d50e61b110388dcf71176cd1fe</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ShapeID</type>
      <name>GetShapeB</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a1bff0722b0746e1ba9d6cf2015e4bc95</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetTangentSpeed</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a568a3fc3585eb44878213a919420f847</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetToi</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>acd05d6b92912a6430c09ad8a74bcbc73</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetToiCount</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>abce1723933df3c7d4054975daa7ac724</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>WorldManifold</type>
      <name>GetWorldManifold</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a53c028875bbee1fffcd3fc497bee2dc5</anchor>
      <arglist>(const World &amp;world, const Contact &amp;contact, const Manifold &amp;manifold)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>HasValidToi</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a77e830664360ead07ab616d934ff2550</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsActive</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>ae659e1f443f30d7813853f6763f1f22f</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsEnabled</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>acf2071b64988e62193b4a2567bdde292</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsFor</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>aa8f91c8a02e1886e4e9f90d0926e075a</anchor>
      <arglist>(const Contact &amp;c, BodyID bodyID, ShapeID shapeID) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsFor</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a283c9f04ceb148910537dc1cd3f37c00</anchor>
      <arglist>(const Contact &amp;c, ShapeID shapeID) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsImpenetrable</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a885fded7567b0972b4af486e5df9afea</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsSensor</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>ab8801b7203d1ab9a06ca349a9d304f3c</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsTouching</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>aecbf667797116ec6c5e84d896f05daa6</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>NeedsFiltering</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a92b68ee2dcf7f21577269938c5267f5f</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>NeedsUpdating</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a00846636a226626c5dd4151893f397f7</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a253588f96c2b53aec235c79675776988</anchor>
      <arglist>(const Contact &amp;lhs, const Contact &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a5b92007cb872b11ba4ab93f5095e2e48</anchor>
      <arglist>(const Contact &amp;lhs, const Contact &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetEnabled</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a23ce44af5f5ba3deb7e1eafe1acf5198</anchor>
      <arglist>(Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetFriction</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>acaf284b9eea3b4ad78ba5b673e67b00b</anchor>
      <arglist>(Contact &amp;contact, NonNegative&lt; Real &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetImpenetrable</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a146755eafb1ed7d0ea52af68ea4874cd</anchor>
      <arglist>(Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetIsActive</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a6dc7dc1c568e7e1cbe70afe67c51b14a</anchor>
      <arglist>(Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetRestitution</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>ae72b11c11801f8189dbd1d61dd917f77</anchor>
      <arglist>(Contact &amp;contact, Real value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetSensor</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>af8595ac215de486ea15aaa0c9c608b3e</anchor>
      <arglist>(Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetTangentSpeed</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a16493a4bdae1683c07b4b116516716f0</anchor>
      <arglist>(Contact &amp;contact, LinearVelocity value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetToi</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>af93e3743c48882f44ef7936cbad68ae1</anchor>
      <arglist>(Contact &amp;contact, const std::optional&lt; UnitIntervalFF&lt; Real &gt;&gt; &amp;toi) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetToiCount</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>aabf79c789863cc4aea6b9e6bc976267c</anchor>
      <arglist>(Contact &amp;contact, Contact::substep_type value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>UnflagForFiltering</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>aaf49104158a7aea199f9531f9ab5b7d0</anchor>
      <arglist>(Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>UnflagForUpdating</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>ad0be851da5e90da82388aaddaa1d8f6d</anchor>
      <arglist>(Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>UnsetImpenetrable</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a205494b248da96a02b57be9d9ad9a27b</anchor>
      <arglist>(Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>UnsetIsActive</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>a1ae66cec17d17f003982ee50908d0d25</anchor>
      <arglist>(Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>UnsetIsSensor</name>
      <anchorfile>classplayrho_1_1Contact.html</anchorfile>
      <anchor>ad488916b3a4198e323011d0a3f417c90</anchor>
      <arglist>(Contact &amp;contact) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::Contactable</name>
    <filename>structplayrho_1_1Contactable.html</filename>
    <member kind="variable">
      <type>BodyID</type>
      <name>bodyId</name>
      <anchorfile>structplayrho_1_1Contactable.html</anchorfile>
      <anchor>a7d1193b4264acfd175e79bd95e183447</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ChildCounter</type>
      <name>childId</name>
      <anchorfile>structplayrho_1_1Contactable.html</anchorfile>
      <anchor>aa6af9113f47f6348c0609576057ad1ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ShapeID</type>
      <name>shapeId</name>
      <anchorfile>structplayrho_1_1Contactable.html</anchorfile>
      <anchor>a594946ac890dee8c01a5089698770627</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1Contactable.html</anchorfile>
      <anchor>a64c43d9f4a2db2922f8816f960ece8ec</anchor>
      <arglist>(const Contactable &amp;lhs, const Contactable &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1Contactable.html</anchorfile>
      <anchor>a268967eee0d7a53d51224a8a1259d06f</anchor>
      <arglist>(const Contactable &amp;lhs, const Contactable &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::ContactFeature</name>
    <filename>structplayrho_1_1ContactFeature.html</filename>
    <member kind="typedef">
      <type>std::uint8_t</type>
      <name>Index</name>
      <anchorfile>structplayrho_1_1ContactFeature.html</anchorfile>
      <anchor>ab960333ec02960bebf043a55ef1b6041</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>structplayrho_1_1ContactFeature.html</anchorfile>
      <anchor>afd2b1a5d28a16fc49261c39d8cebabc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Index</type>
      <name>indexA</name>
      <anchorfile>structplayrho_1_1ContactFeature.html</anchorfile>
      <anchor>ac1bd8a9bfa4c1cdb13e0e603e945d786</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Index</type>
      <name>indexB</name>
      <anchorfile>structplayrho_1_1ContactFeature.html</anchorfile>
      <anchor>ab540beeb299389dccbac7381e4e39f6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Type</type>
      <name>typeA</name>
      <anchorfile>structplayrho_1_1ContactFeature.html</anchorfile>
      <anchor>a5c088ec7e1896a2b461674065d195dad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Type</type>
      <name>typeB</name>
      <anchorfile>structplayrho_1_1ContactFeature.html</anchorfile>
      <anchor>aeed0a48d9b920fc4a044d12f506905f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr ContactFeature</type>
      <name>Flip</name>
      <anchorfile>structplayrho_1_1ContactFeature.html</anchorfile>
      <anchor>a43951f69f7ead57450bac66cbb76b0e1</anchor>
      <arglist>(ContactFeature val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ContactFeature</type>
      <name>GetFaceFaceContactFeature</name>
      <anchorfile>structplayrho_1_1ContactFeature.html</anchorfile>
      <anchor>aa64fefdeb5b40b3ee00c30dc263397b9</anchor>
      <arglist>(ContactFeature::Index a, ContactFeature::Index b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ContactFeature</type>
      <name>GetFaceVertexContactFeature</name>
      <anchorfile>structplayrho_1_1ContactFeature.html</anchorfile>
      <anchor>a874b42008ce4794858edc982ba13534a</anchor>
      <arglist>(ContactFeature::Index a, ContactFeature::Index b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ContactFeature</type>
      <name>GetVertexFaceContactFeature</name>
      <anchorfile>structplayrho_1_1ContactFeature.html</anchorfile>
      <anchor>a525adfccea1a81ce8311751fc90d0614</anchor>
      <arglist>(ContactFeature::Index a, ContactFeature::Index b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ContactFeature</type>
      <name>GetVertexVertexContactFeature</name>
      <anchorfile>structplayrho_1_1ContactFeature.html</anchorfile>
      <anchor>ad0c8c86c92d71e89dd707af00b1de6a8</anchor>
      <arglist>(ContactFeature::Index a, ContactFeature::Index b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1ContactFeature.html</anchorfile>
      <anchor>a9bcf95269c48c96b8af0854d24894e3d</anchor>
      <arglist>(ContactFeature lhs, ContactFeature rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1ContactFeature.html</anchorfile>
      <anchor>ac19a825ed22691eab1981a616b6bf539</anchor>
      <arglist>(ContactFeature lhs, ContactFeature rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::ContactImpulsesList</name>
    <filename>classplayrho_1_1d2_1_1ContactImpulsesList.html</filename>
    <member kind="typedef">
      <type>std::remove_const_t&lt; decltype(MaxManifoldPoints)&gt;</type>
      <name>Counter</name>
      <anchorfile>classplayrho_1_1d2_1_1ContactImpulsesList.html</anchorfile>
      <anchor>a082fb8f283a5480d6481dca52bafe853</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddEntry</name>
      <anchorfile>classplayrho_1_1d2_1_1ContactImpulsesList.html</anchorfile>
      <anchor>a10582ed9bfbe1061650b20acbaa3787f</anchor>
      <arglist>(Momentum normal, Momentum tangent) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Counter</type>
      <name>GetCount</name>
      <anchorfile>classplayrho_1_1d2_1_1ContactImpulsesList.html</anchorfile>
      <anchor>a492e5b3928781d272c8281adcd5ae900</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Momentum</type>
      <name>GetEntryNormal</name>
      <anchorfile>classplayrho_1_1d2_1_1ContactImpulsesList.html</anchorfile>
      <anchor>a93e87aaa55a2d38ff22bda824bf84ef6</anchor>
      <arglist>(Counter index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Momentum</type>
      <name>GetEntryTanget</name>
      <anchorfile>classplayrho_1_1d2_1_1ContactImpulsesList.html</anchorfile>
      <anchor>aaba0fcd7239b70c9c20a27c6f54f42da</anchor>
      <arglist>(Counter index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Momentum</type>
      <name>GetMaxNormalImpulse</name>
      <anchorfile>classplayrho_1_1d2_1_1ContactImpulsesList.html</anchorfile>
      <anchor>a07f0d8f5fce9556590d8e7e40289ae33</anchor>
      <arglist>(const ContactImpulsesList &amp;impulses) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::ContactKey</name>
    <filename>classplayrho_1_1ContactKey.html</filename>
    <member kind="function">
      <type>constexpr</type>
      <name>ContactKey</name>
      <anchorfile>classplayrho_1_1ContactKey.html</anchorfile>
      <anchor>af2901c4befb477f2ecdd435a27f32d09</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>ContactKey</name>
      <anchorfile>classplayrho_1_1ContactKey.html</anchorfile>
      <anchor>aaa749c69a5420b84e6749501a81bd297</anchor>
      <arglist>(ContactCounter fp1, ContactCounter fp2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ContactCounter</type>
      <name>GetMax</name>
      <anchorfile>classplayrho_1_1ContactKey.html</anchorfile>
      <anchor>ae4790905ec6ec9869b30444333f65e75</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ContactCounter</type>
      <name>GetMin</name>
      <anchorfile>classplayrho_1_1ContactKey.html</anchorfile>
      <anchor>a106ab79f2dd1afc5006a4732c491ea5f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::AabbTreeWorld::ContactUpdateConf</name>
    <filename>structplayrho_1_1d2_1_1AabbTreeWorld_1_1ContactUpdateConf.html</filename>
    <member kind="variable">
      <type>DistanceConf</type>
      <name>distance</name>
      <anchorfile>structplayrho_1_1d2_1_1AabbTreeWorld_1_1ContactUpdateConf.html</anchorfile>
      <anchor>a00610e727eb43fff8aa52d36e915926d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Manifold::Conf</type>
      <name>manifold</name>
      <anchorfile>structplayrho_1_1d2_1_1AabbTreeWorld_1_1ContactUpdateConf.html</anchorfile>
      <anchor>aa69df2300a69f077f53c0c02a4a6607f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::ConvexHull</name>
    <filename>classplayrho_1_1d2_1_1ConvexHull.html</filename>
    <member kind="function">
      <type>DistanceProxy</type>
      <name>GetDistanceProxy</name>
      <anchorfile>classplayrho_1_1d2_1_1ConvexHull.html</anchorfile>
      <anchor>a7d7018e5533e08eb8f3eba2a433cc3a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1ConvexHull.html</anchorfile>
      <anchor>a2acf139f12016ebffac2da470ea55330</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ConvexHull &amp;</type>
      <name>Rotate</name>
      <anchorfile>classplayrho_1_1d2_1_1ConvexHull.html</anchorfile>
      <anchor>a5b207b29481d5ecd776998ff45838411</anchor>
      <arglist>(const UnitVec &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>ConvexHull &amp;</type>
      <name>Scale</name>
      <anchorfile>classplayrho_1_1d2_1_1ConvexHull.html</anchorfile>
      <anchor>a83f946da34aae60cb0193dff735a388a</anchor>
      <arglist>(const Vec2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1ConvexHull.html</anchorfile>
      <anchor>a69daf302ec9eecd5ddc9dea2168e6af0</anchor>
      <arglist>(NonNegative&lt; Length &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ConvexHull &amp;</type>
      <name>Translate</name>
      <anchorfile>classplayrho_1_1d2_1_1ConvexHull.html</anchorfile>
      <anchor>a0babc403130245dfea20f58a5854a182</anchor>
      <arglist>(const Length2 &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConvexHull</type>
      <name>Get</name>
      <anchorfile>classplayrho_1_1d2_1_1ConvexHull.html</anchorfile>
      <anchor>a678ba0811f2975d1cdba6bfca49005eb</anchor>
      <arglist>(const VertexSet &amp;pointSet, NonNegative&lt; Length &gt; vertexRadius=NonNegative&lt; Length &gt;{DefaultLinearSlop *Real{2}})</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1d2_1_1ConvexHull.html</anchorfile>
      <anchor>ac2d04de1e99eea10f31f2a757b706607</anchor>
      <arglist>(const ConvexHull &amp;lhs, const ConvexHull &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1d2_1_1ConvexHull.html</anchorfile>
      <anchor>aa99886fb5a26ab66edf9e1cca4b9f8b9</anchor>
      <arglist>(const ConvexHull &amp;lhs, const ConvexHull &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::part::DefaultPolicies</name>
    <filename>structplayrho_1_1d2_1_1part_1_1DefaultPolicies.html</filename>
    <member kind="typedef">
      <type>StaticAreaDensity&lt;&gt;</type>
      <name>Density</name>
      <anchorfile>structplayrho_1_1d2_1_1part_1_1DefaultPolicies.html</anchorfile>
      <anchor>ac627282086f9ac3d511eaa248e7c8a4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>StaticFilter&lt;&gt;</type>
      <name>Filter</name>
      <anchorfile>structplayrho_1_1d2_1_1part_1_1DefaultPolicies.html</anchorfile>
      <anchor>a1f412c8c07bc78991360914a4947b3c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>StaticTenthsFriction&lt;&gt;</type>
      <name>Friction</name>
      <anchorfile>structplayrho_1_1d2_1_1part_1_1DefaultPolicies.html</anchorfile>
      <anchor>adfb167e066ec99cca28c5d88c8aa4c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>StaticRectangle&lt;&gt;</type>
      <name>Geometry</name>
      <anchorfile>structplayrho_1_1d2_1_1part_1_1DefaultPolicies.html</anchorfile>
      <anchor>ab4e7f23e70e680897ce73b7003315a8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>StaticRestitution&lt;&gt;</type>
      <name>Restitution</name>
      <anchorfile>structplayrho_1_1d2_1_1part_1_1DefaultPolicies.html</anchorfile>
      <anchor>ad58918e0327fb4faca764c96bec03f72</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>StaticSensor&lt;&gt;</type>
      <name>Sensor</name>
      <anchorfile>structplayrho_1_1d2_1_1part_1_1DefaultPolicies.html</anchorfile>
      <anchor>a71540008298277e32c62998d5fd1e387</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::part::DefaultPolicyArgs</name>
    <filename>structplayrho_1_1d2_1_1part_1_1DefaultPolicyArgs.html</filename>
    <base virtualness="virtual">playrho::d2::part::DefaultPolicies</base>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::part::DensityIs</name>
    <filename>structplayrho_1_1d2_1_1part_1_1DensityIs.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">playrho::d2::part::DefaultPolicies</base>
    <member kind="typedef">
      <type>Policy</type>
      <name>Density</name>
      <anchorfile>structplayrho_1_1d2_1_1part_1_1DensityIs.html</anchorfile>
      <anchor>aae14e69382ccc79a0ea76754e092daa0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::detector</name>
    <filename>structplayrho_1_1detail_1_1detector.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>Op</templarg>
    <templarg>Args</templarg>
    <member kind="typedef">
      <type>Default</type>
      <name>type</name>
      <anchorfile>structplayrho_1_1detail_1_1detector.html</anchorfile>
      <anchor>a6bbf5e64672a26f4c9e7de9007418d09</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::false_type</type>
      <name>value_t</name>
      <anchorfile>structplayrho_1_1detail_1_1detector.html</anchorfile>
      <anchor>a058466189cc2d0450d48e2dfb338d158</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::detector&lt; Default, std::void_t&lt; Op&lt; Args... &gt; &gt;, Op, Args... &gt;</name>
    <filename>structplayrho_1_1detail_1_1detector_3_01Default_00_01std_1_1void__t_3_01Op_3_01Args_8_8_8_01_4_0354b20dbfb0688d53175b0c0b28d1e9c.html</filename>
    <templarg></templarg>
    <templarg>Op</templarg>
    <templarg>Args</templarg>
    <member kind="typedef">
      <type>Op&lt; Args... &gt;</type>
      <name>type</name>
      <anchorfile>structplayrho_1_1detail_1_1detector_3_01Default_00_01std_1_1void__t_3_01Op_3_01Args_8_8_8_01_4_0354b20dbfb0688d53175b0c0b28d1e9c.html</anchorfile>
      <anchor>a551a0c967d8f77ce0bcf4e5fa7b0b25f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::true_type</type>
      <name>value_t</name>
      <anchorfile>structplayrho_1_1detail_1_1detector_3_01Default_00_01std_1_1void__t_3_01Op_3_01Args_8_8_8_01_4_0354b20dbfb0688d53175b0c0b28d1e9c.html</anchorfile>
      <anchor>a6a8679f039c992d995e8306fdc6e46dc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::part::Discriminator</name>
    <filename>structplayrho_1_1d2_1_1part_1_1Discriminator.html</filename>
    <templarg></templarg>
    <templarg>D</templarg>
  </compound>
  <compound kind="class">
    <name>Discriminator&lt; Set1, 1 &gt;</name>
    <filename>structplayrho_1_1d2_1_1part_1_1Discriminator.html</filename>
  </compound>
  <compound kind="class">
    <name>Discriminator&lt; Set2, 2 &gt;</name>
    <filename>structplayrho_1_1d2_1_1part_1_1Discriminator.html</filename>
  </compound>
  <compound kind="class">
    <name>Discriminator&lt; Set3, 3 &gt;</name>
    <filename>structplayrho_1_1d2_1_1part_1_1Discriminator.html</filename>
  </compound>
  <compound kind="class">
    <name>Discriminator&lt; Set4, 4 &gt;</name>
    <filename>structplayrho_1_1d2_1_1part_1_1Discriminator.html</filename>
  </compound>
  <compound kind="class">
    <name>Discriminator&lt; Set5, 5 &gt;</name>
    <filename>structplayrho_1_1d2_1_1part_1_1Discriminator.html</filename>
  </compound>
  <compound kind="class">
    <name>Discriminator&lt; Set6, 6 &gt;</name>
    <filename>structplayrho_1_1d2_1_1part_1_1Discriminator.html</filename>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::DiskShapeConf</name>
    <filename>structplayrho_1_1d2_1_1DiskShapeConf.html</filename>
    <base>ShapeBuilder&lt; DiskShapeConf &gt;</base>
    <member kind="function">
      <type>constexpr</type>
      <name>DiskShapeConf</name>
      <anchorfile>structplayrho_1_1d2_1_1DiskShapeConf.html</anchorfile>
      <anchor>a4b755ac0090f2feb76bb18c8d06cff9c</anchor>
      <arglist>(NonNegative&lt; Length &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocation</name>
      <anchorfile>structplayrho_1_1d2_1_1DiskShapeConf.html</anchorfile>
      <anchor>a80722e9c17a546a9d2cecd9545654a04</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetRadius</name>
      <anchorfile>structplayrho_1_1d2_1_1DiskShapeConf.html</anchorfile>
      <anchor>a876cfe2252080d2f09e777d2f5ef2c48</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr DiskShapeConf &amp;</type>
      <name>Rotate</name>
      <anchorfile>structplayrho_1_1d2_1_1DiskShapeConf.html</anchorfile>
      <anchor>a0d9045d6c556698f43cdde011c2c815c</anchor>
      <arglist>(const UnitVec &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr DiskShapeConf &amp;</type>
      <name>Scale</name>
      <anchorfile>structplayrho_1_1d2_1_1DiskShapeConf.html</anchorfile>
      <anchor>af7a335319c2de1bd50a75511ae9d174e</anchor>
      <arglist>(const Vec2 &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr DiskShapeConf &amp;</type>
      <name>Translate</name>
      <anchorfile>structplayrho_1_1d2_1_1DiskShapeConf.html</anchorfile>
      <anchor>ae227d1fcbc0c2790b7936966288cd731</anchor>
      <arglist>(const Length2 &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr DiskShapeConf &amp;</type>
      <name>UseLocation</name>
      <anchorfile>structplayrho_1_1d2_1_1DiskShapeConf.html</anchorfile>
      <anchor>a6d7b406b1fb85f6a2abfe83782aceb7f</anchor>
      <arglist>(const Length2 &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr DiskShapeConf &amp;</type>
      <name>UseRadius</name>
      <anchorfile>structplayrho_1_1d2_1_1DiskShapeConf.html</anchorfile>
      <anchor>a023ccf07ca74f7dd4a5e0f552c27fd1f</anchor>
      <arglist>(NonNegative&lt; Length &gt; r) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr NonNegative&lt; Length &gt;</type>
      <name>GetDefaultRadius</name>
      <anchorfile>structplayrho_1_1d2_1_1DiskShapeConf.html</anchorfile>
      <anchor>a694ac3d77cd84cc54f765097f79d6b4c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>location</name>
      <anchorfile>structplayrho_1_1d2_1_1DiskShapeConf.html</anchorfile>
      <anchor>adaafd1c41a01e0708a9a18b125133ac7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Length &gt;</type>
      <name>vertexRadius</name>
      <anchorfile>structplayrho_1_1d2_1_1DiskShapeConf.html</anchorfile>
      <anchor>a2f1de4aa7db27a666fdd7f2f85130f7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultRadius</name>
      <anchorfile>structplayrho_1_1d2_1_1DiskShapeConf.html</anchorfile>
      <anchor>a19f6745cf2f4ff485d0e9789d8ef66e2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::DistanceConf</name>
    <filename>structplayrho_1_1d2_1_1DistanceConf.html</filename>
    <member kind="typedef">
      <type>std::remove_const_t&lt; decltype(DefaultMaxDistanceIters)&gt;</type>
      <name>iteration_type</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceConf.html</anchorfile>
      <anchor>a9f479b0abed8991d625e6ac74156f656</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Simplex::Cache</type>
      <name>cache</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceConf.html</anchorfile>
      <anchor>ad0dc57b1e5c4fc6bc9ea4c352b1f7526</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iteration_type</type>
      <name>maxIterations</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceConf.html</anchorfile>
      <anchor>aad8920477d137c4acfa0b5341ae521b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>DistanceConf</type>
      <name>GetDistanceConf</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceConf.html</anchorfile>
      <anchor>a0955c2cf9e582ac1e1e6e8f2dd8ce317</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DistanceConf</type>
      <name>GetDistanceConf</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceConf.html</anchorfile>
      <anchor>ac19f21bdad4b0722921c971c3cab85d1</anchor>
      <arglist>(const ToiConf &amp;conf) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::DistanceJointConf</name>
    <filename>structplayrho_1_1d2_1_1DistanceJointConf.html</filename>
    <base>JointBuilder&lt; DistanceJointConf &gt;</base>
    <member kind="typedef">
      <type>JointBuilder&lt; DistanceJointConf &gt;</type>
      <name>super</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>ad6c39a43cfd69b61f0de297dda64d08c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>DistanceJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a1d017dda58b98e6ab109eb29d6990d11</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DistanceJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>aa7404e993508ed63926ab8a00cb38eed</anchor>
      <arglist>(BodyID bA, BodyID bB, const Length2 &amp;laA=Length2{}, const Length2 &amp;laB=Length2{}, Length l=1_m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseDampingRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a6796a2f3c1453464e6fd74bc105069aa</anchor>
      <arglist>(Real v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseFrequency</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>ade3a28314f661fb965ad501629c07720</anchor>
      <arglist>(NonNegative&lt; Frequency &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseLength</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a8e7be8cd2a4a26946ec3d76c557c3415</anchor>
      <arglist>(Length v) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>LinearVelocity</type>
      <name>bias</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a72aaa5a9d2c446e9603bd8a6d73626a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>dampingRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a2867b1456cf01d9f41e3b5471462fb3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Frequency &gt;</type>
      <name>frequency</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a120be14a41a01c027ca4cbac8369d798</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum</type>
      <name>impulse</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>ad9a6fccb452eb949459da0344ad6ccde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InvMass</type>
      <name>invGamma</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a01739da1e55d41407f73dd4655fdfd7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>length</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a728c814c133bab347a07278fa6153fd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorA</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a82a119f9c13f7b9f792384ce12ea2c7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorB</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a0202d808b84c9cfd47b62231a4b79be8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Mass</type>
      <name>mass</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a4c27633a7b86c68a58a45705ae696fb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>rA</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a345e031938e20975cb06d92d6df7b2f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>rB</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>aad1481b362f8f9915a53a2703483c74f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitVec</type>
      <name>u</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a39925316cb1891559fb9e2e90ffdcfe0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultFrequency</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>ae83b4ca2f44e72439b43e5f43effbbb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>af7938377c565a183168613b640e651e8</anchor>
      <arglist>(const DistanceJointConf &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLength</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a9d8e5d2ecc10f965faa16f74ade58628</anchor>
      <arglist>(const DistanceJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a262919449fdc976d24c1b57d5f764610</anchor>
      <arglist>(const DistanceJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a04f5087d761eecd8554b6156d1cc3021</anchor>
      <arglist>(DistanceJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetDampingRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a1f9a4e32b7ca3e69527dca3e2793e1ba</anchor>
      <arglist>(DistanceJointConf &amp;object, Real value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetFrequency</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>ae0cc3578e6f724a74d45e9cfc02d412d</anchor>
      <arglist>(DistanceJointConf &amp;object, NonNegative&lt; Frequency &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetLength</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>abf156111fddecc740c68f7dbcdaf7ba0</anchor>
      <arglist>(DistanceJointConf &amp;object, Length value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>ShiftOrigin</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a1086ac024e4e129259c3c1b4f7c5a6c4</anchor>
      <arglist>(DistanceJointConf &amp;, Length2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a1cb4cf206219920fd02778200b00d623</anchor>
      <arglist>(const DistanceJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a9b2e8c358061fcd3724da3c1cb5fcc32</anchor>
      <arglist>(DistanceJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::DistanceOutput</name>
    <filename>structplayrho_1_1d2_1_1DistanceOutput.html</filename>
    <member kind="typedef">
      <type>std::remove_const_t&lt; decltype(DefaultMaxDistanceIters)&gt;</type>
      <name>iteration_type</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceOutput.html</anchorfile>
      <anchor>af8ea4bc0e434e1e70784467d92c5ffb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>State</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceOutput.html</anchorfile>
      <anchor>a1a05f48bffc628114d177f353b8f1bae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iteration_type</type>
      <name>iterations</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceOutput.html</anchorfile>
      <anchor>a3e530bb6c13140f89aa96893d816683c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Simplex</type>
      <name>simplex</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceOutput.html</anchorfile>
      <anchor>ab00a929734dfa08adce26a4f0411be1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>State</type>
      <name>state</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceOutput.html</anchorfile>
      <anchor>a4dacf9189684fb5a146abfabba8df687</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::DistanceProxy</name>
    <filename>classplayrho_1_1d2_1_1DistanceProxy.html</filename>
    <member kind="typedef">
      <type>ConstNormalPointer</type>
      <name>ConstNormalIterator</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>abf6427308cbc66d4216be96aa1f71677</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const UnitVec *</type>
      <name>ConstNormalPointer</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>ab4e33e8b30053ce9a1465e7743706960</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstVertexPointer</type>
      <name>ConstVertexIterator</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>a079697225a964bf2a6cc647e9543ccfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Length2 *</type>
      <name>ConstVertexPointer</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>a907c4696aeb6b312916c5f8d8ccac2df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DistanceProxy</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>a6dcffdc2cce9879f5d78a3c8362d5797</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DistanceProxy</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>a195ea26814c4fc64d16b5c492b9494db</anchor>
      <arglist>(const DistanceProxy &amp;copy) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DistanceProxy</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>a3d5f99a4cbd61805b61f41d548073ea9</anchor>
      <arglist>(const NonNegative&lt; Length &gt; &amp;vertexRadius, const VertexCounter count, const Length2 *vertices, const UnitVec *normals) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetNormal</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>a20cf8979b7630e5caf1ce9958768f1d9</anchor>
      <arglist>(VertexCounter index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Span&lt; const UnitVec &gt;</type>
      <name>GetNormals</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>af6d721dad359de481f429d5a3092aeca</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetVertex</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>af58ea5737487abe0a4ceab5f7a7c09d0</anchor>
      <arglist>(VertexCounter index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetVertexCount</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>a4feb3f3f5b109c56bfed98ae35a607ab</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>ac546ae436486377126a13b246ed97d55</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Span&lt; const Length2 &gt;</type>
      <name>GetVertices</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>afb45f0baaa0ec2ef09c9162cb0406a7d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeAABB</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>a44cc65808fd89570707b3af1bc87eb36</anchor>
      <arglist>(const DistanceProxy &amp;proxy, const Transformation &amp;xf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeAABB</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>aa67cf0c4b074e5c10a793cb2f16a0860</anchor>
      <arglist>(const DistanceProxy &amp;proxy, const Transformation &amp;xfm0, const Transformation &amp;xfm1) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DistanceOutput</type>
      <name>Distance</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>ad01443fd4ea346d550ece90f7f92b1f4</anchor>
      <arglist>(const DistanceProxy &amp;proxyA, const Transformation &amp;transformA, const DistanceProxy &amp;proxyB, const Transformation &amp;transformB, DistanceConf conf=DistanceConf{})</arglist>
    </member>
    <member kind="function">
      <type>SeparationInfo</type>
      <name>GetMaxSeparation</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>acf79497a9b652acf778d5fedb6494af4</anchor>
      <arglist>(const DistanceProxy &amp;proxy1, const DistanceProxy &amp;proxy2, Length stop=MaxFloat *Meter)</arglist>
    </member>
    <member kind="function">
      <type>SeparationInfo</type>
      <name>GetMaxSeparation</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>a04d603f3f0776d4629526f5c52ef3c16</anchor>
      <arglist>(const DistanceProxy &amp;proxy1, const Transformation &amp;xf1, const DistanceProxy &amp;proxy2, const Transformation &amp;xf2)</arglist>
    </member>
    <member kind="function">
      <type>SeparationInfo</type>
      <name>GetMaxSeparation</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>a505e7004bff70738ca3f64016a83572e</anchor>
      <arglist>(const DistanceProxy &amp;proxy1, const Transformation &amp;xf1, const DistanceProxy &amp;proxy2, const Transformation &amp;xf2, Length stop)</arglist>
    </member>
    <member kind="function">
      <type>SeparationInfo</type>
      <name>GetMaxSeparation4x4</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>a060c8014650aa37d49d32ac16ac3e9e5</anchor>
      <arglist>(const DistanceProxy &amp;proxy1, const Transformation &amp;xf1, const DistanceProxy &amp;proxy2, const Transformation &amp;xf2)</arglist>
    </member>
    <member kind="function">
      <type>VertexCounter</type>
      <name>GetSupportIndex</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>a6cfc27f1644f9c4d6da229b5eba07e51</anchor>
      <arglist>(const DistanceProxy &amp;proxy, T dir) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>ab855c314cdb69e2906ed3474f127f332</anchor>
      <arglist>(const DistanceProxy &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>a1c65d94d98dea8f68c3dd32e90b888bb</anchor>
      <arglist>(const DistanceProxy &amp;lhs, const DistanceProxy &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>a1311c8979a6d955fa240491cbf239e99</anchor>
      <arglist>(const DistanceProxy &amp;lhs, const DistanceProxy &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gabc2e992343e201f48c1956753a530247</anchor>
      <arglist>(const DistanceProxy &amp;proxy, const RayCastInput &amp;input, const Transformation &amp;transform) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Area</type>
      <name>TestOverlap</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>a3a575c58f1a4cde929feb45c68617bd9</anchor>
      <arglist>(const DistanceProxy &amp;proxyA, const Transformation &amp;xfA, const DistanceProxy &amp;proxyB, const Transformation &amp;xfB, DistanceConf conf=DistanceConf{})</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestPoint</name>
      <anchorfile>group__TestPointGroup.html</anchorfile>
      <anchor>gab8505b0b58d03f1d6f7c702d9db632c9</anchor>
      <arglist>(const DistanceProxy &amp;proxy, const Length2 &amp;point) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::part::DynamicAreaDensity</name>
    <filename>structplayrho_1_1d2_1_1part_1_1DynamicAreaDensity.html</filename>
    <templarg>D</templarg>
    <member kind="variable">
      <type>NonNegative&lt; AreaDensity &gt;</type>
      <name>density</name>
      <anchorfile>structplayrho_1_1d2_1_1part_1_1DynamicAreaDensity.html</anchorfile>
      <anchor>ac0d9ae684c09fa577e54fc10912b4f45</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::part::DynamicFilter</name>
    <filename>structplayrho_1_1d2_1_1part_1_1DynamicFilter.html</filename>
    <templarg>CategoryBits</templarg>
    <templarg>MaskBits</templarg>
    <templarg>GroupIndex</templarg>
    <member kind="variable">
      <type>Filter</type>
      <name>filter</name>
      <anchorfile>structplayrho_1_1d2_1_1part_1_1DynamicFilter.html</anchorfile>
      <anchor>ac840fc26c266debf489d0952a21cbb12</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::part::DynamicFriction</name>
    <filename>structplayrho_1_1d2_1_1part_1_1DynamicFriction.html</filename>
    <templarg>F</templarg>
    <member kind="variable">
      <type>NonNegative&lt; Real &gt;</type>
      <name>friction</name>
      <anchorfile>structplayrho_1_1d2_1_1part_1_1DynamicFriction.html</anchorfile>
      <anchor>ab9d2fb3a1bbd312087f4c7792c081e87</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::part::DynamicRectangle</name>
    <filename>classplayrho_1_1d2_1_1part_1_1DynamicRectangle.html</filename>
    <templarg>W</templarg>
    <templarg>H</templarg>
    <templarg>V</templarg>
    <member kind="function">
      <type></type>
      <name>DynamicRectangle</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1DynamicRectangle.html</anchorfile>
      <anchor>aaad4d82e0246aa1f6decc72bb5af8a43</anchor>
      <arglist>(Length width, Length height, const Length2 &amp;offset=Length2{})</arglist>
    </member>
    <member kind="function">
      <type>DistanceProxy</type>
      <name>GetChild</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1DynamicRectangle.html</anchorfile>
      <anchor>a0229b363ed806822c0982c28d692f101</anchor>
      <arglist>(ChildCounter index) const</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetChildCount</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1DynamicRectangle.html</anchorfile>
      <anchor>af5545e9443c9363a093f0f7f6ef29d66</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetDimensions</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1DynamicRectangle.html</anchorfile>
      <anchor>a42ba6eb6d47056c3265fc6625c35393d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1DynamicRectangle.html</anchorfile>
      <anchor>a4802551f75a4e3521103f070f13357a9</anchor>
      <arglist>(NonNegative&lt; AreaDensity &gt; density) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::array&lt; UnitVec, 4u &gt; &amp;</type>
      <name>GetNormals</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1DynamicRectangle.html</anchorfile>
      <anchor>a613eb9a78f5d19f02369570da358f422</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetOffset</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1DynamicRectangle.html</anchorfile>
      <anchor>a9bec288ac55f11850e3137fbf94c4c27</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1DynamicRectangle.html</anchorfile>
      <anchor>a9b2335c740fb9fcb9df6ebceeb803059</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::array&lt; Length2, 4u &gt; &amp;</type>
      <name>GetVertices</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1DynamicRectangle.html</anchorfile>
      <anchor>af1e8a0644df3d33e9f35585110dabb88</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Scale</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1DynamicRectangle.html</anchorfile>
      <anchor>ace54e8d28bb67856c54c9bb2802c616f</anchor>
      <arglist>(const Vec2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDimensions</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1DynamicRectangle.html</anchorfile>
      <anchor>a4a6936a0976d1fee4aeecab4bb255f92</anchor>
      <arglist>(const Length2 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOffset</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1DynamicRectangle.html</anchorfile>
      <anchor>ac28de63c7887751efaaca99f110804b1</anchor>
      <arglist>(const Length2 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1DynamicRectangle.html</anchorfile>
      <anchor>ac3986ef911e2b652418d736f0edf6aa6</anchor>
      <arglist>(ChildCounter, NonNegative&lt; Length &gt; value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Translate</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1DynamicRectangle.html</anchorfile>
      <anchor>ad7aa388d50ecabb95d14fec08c10ec7e</anchor>
      <arglist>(const Length2 &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::part::DynamicRestitution</name>
    <filename>structplayrho_1_1d2_1_1part_1_1DynamicRestitution.html</filename>
    <templarg>R</templarg>
    <member kind="variable">
      <type>Finite&lt; Real &gt;</type>
      <name>restitution</name>
      <anchorfile>structplayrho_1_1d2_1_1part_1_1DynamicRestitution.html</anchorfile>
      <anchor>ae7ea9c15511577275367321282fac5f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::part::DynamicSensor</name>
    <filename>structplayrho_1_1d2_1_1part_1_1DynamicSensor.html</filename>
    <templarg>V</templarg>
    <member kind="variable">
      <type>bool</type>
      <name>sensor</name>
      <anchorfile>structplayrho_1_1d2_1_1part_1_1DynamicSensor.html</anchorfile>
      <anchor>ad3d69a521e065347149bdd8dcb945bc3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::DynamicTree</name>
    <filename>classplayrho_1_1d2_1_1DynamicTree.html</filename>
    <class kind="class">playrho::d2::DynamicTree::TreeNode</class>
    <member kind="typedef">
      <type>DynamicTreeSize</type>
      <name>Height</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>abec0ebc4e0d92378ca9193116228b500</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DynamicTreeSize</type>
      <name>Size</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>af442fc7c6152cefb54928165e49fa80d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicTree</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>ac4e2861f240ffce2e9ea51d8940c5150</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicTree</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>af2d9142c669aec29bb9916a8501f4879</anchor>
      <arglist>(const DynamicTree &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicTree</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a3cd15bb0281c6ab6191e51b26f1d8c8b</anchor>
      <arglist>(DynamicTree &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicTree</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a06fea4c54490270294a56ae627701639</anchor>
      <arglist>(Size nodeCapacity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DynamicTree</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>ad81a322bcd52726dba15394783eea8fb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>ad8b0e591e1c43454b16d924e628cb1e8</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>CreateLeaf</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a63c3c99d25c6e735174cb9ddeec58c4a</anchor>
      <arglist>(const AABB &amp;aabb, const Contactable &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DestroyLeaf</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a797247f9d1710de7c5883fe08f1c868a</anchor>
      <arglist>(Size index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>FindReference</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a3e47af4d29d32f41e00a90d854a73adb</anchor>
      <arglist>(Size index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>GetAABB</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a06675690daf54a10b18f1da1a8a7326b</anchor>
      <arglist>(Size index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>DynamicTreeBranchData</type>
      <name>GetBranchData</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a6873a2cdc8d8a5b020faa35d3ad84882</anchor>
      <arglist>(Size index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>GetFreeIndex</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a6a84cb18d4e07355e33e01fc062974a3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Height</type>
      <name>GetHeight</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a4c6bccb9bc6df8db71421e3ef32d001c</anchor>
      <arglist>(Size index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>GetLeafCount</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a835291d0eb5b8bf966c76e2ab4f4e3fe</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Contactable</type>
      <name>GetLeafData</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a956a39ab82498fb7d21e8d4781dd5a97</anchor>
      <arglist>(Size index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const TreeNode &amp;</type>
      <name>GetNode</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a9f5b3516da13f26078697dc72840425b</anchor>
      <arglist>(Size index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>GetNodeCapacity</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a6d5405cac98b2f35be80869c23abfe5a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>GetNodeCount</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a211b3f8b163604b56db4fa3887fc2f43</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>GetOther</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a6c47548f16509b0088da777223dab05b</anchor>
      <arglist>(Size index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>GetRootIndex</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>ad8f642f8240c30f686f9db11533a2b51</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>DynamicTree &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a2fafb37e54884438b868f3cb18714730</anchor>
      <arglist>(DynamicTree other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RebuildBottomUp</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a47cbaffc41092844c1b4812057e37f13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reserve</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>ad1fa3e1b69c47356cee7809d9137d7a0</anchor>
      <arglist>(Size value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ShiftOrigin</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>ae5fc280fcfe4db1490a5d8d2d1398edf</anchor>
      <arglist>(const Length2 &amp;newOrigin) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UpdateLeaf</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>af791e371bb59fb7440d0440d0f89766b</anchor>
      <arglist>(Size index, const AABB &amp;aabb)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr Height</type>
      <name>GetInvalidHeight</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a660dd80a96856e7e5a18982253db0916</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr Size</type>
      <name>GetInvalidSize</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>acde73f39b7e56017e0ba2f172ab6da7f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>IsBranch</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a76d618b561088968b813f343d71803b0</anchor>
      <arglist>(Height value) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>IsLeaf</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>adcd3feb3b811796b4accf408526bc0b0</anchor>
      <arglist>(Height value) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>IsUnused</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>ab9fcc2634936361047199e8ac516926e</anchor>
      <arglist>(Height value) noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>InvalidHeight</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a7933229b46b99e1c5d1858da7f3266c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a778697779a16cce60de39b6dee75a75d</anchor>
      <arglist>(DynamicTree &amp;lhs, DynamicTree &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>GetAABB</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>adebb4dfdc038631f8b24ee19a0b29713</anchor>
      <arglist>(const DynamicTree &amp;tree) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DynamicTree::Height</type>
      <name>GetHeight</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a72265a3c2d4511e74df6ab4d13112f6d</anchor>
      <arglist>(const DynamicTree &amp;tree) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestOverlap</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a905424c61ac9933179b91eb12ac0d537</anchor>
      <arglist>(const DynamicTree &amp;tree, DynamicTree::Size leafIdA, DynamicTree::Size leafIdB) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::DynamicTreeBranchData</name>
    <filename>structplayrho_1_1DynamicTreeBranchData.html</filename>
    <member kind="variable">
      <type>DynamicTreeSize</type>
      <name>child1</name>
      <anchorfile>structplayrho_1_1DynamicTreeBranchData.html</anchorfile>
      <anchor>aff4d99604128a118aeaaf76b2c1453e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DynamicTreeSize</type>
      <name>child2</name>
      <anchorfile>structplayrho_1_1DynamicTreeBranchData.html</anchorfile>
      <anchor>a08a334b518913e988a571b482b792bf5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::DynamicTreeUnusedData</name>
    <filename>structplayrho_1_1DynamicTreeUnusedData.html</filename>
  </compound>
  <compound kind="union">
    <name>playrho::DynamicTreeVariantData</name>
    <filename>unionplayrho_1_1DynamicTreeVariantData.html</filename>
    <member kind="function">
      <type>constexpr</type>
      <name>DynamicTreeVariantData</name>
      <anchorfile>unionplayrho_1_1DynamicTreeVariantData.html</anchorfile>
      <anchor>a6721123e73dca7e386ee6dce05110a57</anchor>
      <arglist>(Contactable value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>DynamicTreeVariantData</name>
      <anchorfile>unionplayrho_1_1DynamicTreeVariantData.html</anchorfile>
      <anchor>a2fbab2bf7529a93ae303646e2e7f9d33</anchor>
      <arglist>(DynamicTreeBranchData value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>DynamicTreeVariantData</name>
      <anchorfile>unionplayrho_1_1DynamicTreeVariantData.html</anchorfile>
      <anchor>aca16b22075929bccaf7322b6c706dee6</anchor>
      <arglist>(DynamicTreeUnusedData value) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>DynamicTreeBranchData</type>
      <name>branch</name>
      <anchorfile>unionplayrho_1_1DynamicTreeVariantData.html</anchorfile>
      <anchor>afcf293765fc0f7c23f10adeb5798052e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Contactable</type>
      <name>leaf</name>
      <anchorfile>unionplayrho_1_1DynamicTreeVariantData.html</anchorfile>
      <anchor>a0236748fb96c4a3216778cb97fbc731b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DynamicTreeUnusedData</type>
      <name>unused</name>
      <anchorfile>unionplayrho_1_1DynamicTreeVariantData.html</anchorfile>
      <anchor>ab96d56d9ac15c5a607980365c32483d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::EdgeShapeConf</name>
    <filename>structplayrho_1_1d2_1_1EdgeShapeConf.html</filename>
    <base>ShapeBuilder&lt; EdgeShapeConf &gt;</base>
    <member kind="function">
      <type></type>
      <name>EdgeShapeConf</name>
      <anchorfile>structplayrho_1_1d2_1_1EdgeShapeConf.html</anchorfile>
      <anchor>acddabd99394242e26627fadcf36d10b2</anchor>
      <arglist>(const Length2 &amp;vA, const Length2 &amp;vB, const EdgeShapeConf &amp;conf=GetDefaultConf()) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetVertexA</name>
      <anchorfile>structplayrho_1_1d2_1_1EdgeShapeConf.html</anchorfile>
      <anchor>a3affefb1face6109ba0dbf3f2ae1316c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetVertexB</name>
      <anchorfile>structplayrho_1_1d2_1_1EdgeShapeConf.html</anchorfile>
      <anchor>a4e1dafe1cd7aabc170875038d72b6e76</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>EdgeShapeConf &amp;</type>
      <name>Rotate</name>
      <anchorfile>structplayrho_1_1d2_1_1EdgeShapeConf.html</anchorfile>
      <anchor>af3208f9fb0bf45ac1d4fd9b04d9b7668</anchor>
      <arglist>(const UnitVec &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>EdgeShapeConf &amp;</type>
      <name>Scale</name>
      <anchorfile>structplayrho_1_1d2_1_1EdgeShapeConf.html</anchorfile>
      <anchor>ae31ede48ff606326559bb1be7dd4bdb2</anchor>
      <arglist>(const Vec2 &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>EdgeShapeConf &amp;</type>
      <name>Set</name>
      <anchorfile>structplayrho_1_1d2_1_1EdgeShapeConf.html</anchorfile>
      <anchor>a6b65ba72ad612a47258b68a520631ce3</anchor>
      <arglist>(const Length2 &amp;vA, const Length2 &amp;vB) noexcept</arglist>
    </member>
    <member kind="function">
      <type>EdgeShapeConf &amp;</type>
      <name>Translate</name>
      <anchorfile>structplayrho_1_1d2_1_1EdgeShapeConf.html</anchorfile>
      <anchor>a9d8e89d1b870adc5e978ff11b20442ac</anchor>
      <arglist>(const Length2 &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>EdgeShapeConf &amp;</type>
      <name>UseVertexRadius</name>
      <anchorfile>structplayrho_1_1d2_1_1EdgeShapeConf.html</anchorfile>
      <anchor>a0fa0648764ab95db5771e0bb4c4aba12</anchor>
      <arglist>(NonNegative&lt; Length &gt; value) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EdgeShapeConf</type>
      <name>GetDefaultConf</name>
      <anchorfile>structplayrho_1_1d2_1_1EdgeShapeConf.html</anchorfile>
      <anchor>aeaba8cac67b704014d26574a3492bae0</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr NonNegative&lt; Length &gt;</type>
      <name>GetDefaultVertexRadius</name>
      <anchorfile>structplayrho_1_1d2_1_1EdgeShapeConf.html</anchorfile>
      <anchor>a2440d2d407850714f6a96134a8cca0fb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>NgonWithFwdNormals&lt; 2 &gt;</type>
      <name>ngon</name>
      <anchorfile>structplayrho_1_1d2_1_1EdgeShapeConf.html</anchorfile>
      <anchor>a82cdb73a58c64364c36798138979cce5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegativeFF&lt; Length &gt;</type>
      <name>vertexRadius</name>
      <anchorfile>structplayrho_1_1d2_1_1EdgeShapeConf.html</anchorfile>
      <anchor>ab8fa865e92fdcd78bc7e1669170201ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultVertexRadius</name>
      <anchorfile>structplayrho_1_1d2_1_1EdgeShapeConf.html</anchorfile>
      <anchor>a462c93e8691ddf99c4a688c01ead2812</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::Filter</name>
    <filename>structplayrho_1_1Filter.html</filename>
    <member kind="typedef">
      <type>std::uint16_t</type>
      <name>bits_type</name>
      <anchorfile>structplayrho_1_1Filter.html</anchorfile>
      <anchor>afc7787e34f2ba644f3b3e135225647a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::int16_t</type>
      <name>index_type</name>
      <anchorfile>structplayrho_1_1Filter.html</anchorfile>
      <anchor>a289ef26ff12cc3cb15d74062ce27fd72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bits_type</type>
      <name>categoryBits</name>
      <anchorfile>structplayrho_1_1Filter.html</anchorfile>
      <anchor>a70f8953a304f7c864cda8f937fc65bc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>index_type</type>
      <name>groupIndex</name>
      <anchorfile>structplayrho_1_1Filter.html</anchorfile>
      <anchor>a8388c2614c205b7aaa2226849779619f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bits_type</type>
      <name>maskBits</name>
      <anchorfile>structplayrho_1_1Filter.html</anchorfile>
      <anchor>a9a186cc516b67d2165419e515e5be3c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultCategoryBits</name>
      <anchorfile>structplayrho_1_1Filter.html</anchorfile>
      <anchor>a97221fce58abee199d15d6a371ff0669</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultGroupIndex</name>
      <anchorfile>structplayrho_1_1Filter.html</anchorfile>
      <anchor>a06dd69f02f9541569a0bf3bec2eaa5bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultMaskBits</name>
      <anchorfile>structplayrho_1_1Filter.html</anchorfile>
      <anchor>ac66e70aebdf7e154690b59c4ce76bfa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1Filter.html</anchorfile>
      <anchor>ab71806508440416ef208f51580a6c50c</anchor>
      <arglist>(const Filter lhs, const Filter rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1Filter.html</anchorfile>
      <anchor>a9cecc5b25e8e89a47a552caf672bd69c</anchor>
      <arglist>(const Filter lhs, const Filter rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ShouldCollide</name>
      <anchorfile>structplayrho_1_1Filter.html</anchorfile>
      <anchor>a223329721a8138f316898ed9a4877250</anchor>
      <arglist>(const Filter filterA, const Filter filterB) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::part::FilterIs</name>
    <filename>structplayrho_1_1d2_1_1part_1_1FilterIs.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">playrho::d2::part::DefaultPolicies</base>
    <member kind="typedef">
      <type>Policy</type>
      <name>Filter</name>
      <anchorfile>structplayrho_1_1d2_1_1part_1_1FilterIs.html</anchorfile>
      <anchor>a32e116215b39ab33caac2aba0c92cef3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::FiniteChecker</name>
    <filename>structplayrho_1_1detail_1_1FiniteChecker.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structplayrho_1_1detail_1_1FiniteChecker.html</anchorfile>
      <anchor>a6543299f94a1ef4dcfb0782111f5d8c7</anchor>
      <arglist>() const noexcept(noexcept(static_cast&lt; T &gt;(0))) -&gt; decltype(T{})</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator()</name>
      <anchorfile>structplayrho_1_1detail_1_1FiniteChecker.html</anchorfile>
      <anchor>a463bd74786964e424d7b91f1f8cf97f2</anchor>
      <arglist>(const T &amp;v) const noexcept(noexcept(isfinite(v))) -&gt; decltype(isfinite(v), static_cast&lt; const char * &gt;(nullptr))</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::FlagGuard</name>
    <filename>classplayrho_1_1FlagGuard.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>FlagGuard</name>
      <anchorfile>classplayrho_1_1FlagGuard.html</anchorfile>
      <anchor>aab62ecc09e99a7544135fbb72371f0b2</anchor>
      <arglist>(const FlagGuard&lt; T &gt; &amp;value)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FlagGuard</name>
      <anchorfile>classplayrho_1_1FlagGuard.html</anchorfile>
      <anchor>af487c3ee0e823dce4c17ef7e4663f6a3</anchor>
      <arglist>(FlagGuard&lt; T &gt; &amp;&amp;value) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FlagGuard</name>
      <anchorfile>classplayrho_1_1FlagGuard.html</anchorfile>
      <anchor>ac104fceea41a9806de0fda376f3d39df</anchor>
      <arglist>(T &amp;flag, T value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FlagGuard</name>
      <anchorfile>classplayrho_1_1FlagGuard.html</anchorfile>
      <anchor>a1649a18e1024ccbc6e8704b2f381f31e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>FlagGuard&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1FlagGuard.html</anchorfile>
      <anchor>a8524fe292f8940fefc250c5df2276535</anchor>
      <arglist>(const FlagGuard&lt; T &gt; &amp;value)=delete</arglist>
    </member>
    <member kind="function">
      <type>FlagGuard&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1FlagGuard.html</anchorfile>
      <anchor>a2566ed27d453c2f37e08a855df5133c6</anchor>
      <arglist>(FlagGuard&lt; T &gt; &amp;&amp;value) noexcept=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::part::FrictionIs</name>
    <filename>structplayrho_1_1d2_1_1part_1_1FrictionIs.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">playrho::d2::part::DefaultPolicies</base>
    <member kind="typedef">
      <type>Policy</type>
      <name>Friction</name>
      <anchorfile>structplayrho_1_1d2_1_1part_1_1FrictionIs.html</anchorfile>
      <anchor>ae5eaefa7c63dced2a37cdb3f3a14831b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::FrictionJointConf</name>
    <filename>structplayrho_1_1d2_1_1FrictionJointConf.html</filename>
    <base>JointBuilder&lt; FrictionJointConf &gt;</base>
    <member kind="typedef">
      <type>JointBuilder&lt; FrictionJointConf &gt;</type>
      <name>super</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>a7af858d7bbdbc4e1de402f4b315d4f8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>FrictionJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>a4ecc3c3f9bce7e0a41d55251d00da6bf</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FrictionJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>ade1f51e49c6e27d9dc61282185cfd412</anchor>
      <arglist>(BodyID bA, BodyID bB, const Length2 &amp;laA=Length2{}, const Length2 &amp;laB=Length2{}) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseMaxForce</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>a9bc00e6cd5250aab9461ba4058755ca1</anchor>
      <arglist>(NonNegative&lt; Force &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseMaxTorque</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>ac05a2f4d428a8965302aa50053bd5826</anchor>
      <arglist>(NonNegative&lt; Torque &gt; v) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>AngularMomentum</type>
      <name>angularImpulse</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>a4ff93913a610c8efb9f24f48f734c992</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RotInertia</type>
      <name>angularMass</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>a61a56cd8cef199ca7396f6b850642a3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum2</type>
      <name>linearImpulse</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>af4ffe893bedc0ae14ca078e07d5d2a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Mass22</type>
      <name>linearMass</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>a0e9abf7dc8a18f5120e06497cea4f3c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorA</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>a99fdb13a3f08e267da5d4351e0a82968</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorB</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>ad320a4d48709fed7a9ba8ad7d96b422a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Force &gt;</type>
      <name>maxForce</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>a951dfd6ab71a10b2bf897c519b486e6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Torque &gt;</type>
      <name>maxTorque</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>a0dc172c241a2bd93f84c74c23b80da4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>rA</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>aa43fa9b599c41c569618a26de255e8b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>rB</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>a372d0b584a9ca98f99ddcefed5519016</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultMaxForce</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>a617d779d59ef0803d2825b1f5be26d78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultMaxTorque</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>a615f78f5b0f0b17bc923f4409158f6a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>ade895bb6a4e1b45bc803784534f2ffb2</anchor>
      <arglist>(const FrictionJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>a91ac3d07e13f9277632001e8f02de54f</anchor>
      <arglist>(const FrictionJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetMaxForce</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>aba8162d50c28927d87bdf7e29aa8afe0</anchor>
      <arglist>(const FrictionJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetMaxTorque</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>a00b4cc40afea7be207a08ad7c018f3c1</anchor>
      <arglist>(const FrictionJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>a904a7c9eb12d39f5331d70e31bfc5aa3</anchor>
      <arglist>(FrictionJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetMaxForce</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>afa6324a364b2b89057a749a5032ff720</anchor>
      <arglist>(FrictionJointConf &amp;object, NonNegative&lt; Force &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetMaxTorque</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>acfc7a47e907d3aaf399a7919896f3571</anchor>
      <arglist>(FrictionJointConf &amp;object, NonNegative&lt; Torque &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>ShiftOrigin</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>a110d0d6a089b3b8883e1f319984774fb</anchor>
      <arglist>(FrictionJointConf &amp;, Length2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>aa8bbcd658b3d2bf4dbeebaf1b5a85fcb</anchor>
      <arglist>(const FrictionJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>a6072ec80a0f6f19ddf2bbc57abe6110a</anchor>
      <arglist>(FrictionJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::GearJointConf</name>
    <filename>structplayrho_1_1d2_1_1GearJointConf.html</filename>
    <base>JointBuilder&lt; GearJointConf &gt;</base>
    <class kind="struct">playrho::d2::GearJointConf::PrismaticData</class>
    <class kind="struct">playrho::d2::GearJointConf::RevoluteData</class>
    <member kind="typedef">
      <type>JointBuilder&lt; GearJointConf &gt;</type>
      <name>super</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>a94653fdd123e340df4cb748a59482a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::variant&lt; std::monostate, PrismaticData, RevoluteData &gt;</type>
      <name>TypeData</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>a2b4d9fa194740c233c1a210c5d552ef6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>GearJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>a29946a4057adca896277e2e934682e57</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GearJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>a32ea95a3ff64b025902030271f8a893c</anchor>
      <arglist>(BodyID bA, BodyID bB, BodyID bC, BodyID bD) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>a77274d38c0810e3d78a3f5190ede395b</anchor>
      <arglist>(Real v) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>BodyID</type>
      <name>bodyC</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>a1d98acaf8f48b7aa1b9d895dfc41f80d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BodyID</type>
      <name>bodyD</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>a1da02e5e7815b02f0157b7a014b21e14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>constant</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>a57220f1055e1b98694d1588bd544405e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum</type>
      <name>impulse</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>aabe48496c0095d281ecd98fdb8ec4d6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec2</type>
      <name>JvAC</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>a6d5b12186746c939daa3f92d49a57ec3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec2</type>
      <name>JvBD</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>acd83c9e7b6a4b6b183e711e31fff0e67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>JwA</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>a209e0a1b3d01dc83aee6edf9b90852bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>JwB</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>a1442b630b5bd8428f222af8c40df3a8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>JwC</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>afca372438bb8f4b765a9671ec20ecbf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>JwD</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>afd71024d1077594e2cfde83a60581617</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>mass</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>a36ff7633d3f7decd5942d37b2a468cd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>ratio</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>a738bfaf044a89d5ceaeefaad4930deeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TypeData</type>
      <name>typeDataAC</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>aa46a5a1f789ee73acc4da8cf6c87fa30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TypeData</type>
      <name>typeDataBD</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>aad4884f11eb7414be11791868d76ed26</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>af2ce467ab8d8f56bd0cf232fd554e58b</anchor>
      <arglist>(const GearJointConf &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetConstant</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>ac71c6757a2460462d539185069dd9c4c</anchor>
      <arglist>(const GearJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>aef9ee799e4e668610deb9199d0848153</anchor>
      <arglist>(const GearJointConf &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>ad6bb4ee45a731f7095f5c052f16e15c0</anchor>
      <arglist>(const GearJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TypeID</type>
      <name>GetTypeAC</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>ad0cd117bcf7fedbaaff3e1b20c5482a9</anchor>
      <arglist>(const GearJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TypeID</type>
      <name>GetTypeBD</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>a0a05d081df33a8c6c68859fff9796866</anchor>
      <arglist>(const GearJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>a6fb896d2cd2716bc5313edf9664311dd</anchor>
      <arglist>(GearJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>a0561c70cfa90284d65bba0a3f59cb62a</anchor>
      <arglist>(GearJointConf &amp;object, Real value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>ShiftOrigin</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>aef5af6f1b7a6ac1842df096a201e17d4</anchor>
      <arglist>(GearJointConf &amp;, const Length2 &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>a5a54a7c5cb24901f677963106f310fec</anchor>
      <arglist>(const GearJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>ab274b1bb66255adc6ad6fe9ea22fbe5c</anchor>
      <arglist>(GearJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::part::GeometryIs</name>
    <filename>structplayrho_1_1d2_1_1part_1_1GeometryIs.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">playrho::d2::part::DefaultPolicies</base>
    <member kind="typedef">
      <type>Policy</type>
      <name>Geometry</name>
      <anchorfile>structplayrho_1_1d2_1_1part_1_1GeometryIs.html</anchorfile>
      <anchor>ab74ad6a2b36f58b1e2bca14b2e63f33c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::GrowableStack</name>
    <filename>classplayrho_1_1GrowableStack.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>CountType</name>
      <anchorfile>classplayrho_1_1GrowableStack.html</anchorfile>
      <anchor>a7d7f4c80b39831539b8f978700087ddc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>ElementType</name>
      <anchorfile>classplayrho_1_1GrowableStack.html</anchorfile>
      <anchor>a96746e86907cd1053b982e432ce680db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr CountType</type>
      <name>capacity</name>
      <anchorfile>classplayrho_1_1GrowableStack.html</anchorfile>
      <anchor>a2b99feb8c53ba9ded557ce46418f30e6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classplayrho_1_1GrowableStack.html</anchorfile>
      <anchor>aad3430a4ab40781e54d31fc902c2c285</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>classplayrho_1_1GrowableStack.html</anchorfile>
      <anchor>abd96c05bbcee5de9e40962a4a62a4bfc</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>classplayrho_1_1GrowableStack.html</anchorfile>
      <anchor>a9a52c69b5e506bef0d458f1631ca3514</anchor>
      <arglist>(const ElementType &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>constexpr CountType</type>
      <name>size</name>
      <anchorfile>classplayrho_1_1GrowableStack.html</anchorfile>
      <anchor>a25c2a5c02fc0760c0e2183ea314df1a5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ElementType</type>
      <name>top</name>
      <anchorfile>classplayrho_1_1GrowableStack.html</anchorfile>
      <anchor>aca6d1bc59a1ba12492ed2ae2c9974590</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr CountType</type>
      <name>GetBufferGrowthRate</name>
      <anchorfile>classplayrho_1_1GrowableStack.html</anchorfile>
      <anchor>a7cedecdb334d7cd194f7de3fffd8f1d7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr CountType</type>
      <name>GetInitialCapacity</name>
      <anchorfile>classplayrho_1_1GrowableStack.html</anchorfile>
      <anchor>a7fd71084bf3bf8d63a079ac30dc8bd9c</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::has_underlying_type_member</name>
    <filename>structplayrho_1_1detail_1_1has__underlying__type__member.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::has_underlying_type_member&lt; T, std::void_t&lt; typename T::underlying_type &gt; &gt;</name>
    <filename>structplayrho_1_1detail_1_1has__underlying__type__member_3_01T_00_01std_1_1void__t_3_01typename_ad40ad34e92198c9932f3ccb254047e0.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::HasFunctor</name>
    <filename>structplayrho_1_1detail_1_1HasFunctor.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::HasFunctor&lt; Type, Return(Args...)&gt;</name>
    <filename>structplayrho_1_1detail_1_1HasFunctor_3_01Type_00_01Return_07Args_8_8_8_08_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>Args</templarg>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>value</name>
      <anchorfile>structplayrho_1_1detail_1_1HasFunctor_3_01Type_00_01Return_07Args_8_8_8_08_4.html</anchorfile>
      <anchor>ad7007c853dcfa0d60ec4ba7b3a7cc311</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; playrho::ContactKey &gt;</name>
    <filename>structstd_1_1hash_3_01playrho_1_1ContactKey_01_4.html</filename>
    <member kind="typedef">
      <type>playrho::ContactKey</type>
      <name>argument_type</name>
      <anchorfile>structstd_1_1hash_3_01playrho_1_1ContactKey_01_4.html</anchorfile>
      <anchor>ac19c78e4d7df44d45e71d6eaca2235da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>result_type</name>
      <anchorfile>structstd_1_1hash_3_01playrho_1_1ContactKey_01_4.html</anchorfile>
      <anchor>abfe90dda9bfc6a5c384d90d59672a396</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr std::size_t</type>
      <name>operator()</name>
      <anchorfile>structstd_1_1hash_3_01playrho_1_1ContactKey_01_4.html</anchorfile>
      <anchor>ad67a67c6f63499c928df80829c07e4ef</anchor>
      <arglist>(const playrho::ContactKey &amp;key) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt;::playrho::detail::IndexingNamedType&lt; T, Tag &gt; &gt;</name>
    <filename>structstd_1_1hash_3_1_1playrho_1_1detail_1_1IndexingNamedType_3_01T_00_01Tag_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>::std::size_t</type>
      <name>operator()</name>
      <anchorfile>structstd_1_1hash_3_1_1playrho_1_1detail_1_1IndexingNamedType_3_01T_00_01Tag_01_4_01_4.html</anchorfile>
      <anchor>aa13ca1029751c40580cb84fb502a3905</anchor>
      <arglist>(const ::playrho::detail::IndexingNamedType&lt; T, Tag &gt; &amp;v) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::detail::IndexingNamedType</name>
    <filename>classplayrho_1_1detail_1_1IndexingNamedType.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>underlying_type</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a2ed01bf69779b0880b5092c6bbad560b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>IndexingNamedType</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a3e0462fba565d2c3e76b78cdf7893caf</anchor>
      <arglist>() noexcept(std::is_nothrow_default_constructible_v&lt; underlying_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>IndexingNamedType</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>abb7f08e33b0610177a7ebb3403bfd3df</anchor>
      <arglist>(const underlying_type &amp;value) noexcept(std::is_nothrow_copy_constructible_v&lt; underlying_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>IndexingNamedType</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a9a484a413fb4071172fdcf50f1048142</anchor>
      <arglist>(underlying_type &amp;&amp;value) noexcept(std::is_nothrow_move_constructible_v&lt; underlying_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr underlying_type const  &amp;</type>
      <name>get</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a0b2a72d277c5b898b05b1afd5621ecca</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr underlying_type &amp;</type>
      <name>get</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>aed65976407ff62b11d16b009db270c1d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator const underlying_type &amp;</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a3bf3196bd10d8150d943e66b7d8fa91c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator underlying_type &amp;</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>af542614fbc4afa44a04a94ae6a5b7702</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend ::std::size_t</type>
      <name>hash</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>abc4075e5b137da9e3c8be4500f8be64c</anchor>
      <arglist>(const IndexingNamedType &amp;v) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a244171e28eaad9254155129b7a6165ac</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a232b179c6990665f378e72f07d60fa56</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a3027e696fb2524a81e9b017125095131</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a1110c36b661a413db786630b5a227aa3</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>ad6395f2e2c4d40b86cb779785af8db65</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>ad61ded65d54e459fd000aba775fbd30c</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a2e21d574919f686373b0b82f9d35ef98</anchor>
      <arglist>(IndexingNamedType &amp;a, IndexingNamedType &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const T &amp;</type>
      <name>UnderlyingValue</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a9fd3da1620a73e1af4ee63e6f51fb99f</anchor>
      <arglist>(const IndexingNamedType&lt; T, Tag &gt; &amp;o) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T &amp;</type>
      <name>UnderlyingValue</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a1d0098650ef88d80a47b40dea3c234e2</anchor>
      <arglist>(IndexingNamedType&lt; T, Tag &gt; &amp;o) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IndexingNamedType&lt; BodyCounter, struct BodyIdentifier &gt;</name>
    <filename>classplayrho_1_1detail_1_1IndexingNamedType.html</filename>
    <member kind="typedef">
      <type>BodyCounter</type>
      <name>underlying_type</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a2ed01bf69779b0880b5092c6bbad560b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>IndexingNamedType</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a3e0462fba565d2c3e76b78cdf7893caf</anchor>
      <arglist>() noexcept(std::is_nothrow_default_constructible_v&lt; underlying_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>IndexingNamedType</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>abb7f08e33b0610177a7ebb3403bfd3df</anchor>
      <arglist>(const underlying_type &amp;value) noexcept(std::is_nothrow_copy_constructible_v&lt; underlying_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>IndexingNamedType</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a9a484a413fb4071172fdcf50f1048142</anchor>
      <arglist>(underlying_type &amp;&amp;value) noexcept(std::is_nothrow_move_constructible_v&lt; underlying_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr underlying_type const &amp;</type>
      <name>get</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a0b2a72d277c5b898b05b1afd5621ecca</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr underlying_type &amp;</type>
      <name>get</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>aed65976407ff62b11d16b009db270c1d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator const underlying_type &amp;</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a3bf3196bd10d8150d943e66b7d8fa91c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator underlying_type &amp;</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>af542614fbc4afa44a04a94ae6a5b7702</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend ::std::size_t</type>
      <name>hash</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>abc4075e5b137da9e3c8be4500f8be64c</anchor>
      <arglist>(const IndexingNamedType &amp;v) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a244171e28eaad9254155129b7a6165ac</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a232b179c6990665f378e72f07d60fa56</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a3027e696fb2524a81e9b017125095131</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a1110c36b661a413db786630b5a227aa3</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>ad6395f2e2c4d40b86cb779785af8db65</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>ad61ded65d54e459fd000aba775fbd30c</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a2e21d574919f686373b0b82f9d35ef98</anchor>
      <arglist>(IndexingNamedType &amp;a, IndexingNamedType &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const BodyCounter &amp;</type>
      <name>UnderlyingValue</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a9fd3da1620a73e1af4ee63e6f51fb99f</anchor>
      <arglist>(const IndexingNamedType&lt; BodyCounter, struct BodyIdentifier &gt; &amp;o) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyCounter &amp;</type>
      <name>UnderlyingValue</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a1d0098650ef88d80a47b40dea3c234e2</anchor>
      <arglist>(IndexingNamedType&lt; BodyCounter, struct BodyIdentifier &gt; &amp;o) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IndexingNamedType&lt; ShapeCounter, struct ShapeIdentifier &gt;</name>
    <filename>classplayrho_1_1detail_1_1IndexingNamedType.html</filename>
    <member kind="typedef">
      <type>ShapeCounter</type>
      <name>underlying_type</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a2ed01bf69779b0880b5092c6bbad560b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>IndexingNamedType</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a3e0462fba565d2c3e76b78cdf7893caf</anchor>
      <arglist>() noexcept(std::is_nothrow_default_constructible_v&lt; underlying_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>IndexingNamedType</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>abb7f08e33b0610177a7ebb3403bfd3df</anchor>
      <arglist>(const underlying_type &amp;value) noexcept(std::is_nothrow_copy_constructible_v&lt; underlying_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>IndexingNamedType</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a9a484a413fb4071172fdcf50f1048142</anchor>
      <arglist>(underlying_type &amp;&amp;value) noexcept(std::is_nothrow_move_constructible_v&lt; underlying_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr underlying_type const &amp;</type>
      <name>get</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a0b2a72d277c5b898b05b1afd5621ecca</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr underlying_type &amp;</type>
      <name>get</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>aed65976407ff62b11d16b009db270c1d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator const underlying_type &amp;</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a3bf3196bd10d8150d943e66b7d8fa91c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator underlying_type &amp;</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>af542614fbc4afa44a04a94ae6a5b7702</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend ::std::size_t</type>
      <name>hash</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>abc4075e5b137da9e3c8be4500f8be64c</anchor>
      <arglist>(const IndexingNamedType &amp;v) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a244171e28eaad9254155129b7a6165ac</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a232b179c6990665f378e72f07d60fa56</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a3027e696fb2524a81e9b017125095131</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a1110c36b661a413db786630b5a227aa3</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>ad6395f2e2c4d40b86cb779785af8db65</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>ad61ded65d54e459fd000aba775fbd30c</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a2e21d574919f686373b0b82f9d35ef98</anchor>
      <arglist>(IndexingNamedType &amp;a, IndexingNamedType &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const ShapeCounter &amp;</type>
      <name>UnderlyingValue</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a9fd3da1620a73e1af4ee63e6f51fb99f</anchor>
      <arglist>(const IndexingNamedType&lt; ShapeCounter, struct ShapeIdentifier &gt; &amp;o) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ShapeCounter &amp;</type>
      <name>UnderlyingValue</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a1d0098650ef88d80a47b40dea3c234e2</anchor>
      <arglist>(IndexingNamedType&lt; ShapeCounter, struct ShapeIdentifier &gt; &amp;o) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::Interval</name>
    <filename>classplayrho_1_1Interval.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>af3f2912d491535ecbe0f8b03da2357b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Interval</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a93dc585028beea550de4afdadbedf562</anchor>
      <arglist>() noexcept(noexcept(std::is_nothrow_move_constructible_v&lt; T &gt;))=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Interval</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>ad945b63b07ed49f04599e12e3c0bcfc1</anchor>
      <arglist>(const std::initializer_list&lt; T &gt; &amp;ilist) noexcept(noexcept(Interval{std::minmax(ilist)}))</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Interval</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>aec27ac6a161c2e87cd17a75f103e6494</anchor>
      <arglist>(const value_type &amp;a, const value_type &amp;b) noexcept(noexcept(Interval{std::minmax(a, b)}))</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Interval</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>aeb83dff0c227cb528e4151858f86cbb1</anchor>
      <arglist>(const value_type &amp;v) noexcept(noexcept(Interval{pair_type{v, v}}))</arglist>
    </member>
    <member kind="function">
      <type>constexpr Interval &amp;</type>
      <name>Expand</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a8c91943d3e64867543378df36467c60a</anchor>
      <arglist>(const value_type &amp;v) noexcept(noexcept(m_min+=v) &amp;&amp;noexcept(m_max+=v))</arglist>
    </member>
    <member kind="function">
      <type>constexpr Interval &amp;</type>
      <name>ExpandEqually</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a0de5a003ef9855c1a01868e1b3223536</anchor>
      <arglist>(const NonNegative&lt; value_type &gt; &amp;v) noexcept(noexcept(Interval{pair_type{m_min - value_type{v}, m_max+value_type{v}}}) &amp;&amp;std::is_nothrow_move_assignable_v&lt; Interval &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr value_type</type>
      <name>GetMax</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a0e105e9e1d8703aa7072cc055a8954e9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr value_type</type>
      <name>GetMin</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a383d8880c22e2b84af21ef3ec17df785</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Interval &amp;</type>
      <name>Include</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a4bb6839834aa0ebc67d9a9d2e9fe94bb</anchor>
      <arglist>(const Interval &amp;v) noexcept(noexcept(Interval{pair_type{std::min(v.GetMin(), GetMin()), std::max(v.GetMax(), GetMax())}}) &amp;&amp;std::is_nothrow_move_assignable_v&lt; Interval &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Interval &amp;</type>
      <name>Include</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a273dec1b389b9c881c800df37abb4392</anchor>
      <arglist>(const value_type &amp;v) noexcept(noexcept(Interval{pair_type{std::min(v, GetMin()), std::max(v, GetMax())}}) &amp;&amp;std::is_nothrow_move_assignable_v&lt; Interval &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Interval &amp;</type>
      <name>Intersect</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a122ce6b0ac632f4ed1d0e81a66204a5b</anchor>
      <arglist>(const Interval &amp;v) noexcept(noexcept(Interval{pair_type{std::max(v.GetMin(), GetMin()), std::min(v.GetMax(), GetMax())}}) &amp;&amp;std::is_nothrow_move_assignable_v&lt; Interval &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Interval &amp;</type>
      <name>Move</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a699ab2b0a88d29b896f2cefb5af1feee</anchor>
      <arglist>(const value_type &amp;v) noexcept(noexcept(*this+v) &amp;&amp;std::is_nothrow_copy_assignable_v&lt; Interval &gt;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr value_type</type>
      <name>GetHighest</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a2f5782ae776bd9c6961ea41cbd0c0ef0</anchor>
      <arglist>() noexcept(noexcept(limits::infinity()) &amp;&amp;noexcept(limits::max()))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr value_type</type>
      <name>GetLowest</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>aee9024c947e411a19e2460faf5cbc755</anchor>
      <arglist>() noexcept(noexcept(limits::infinity()) &amp;&amp;noexcept(limits::lowest()))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetCenter</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a8abbe9590460876ec82bf7dd801fb1f0</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;v) noexcept(noexcept((v.GetMin()+v.GetMax())/2))</arglist>
    </member>
    <member kind="function">
      <type>constexpr Interval&lt; T &gt;</type>
      <name>GetIntersection</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a4baf1dd76711ae5151d0ee07a8b345d0</anchor>
      <arglist>(Interval&lt; T &gt; a, const Interval&lt; T &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsIntersecting</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>ab9dc0da0330f8a1c23b44b919f02fed7</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;a, const Interval&lt; T &gt; &amp;b) noexcept(noexcept(T{}&lt; T{}) &amp;&amp;noexcept(T{} &gt;=T{}))</arglist>
    </member>
    <member kind="typedef">
      <type>Interval&lt; Length &gt;</type>
      <name>LengthInterval</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>ab87595595939d0c7469bc1c48524598a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a861fb100d29d58d6f26f3767017886b3</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;a, const Interval&lt; T &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a815e65e38974a8bb60ef0a096bea0241</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;lhs, const Interval&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>adbf50e7e086182f69dc09e011aef6345</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;lhs, const Interval&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>ac1b97d7e2f5894048236948061068fb5</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;a, const Interval&lt; T &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>acc58a55aab3f8bdd7ea411a6b2a4ddfb</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;lhs, const Interval&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>acca7f35c089808652f6c5d6c06a85ae7</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;lhs, const Interval&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Interval&lt; playrho::detail::Checked&lt; Length &gt; &gt;</name>
    <filename>classplayrho_1_1Interval.html</filename>
    <member kind="typedef">
      <type>playrho::detail::Checked&lt; Length &gt;</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>af3f2912d491535ecbe0f8b03da2357b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Interval</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a93dc585028beea550de4afdadbedf562</anchor>
      <arglist>() noexcept(noexcept(std::is_nothrow_move_constructible_v&lt; playrho::detail::Checked&lt; Length &gt; &gt;))=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Interval</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>ad945b63b07ed49f04599e12e3c0bcfc1</anchor>
      <arglist>(const std::initializer_list&lt; playrho::detail::Checked&lt; Length &gt; &gt; &amp;ilist) noexcept(noexcept(Interval{std::minmax(ilist)}))</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Interval</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>aec27ac6a161c2e87cd17a75f103e6494</anchor>
      <arglist>(const value_type &amp;a, const value_type &amp;b) noexcept(noexcept(Interval{std::minmax(a, b)}))</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Interval</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>aeb83dff0c227cb528e4151858f86cbb1</anchor>
      <arglist>(const value_type &amp;v) noexcept(noexcept(Interval{pair_type{v, v}}))</arglist>
    </member>
    <member kind="function">
      <type>constexpr Interval &amp;</type>
      <name>Expand</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a8c91943d3e64867543378df36467c60a</anchor>
      <arglist>(const value_type &amp;v) noexcept(noexcept(m_min+=v) &amp;&amp;noexcept(m_max+=v))</arglist>
    </member>
    <member kind="function">
      <type>constexpr Interval &amp;</type>
      <name>ExpandEqually</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a0de5a003ef9855c1a01868e1b3223536</anchor>
      <arglist>(const NonNegative&lt; value_type &gt; &amp;v) noexcept(noexcept(Interval{pair_type{m_min - value_type{v}, m_max+value_type{v}}}) &amp;&amp;std::is_nothrow_move_assignable_v&lt; Interval &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr value_type</type>
      <name>GetMax</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a0e105e9e1d8703aa7072cc055a8954e9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr value_type</type>
      <name>GetMin</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a383d8880c22e2b84af21ef3ec17df785</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Interval &amp;</type>
      <name>Include</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a4bb6839834aa0ebc67d9a9d2e9fe94bb</anchor>
      <arglist>(const Interval &amp;v) noexcept(noexcept(Interval{pair_type{std::min(v.GetMin(), GetMin()), std::max(v.GetMax(), GetMax())}}) &amp;&amp;std::is_nothrow_move_assignable_v&lt; Interval &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Interval &amp;</type>
      <name>Include</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a273dec1b389b9c881c800df37abb4392</anchor>
      <arglist>(const value_type &amp;v) noexcept(noexcept(Interval{pair_type{std::min(v, GetMin()), std::max(v, GetMax())}}) &amp;&amp;std::is_nothrow_move_assignable_v&lt; Interval &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Interval &amp;</type>
      <name>Intersect</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a122ce6b0ac632f4ed1d0e81a66204a5b</anchor>
      <arglist>(const Interval &amp;v) noexcept(noexcept(Interval{pair_type{std::max(v.GetMin(), GetMin()), std::min(v.GetMax(), GetMax())}}) &amp;&amp;std::is_nothrow_move_assignable_v&lt; Interval &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Interval &amp;</type>
      <name>Move</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a699ab2b0a88d29b896f2cefb5af1feee</anchor>
      <arglist>(const value_type &amp;v) noexcept(noexcept(*this+v) &amp;&amp;std::is_nothrow_copy_assignable_v&lt; Interval &gt;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr value_type</type>
      <name>GetHighest</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a2f5782ae776bd9c6961ea41cbd0c0ef0</anchor>
      <arglist>() noexcept(noexcept(limits::infinity()) &amp;&amp;noexcept(limits::max()))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr value_type</type>
      <name>GetLowest</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>aee9024c947e411a19e2460faf5cbc755</anchor>
      <arglist>() noexcept(noexcept(limits::infinity()) &amp;&amp;noexcept(limits::lowest()))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetCenter</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a8abbe9590460876ec82bf7dd801fb1f0</anchor>
      <arglist>(const Interval&lt; playrho::detail::Checked&lt; Length &gt; &gt; &amp;v) noexcept(noexcept((v.GetMin()+v.GetMax())/2))</arglist>
    </member>
    <member kind="function">
      <type>constexpr Interval&lt; playrho::detail::Checked&lt; Length &gt; &gt;</type>
      <name>GetIntersection</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a4baf1dd76711ae5151d0ee07a8b345d0</anchor>
      <arglist>(Interval&lt; playrho::detail::Checked&lt; Length &gt; &gt; a, const Interval&lt; playrho::detail::Checked&lt; Length &gt; &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsIntersecting</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>ab9dc0da0330f8a1c23b44b919f02fed7</anchor>
      <arglist>(const Interval&lt; playrho::detail::Checked&lt; Length &gt; &gt; &amp;a, const Interval&lt; playrho::detail::Checked&lt; Length &gt; &gt; &amp;b) noexcept(noexcept(playrho::detail::Checked&lt; Length &gt; {}&lt; playrho::detail::Checked&lt; Length &gt; {}) &amp;&amp;noexcept(playrho::detail::Checked&lt; Length &gt; {} &gt;=playrho::detail::Checked&lt; Length &gt; {}))</arglist>
    </member>
    <member kind="typedef">
      <type>Interval&lt; Length &gt;</type>
      <name>LengthInterval</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>ab87595595939d0c7469bc1c48524598a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a861fb100d29d58d6f26f3767017886b3</anchor>
      <arglist>(const Interval&lt; playrho::detail::Checked&lt; Length &gt; &gt; &amp;a, const Interval&lt; playrho::detail::Checked&lt; Length &gt; &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a815e65e38974a8bb60ef0a096bea0241</anchor>
      <arglist>(const Interval&lt; playrho::detail::Checked&lt; Length &gt; &gt; &amp;lhs, const Interval&lt; playrho::detail::Checked&lt; Length &gt; &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>adbf50e7e086182f69dc09e011aef6345</anchor>
      <arglist>(const Interval&lt; playrho::detail::Checked&lt; Length &gt; &gt; &amp;lhs, const Interval&lt; playrho::detail::Checked&lt; Length &gt; &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>ac1b97d7e2f5894048236948061068fb5</anchor>
      <arglist>(const Interval&lt; playrho::detail::Checked&lt; Length &gt; &gt; &amp;a, const Interval&lt; playrho::detail::Checked&lt; Length &gt; &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>acc58a55aab3f8bdd7ea411a6b2a4ddfb</anchor>
      <arglist>(const Interval&lt; playrho::detail::Checked&lt; Length &gt; &gt; &amp;lhs, const Interval&lt; playrho::detail::Checked&lt; Length &gt; &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>acca7f35c089808652f6c5d6c06a85ae7</anchor>
      <arglist>(const Interval&lt; playrho::detail::Checked&lt; Length &gt; &gt; &amp;lhs, const Interval&lt; playrho::detail::Checked&lt; Length &gt; &gt; &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::InvalidArgument</name>
    <filename>classplayrho_1_1InvalidArgument.html</filename>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::is_narrowing_conversion</name>
    <filename>structplayrho_1_1detail_1_1is__narrowing__conversion.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>playrho::detail::is_narrowing_conversion_impl</base>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::is_narrowing_conversion_impl</name>
    <filename>structplayrho_1_1detail_1_1is__narrowing__conversion__impl.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::is_narrowing_conversion_impl&lt; From, To, std::void_t&lt; decltype(To{std::declval&lt; From &gt;()})&gt; &gt;</name>
    <filename>structplayrho_1_1detail_1_1is__narrowing__conversion__impl_3_01From_00_01To_00_01std_1_1void__t_2bd847898cb7af9386f45883b1662535.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::IsAddable</name>
    <filename>structplayrho_1_1detail_1_1IsAddable.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::IsAddable&lt; T1, T2, std::void_t&lt; decltype(T1{}+T2{})&gt; &gt;</name>
    <filename>structplayrho_1_1detail_1_1IsAddable_3_01T1_00_01T2_00_01std_1_1void__t_3_01decltype_07T1_02_03_09T2_02_03_08_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::IsArithmetic</name>
    <filename>structplayrho_1_1detail_1_1IsArithmetic.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::IsArithmetic&lt; T, std::void_t&lt; decltype(T{}+T{}), decltype(T{} - T{}), decltype(T{} *T{}), decltype(T{}/T{})&gt; &gt;</name>
    <filename>structplayrho_1_1detail_1_1IsArithmetic_3_01T_00_01std_1_1void__t_3_01decltype_07T_02_03_09T_02_1d1a3b924c473a70e90f3ccf5def5509.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::Checked::IsChecked</name>
    <filename>structplayrho_1_1detail_1_1Checked_1_1IsChecked.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::Checked::IsChecked&lt; Checked&lt; V, C, N &gt; &gt;</name>
    <filename>structplayrho_1_1detail_1_1Checked_1_1IsChecked_3_01Checked_3_01V_00_01C_00_01N_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>N</templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::IsDivisable</name>
    <filename>structplayrho_1_1detail_1_1IsDivisable.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::IsDivisable&lt; T1, T2, std::void_t&lt; decltype(T1{}/T2{})&gt; &gt;</name>
    <filename>structplayrho_1_1detail_1_1IsDivisable_3_01T1_00_01T2_00_01std_1_1void__t_3_01decltype_07T1_02_03_2T2_02_03_08_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::IsEqualityComparable</name>
    <filename>structplayrho_1_1detail_1_1IsEqualityComparable.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::IsEqualityComparable&lt; T1, T2, std::void_t&lt; decltype(T1{}==T2{})&gt; &gt;</name>
    <filename>structplayrho_1_1detail_1_1IsEqualityComparable_3_01T1_00_01T2_00_01std_1_1void__t_3_01decltype_397e13302495d65cbf0119afdf1f7e4d.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::IsInequalityComparable</name>
    <filename>structplayrho_1_1detail_1_1IsInequalityComparable.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::IsInequalityComparable&lt; T1, T2, std::void_t&lt; decltype(T1{} !=T2{})&gt; &gt;</name>
    <filename>structplayrho_1_1detail_1_1IsInequalityComparable_3_01T1_00_01T2_00_01std_1_1void__t_3_01decltypff02ba6c3b90e96f5ba3c1dc4ad6096a.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::IsIterable</name>
    <filename>structplayrho_1_1detail_1_1IsIterable.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::IsIterable&lt; T, std::void_t&lt; decltype(begin(std::declval&lt; T &gt;())), decltype(end(std::declval&lt; T &gt;())), decltype(++std::declval&lt; decltype(begin(std::declval&lt; T &amp; &gt;()))&amp; &gt;()), decltype(*begin(std::declval&lt; T &gt;()))&gt; &gt;</name>
    <filename>structplayrho_1_1detail_1_1IsIterable_3_01T_00_01std_1_1void__t_3_01decltype_07begin_07std_1_1deb94b1a3aa8659edf5ae9c473de3326c0.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::Island</name>
    <filename>structplayrho_1_1Island.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; BodyID, pmr::polymorphic_allocator&lt; BodyID &gt; &gt;</type>
      <name>Bodies</name>
      <anchorfile>structplayrho_1_1Island.html</anchorfile>
      <anchor>a82bf37c68adb0ab2019b19290c3e5ea9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; ContactID, pmr::polymorphic_allocator&lt; ContactID &gt; &gt;</type>
      <name>Contacts</name>
      <anchorfile>structplayrho_1_1Island.html</anchorfile>
      <anchor>ad66b8d4a25fc9e612909437d570537fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; JointID, pmr::polymorphic_allocator&lt; JointID &gt; &gt;</type>
      <name>Joints</name>
      <anchorfile>structplayrho_1_1Island.html</anchorfile>
      <anchor>af88299f9e7e8de27e99538b841a28617</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Island</name>
      <anchorfile>structplayrho_1_1Island.html</anchorfile>
      <anchor>aa59f666fd804accec0d54c185565900a</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Island</name>
      <anchorfile>structplayrho_1_1Island.html</anchorfile>
      <anchor>a940c2091093588d46e77f19105f1ef3c</anchor>
      <arglist>(pmr::memory_resource &amp;br, pmr::memory_resource &amp;cr, pmr::memory_resource &amp;jr)</arglist>
    </member>
    <member kind="variable">
      <type>Bodies</type>
      <name>bodies</name>
      <anchorfile>structplayrho_1_1Island.html</anchorfile>
      <anchor>a90431aa17f041c114ce35934f709941e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Contacts</type>
      <name>contacts</name>
      <anchorfile>structplayrho_1_1Island.html</anchorfile>
      <anchor>afe55aebe111938ee3a269e3df5ee042d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Joints</type>
      <name>joints</name>
      <anchorfile>structplayrho_1_1Island.html</anchorfile>
      <anchor>a1753e3625c9ed8de0a9947310e75ac40</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>structplayrho_1_1Island.html</anchorfile>
      <anchor>aacc77212a4102b2b298af7a5cc1be392</anchor>
      <arglist>(Island &amp;island) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>Count</name>
      <anchorfile>structplayrho_1_1Island.html</anchorfile>
      <anchor>a3063d5a0619a13b6a4e9c7dd682d2b8c</anchor>
      <arglist>(const Island &amp;island, BodyID entry)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>Count</name>
      <anchorfile>structplayrho_1_1Island.html</anchorfile>
      <anchor>aacd06d34c7670daf163be95cded7b12f</anchor>
      <arglist>(const Island &amp;island, ContactID entry)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>Count</name>
      <anchorfile>structplayrho_1_1Island.html</anchorfile>
      <anchor>a12ca0d1652e526ef8a5829a386056f3f</anchor>
      <arglist>(const Island &amp;island, JointID entry)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsFullOfBodies</name>
      <anchorfile>structplayrho_1_1Island.html</anchorfile>
      <anchor>ad81cfb61a8aae11d28836a542584dd7f</anchor>
      <arglist>(const Island &amp;island)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsFullOfContacts</name>
      <anchorfile>structplayrho_1_1Island.html</anchorfile>
      <anchor>a0613fe306ae99ce5ca98798c757a3dc2</anchor>
      <arglist>(const Island &amp;island)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reserve</name>
      <anchorfile>structplayrho_1_1Island.html</anchorfile>
      <anchor>a664acb63c47699be5fb3eb03201ecddc</anchor>
      <arglist>(Island &amp;island, BodyCounter bodies, ContactCounter contacts, JointCounter joints)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Sort</name>
      <anchorfile>structplayrho_1_1Island.html</anchorfile>
      <anchor>ae01cbc122cf5b3e34b90deb3b9af08c3</anchor>
      <arglist>(Island &amp;island) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::IslandStats</name>
    <filename>structplayrho_1_1IslandStats.html</filename>
    <member kind="function">
      <type>constexpr IslandStats &amp;</type>
      <name>IncContactsSkipped</name>
      <anchorfile>structplayrho_1_1IslandStats.html</anchorfile>
      <anchor>ac4f02b83406f7d31d85365dbe48a92a0</anchor>
      <arglist>(ContactCounter value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr IslandStats &amp;</type>
      <name>IncContactsUpdated</name>
      <anchorfile>structplayrho_1_1IslandStats.html</anchorfile>
      <anchor>ade0f1be0e2b3274b062c473fa5922881</anchor>
      <arglist>(ContactCounter value) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>BodyCounter</type>
      <name>bodiesSlept</name>
      <anchorfile>structplayrho_1_1IslandStats.html</anchorfile>
      <anchor>a0e77adb6237f10240ff654d4b568baf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ContactCounter</type>
      <name>contactsSkipped</name>
      <anchorfile>structplayrho_1_1IslandStats.html</anchorfile>
      <anchor>a5527b23bccc7a5d52883c73d9a38d18d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ContactCounter</type>
      <name>contactsUpdated</name>
      <anchorfile>structplayrho_1_1IslandStats.html</anchorfile>
      <anchor>a26a43c272d9953c4e7ca5f8c98339a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum</type>
      <name>maxIncImpulse</name>
      <anchorfile>structplayrho_1_1IslandStats.html</anchorfile>
      <anchor>ad6315063bcd677bfbf1fc02e3a4df5de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>minSeparation</name>
      <anchorfile>structplayrho_1_1IslandStats.html</anchorfile>
      <anchor>a56647a7552d22c1601e221060571a1e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TimestepIters</type>
      <name>positionIters</name>
      <anchorfile>structplayrho_1_1IslandStats.html</anchorfile>
      <anchor>a397f50b437efd6d054d6b60d66d4b34b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>solved</name>
      <anchorfile>structplayrho_1_1IslandStats.html</anchorfile>
      <anchor>a5b80c2efc3ebf289982130730d514259</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TimestepIters</type>
      <name>velocityIters</name>
      <anchorfile>structplayrho_1_1IslandStats.html</anchorfile>
      <anchor>a5ea09495567aff4388e408e8a2a1d2c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::IsMatrix</name>
    <filename>structplayrho_1_1detail_1_1IsMatrix.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::IsMatrix&lt; Vector&lt; Vector&lt; T, N &gt;, M &gt; &gt;</name>
    <filename>structplayrho_1_1detail_1_1IsMatrix_3_01Vector_3_01Vector_3_01T_00_01N_01_4_00_01M_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>M</templarg>
    <templarg>N</templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::IsMultipliable</name>
    <filename>structplayrho_1_1detail_1_1IsMultipliable.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::IsMultipliable&lt; T1, T2, std::void_t&lt; decltype(T1{} *T2{})&gt; &gt;</name>
    <filename>structplayrho_1_1detail_1_1IsMultipliable_3_01T1_00_01T2_00_01std_1_1void__t_3_01decltype_07T1_02_03_01_5T2_02_03_08_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::IsReverseIterable</name>
    <filename>structplayrho_1_1detail_1_1IsReverseIterable.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::IsReverseIterable&lt; T, std::void_t&lt; decltype(rbegin(std::declval&lt; T &gt;())), decltype(rend(std::declval&lt; T &gt;())), decltype(++std::declval&lt; decltype(rbegin(std::declval&lt; T &amp; &gt;()))&amp; &gt;()), decltype(*rbegin(std::declval&lt; T &gt;()))&gt; &gt;</name>
    <filename>structplayrho_1_1detail_1_1IsReverseIterable_3_01T_00_01std_1_1void__t_3_01decltype_07rbegin_07see1e2b2bf8c70ff6417e9800f5336264.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::IsSquareMatrix</name>
    <filename>structplayrho_1_1detail_1_1IsSquareMatrix.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::IsSquareMatrix&lt; Vector&lt; Vector&lt; T, M &gt;, M &gt; &gt;</name>
    <filename>structplayrho_1_1detail_1_1IsSquareMatrix_3_01Vector_3_01Vector_3_01T_00_01M_01_4_00_01M_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>M</templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::detail::IsValidJointType</name>
    <filename>structplayrho_1_1d2_1_1detail_1_1IsValidJointType.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::detail::IsValidJointType&lt; T, std::void_t&lt; decltype(GetBodyA(std::declval&lt; T &gt;())), decltype(GetBodyB(std::declval&lt; T &gt;())), decltype(GetCollideConnected(std::declval&lt; T &gt;())), decltype(ShiftOrigin(std::declval&lt; T &amp; &gt;(), std::declval&lt; Length2 &gt;())), decltype(InitVelocity(std::declval&lt; T &amp; &gt;(), std::declval&lt; const Span&lt; BodyConstraint &gt; &amp; &gt;(), std::declval&lt; StepConf &gt;(), std::declval&lt; ConstraintSolverConf &gt;())), decltype(SolveVelocity(std::declval&lt; T &amp; &gt;(), std::declval&lt; const Span&lt; BodyConstraint &gt; &amp; &gt;(), std::declval&lt; StepConf &gt;())), decltype(SolvePosition(std::declval&lt; T &gt;(), std::declval&lt; const Span&lt; BodyConstraint &gt; &amp; &gt;(), std::declval&lt; ConstraintSolverConf &gt;())), decltype(std::declval&lt; T &gt;()==std::declval&lt; T &gt;()), decltype(Joint{std::declval&lt; T &gt;()})&gt; &gt;</name>
    <filename>structplayrho_1_1d2_1_1detail_1_1IsValidJointType_3_01T_00_01std_1_1void__t_3_01decltype_07GetBo47eab3fc68beccae0775fbf74eefbb54.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::detail::IsValidShapeType</name>
    <filename>structplayrho_1_1d2_1_1detail_1_1IsValidShapeType.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::detail::IsValidShapeType&lt; T, std::void_t&lt; decltype(GetChildCount(std::declval&lt; T &gt;())), decltype(GetChild(std::declval&lt; T &gt;(), std::declval&lt; ChildCounter &gt;())), decltype(GetMassData(std::declval&lt; T &gt;())), decltype(GetVertexRadius(std::declval&lt; T &gt;(), std::declval&lt; ChildCounter &gt;())), decltype(GetDensity(std::declval&lt; T &gt;())), decltype(GetFriction(std::declval&lt; T &gt;())), decltype(GetRestitution(std::declval&lt; T &gt;())), decltype(std::declval&lt; T &gt;()==std::declval&lt; T &gt;()), decltype(std::declval&lt; DecayedTypeIfNotSame&lt; T, Shape &gt;&gt;()), decltype(std::is_constructible_v&lt; DecayedTypeIfNotSame&lt; T, Shape &gt;, T &gt;)&gt; &gt;</name>
    <filename>structplayrho_1_1d2_1_1detail_1_1IsValidShapeType_3_01T_00_01std_1_1void__t_3_01decltype_07GetCh6e61a5840b735d119f7d25ad6ffcdafa.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::IsVector</name>
    <filename>structplayrho_1_1detail_1_1IsVector.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::IsVector&lt; Vector&lt; T, N &gt; &gt;</name>
    <filename>structplayrho_1_1detail_1_1IsVector_3_01Vector_3_01T_00_01N_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
  </compound>
  <compound kind="class">
    <name>playrho::d2::Joint</name>
    <filename>classplayrho_1_1d2_1_1Joint.html</filename>
    <member kind="function">
      <type></type>
      <name>Joint</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a629afbd4f38402a8f5d23a13199642f1</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Joint</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>ab064da54849fb5adaac0866cc6dea9c5</anchor>
      <arglist>(const Joint &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Joint</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>afe6ebeb9d617e7abb955eb4977dc1451</anchor>
      <arglist>(Joint &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Joint</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a1f0d73ef9cb8983e0eb288ff682c1783</anchor>
      <arglist>(T &amp;&amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_value</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>ad463d7b16f9fe80ab5f3368734bf75db</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Joint &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>ac016a97cb182a1122528839ff5d432ba</anchor>
      <arglist>(const Joint &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Joint &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a1b06f0e9027ce164fc6dd50d050c7a7e</anchor>
      <arglist>(Joint &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Joint &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a889ed520ca6553e9781e80131d69f7cb</anchor>
      <arglist>(T &amp;&amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a686ecf9d5b134af67040d2167eaaacbc</anchor>
      <arglist>(Joint &amp;other) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend BodyID</type>
      <name>GetBodyA</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a77014275fd3396814dca3cb040531a93</anchor>
      <arglist>(const Joint &amp;object) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend BodyID</type>
      <name>GetBodyB</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a7fc6232bebaf980916267eac986af1b6</anchor>
      <arglist>(const Joint &amp;object) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>GetCollideConnected</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a1d3db8891b3291d9ba80b2b78129dffe</anchor>
      <arglist>(const Joint &amp;object) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend TypeID</type>
      <name>GetType</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a2ca986bd855aa5470a1ba1cd44f27f7b</anchor>
      <arglist>(const Joint &amp;object) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>InitVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a7ed33745cbcd04b55f1d412d5960f67e</anchor>
      <arglist>(Joint &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const playrho::StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a77c7fac4adcbb85f9cfc10e1c59a0694</anchor>
      <arglist>(const Joint &amp;lhs, const Joint &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a236b60d14dce843e92ca4e9ddeecc6b2</anchor>
      <arglist>(const Joint &amp;lhs, const Joint &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>ShiftOrigin</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a97c8ba6573c7f0503237ab20f08bc8c2</anchor>
      <arglist>(Joint &amp;object, const Length2 &amp;value) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>SolvePosition</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>afc54cff4eb0ff7bbd137c4676d6e51b0</anchor>
      <arglist>(const Joint &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>SolveVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>ae543c5056e19da986f06cc8ca9e71c82</anchor>
      <arglist>(Joint &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const playrho::StepConf &amp;step)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::add_pointer_t&lt; std::add_const_t&lt; T &gt; &gt;</type>
      <name>TypeCast</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>afbe06ff8376003dcba368f69191b97fd</anchor>
      <arglist>(const Joint *value) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::add_pointer_t&lt; T &gt;</type>
      <name>TypeCast</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>acd73f8a32384e237c826c5d2f7c60cce</anchor>
      <arglist>(Joint *value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnableLimit</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a8736e94424a5e0f88a983a4d39097e4d</anchor>
      <arglist>(Joint &amp;object, bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnableMotor</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a07028eef8277c8ce9f1e6a0004d19638</anchor>
      <arglist>(Joint &amp;object, bool value)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngularLowerLimit</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>af2a0a13adc8cbef557d0264d5fd8ec78</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>RotInertia</type>
      <name>GetAngularMass</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>ad342577d3c27c31a3c5c474b3c8d071a</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>AngularMomentum</type>
      <name>GetAngularMotorImpulse</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>ad6c9c6f1cffb8b95006e85e59405b468</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngularOffset</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>aea1405cb3a2b9aa07a391b41b0813505</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a7ed1d7a8f54847819b04cf02a47c658e</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngularUpperLimit</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a33690974dec12f9f1186cace72777a8e</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetDampingRatio</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a1d5c9f8e6c57fc6620cbfd4042f0aa01</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>DistanceJointConf</type>
      <name>GetDistanceJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a5c645c39769f596f82ce552a84dbdd1b</anchor>
      <arglist>(const Joint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>Frequency</type>
      <name>GetFrequency</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>ab0761255e7ae5a4dc119e7b1a2873ffe</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>FrictionJointConf</type>
      <name>GetFrictionJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>ad65c13dc93f7969b444ad617b1e21518</anchor>
      <arglist>(const Joint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>GearJointConf</type>
      <name>GetGearJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a25ac9f8e5b1e5489c303ceb404ee3e9c</anchor>
      <arglist>(const Joint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetGroundAnchorA</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>abdb43acaf1ba0f40fc54cdd3e44ef49f</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetGroundAnchorB</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>aa0b16d611763fe6599ab00974b1f9de6</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetLength</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a729a90b55326be7bf460e092eb0ad1d9</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>LimitState</type>
      <name>GetLimitState</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a96e6945a982e424009580a3275d9aa45</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetLinearLowerLimit</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a69c77ad98199a4a125134aa9dcad9b27</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Momentum</type>
      <name>GetLinearMotorImpulse</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>afb2ee68ebcacf1e5d265df72807867f5</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLinearOffset</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a71fafe51e82dce85fea4873cd164b521</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a9d1898f619ead98398df5bfedae7babe</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetLinearUpperLimit</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a7bd07582bf06db7e38afe9d1050a4fe3</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalAnchorA</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a93ffc7c5314aab54f2655159b34412d4</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalAnchorB</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>ac5f4ede3e6df197f89bcff22331feb1f</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetLocalXAxisA</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a03a1ac31d6ec2e9713730ebdd3450000</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetLocalYAxisA</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>abf6c43ab585a2f186d301991199e451d</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Force</type>
      <name>GetMaxForce</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a9d3364c84b46f1f28b1af86e05f83e83</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Force</type>
      <name>GetMaxMotorForce</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>ac6c441699c9682957b71d30ec512c920</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Torque</type>
      <name>GetMaxMotorTorque</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a8695771767390f89daedfca11bb372fe</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Torque</type>
      <name>GetMaxTorque</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>ae39bc1b87b949e8ddc966335bf526c9e</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>MotorJointConf</type>
      <name>GetMotorJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>ad337eecad79f53b5b95ec4c8acc48d1c</anchor>
      <arglist>(const Joint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetMotorSpeed</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a56bbd2633ddd1ac1a15ac718e9f27a3a</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Torque</type>
      <name>GetMotorTorque</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a5771e47bcd401f72f04f8c24c482270b</anchor>
      <arglist>(const Joint &amp;joint, Frequency inv_dt)</arglist>
    </member>
    <member kind="function">
      <type>PrismaticJointConf</type>
      <name>GetPrismaticJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a35f6f1e912af7403f2fe74281b0e839f</anchor>
      <arglist>(const Joint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>PulleyJointConf</type>
      <name>GetPulleyJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a7844807c1d0889d5dc5cb28bd1a7ae7d</anchor>
      <arglist>(const Joint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetRatio</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a819236db84fd9a87d9e0e9bb2103aba4</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetReferenceAngle</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>ae15b18e1e52dfb2a3a2c093bf5c6cb3e</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>RevoluteJointConf</type>
      <name>GetRevoluteJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a679b91e916353c9022ebc3cc26f9201c</anchor>
      <arglist>(const Joint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>RopeJointConf</type>
      <name>GetRopeJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a547e081c567cb8f02ab3b3e9ee4efd23</anchor>
      <arglist>(const Joint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetTarget</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>ac72c143ca1f9f831ab8c5075563db207</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>TargetJointConf</type>
      <name>GetTargetJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a61f1607657e41b75797c28649e818f8e</anchor>
      <arglist>(const Joint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>WeldJointConf</type>
      <name>GetWeldJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a068dc3f2013d3029414eb4d0eaf85f13</anchor>
      <arglist>(const Joint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>WheelJointConf</type>
      <name>GetWheelJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>ab455b1a4e3159193b477bef90fa819b4</anchor>
      <arglist>(const Joint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLimitEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a38af51869b6c1d87b93123a4a790f874</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMotorEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>ad5b4dd16b94cfe0d1f5ce07a01cc598d</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngularLimits</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a054f7637a988ddb54b4dd83ba320a172</anchor>
      <arglist>(Joint &amp;object, Angle lower, Angle upper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngularOffset</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a8a77ffe9ddb532660776e958fa4144d9</anchor>
      <arglist>(Joint &amp;object, Angle value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFrequency</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>af03e3c2d8228e1bf08294102ad6612ce</anchor>
      <arglist>(Joint &amp;object, Frequency value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLinearLimits</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a0c848f01e3faf56ecccc16c8819290ad</anchor>
      <arglist>(Joint &amp;object, Length lower, Length upper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLinearOffset</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a3224d16ba539e780b1dee1c84b6c9c31</anchor>
      <arglist>(Joint &amp;object, const Length2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMaxMotorForce</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>ae9cea0c1cb352dc91e0f77e3b4202d5f</anchor>
      <arglist>(Joint &amp;object, Force value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMaxMotorTorque</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>ac17a5d01b67c5e42c42cb0b3c2e01905</anchor>
      <arglist>(Joint &amp;object, Torque value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMotorSpeed</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a7baeaf66a5496fad0d16eb1b28823f47</anchor>
      <arglist>(Joint &amp;object, AngularVelocity value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTarget</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a82f627df849e229e10f6ac09473c7101</anchor>
      <arglist>(Joint &amp;object, const Length2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>TypeCast</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>af04a40472f1b7576171f3132305ce7a2</anchor>
      <arglist>(const Joint &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>TypeCast</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a3a5b4ab06d5e078ef5aa2e67b56c5dcc</anchor>
      <arglist>(Joint &amp;&amp;value)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>TypeCast</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>ac91cb4dc6cbce2a3d54364794b1f1887</anchor>
      <arglist>(Joint &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::JointBuilder</name>
    <filename>structplayrho_1_1d2_1_1JointBuilder.html</filename>
    <templarg></templarg>
    <base>playrho::d2::JointConf</base>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a733fc319651379e8afa36146bebe68df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a52594f21a1440facedc0d0101a271c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyA</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a30d41149145a1adea49f497e169a8e20</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyB</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a7485835c7c2b8833eee260621680e0b3</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseCollideConnected</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a3df0b0d793cf72b42fdefae06f5f22ef</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JointBuilder&lt; DistanceJointConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1JointBuilder.html</filename>
    <base>playrho::d2::JointConf</base>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a733fc319651379e8afa36146bebe68df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DistanceJointConf</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a52594f21a1440facedc0d0101a271c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyA</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a30d41149145a1adea49f497e169a8e20</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyB</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a7485835c7c2b8833eee260621680e0b3</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseCollideConnected</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a3df0b0d793cf72b42fdefae06f5f22ef</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JointBuilder&lt; FrictionJointConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1JointBuilder.html</filename>
    <base>playrho::d2::JointConf</base>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a733fc319651379e8afa36146bebe68df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FrictionJointConf</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a52594f21a1440facedc0d0101a271c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyA</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a30d41149145a1adea49f497e169a8e20</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyB</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a7485835c7c2b8833eee260621680e0b3</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseCollideConnected</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a3df0b0d793cf72b42fdefae06f5f22ef</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JointBuilder&lt; GearJointConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1JointBuilder.html</filename>
    <base>playrho::d2::JointConf</base>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a733fc319651379e8afa36146bebe68df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GearJointConf</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a52594f21a1440facedc0d0101a271c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyA</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a30d41149145a1adea49f497e169a8e20</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyB</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a7485835c7c2b8833eee260621680e0b3</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseCollideConnected</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a3df0b0d793cf72b42fdefae06f5f22ef</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JointBuilder&lt; MotorJointConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1JointBuilder.html</filename>
    <base>playrho::d2::JointConf</base>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a733fc319651379e8afa36146bebe68df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MotorJointConf</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a52594f21a1440facedc0d0101a271c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyA</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a30d41149145a1adea49f497e169a8e20</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyB</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a7485835c7c2b8833eee260621680e0b3</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseCollideConnected</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a3df0b0d793cf72b42fdefae06f5f22ef</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JointBuilder&lt; PrismaticJointConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1JointBuilder.html</filename>
    <base>playrho::d2::JointConf</base>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a733fc319651379e8afa36146bebe68df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PrismaticJointConf</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a52594f21a1440facedc0d0101a271c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyA</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a30d41149145a1adea49f497e169a8e20</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyB</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a7485835c7c2b8833eee260621680e0b3</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseCollideConnected</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a3df0b0d793cf72b42fdefae06f5f22ef</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JointBuilder&lt; PulleyJointConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1JointBuilder.html</filename>
    <base>playrho::d2::JointConf</base>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a733fc319651379e8afa36146bebe68df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PulleyJointConf</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a52594f21a1440facedc0d0101a271c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyA</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a30d41149145a1adea49f497e169a8e20</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyB</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a7485835c7c2b8833eee260621680e0b3</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseCollideConnected</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a3df0b0d793cf72b42fdefae06f5f22ef</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JointBuilder&lt; RevoluteJointConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1JointBuilder.html</filename>
    <base>playrho::d2::JointConf</base>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a733fc319651379e8afa36146bebe68df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RevoluteJointConf</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a52594f21a1440facedc0d0101a271c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyA</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a30d41149145a1adea49f497e169a8e20</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyB</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a7485835c7c2b8833eee260621680e0b3</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseCollideConnected</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a3df0b0d793cf72b42fdefae06f5f22ef</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JointBuilder&lt; RopeJointConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1JointBuilder.html</filename>
    <base>playrho::d2::JointConf</base>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a733fc319651379e8afa36146bebe68df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RopeJointConf</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a52594f21a1440facedc0d0101a271c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyA</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a30d41149145a1adea49f497e169a8e20</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyB</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a7485835c7c2b8833eee260621680e0b3</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseCollideConnected</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a3df0b0d793cf72b42fdefae06f5f22ef</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JointBuilder&lt; TargetJointConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1JointBuilder.html</filename>
    <base>playrho::d2::JointConf</base>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a733fc319651379e8afa36146bebe68df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TargetJointConf</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a52594f21a1440facedc0d0101a271c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyA</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a30d41149145a1adea49f497e169a8e20</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyB</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a7485835c7c2b8833eee260621680e0b3</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseCollideConnected</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a3df0b0d793cf72b42fdefae06f5f22ef</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JointBuilder&lt; WeldJointConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1JointBuilder.html</filename>
    <base>playrho::d2::JointConf</base>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a733fc319651379e8afa36146bebe68df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>WeldJointConf</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a52594f21a1440facedc0d0101a271c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyA</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a30d41149145a1adea49f497e169a8e20</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyB</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a7485835c7c2b8833eee260621680e0b3</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseCollideConnected</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a3df0b0d793cf72b42fdefae06f5f22ef</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JointBuilder&lt; WheelJointConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1JointBuilder.html</filename>
    <base>playrho::d2::JointConf</base>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a733fc319651379e8afa36146bebe68df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>WheelJointConf</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a52594f21a1440facedc0d0101a271c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyA</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a30d41149145a1adea49f497e169a8e20</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyB</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a7485835c7c2b8833eee260621680e0b3</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseCollideConnected</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a3df0b0d793cf72b42fdefae06f5f22ef</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::detail::JointConcept</name>
    <filename>structplayrho_1_1d2_1_1detail_1_1JointConcept.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~JointConcept</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1JointConcept.html</anchorfile>
      <anchor>a1c5a8a98844adb2f419a1be847bc1665</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::unique_ptr&lt; JointConcept &gt;</type>
      <name>Clone_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1JointConcept.html</anchorfile>
      <anchor>aa99af4be5251d9d26106ac6233e24723</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual BodyID</type>
      <name>GetBodyA_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1JointConcept.html</anchorfile>
      <anchor>a3a38dedba75190adc4b712569133801f</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual BodyID</type>
      <name>GetBodyB_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1JointConcept.html</anchorfile>
      <anchor>ae5a6bbb17dd22075ad76d1e8cf187826</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>GetCollideConnected_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1JointConcept.html</anchorfile>
      <anchor>a4135f2875ee7c187345ee5fb5b65c623</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const void *</type>
      <name>GetData_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1JointConcept.html</anchorfile>
      <anchor>a10d19f61ee668e2343166ac4f7d442d9</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void *</type>
      <name>GetData_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1JointConcept.html</anchorfile>
      <anchor>a4beffab5c5759b2fe68d8d571412c2dc</anchor>
      <arglist>() noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TypeID</type>
      <name>GetType_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1JointConcept.html</anchorfile>
      <anchor>aab07537ebafbba90f3f2930e8ebe7c6f</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>InitVelocity_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1JointConcept.html</anchorfile>
      <anchor>a81bbf318bc5b407681147d88e8742061</anchor>
      <arglist>(const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>IsEqual_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1JointConcept.html</anchorfile>
      <anchor>a55a5237798d1f0d1c6081e3792b30ea7</anchor>
      <arglist>(const JointConcept &amp;other) const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>ShiftOrigin_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1JointConcept.html</anchorfile>
      <anchor>aec6970d4720cf2cb6c15e3dd3c9e4ec2</anchor>
      <arglist>(const Length2 &amp;value) noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>SolvePosition_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1JointConcept.html</anchorfile>
      <anchor>a6a71209784aeb4505ce58b6b78f01304</anchor>
      <arglist>(const Span&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>SolveVelocity_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1JointConcept.html</anchorfile>
      <anchor>ae014f8539baeb331c6df0edb9f99f5f1</anchor>
      <arglist>(const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::JointConf</name>
    <filename>structplayrho_1_1d2_1_1JointConf.html</filename>
    <member kind="variable">
      <type>BodyID</type>
      <name>bodyA</name>
      <anchorfile>structplayrho_1_1d2_1_1JointConf.html</anchorfile>
      <anchor>a9363d310f4854dcac38ad3849cbcc58b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BodyID</type>
      <name>bodyB</name>
      <anchorfile>structplayrho_1_1d2_1_1JointConf.html</anchorfile>
      <anchor>aa97b967e6f53d41ea52b1af0631e6ea4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>collideConnected</name>
      <anchorfile>structplayrho_1_1d2_1_1JointConf.html</anchorfile>
      <anchor>aaa7f7c919649416cb14a4abb8deacc33</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>structplayrho_1_1d2_1_1JointConf.html</anchorfile>
      <anchor>aaae24e0e3eadefda8d4145490e1c49ab</anchor>
      <arglist>(JointConf &amp;def, const Joint &amp;joint) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::detail::JointModel</name>
    <filename>structplayrho_1_1d2_1_1detail_1_1JointModel.html</filename>
    <templarg></templarg>
    <base>playrho::d2::detail::JointConcept</base>
    <member kind="typedef">
      <type>T</type>
      <name>data_type</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1JointModel.html</anchorfile>
      <anchor>a713351f1b38760a32289e1b295c8c60e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JointModel</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1JointModel.html</anchorfile>
      <anchor>afaef6d5dbdede9bb8ca8ba46c473592e</anchor>
      <arglist>(U &amp;&amp;arg) noexcept(std::is_nothrow_constructible_v&lt; T, U &gt;)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; JointConcept &gt;</type>
      <name>Clone_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1JointModel.html</anchorfile>
      <anchor>a6c8ac7e0d15de1a1b2babcac25e317a2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>GetBodyA_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1JointModel.html</anchorfile>
      <anchor>a33a24b51f24f08075284e10a05dea33e</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>GetBodyB_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1JointModel.html</anchorfile>
      <anchor>af80c421d1231295461794a61d9081de3</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetCollideConnected_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1JointModel.html</anchorfile>
      <anchor>a71a85fd9f7faaab78c34c7952b16abe5</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>GetData_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1JointModel.html</anchorfile>
      <anchor>a284d7a6e260fb7702dd94efa92fc0c6e</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetData_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1JointModel.html</anchorfile>
      <anchor>a3fccd0ee8c929c9f2cdcfecfb7aae377</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>TypeID</type>
      <name>GetType_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1JointModel.html</anchorfile>
      <anchor>a54b99f6c7415a9943fbecddd75f98549</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1JointModel.html</anchorfile>
      <anchor>ac17ce822c09a09cb1dff22ae7200547b</anchor>
      <arglist>(const Span&lt; BodyConstraint &gt; &amp;bodies, const playrho::StepConf &amp;step, const ConstraintSolverConf &amp;conf) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEqual_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1JointModel.html</anchorfile>
      <anchor>a6c14c104fdd50b703a373b8bbea3c003</anchor>
      <arglist>(const JointConcept &amp;other) const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ShiftOrigin_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1JointModel.html</anchorfile>
      <anchor>a346677ef52ca176c8eaec7b5f209b8bb</anchor>
      <arglist>(const Length2 &amp;value) noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1JointModel.html</anchorfile>
      <anchor>a0410f5366614037bf09eec28b3c87adf</anchor>
      <arglist>(const Span&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1JointModel.html</anchorfile>
      <anchor>af8cb1886e613dfee5e7b7bcbc852512e</anchor>
      <arglist>(const Span&lt; BodyConstraint &gt; &amp;bodies, const playrho::StepConf &amp;step) override</arglist>
    </member>
    <member kind="variable">
      <type>data_type</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1JointModel.html</anchorfile>
      <anchor>a67a986d1963ba030d07a366c6d42a880</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::LengthError</name>
    <filename>classplayrho_1_1LengthError.html</filename>
  </compound>
  <compound kind="struct">
    <name>playrho::LengthIndexPair</name>
    <filename>structplayrho_1_1LengthIndexPair.html</filename>
    <member kind="variable">
      <type>Length</type>
      <name>distance</name>
      <anchorfile>structplayrho_1_1LengthIndexPair.html</anchorfile>
      <anchor>ae536eb1885cee2b803e82e8171ab9eb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexPair</type>
      <name>indices</name>
      <anchorfile>structplayrho_1_1LengthIndexPair.html</anchorfile>
      <anchor>ad6a89b69c4a84810b16b3be86f74e6b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::LengthIndices</name>
    <filename>structplayrho_1_1detail_1_1LengthIndices.html</filename>
    <templarg>N</templarg>
    <member kind="variable">
      <type>Length</type>
      <name>distance</name>
      <anchorfile>structplayrho_1_1detail_1_1LengthIndices.html</anchorfile>
      <anchor>ae65542d848e941bbadd0e87514161a72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VertexCounterArray&lt; N &gt;</type>
      <name>indices</name>
      <anchorfile>structplayrho_1_1detail_1_1LengthIndices.html</anchorfile>
      <anchor>ac0afe75cf5e5314e21346c52ca71209e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::LexicographicalGreater</name>
    <filename>structplayrho_1_1LexicographicalGreater.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structplayrho_1_1LexicographicalGreater.html</anchorfile>
      <anchor>a142460798ed7eb318edc48a364b3a05a</anchor>
      <arglist>(const T &amp;lhs, const T &amp;rhs) const -&gt; decltype(std::lexicographical_compare(begin(lhs), end(lhs), begin(rhs), end(rhs)), true)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::LexicographicalGreaterEqual</name>
    <filename>structplayrho_1_1LexicographicalGreaterEqual.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structplayrho_1_1LexicographicalGreaterEqual.html</anchorfile>
      <anchor>ac7eae0a645979897959a019499732ab8</anchor>
      <arglist>(const T &amp;lhs, const T &amp;rhs) const -&gt; decltype(std::mismatch(begin(lhs), end(lhs), begin(rhs), end(rhs)), true)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::LexicographicalLess</name>
    <filename>structplayrho_1_1LexicographicalLess.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structplayrho_1_1LexicographicalLess.html</anchorfile>
      <anchor>a7179f5ea723e62951331832acb14c789</anchor>
      <arglist>(const T &amp;lhs, const T &amp;rhs) const -&gt; decltype(std::lexicographical_compare(begin(lhs), end(lhs), begin(rhs), end(rhs)), true)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::LexicographicalLessEqual</name>
    <filename>structplayrho_1_1LexicographicalLessEqual.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structplayrho_1_1LexicographicalLessEqual.html</anchorfile>
      <anchor>a25e92656df8ff6e345af763f57da13c1</anchor>
      <arglist>(const T &amp;lhs, const T &amp;rhs) const -&gt; decltype(std::mismatch(begin(lhs), end(lhs), begin(rhs), end(rhs)), true)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::Manifold</name>
    <filename>classplayrho_1_1d2_1_1Manifold.html</filename>
    <class kind="struct">playrho::d2::Manifold::Conf</class>
    <class kind="struct">playrho::d2::Manifold::Point</class>
    <member kind="typedef">
      <type>ContactFeature::Index</type>
      <name>CfIndex</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>abfa05cdcf8c1ea283a03ad70e9ae0543</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ContactFeature::Type</type>
      <name>CfType</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>acf4b47d8ef7fa8d2267b055934cec2d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_circles</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a7ff238fab84e4d9dc478205840bd2b4aa404a7aad615dac34bb439a4419bb603d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_faceA</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a7ff238fab84e4d9dc478205840bd2b4aa8553bfcf72ca701046534f9db05a698a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_faceB</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a7ff238fab84e4d9dc478205840bd2b4aa0aab1f9c4679f8d2ff978e5fe28a2e5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_unset</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a7ff238fab84e4d9dc478205840bd2b4aab0b6bab8f299c068c058ad66d1ada97b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const_t&lt; decltype(MaxManifoldPoints)&gt;</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>ae524c7d0bb1f9596dac79dc02e2e4cf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a7ff238fab84e4d9dc478205840bd2b4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_unset</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a7ff238fab84e4d9dc478205840bd2b4aab0b6bab8f299c068c058ad66d1ada97b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_circles</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a7ff238fab84e4d9dc478205840bd2b4aa404a7aad615dac34bb439a4419bb603d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_faceA</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a7ff238fab84e4d9dc478205840bd2b4aa8553bfcf72ca701046534f9db05a698a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_faceB</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a7ff238fab84e4d9dc478205840bd2b4aa0aab1f9c4679f8d2ff978e5fe28a2e5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Manifold</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a27050de13d19927176e1ab48f8218ecd</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>aa6c70b3594ef5e5e2e9816986614f50b</anchor>
      <arglist>(CfType type, CfIndex index, const Length2 &amp;point) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a1399ecf9d6951ca8b72dd34dc66d1e75</anchor>
      <arglist>(const Point &amp;mp) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ContactFeature</type>
      <name>GetContactFeature</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>ab49c80c7a89c0e139dbd11689152d79b</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetContactImpulses</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>aff93d957a2f35dab912e770093de9ede</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec</type>
      <name>GetLocalNormal</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a75f5e3327c38c904dd6f52d3420e1378</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length2</type>
      <name>GetLocalPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>aad25a11b72fa21c6dc6e36743baddc19</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length2</type>
      <name>GetOpposingPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a7cb046e3526a6dff59a1b246cf87fba0</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Point &amp;</type>
      <name>GetPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>afc69f25e15e201ca7db3fd75e9c04ac3</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>GetPointCount</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a7a9bbf036b63bcd70d6758a0ac571314</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Type</type>
      <name>GetType</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a39775ff69570500f48db1f298c24dee1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetContactImpulses</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a45d09b6cf282908abdedd766cc1ade13</anchor>
      <arglist>(size_type index, const Momentum2 &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPointImpulses</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a477022edb23b761024a659e533098047</anchor>
      <arglist>(size_type index, Momentum n, Momentum t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Manifold</type>
      <name>GetForCircles</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a260377ca8604e6f75628a93260bbb7a1</anchor>
      <arglist>(const Length2 &amp;vA, CfIndex iA, const Length2 &amp;vB, CfIndex iB) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Manifold</type>
      <name>GetForFaceA</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a6ee298944be0125138099f4195091a63</anchor>
      <arglist>(const UnitVec &amp;ln, const Length2 &amp;lp, const Point &amp;mp1) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Manifold</type>
      <name>GetForFaceA</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>af7956978447d880352cc681c909624ec</anchor>
      <arglist>(const UnitVec &amp;ln, const Length2 &amp;lp, const Point &amp;mp1, const Point &amp;mp2) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Manifold</type>
      <name>GetForFaceA</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a1d5a205b66a2a7d779a2f9e8ae20caf4</anchor>
      <arglist>(const UnitVec &amp;na, CfIndex ia, const Length2 &amp;pa) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Manifold</type>
      <name>GetForFaceA</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>aeafff29ad140feb77e4d60889fb2d603</anchor>
      <arglist>(const UnitVec &amp;na, CfIndex ia, const Length2 &amp;pa, CfType tb0, CfIndex ib0, const Length2 &amp;pb0) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Manifold</type>
      <name>GetForFaceA</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>aebce892aee9aef85d0a67284577d849a</anchor>
      <arglist>(const UnitVec &amp;na, CfIndex ia, const Length2 &amp;pa, CfType tb0, CfIndex ib0, const Length2 &amp;pb0, CfType tb1, CfIndex ib1, const Length2 &amp;pb1) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Manifold</type>
      <name>GetForFaceA</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a2983d9cad100cf689cc947b5fd01fa74</anchor>
      <arglist>(const UnitVec &amp;normalA, const Length2 &amp;faceA) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Manifold</type>
      <name>GetForFaceB</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a997e50619309b590bf0a530cf95d85e6</anchor>
      <arglist>(const UnitVec &amp;ln, const Length2 &amp;lp) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Manifold</type>
      <name>GetForFaceB</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a089e769993ded4c29e0363cf48f3d0e8</anchor>
      <arglist>(const UnitVec &amp;ln, const Length2 &amp;lp, const Point &amp;mp1) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Manifold</type>
      <name>GetForFaceB</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a4e44ade02f861d5737338ba6d3b3ffe3</anchor>
      <arglist>(const UnitVec &amp;ln, const Length2 &amp;lp, const Point &amp;mp1, const Point &amp;mp2) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Manifold</type>
      <name>GetForFaceB</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a913e32f0fa85929c0bdd9225792110cf</anchor>
      <arglist>(const UnitVec &amp;nb, CfIndex ib, const Length2 &amp;pb) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Manifold</type>
      <name>GetForFaceB</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>ace47959b08efebb3719d1d9c11ca2057</anchor>
      <arglist>(const UnitVec &amp;nb, CfIndex ib, const Length2 &amp;pb, CfType ta0, CfIndex ia0, const Length2 &amp;pa0) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Manifold</type>
      <name>GetForFaceB</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>aaaf23fa1e8f5ee47c493b66af932c02e</anchor>
      <arglist>(const UnitVec &amp;nb, CfIndex ib, const Length2 &amp;pb, CfType ta0, CfIndex ia0, const Length2 &amp;pa0, CfType ta1, CfIndex ia1, const Length2 &amp;pa1) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Manifold</type>
      <name>CollideShapes</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>ac0e1be38c27b7604ad6e0eb3394335a9</anchor>
      <arglist>(const DistanceProxy &amp;shapeA, const Transformation &amp;xfA, const DistanceProxy &amp;shapeB, const Transformation &amp;xfB, const Manifold::Conf &amp;conf=GetDefaultManifoldConf())</arglist>
    </member>
    <member kind="function">
      <type>WorldManifold</type>
      <name>GetWorldManifold</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>abfa5a1b2eb9eee01c8705a2025530385</anchor>
      <arglist>(const Manifold &amp;manifold, const Transformation &amp;xfA, Length radiusA, const Transformation &amp;xfB, Length radiusB)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a2a68b2ee4602e8bcf4c9376e69ffdcd7</anchor>
      <arglist>(const d2::Manifold &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>ab7261adb2e0ccb0b3db58fc194d50614</anchor>
      <arglist>(const Manifold &amp;lhs, const Manifold &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a18bbc8e12d21c4ae260d0bb333e0eed5</anchor>
      <arglist>(const Manifold &amp;lhs, const Manifold &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::MassData</name>
    <filename>structplayrho_1_1detail_1_1MassData.html</filename>
    <templarg>N</templarg>
    <member kind="variable">
      <type>Vector&lt; Length, N &gt;</type>
      <name>center</name>
      <anchorfile>structplayrho_1_1detail_1_1MassData.html</anchorfile>
      <anchor>a95c432524989b39cbb1574548f53bf61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; RotInertia &gt;</type>
      <name>I</name>
      <anchorfile>structplayrho_1_1detail_1_1MassData.html</anchorfile>
      <anchor>abc772e841838fddea807268d27dddb55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Mass &gt;</type>
      <name>mass</name>
      <anchorfile>structplayrho_1_1detail_1_1MassData.html</anchorfile>
      <anchor>ad30925834c09f1179332797ce4ce4f47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultI</name>
      <anchorfile>structplayrho_1_1detail_1_1MassData.html</anchorfile>
      <anchor>afeaf85d49a0262ba74153915dcbeb9db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultMass</name>
      <anchorfile>structplayrho_1_1detail_1_1MassData.html</anchorfile>
      <anchor>a8e6404cc7ee77c005b0f26e0676c1830</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1detail_1_1MassData.html</anchorfile>
      <anchor>a64050b6fc27058d98f7e504d4a3eacab</anchor>
      <arglist>(MassData&lt; N &gt; lhs, MassData&lt; N &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1detail_1_1MassData.html</anchorfile>
      <anchor>af4a0970bf5a0f7b37eeb21d6301a75e2</anchor>
      <arglist>(MassData&lt; N &gt; lhs, MassData&lt; N &gt; rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::pmr::memory_resource</name>
    <filename>classplayrho_1_1pmr_1_1memory__resource.html</filename>
    <member kind="function">
      <type></type>
      <name>memory_resource</name>
      <anchorfile>classplayrho_1_1pmr_1_1memory__resource.html</anchorfile>
      <anchor>a554ccd149def86819360675268287877</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>memory_resource</name>
      <anchorfile>classplayrho_1_1pmr_1_1memory__resource.html</anchorfile>
      <anchor>ac71cd118c8f150dff58eee5c6763d7f4</anchor>
      <arglist>(const memory_resource &amp;)=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~memory_resource</name>
      <anchorfile>classplayrho_1_1pmr_1_1memory__resource.html</anchorfile>
      <anchor>a82338a1863dd16237e06c925451841f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>allocate</name>
      <anchorfile>classplayrho_1_1pmr_1_1memory__resource.html</anchorfile>
      <anchor>a31269d72f2f126fb8a5fe65c176395cc</anchor>
      <arglist>(std::size_t bytes, std::size_t alignment=alignof(std::max_align_t))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocate</name>
      <anchorfile>classplayrho_1_1pmr_1_1memory__resource.html</anchorfile>
      <anchor>af3a11eacdd801495b0038ccf782ed71a</anchor>
      <arglist>(void *p, std::size_t bytes, std::size_t alignment=alignof(std::max_align_t))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_equal</name>
      <anchorfile>classplayrho_1_1pmr_1_1memory__resource.html</anchorfile>
      <anchor>a5052cfb4e4da899bc75d518b7338ccce</anchor>
      <arglist>(const memory_resource &amp;other) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::MotorJointConf</name>
    <filename>structplayrho_1_1d2_1_1MotorJointConf.html</filename>
    <base>JointBuilder&lt; MotorJointConf &gt;</base>
    <member kind="typedef">
      <type>JointBuilder&lt; MotorJointConf &gt;</type>
      <name>super</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a9905449d772cb2f70edb5a7acea4b8e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>MotorJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a71b7d760b0cda7e5596311df2a0e5d04</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MotorJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a85d3f001b19b2a9bc5ba2a389fda0239</anchor>
      <arglist>(BodyID bA, BodyID bB, const Length2 &amp;lo=Length2{}, Angle ao=0_deg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseAngularOffset</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>aa035716c032de08b3ec89db7d4e21a54</anchor>
      <arglist>(Angle v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseCorrectionFactor</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a0d13e109e0d61ee76169dd3fbda75725</anchor>
      <arglist>(Real v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseLinearOffset</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a05dbc9204e31da94e4fc4da8567824b2</anchor>
      <arglist>(const Length2 &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseMaxForce</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>aa701b1b478a7102f74c8e3ea09dc2125</anchor>
      <arglist>(NonNegative&lt; Force &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseMaxTorque</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>adefaf8d5f0a45fa0a3ffc2ece20101c0</anchor>
      <arglist>(NonNegative&lt; Torque &gt; v) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Angle</type>
      <name>angularError</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>ae8f686c8a36e9e90d221bede7929a885</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AngularMomentum</type>
      <name>angularImpulse</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a12c448ac1def55001f7531ebaab6d4c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RotInertia</type>
      <name>angularMass</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a295c8c1e683042afd71a9eeab26604f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Angle</type>
      <name>angularOffset</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>aece1946de51fb38a8720af6b22c8abe0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>correctionFactor</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a32ca8e0a69670cf39621f908965d1a01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>linearError</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>ae0605aebaae32332fd11633606328568</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum2</type>
      <name>linearImpulse</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a455d814b008d6a30c6f14c7bd25f9801</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Mass22</type>
      <name>linearMass</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a8bb05be5e15cc16f82afb04b17cdbbb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>linearOffset</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a7f1eb7d88f969a24a4c3f33f4bfa9e04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Force &gt;</type>
      <name>maxForce</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>ae72dd67a4e667a4543e9b58bc5279a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Torque &gt;</type>
      <name>maxTorque</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>ac9a7dcf98f31d2247acbb35332520396</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>rA</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>ab23486d7f6ef04ced0f78c6e1fe8f81f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>rB</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a611619fe88143bb25227d4939349865f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultCorrectionFactor</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a58fc1076f2baa74a63296295467be9ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultMaxForce</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>aafdd5f4c63fd4dc31d517a903dba5901</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultMaxTorque</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>acb5232db5d2a71dd0fda06d54313a6b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetAngularError</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>ac3f517e88d5b384e337d3322881c5886</anchor>
      <arglist>(const MotorJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetAngularOffset</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a75db6ad844d4be5361364e49907b24f8</anchor>
      <arglist>(const MotorJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetCorrectionFactor</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>aa5e4489f264227f6c20010c1838248db</anchor>
      <arglist>(const MotorJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLinearError</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>ab1e80b7fb2a127c7bef5388890d3ee0e</anchor>
      <arglist>(const MotorJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLinearOffset</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a53e7afd4eb1bc197703f3d68c4ffd934</anchor>
      <arglist>(const MotorJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLocalAnchorA</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a6bff2eef6c3ab00e21a7a497dfa69b02</anchor>
      <arglist>(const MotorJointConf &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLocalAnchorB</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>aff7518dbaba68503c8534f3aa1bc1baf</anchor>
      <arglist>(const MotorJointConf &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetMaxForce</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a2316866330d122410cad54477dea24c9</anchor>
      <arglist>(const MotorJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetMaxTorque</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>addea3c1c41374755038085922785f96d</anchor>
      <arglist>(const MotorJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a2b683394550bdac7d8ff211bf659cc79</anchor>
      <arglist>(MotorJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetAngularOffset</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>ab185fa3719432e9026a44e602279f8d1</anchor>
      <arglist>(MotorJointConf &amp;object, Angle value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetCorrectionFactor</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a5f373e05ffdf359e2f995aec4e5489c0</anchor>
      <arglist>(MotorJointConf &amp;object, Real value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetLinearOffset</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a4ad5fe5276577c9a253a776fd803a2c2</anchor>
      <arglist>(MotorJointConf &amp;object, const Length2 &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetMaxForce</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a309119086874940563a7e3a4b91c9cc2</anchor>
      <arglist>(MotorJointConf &amp;object, NonNegative&lt; Force &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetMaxTorque</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a740454a9bdb11a84bfc34bad37908030</anchor>
      <arglist>(MotorJointConf &amp;object, NonNegative&lt; Torque &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>ShiftOrigin</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a7b1aabf4a880937e88e2e3af6386e77f</anchor>
      <arglist>(MotorJointConf &amp;, const Length2 &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a9fc51d3515a8f14a6076b773637e31e2</anchor>
      <arglist>(const MotorJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a9fbbab76d642be0211f8c76334ccbe0f</anchor>
      <arglist>(MotorJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::MovementConf</name>
    <filename>structplayrho_1_1MovementConf.html</filename>
    <member kind="variable">
      <type>Angle</type>
      <name>maxRotation</name>
      <anchorfile>structplayrho_1_1MovementConf.html</anchorfile>
      <anchor>a2021570112ff2beb19a7ce9ea96d53b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>maxTranslation</name>
      <anchorfile>structplayrho_1_1MovementConf.html</anchorfile>
      <anchor>aa685b405a15189fe13d7982846f83dc6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::MultiShapeConf</name>
    <filename>structplayrho_1_1d2_1_1MultiShapeConf.html</filename>
    <base>ShapeBuilder&lt; MultiShapeConf &gt;</base>
    <member kind="function">
      <type>MultiShapeConf &amp;</type>
      <name>AddConvexHull</name>
      <anchorfile>structplayrho_1_1d2_1_1MultiShapeConf.html</anchorfile>
      <anchor>a662aabe74cf1651a2ff2241e2b337c08</anchor>
      <arglist>(const VertexSet &amp;pointSet, NonNegative&lt; Length &gt; vertexRadius=GetDefaultVertexRadius())</arglist>
    </member>
    <member kind="function">
      <type>MultiShapeConf &amp;</type>
      <name>Rotate</name>
      <anchorfile>structplayrho_1_1d2_1_1MultiShapeConf.html</anchorfile>
      <anchor>ae9fbaced81cf906dd3d8eb0a3bfb79b2</anchor>
      <arglist>(const UnitVec &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>MultiShapeConf &amp;</type>
      <name>Scale</name>
      <anchorfile>structplayrho_1_1d2_1_1MultiShapeConf.html</anchorfile>
      <anchor>aa2f58ea829a5202d4c6e5b6bd02a5265</anchor>
      <arglist>(const Vec2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>MultiShapeConf &amp;</type>
      <name>Translate</name>
      <anchorfile>structplayrho_1_1d2_1_1MultiShapeConf.html</anchorfile>
      <anchor>a45f999de0d4c1ef8462c1b8b5660cb31</anchor>
      <arglist>(const Length2 &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MultiShapeConf</type>
      <name>GetDefaultConf</name>
      <anchorfile>structplayrho_1_1d2_1_1MultiShapeConf.html</anchorfile>
      <anchor>afb36a83892bfd4c7f2afe628ccad09f4</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr NonNegative&lt; Length &gt;</type>
      <name>GetDefaultVertexRadius</name>
      <anchorfile>structplayrho_1_1d2_1_1MultiShapeConf.html</anchorfile>
      <anchor>a3cb8f8d56c034235091425bdf4fb7288</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; ConvexHull &gt;</type>
      <name>children</name>
      <anchorfile>structplayrho_1_1d2_1_1MultiShapeConf.html</anchorfile>
      <anchor>a8ce9bba8e17bdb910b906fdb9220e124</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultVertexRadius</name>
      <anchorfile>structplayrho_1_1d2_1_1MultiShapeConf.html</anchorfile>
      <anchor>ab278f31312c14c0bb5a59e89735ca5bd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::NegativeChecker</name>
    <filename>structplayrho_1_1detail_1_1NegativeChecker.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structplayrho_1_1detail_1_1NegativeChecker.html</anchorfile>
      <anchor>afbbeb4b2b4d4306b206452ab8cf59187</anchor>
      <arglist>(const T &amp;v) const noexcept -&gt; decltype(v&lt; static_cast&lt; T &gt;(0), static_cast&lt; const char * &gt;(nullptr))</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::NgonWithFwdNormals</name>
    <filename>classplayrho_1_1d2_1_1NgonWithFwdNormals.html</filename>
    <templarg>N</templarg>
    <member kind="function">
      <type>constexpr</type>
      <name>NgonWithFwdNormals</name>
      <anchorfile>classplayrho_1_1d2_1_1NgonWithFwdNormals.html</anchorfile>
      <anchor>a1075e14267408861869a8c9faf1674b4</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>NgonWithFwdNormals</name>
      <anchorfile>classplayrho_1_1d2_1_1NgonWithFwdNormals.html</anchorfile>
      <anchor>a3607dd6eb76813260ecc56c61059e1f2</anchor>
      <arglist>(const std::array&lt; Length2, N &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetNormals</name>
      <anchorfile>classplayrho_1_1d2_1_1NgonWithFwdNormals.html</anchorfile>
      <anchor>a9bf085efd398881dcb590512b747275f</anchor>
      <arglist>() const noexcept -&gt; decltype((m_normals))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetVertices</name>
      <anchorfile>classplayrho_1_1d2_1_1NgonWithFwdNormals.html</anchorfile>
      <anchor>a73852d763bdc928b7be9a43bbe93aeb0</anchor>
      <arglist>() const noexcept -&gt; decltype((m_vertices))</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1d2_1_1NgonWithFwdNormals.html</anchorfile>
      <anchor>abfaef6d0e201db6b0e84916b4fc39d38</anchor>
      <arglist>(const NgonWithFwdNormals &amp;lhs, const NgonWithFwdNormals &amp;rhs) noexcept -&gt; bool</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NgonWithFwdNormals&lt; 2 &gt;</name>
    <filename>classplayrho_1_1d2_1_1NgonWithFwdNormals.html</filename>
    <member kind="function">
      <type>constexpr</type>
      <name>NgonWithFwdNormals</name>
      <anchorfile>classplayrho_1_1d2_1_1NgonWithFwdNormals.html</anchorfile>
      <anchor>a1075e14267408861869a8c9faf1674b4</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>NgonWithFwdNormals</name>
      <anchorfile>classplayrho_1_1d2_1_1NgonWithFwdNormals.html</anchorfile>
      <anchor>a3607dd6eb76813260ecc56c61059e1f2</anchor>
      <arglist>(const std::array&lt; Length2, N &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetNormals</name>
      <anchorfile>classplayrho_1_1d2_1_1NgonWithFwdNormals.html</anchorfile>
      <anchor>a9bf085efd398881dcb590512b747275f</anchor>
      <arglist>() const noexcept -&gt; decltype((m_normals))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetVertices</name>
      <anchorfile>classplayrho_1_1d2_1_1NgonWithFwdNormals.html</anchorfile>
      <anchor>a73852d763bdc928b7be9a43bbe93aeb0</anchor>
      <arglist>() const noexcept -&gt; decltype((m_vertices))</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1d2_1_1NgonWithFwdNormals.html</anchorfile>
      <anchor>abfaef6d0e201db6b0e84916b4fc39d38</anchor>
      <arglist>(const NgonWithFwdNormals &amp;lhs, const NgonWithFwdNormals &amp;rhs) noexcept -&gt; bool</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::NgonWithFwdNormals&lt; static_cast&lt; std::size_t &gt;(-1)&gt;</name>
    <filename>classplayrho_1_1d2_1_1NgonWithFwdNormals_3_01static__cast_3_01std_1_1size__t_01_4_07-1_08_4.html</filename>
    <member kind="function">
      <type></type>
      <name>NgonWithFwdNormals</name>
      <anchorfile>classplayrho_1_1d2_1_1NgonWithFwdNormals_3_01static__cast_3_01std_1_1size__t_01_4_07-1_08_4.html</anchorfile>
      <anchor>a9d0d4bcd2386197f6b810005aa371446</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NgonWithFwdNormals</name>
      <anchorfile>classplayrho_1_1d2_1_1NgonWithFwdNormals_3_01static__cast_3_01std_1_1size__t_01_4_07-1_08_4.html</anchorfile>
      <anchor>a5689caa829d485731a81289e9856ca4a</anchor>
      <arglist>(std::vector&lt; Length2 &gt; vertices)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetNormals</name>
      <anchorfile>classplayrho_1_1d2_1_1NgonWithFwdNormals_3_01static__cast_3_01std_1_1size__t_01_4_07-1_08_4.html</anchorfile>
      <anchor>a2c6f04a029564daa9c319f55781772f6</anchor>
      <arglist>() const noexcept -&gt; decltype((m_normals))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetVertices</name>
      <anchorfile>classplayrho_1_1d2_1_1NgonWithFwdNormals_3_01static__cast_3_01std_1_1size__t_01_4_07-1_08_4.html</anchorfile>
      <anchor>ad4dd43257ec7eac5856c5a3758336f8f</anchor>
      <arglist>() const noexcept -&gt; decltype((m_vertices))</arglist>
    </member>
    <member kind="friend">
      <type>friend auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1d2_1_1NgonWithFwdNormals_3_01static__cast_3_01std_1_1size__t_01_4_07-1_08_4.html</anchorfile>
      <anchor>a61b2b7981f993f96fd3b72aa073f5d8f</anchor>
      <arglist>(const NgonWithFwdNormals &amp;lhs, const NgonWithFwdNormals &amp;rhs) noexcept -&gt; bool</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::nonesuch</name>
    <filename>structplayrho_1_1detail_1_1nonesuch.html</filename>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::NonNegativeChecker</name>
    <filename>structplayrho_1_1detail_1_1NonNegativeChecker.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structplayrho_1_1detail_1_1NonNegativeChecker.html</anchorfile>
      <anchor>a09e2e222eadab7bf2fde25cd239384c3</anchor>
      <arglist>() const noexcept -&gt; decltype(T{})</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structplayrho_1_1detail_1_1NonNegativeChecker.html</anchorfile>
      <anchor>a8ab21601219ba53edf345ad626e741b6</anchor>
      <arglist>(const T &amp;v) const noexcept -&gt; decltype(v &gt;=T{}, static_cast&lt; const char * &gt;(nullptr))</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::NonPositiveChecker</name>
    <filename>structplayrho_1_1detail_1_1NonPositiveChecker.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structplayrho_1_1detail_1_1NonPositiveChecker.html</anchorfile>
      <anchor>a5920bf6445c03b502b7b133462f3b4ca</anchor>
      <arglist>() const noexcept -&gt; decltype(T{})</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structplayrho_1_1detail_1_1NonPositiveChecker.html</anchorfile>
      <anchor>a15a602f41a96dea44c07eb22680dce9c</anchor>
      <arglist>(const T &amp;v) const noexcept -&gt; decltype(v&lt;=static_cast&lt; T &gt;(0), static_cast&lt; const char * &gt;(nullptr))</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::NonZeroChecker</name>
    <filename>structplayrho_1_1detail_1_1NonZeroChecker.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structplayrho_1_1detail_1_1NonZeroChecker.html</anchorfile>
      <anchor>a4de0deb1009d07679693a40e9ec25859</anchor>
      <arglist>(const T &amp;v) const noexcept -&gt; decltype(!(v !=static_cast&lt; T &gt;(0)), static_cast&lt; const char * &gt;(nullptr))</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::NoOpChecker</name>
    <filename>structplayrho_1_1detail_1_1NoOpChecker.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structplayrho_1_1detail_1_1NoOpChecker.html</anchorfile>
      <anchor>aa21bc4d18971eb9ac35d172231879ee2</anchor>
      <arglist>() noexcept -&gt; decltype(T())</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structplayrho_1_1detail_1_1NoOpChecker.html</anchorfile>
      <anchor>a6d4ec425569538783b6ec47814bcfd52</anchor>
      <arglist>(const T &amp;) noexcept -&gt; const char *</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::numeric_limits&lt;::playrho::Positive&lt; T &gt; &gt;</name>
    <filename>classstd_1_1numeric__limits_3_1_1playrho_1_1Positive_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>denorm_min</name>
      <anchorfile>classstd_1_1numeric__limits_3_1_1playrho_1_1Positive_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a07bbec90de6a10f60b41cc3391dcd372</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>epsilon</name>
      <anchorfile>classstd_1_1numeric__limits_3_1_1playrho_1_1Positive_3_01T_01_4_01_4.html</anchorfile>
      <anchor>ac25546cc59149ab07ec3c9cf3ca95448</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>infinity</name>
      <anchorfile>classstd_1_1numeric__limits_3_1_1playrho_1_1Positive_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a440819e334e233c5be91425cbec8e765</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>lowest</name>
      <anchorfile>classstd_1_1numeric__limits_3_1_1playrho_1_1Positive_3_01T_01_4_01_4.html</anchorfile>
      <anchor>ace745a5d6eb5e84ffc6a9a7fad6a776b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>max</name>
      <anchorfile>classstd_1_1numeric__limits_3_1_1playrho_1_1Positive_3_01T_01_4_01_4.html</anchorfile>
      <anchor>ae34b8090f77e4c32f292498014f86342</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>min</name>
      <anchorfile>classstd_1_1numeric__limits_3_1_1playrho_1_1Positive_3_01T_01_4_01_4.html</anchorfile>
      <anchor>ae70d85f362619f7a04d7de82665cae4d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>round_error</name>
      <anchorfile>classstd_1_1numeric__limits_3_1_1playrho_1_1Positive_3_01T_01_4_01_4.html</anchorfile>
      <anchor>aaca8dbe9ac450f3deb4addcf24ddc03d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>digits</name>
      <anchorfile>classstd_1_1numeric__limits_3_1_1playrho_1_1Positive_3_01T_01_4_01_4.html</anchorfile>
      <anchor>afad2fe52261c4545773fcbdd54ae1d02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>digits10</name>
      <anchorfile>classstd_1_1numeric__limits_3_1_1playrho_1_1Positive_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a19e6a03eafbaf98ee3bdf95174665717</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr float_denorm_style</type>
      <name>has_denorm</name>
      <anchorfile>classstd_1_1numeric__limits_3_1_1playrho_1_1Positive_3_01T_01_4_01_4.html</anchorfile>
      <anchor>af092cc0403760642577916c51701629e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>has_denorm_loss</name>
      <anchorfile>classstd_1_1numeric__limits_3_1_1playrho_1_1Positive_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a259916c065f92cf53c18d35959d2c186</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>has_infinity</name>
      <anchorfile>classstd_1_1numeric__limits_3_1_1playrho_1_1Positive_3_01T_01_4_01_4.html</anchorfile>
      <anchor>afe680b523e078c8b16398f45b1352dda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>has_quiet_NaN</name>
      <anchorfile>classstd_1_1numeric__limits_3_1_1playrho_1_1Positive_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a5f1c888fbd9818cf05e623210a921a85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>has_signaling_NaN</name>
      <anchorfile>classstd_1_1numeric__limits_3_1_1playrho_1_1Positive_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a033db0bb13d7c0dcc0b9d9f2a72d224a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>is_bounded</name>
      <anchorfile>classstd_1_1numeric__limits_3_1_1playrho_1_1Positive_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a2420be220d6f7b0a0350434a60f7a5ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>is_exact</name>
      <anchorfile>classstd_1_1numeric__limits_3_1_1playrho_1_1Positive_3_01T_01_4_01_4.html</anchorfile>
      <anchor>afa066a096ba36961ed09bd92cefbd88e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>is_iec559</name>
      <anchorfile>classstd_1_1numeric__limits_3_1_1playrho_1_1Positive_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a57d2d418e693c5cd3e8217cebce58639</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>is_integer</name>
      <anchorfile>classstd_1_1numeric__limits_3_1_1playrho_1_1Positive_3_01T_01_4_01_4.html</anchorfile>
      <anchor>aeeeeb8b01d2ac1f655bd0236dca32f1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>is_modulo</name>
      <anchorfile>classstd_1_1numeric__limits_3_1_1playrho_1_1Positive_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a4a058fc063bc391aea6baf4a6e8d451b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>is_signed</name>
      <anchorfile>classstd_1_1numeric__limits_3_1_1playrho_1_1Positive_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a18ebb348e9263245d505d9f768970bd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>is_specialized</name>
      <anchorfile>classstd_1_1numeric__limits_3_1_1playrho_1_1Positive_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a7c0ba1b4fa7736f4d7fef24c8ad1a372</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>max_digits10</name>
      <anchorfile>classstd_1_1numeric__limits_3_1_1playrho_1_1Positive_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a7d181661ac9b156866bbdd0711084ee4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>max_exponent</name>
      <anchorfile>classstd_1_1numeric__limits_3_1_1playrho_1_1Positive_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a4a0153ffb9b01bfcb74299e33f5e9ced</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>max_exponent10</name>
      <anchorfile>classstd_1_1numeric__limits_3_1_1playrho_1_1Positive_3_01T_01_4_01_4.html</anchorfile>
      <anchor>aecf411d934cd25e51aafec6fb0fd418c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>min_exponent</name>
      <anchorfile>classstd_1_1numeric__limits_3_1_1playrho_1_1Positive_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a4d9a441c9640b702e4df0f65a5124372</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>min_exponent10</name>
      <anchorfile>classstd_1_1numeric__limits_3_1_1playrho_1_1Positive_3_01T_01_4_01_4.html</anchorfile>
      <anchor>af11c9425e4908fb301e53ad0f21d4077</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>radix</name>
      <anchorfile>classstd_1_1numeric__limits_3_1_1playrho_1_1Positive_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a71ef8b0c74bce189b7a4219c05554455</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr float_round_style</type>
      <name>round_style</name>
      <anchorfile>classstd_1_1numeric__limits_3_1_1playrho_1_1Positive_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a449cf086bf7b24834ff3fde81bc3b60c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>tinyness_before</name>
      <anchorfile>classstd_1_1numeric__limits_3_1_1playrho_1_1Positive_3_01T_01_4_01_4.html</anchorfile>
      <anchor>ad153b4817801fcb49a15937aee5b0acf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>traps</name>
      <anchorfile>classstd_1_1numeric__limits_3_1_1playrho_1_1Positive_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a9eceea73f55cafc28dc8a7b21bc5b878</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::ObjectPool</name>
    <filename>classplayrho_1_1ObjectPool.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::const_reference</type>
      <name>const_reference</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>aed87f86923cad9bc98e46e26fb707aec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::reference</type>
      <name>reference</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>aed01c819198c39c032d309fdd2cf8715</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::size_type</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a742671fa5cd85505be510a0dcea28026</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>afccb88f20f06ef4d2e8924f5f6816ab7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>Allocate</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a04d6b81c4e8284d598b3079f8d59a7d1</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>Allocate</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a3b64e5267b14f456429887414b4b471c</anchor>
      <arglist>(const value_type &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>at</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a081282fe41dc935e6b271ee055122269</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>at</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a806d7149b3226443b4e4a20182dbe695</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; value_type &gt;::const_iterator</type>
      <name>begin</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>aef288954755cb2f4000b0cf063dcdba7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; value_type &gt;::iterator</type>
      <name>begin</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a5b8b12c038617f24d5d5ce14615f7650</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a3c07cec69ef7c054e56feea080b1d2b6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const value_type *</type>
      <name>data</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>af250cf8a13a33a09b5428b6689ea3fa1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; value_type &gt;::const_iterator</type>
      <name>end</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a73e303031c655545ab6d823853df9175</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; value_type &gt;::iterator</type>
      <name>end</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a348dd2f37e6683b7a65fc8ca3b8b77b6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FindFree</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>acf85582d60a62b07c2289a2e27d047ff</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Free</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>ab425852cd76b4621e5e9b63a6726d7d8</anchor>
      <arglist>(size_type index)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>free_size</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>ad21b0179a2b158e6a49c74af81a2064f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>GetIndex</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a3bedb344c8a56f424080e74a2ce5bfa3</anchor>
      <arglist>(value_type *ptr) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>max_size</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a7aa7c0b3e5bcce16980135b1ef63df27</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>aee95793cfc2c8b6ff624ee21c8a0de68</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a8763c9f830aae380afdc7f9624e21e07</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>ab628282d5e98778b0893fe55130cf6f1</anchor>
      <arglist>(size_type value)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a34fdef49c5e2fbc21143437367d07798</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a609cc5602b186ce8db5d613d888d1034</anchor>
      <arglist>(const ObjectPool &amp;lhs, const ObjectPool &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a311afb2d776e8e69de0329af1b899c3a</anchor>
      <arglist>(const ObjectPool &amp;lhs, const ObjectPool &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ObjectPool&lt; BodyContactIDs &gt;</name>
    <filename>classplayrho_1_1ObjectPool.html</filename>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::const_reference</type>
      <name>const_reference</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>aed87f86923cad9bc98e46e26fb707aec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::reference</type>
      <name>reference</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>aed01c819198c39c032d309fdd2cf8715</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::size_type</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a742671fa5cd85505be510a0dcea28026</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BodyContactIDs</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>afccb88f20f06ef4d2e8924f5f6816ab7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>Allocate</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a04d6b81c4e8284d598b3079f8d59a7d1</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>Allocate</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a3b64e5267b14f456429887414b4b471c</anchor>
      <arglist>(const value_type &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>at</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a081282fe41dc935e6b271ee055122269</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>at</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a806d7149b3226443b4e4a20182dbe695</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; value_type &gt;::const_iterator</type>
      <name>begin</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>aef288954755cb2f4000b0cf063dcdba7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; value_type &gt;::iterator</type>
      <name>begin</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a5b8b12c038617f24d5d5ce14615f7650</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a3c07cec69ef7c054e56feea080b1d2b6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const value_type *</type>
      <name>data</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>af250cf8a13a33a09b5428b6689ea3fa1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; value_type &gt;::const_iterator</type>
      <name>end</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a73e303031c655545ab6d823853df9175</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; value_type &gt;::iterator</type>
      <name>end</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a348dd2f37e6683b7a65fc8ca3b8b77b6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FindFree</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>acf85582d60a62b07c2289a2e27d047ff</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Free</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>ab425852cd76b4621e5e9b63a6726d7d8</anchor>
      <arglist>(size_type index)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>free_size</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>ad21b0179a2b158e6a49c74af81a2064f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>GetIndex</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a3bedb344c8a56f424080e74a2ce5bfa3</anchor>
      <arglist>(value_type *ptr) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>max_size</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a7aa7c0b3e5bcce16980135b1ef63df27</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>aee95793cfc2c8b6ff624ee21c8a0de68</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a8763c9f830aae380afdc7f9624e21e07</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>ab628282d5e98778b0893fe55130cf6f1</anchor>
      <arglist>(size_type value)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a34fdef49c5e2fbc21143437367d07798</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a609cc5602b186ce8db5d613d888d1034</anchor>
      <arglist>(const ObjectPool &amp;lhs, const ObjectPool &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a311afb2d776e8e69de0329af1b899c3a</anchor>
      <arglist>(const ObjectPool &amp;lhs, const ObjectPool &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ObjectPool&lt; BodyJointIDs &gt;</name>
    <filename>classplayrho_1_1ObjectPool.html</filename>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::const_reference</type>
      <name>const_reference</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>aed87f86923cad9bc98e46e26fb707aec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::reference</type>
      <name>reference</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>aed01c819198c39c032d309fdd2cf8715</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::size_type</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a742671fa5cd85505be510a0dcea28026</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BodyJointIDs</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>afccb88f20f06ef4d2e8924f5f6816ab7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>Allocate</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a04d6b81c4e8284d598b3079f8d59a7d1</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>Allocate</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a3b64e5267b14f456429887414b4b471c</anchor>
      <arglist>(const value_type &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>at</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a081282fe41dc935e6b271ee055122269</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>at</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a806d7149b3226443b4e4a20182dbe695</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; value_type &gt;::const_iterator</type>
      <name>begin</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>aef288954755cb2f4000b0cf063dcdba7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; value_type &gt;::iterator</type>
      <name>begin</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a5b8b12c038617f24d5d5ce14615f7650</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a3c07cec69ef7c054e56feea080b1d2b6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const value_type *</type>
      <name>data</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>af250cf8a13a33a09b5428b6689ea3fa1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; value_type &gt;::const_iterator</type>
      <name>end</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a73e303031c655545ab6d823853df9175</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; value_type &gt;::iterator</type>
      <name>end</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a348dd2f37e6683b7a65fc8ca3b8b77b6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FindFree</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>acf85582d60a62b07c2289a2e27d047ff</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Free</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>ab425852cd76b4621e5e9b63a6726d7d8</anchor>
      <arglist>(size_type index)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>free_size</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>ad21b0179a2b158e6a49c74af81a2064f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>GetIndex</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a3bedb344c8a56f424080e74a2ce5bfa3</anchor>
      <arglist>(value_type *ptr) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>max_size</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a7aa7c0b3e5bcce16980135b1ef63df27</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>aee95793cfc2c8b6ff624ee21c8a0de68</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a8763c9f830aae380afdc7f9624e21e07</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>ab628282d5e98778b0893fe55130cf6f1</anchor>
      <arglist>(size_type value)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a34fdef49c5e2fbc21143437367d07798</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a609cc5602b186ce8db5d613d888d1034</anchor>
      <arglist>(const ObjectPool &amp;lhs, const ObjectPool &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a311afb2d776e8e69de0329af1b899c3a</anchor>
      <arglist>(const ObjectPool &amp;lhs, const ObjectPool &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ObjectPool&lt; playrho::Contact &gt;</name>
    <filename>classplayrho_1_1ObjectPool.html</filename>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::const_reference</type>
      <name>const_reference</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>aed87f86923cad9bc98e46e26fb707aec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::reference</type>
      <name>reference</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>aed01c819198c39c032d309fdd2cf8715</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::size_type</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a742671fa5cd85505be510a0dcea28026</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>playrho::Contact</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>afccb88f20f06ef4d2e8924f5f6816ab7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>Allocate</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a04d6b81c4e8284d598b3079f8d59a7d1</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>Allocate</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a3b64e5267b14f456429887414b4b471c</anchor>
      <arglist>(const value_type &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>at</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a081282fe41dc935e6b271ee055122269</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>at</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a806d7149b3226443b4e4a20182dbe695</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; value_type &gt;::const_iterator</type>
      <name>begin</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>aef288954755cb2f4000b0cf063dcdba7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; value_type &gt;::iterator</type>
      <name>begin</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a5b8b12c038617f24d5d5ce14615f7650</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a3c07cec69ef7c054e56feea080b1d2b6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const value_type *</type>
      <name>data</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>af250cf8a13a33a09b5428b6689ea3fa1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; value_type &gt;::const_iterator</type>
      <name>end</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a73e303031c655545ab6d823853df9175</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; value_type &gt;::iterator</type>
      <name>end</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a348dd2f37e6683b7a65fc8ca3b8b77b6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FindFree</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>acf85582d60a62b07c2289a2e27d047ff</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Free</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>ab425852cd76b4621e5e9b63a6726d7d8</anchor>
      <arglist>(size_type index)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>free_size</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>ad21b0179a2b158e6a49c74af81a2064f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>GetIndex</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a3bedb344c8a56f424080e74a2ce5bfa3</anchor>
      <arglist>(value_type *ptr) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>max_size</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a7aa7c0b3e5bcce16980135b1ef63df27</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>aee95793cfc2c8b6ff624ee21c8a0de68</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a8763c9f830aae380afdc7f9624e21e07</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>ab628282d5e98778b0893fe55130cf6f1</anchor>
      <arglist>(size_type value)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a34fdef49c5e2fbc21143437367d07798</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a609cc5602b186ce8db5d613d888d1034</anchor>
      <arglist>(const ObjectPool &amp;lhs, const ObjectPool &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a311afb2d776e8e69de0329af1b899c3a</anchor>
      <arglist>(const ObjectPool &amp;lhs, const ObjectPool &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ObjectPool&lt; playrho::d2::Body &gt;</name>
    <filename>classplayrho_1_1ObjectPool.html</filename>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::const_reference</type>
      <name>const_reference</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>aed87f86923cad9bc98e46e26fb707aec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::reference</type>
      <name>reference</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>aed01c819198c39c032d309fdd2cf8715</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::size_type</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a742671fa5cd85505be510a0dcea28026</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>playrho::d2::Body</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>afccb88f20f06ef4d2e8924f5f6816ab7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>Allocate</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a04d6b81c4e8284d598b3079f8d59a7d1</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>Allocate</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a3b64e5267b14f456429887414b4b471c</anchor>
      <arglist>(const value_type &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>at</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a081282fe41dc935e6b271ee055122269</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>at</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a806d7149b3226443b4e4a20182dbe695</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; value_type &gt;::const_iterator</type>
      <name>begin</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>aef288954755cb2f4000b0cf063dcdba7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; value_type &gt;::iterator</type>
      <name>begin</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a5b8b12c038617f24d5d5ce14615f7650</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a3c07cec69ef7c054e56feea080b1d2b6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const value_type *</type>
      <name>data</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>af250cf8a13a33a09b5428b6689ea3fa1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; value_type &gt;::const_iterator</type>
      <name>end</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a73e303031c655545ab6d823853df9175</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; value_type &gt;::iterator</type>
      <name>end</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a348dd2f37e6683b7a65fc8ca3b8b77b6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FindFree</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>acf85582d60a62b07c2289a2e27d047ff</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Free</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>ab425852cd76b4621e5e9b63a6726d7d8</anchor>
      <arglist>(size_type index)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>free_size</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>ad21b0179a2b158e6a49c74af81a2064f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>GetIndex</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a3bedb344c8a56f424080e74a2ce5bfa3</anchor>
      <arglist>(value_type *ptr) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>max_size</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a7aa7c0b3e5bcce16980135b1ef63df27</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>aee95793cfc2c8b6ff624ee21c8a0de68</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a8763c9f830aae380afdc7f9624e21e07</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>ab628282d5e98778b0893fe55130cf6f1</anchor>
      <arglist>(size_type value)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a34fdef49c5e2fbc21143437367d07798</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a609cc5602b186ce8db5d613d888d1034</anchor>
      <arglist>(const ObjectPool &amp;lhs, const ObjectPool &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a311afb2d776e8e69de0329af1b899c3a</anchor>
      <arglist>(const ObjectPool &amp;lhs, const ObjectPool &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ObjectPool&lt; playrho::d2::Joint &gt;</name>
    <filename>classplayrho_1_1ObjectPool.html</filename>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::const_reference</type>
      <name>const_reference</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>aed87f86923cad9bc98e46e26fb707aec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::reference</type>
      <name>reference</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>aed01c819198c39c032d309fdd2cf8715</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::size_type</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a742671fa5cd85505be510a0dcea28026</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>playrho::d2::Joint</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>afccb88f20f06ef4d2e8924f5f6816ab7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>Allocate</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a04d6b81c4e8284d598b3079f8d59a7d1</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>Allocate</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a3b64e5267b14f456429887414b4b471c</anchor>
      <arglist>(const value_type &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>at</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a081282fe41dc935e6b271ee055122269</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>at</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a806d7149b3226443b4e4a20182dbe695</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; value_type &gt;::const_iterator</type>
      <name>begin</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>aef288954755cb2f4000b0cf063dcdba7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; value_type &gt;::iterator</type>
      <name>begin</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a5b8b12c038617f24d5d5ce14615f7650</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a3c07cec69ef7c054e56feea080b1d2b6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const value_type *</type>
      <name>data</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>af250cf8a13a33a09b5428b6689ea3fa1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; value_type &gt;::const_iterator</type>
      <name>end</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a73e303031c655545ab6d823853df9175</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; value_type &gt;::iterator</type>
      <name>end</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a348dd2f37e6683b7a65fc8ca3b8b77b6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FindFree</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>acf85582d60a62b07c2289a2e27d047ff</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Free</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>ab425852cd76b4621e5e9b63a6726d7d8</anchor>
      <arglist>(size_type index)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>free_size</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>ad21b0179a2b158e6a49c74af81a2064f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>GetIndex</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a3bedb344c8a56f424080e74a2ce5bfa3</anchor>
      <arglist>(value_type *ptr) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>max_size</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a7aa7c0b3e5bcce16980135b1ef63df27</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>aee95793cfc2c8b6ff624ee21c8a0de68</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a8763c9f830aae380afdc7f9624e21e07</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>ab628282d5e98778b0893fe55130cf6f1</anchor>
      <arglist>(size_type value)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a34fdef49c5e2fbc21143437367d07798</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a609cc5602b186ce8db5d613d888d1034</anchor>
      <arglist>(const ObjectPool &amp;lhs, const ObjectPool &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a311afb2d776e8e69de0329af1b899c3a</anchor>
      <arglist>(const ObjectPool &amp;lhs, const ObjectPool &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ObjectPool&lt; playrho::d2::Manifold &gt;</name>
    <filename>classplayrho_1_1ObjectPool.html</filename>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::const_reference</type>
      <name>const_reference</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>aed87f86923cad9bc98e46e26fb707aec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::reference</type>
      <name>reference</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>aed01c819198c39c032d309fdd2cf8715</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::size_type</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a742671fa5cd85505be510a0dcea28026</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>playrho::d2::Manifold</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>afccb88f20f06ef4d2e8924f5f6816ab7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>Allocate</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a04d6b81c4e8284d598b3079f8d59a7d1</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>Allocate</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a3b64e5267b14f456429887414b4b471c</anchor>
      <arglist>(const value_type &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>at</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a081282fe41dc935e6b271ee055122269</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>at</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a806d7149b3226443b4e4a20182dbe695</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; value_type &gt;::const_iterator</type>
      <name>begin</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>aef288954755cb2f4000b0cf063dcdba7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; value_type &gt;::iterator</type>
      <name>begin</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a5b8b12c038617f24d5d5ce14615f7650</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a3c07cec69ef7c054e56feea080b1d2b6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const value_type *</type>
      <name>data</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>af250cf8a13a33a09b5428b6689ea3fa1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; value_type &gt;::const_iterator</type>
      <name>end</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a73e303031c655545ab6d823853df9175</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; value_type &gt;::iterator</type>
      <name>end</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a348dd2f37e6683b7a65fc8ca3b8b77b6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FindFree</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>acf85582d60a62b07c2289a2e27d047ff</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Free</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>ab425852cd76b4621e5e9b63a6726d7d8</anchor>
      <arglist>(size_type index)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>free_size</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>ad21b0179a2b158e6a49c74af81a2064f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>GetIndex</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a3bedb344c8a56f424080e74a2ce5bfa3</anchor>
      <arglist>(value_type *ptr) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>max_size</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a7aa7c0b3e5bcce16980135b1ef63df27</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>aee95793cfc2c8b6ff624ee21c8a0de68</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a8763c9f830aae380afdc7f9624e21e07</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>ab628282d5e98778b0893fe55130cf6f1</anchor>
      <arglist>(size_type value)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a34fdef49c5e2fbc21143437367d07798</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a609cc5602b186ce8db5d613d888d1034</anchor>
      <arglist>(const ObjectPool &amp;lhs, const ObjectPool &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a311afb2d776e8e69de0329af1b899c3a</anchor>
      <arglist>(const ObjectPool &amp;lhs, const ObjectPool &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ObjectPool&lt; playrho::d2::Shape &gt;</name>
    <filename>classplayrho_1_1ObjectPool.html</filename>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::const_reference</type>
      <name>const_reference</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>aed87f86923cad9bc98e46e26fb707aec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::reference</type>
      <name>reference</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>aed01c819198c39c032d309fdd2cf8715</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::size_type</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a742671fa5cd85505be510a0dcea28026</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>playrho::d2::Shape</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>afccb88f20f06ef4d2e8924f5f6816ab7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>Allocate</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a04d6b81c4e8284d598b3079f8d59a7d1</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>Allocate</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a3b64e5267b14f456429887414b4b471c</anchor>
      <arglist>(const value_type &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>at</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a081282fe41dc935e6b271ee055122269</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>at</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a806d7149b3226443b4e4a20182dbe695</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; value_type &gt;::const_iterator</type>
      <name>begin</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>aef288954755cb2f4000b0cf063dcdba7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; value_type &gt;::iterator</type>
      <name>begin</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a5b8b12c038617f24d5d5ce14615f7650</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a3c07cec69ef7c054e56feea080b1d2b6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const value_type *</type>
      <name>data</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>af250cf8a13a33a09b5428b6689ea3fa1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; value_type &gt;::const_iterator</type>
      <name>end</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a73e303031c655545ab6d823853df9175</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; value_type &gt;::iterator</type>
      <name>end</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a348dd2f37e6683b7a65fc8ca3b8b77b6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FindFree</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>acf85582d60a62b07c2289a2e27d047ff</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Free</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>ab425852cd76b4621e5e9b63a6726d7d8</anchor>
      <arglist>(size_type index)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>free_size</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>ad21b0179a2b158e6a49c74af81a2064f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>GetIndex</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a3bedb344c8a56f424080e74a2ce5bfa3</anchor>
      <arglist>(value_type *ptr) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>max_size</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a7aa7c0b3e5bcce16980135b1ef63df27</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>aee95793cfc2c8b6ff624ee21c8a0de68</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a8763c9f830aae380afdc7f9624e21e07</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>ab628282d5e98778b0893fe55130cf6f1</anchor>
      <arglist>(size_type value)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a34fdef49c5e2fbc21143437367d07798</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a609cc5602b186ce8db5d613d888d1034</anchor>
      <arglist>(const ObjectPool &amp;lhs, const ObjectPool &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a311afb2d776e8e69de0329af1b899c3a</anchor>
      <arglist>(const ObjectPool &amp;lhs, const ObjectPool &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ObjectPool&lt; ProxyIDs &gt;</name>
    <filename>classplayrho_1_1ObjectPool.html</filename>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::const_reference</type>
      <name>const_reference</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>aed87f86923cad9bc98e46e26fb707aec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::reference</type>
      <name>reference</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>aed01c819198c39c032d309fdd2cf8715</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::size_type</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a742671fa5cd85505be510a0dcea28026</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ProxyIDs</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>afccb88f20f06ef4d2e8924f5f6816ab7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>Allocate</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a04d6b81c4e8284d598b3079f8d59a7d1</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>Allocate</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a3b64e5267b14f456429887414b4b471c</anchor>
      <arglist>(const value_type &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>at</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a081282fe41dc935e6b271ee055122269</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>at</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a806d7149b3226443b4e4a20182dbe695</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; value_type &gt;::const_iterator</type>
      <name>begin</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>aef288954755cb2f4000b0cf063dcdba7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; value_type &gt;::iterator</type>
      <name>begin</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a5b8b12c038617f24d5d5ce14615f7650</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a3c07cec69ef7c054e56feea080b1d2b6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const value_type *</type>
      <name>data</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>af250cf8a13a33a09b5428b6689ea3fa1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; value_type &gt;::const_iterator</type>
      <name>end</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a73e303031c655545ab6d823853df9175</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; value_type &gt;::iterator</type>
      <name>end</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a348dd2f37e6683b7a65fc8ca3b8b77b6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FindFree</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>acf85582d60a62b07c2289a2e27d047ff</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Free</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>ab425852cd76b4621e5e9b63a6726d7d8</anchor>
      <arglist>(size_type index)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>free_size</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>ad21b0179a2b158e6a49c74af81a2064f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>GetIndex</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a3bedb344c8a56f424080e74a2ce5bfa3</anchor>
      <arglist>(value_type *ptr) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>max_size</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a7aa7c0b3e5bcce16980135b1ef63df27</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>aee95793cfc2c8b6ff624ee21c8a0de68</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a8763c9f830aae380afdc7f9624e21e07</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>ab628282d5e98778b0893fe55130cf6f1</anchor>
      <arglist>(size_type value)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a34fdef49c5e2fbc21143437367d07798</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a609cc5602b186ce8db5d613d888d1034</anchor>
      <arglist>(const ObjectPool &amp;lhs, const ObjectPool &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1ObjectPool.html</anchorfile>
      <anchor>a311afb2d776e8e69de0329af1b899c3a</anchor>
      <arglist>(const ObjectPool &amp;lhs, const ObjectPool &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::Manifold::Point</name>
    <filename>structplayrho_1_1d2_1_1Manifold_1_1Point.html</filename>
    <member kind="variable">
      <type>ContactFeature</type>
      <name>contactFeature</name>
      <anchorfile>structplayrho_1_1d2_1_1Manifold_1_1Point.html</anchorfile>
      <anchor>a7167ff28b5f0904bec2d23f896725f73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localPoint</name>
      <anchorfile>structplayrho_1_1d2_1_1Manifold_1_1Point.html</anchorfile>
      <anchor>a5348993dcfb618cbd8b0fc90dceee8b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum</type>
      <name>normalImpulse</name>
      <anchorfile>structplayrho_1_1d2_1_1Manifold_1_1Point.html</anchorfile>
      <anchor>a30a0186139d64d835043d665cd832463</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum</type>
      <name>tangentImpulse</name>
      <anchorfile>structplayrho_1_1d2_1_1Manifold_1_1Point.html</anchorfile>
      <anchor>a8cb59ad4a08b8c95d54bb940eff1356f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1d2_1_1Manifold_1_1Point.html</anchorfile>
      <anchor>a72a1cdedaec111016d79f96aa4970cef</anchor>
      <arglist>(const Manifold::Point &amp;lhs, const Manifold::Point &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1d2_1_1Manifold_1_1Point.html</anchorfile>
      <anchor>a30d3152820c6a35af37c2139d316d1da</anchor>
      <arglist>(const Manifold::Point &amp;lhs, const Manifold::Point &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::VelocityConstraint::Point</name>
    <filename>structplayrho_1_1d2_1_1VelocityConstraint_1_1Point.html</filename>
    <member kind="variable">
      <type>Momentum</type>
      <name>normalImpulse</name>
      <anchorfile>structplayrho_1_1d2_1_1VelocityConstraint_1_1Point.html</anchorfile>
      <anchor>a07214867dc5dbd761c7566e727d47165</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Mass</type>
      <name>normalMass</name>
      <anchorfile>structplayrho_1_1d2_1_1VelocityConstraint_1_1Point.html</anchorfile>
      <anchor>af86742c9f4bc34e8627e1a2e3abd9650</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>relA</name>
      <anchorfile>structplayrho_1_1d2_1_1VelocityConstraint_1_1Point.html</anchorfile>
      <anchor>afea6779d37d712bc631486e169375b86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>relB</name>
      <anchorfile>structplayrho_1_1d2_1_1VelocityConstraint_1_1Point.html</anchorfile>
      <anchor>ad8c383e7af738ac5cbfb1ece23f929bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum</type>
      <name>tangentImpulse</name>
      <anchorfile>structplayrho_1_1d2_1_1VelocityConstraint_1_1Point.html</anchorfile>
      <anchor>a46981d0d52f8dd1c4e0d343ea0c6b789</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Mass</type>
      <name>tangentMass</name>
      <anchorfile>structplayrho_1_1d2_1_1VelocityConstraint_1_1Point.html</anchorfile>
      <anchor>a2042c9c49d68f33fb1d14915aee92f3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinearVelocity</type>
      <name>velocityBias</name>
      <anchorfile>structplayrho_1_1d2_1_1VelocityConstraint_1_1Point.html</anchorfile>
      <anchor>a299776dd779c0df434dcf430a9702c75</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::WorldManifold::PointData</name>
    <filename>structplayrho_1_1d2_1_1WorldManifold_1_1PointData.html</filename>
    <member kind="variable">
      <type>Momentum2</type>
      <name>impulse</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldManifold_1_1PointData.html</anchorfile>
      <anchor>a7f514ec10ce3a9610e5fd89cdb45eae6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>location</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldManifold_1_1PointData.html</anchorfile>
      <anchor>aea6708ae9b1403f9945f268497ecc62c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>separation</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldManifold_1_1PointData.html</anchorfile>
      <anchor>a1790b3ac6bead0e07902e50b74fd3a66</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::PointStates</name>
    <filename>structplayrho_1_1d2_1_1PointStates.html</filename>
    <member kind="variable">
      <type>PointState</type>
      <name>state1</name>
      <anchorfile>structplayrho_1_1d2_1_1PointStates.html</anchorfile>
      <anchor>ab252835912ed386f3e34533e5c17828c</anchor>
      <arglist>[MaxManifoldPoints]</arglist>
    </member>
    <member kind="variable">
      <type>PointState</type>
      <name>state2</name>
      <anchorfile>structplayrho_1_1d2_1_1PointStates.html</anchorfile>
      <anchor>a89d0a35bd69211e56bde618d4afba1dc</anchor>
      <arglist>[MaxManifoldPoints]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::part::PolicySelector</name>
    <filename>structplayrho_1_1d2_1_1part_1_1PolicySelector.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Discriminator&lt; Set1, 1 &gt;</base>
    <base>Discriminator&lt; Set2, 2 &gt;</base>
    <base>Discriminator&lt; Set3, 3 &gt;</base>
    <base>Discriminator&lt; Set4, 4 &gt;</base>
    <base>Discriminator&lt; Set5, 5 &gt;</base>
    <base>Discriminator&lt; Set6, 6 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::PolygonShapeConf</name>
    <filename>structplayrho_1_1d2_1_1PolygonShapeConf.html</filename>
    <base>ShapeBuilder&lt; PolygonShapeConf &gt;</base>
    <member kind="function">
      <type></type>
      <name>PolygonShapeConf</name>
      <anchorfile>structplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a3b574cbb06969341bc94c041fe26c42b</anchor>
      <arglist>(Length hx, Length hy, const PolygonShapeConf &amp;conf=GetDefaultConf())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolygonShapeConf</name>
      <anchorfile>structplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a9a4f109b94ff73058f06244f0218612e</anchor>
      <arglist>(Span&lt; const Length2 &gt; points, const PolygonShapeConf &amp;conf=GetDefaultConf())</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetNormal</name>
      <anchorfile>structplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a717c9833aa73b9c7ba8a831ac1ed849f</anchor>
      <arglist>(VertexCounter index) const</arglist>
    </member>
    <member kind="function">
      <type>Span&lt; const UnitVec &gt;</type>
      <name>GetNormals</name>
      <anchorfile>structplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a5d8edab6a66d2fb2d4fe6f239778f996</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetVertex</name>
      <anchorfile>structplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>ae8f44760bbca63a7d2f24e61ef0ae483</anchor>
      <arglist>(VertexCounter index) const</arglist>
    </member>
    <member kind="function">
      <type>VertexCounter</type>
      <name>GetVertexCount</name>
      <anchorfile>structplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>af8ebdeefc032af260648a6f22ef2d5d7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Span&lt; const Length2 &gt;</type>
      <name>GetVertices</name>
      <anchorfile>structplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>af204b554caf67699a0266a98283ad65d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PolygonShapeConf &amp;</type>
      <name>Rotate</name>
      <anchorfile>structplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a310d669932f0a8d4cf363fd5cebdea12</anchor>
      <arglist>(const UnitVec &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>PolygonShapeConf &amp;</type>
      <name>Scale</name>
      <anchorfile>structplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a534a2122f7493cf3b74897e735cac7c7</anchor>
      <arglist>(const Vec2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>PolygonShapeConf &amp;</type>
      <name>Set</name>
      <anchorfile>structplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a83aaa3b7748b0f34ac7afb4e29b0c51e</anchor>
      <arglist>(const VertexSet &amp;points)</arglist>
    </member>
    <member kind="function">
      <type>PolygonShapeConf &amp;</type>
      <name>Set</name>
      <anchorfile>structplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>afdeb3fda682d199b593b3567534abb67</anchor>
      <arglist>(Span&lt; const Length2 &gt; points)</arglist>
    </member>
    <member kind="function">
      <type>PolygonShapeConf &amp;</type>
      <name>SetAsBox</name>
      <anchorfile>structplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a7000442414221db1742cd53b721093a9</anchor>
      <arglist>(Length hx, Length hy)</arglist>
    </member>
    <member kind="function">
      <type>PolygonShapeConf &amp;</type>
      <name>SetAsBox</name>
      <anchorfile>structplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a233655a4f4fd52169c808132ea9791cf</anchor>
      <arglist>(Length hx, Length hy, const Length2 &amp;center, Angle angle)</arglist>
    </member>
    <member kind="function">
      <type>PolygonShapeConf &amp;</type>
      <name>Transform</name>
      <anchorfile>structplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a7b1c5af0ee328c47c53c60cfcb2a7074</anchor>
      <arglist>(const Mat22 &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>PolygonShapeConf &amp;</type>
      <name>Transform</name>
      <anchorfile>structplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a8fbd2a3a83e3e50949d10a41fdb58b4d</anchor>
      <arglist>(const Transformation &amp;xfm)</arglist>
    </member>
    <member kind="function">
      <type>PolygonShapeConf &amp;</type>
      <name>Translate</name>
      <anchorfile>structplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>aef7a207ffb6c419c7a28934093ceee4b</anchor>
      <arglist>(const Length2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>PolygonShapeConf &amp;</type>
      <name>UseVertexRadius</name>
      <anchorfile>structplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a794190ea846c9740a083a138df49b53f</anchor>
      <arglist>(NonNegative&lt; Length &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PolygonShapeConf &amp;</type>
      <name>UseVertices</name>
      <anchorfile>structplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>afeda9e1da0297fefb2df520344a3e518</anchor>
      <arglist>(const Span&lt; const Length2 &gt; &amp;verts)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PolygonShapeConf</type>
      <name>GetDefaultConf</name>
      <anchorfile>structplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a9a88202e222078955d2489db3cd1a2ff</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr NonNegative&lt; Length &gt;</type>
      <name>GetDefaultVertexRadius</name>
      <anchorfile>structplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a9805448b8c4a41d0f97f89b6f461eda3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>NgonWithFwdNormals</type>
      <name>ngon</name>
      <anchorfile>structplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>aea06e37a58b4ae303cf31e4997cdc72f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegativeFF&lt; Length &gt;</type>
      <name>vertexRadius</name>
      <anchorfile>structplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a677169c166347ab4236fb0f785b4491e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultVertexRadius</name>
      <anchorfile>structplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>ac9e030299a655ca7a4a633840afdfe44</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a7702bc246ae38c520cea78d599de7493</anchor>
      <arglist>(const PolygonShapeConf &amp;lhs, const PolygonShapeConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a63cafb11d617b347c4a9b8b9c5d9f03b</anchor>
      <arglist>(const PolygonShapeConf &amp;lhs, const PolygonShapeConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DistanceProxy</type>
      <name>GetChild</name>
      <anchorfile>structplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a13041b2a9f585bc57cd2daad5afe69a3</anchor>
      <arglist>(const PolygonShapeConf &amp;arg, ChildCounter index)</arglist>
    </member>
    <member kind="function">
      <type>constexpr ChildCounter</type>
      <name>GetChildCount</name>
      <anchorfile>structplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>aecd3d6d3ce6bf86f6b0c9684c05d63bc</anchor>
      <arglist>(const PolygonShapeConf &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>structplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a69182cba2886716e95849f5a3a71fd8b</anchor>
      <arglist>(const PolygonShapeConf &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>structplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a17a8a83f5b2b14e4615b24934ef3642f</anchor>
      <arglist>(const PolygonShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>structplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a559385a58b96c078031f5d7c0b29330f</anchor>
      <arglist>(const PolygonShapeConf &amp;arg, ChildCounter) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transform</name>
      <anchorfile>structplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a8a6138547e9f6220a96e67364432f43a</anchor>
      <arglist>(PolygonShapeConf &amp;arg, const Mat22 &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::pmr::polymorphic_allocator</name>
    <filename>classplayrho_1_1pmr_1_1polymorphic__allocator.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1pmr_1_1polymorphic__allocator.html</anchorfile>
      <anchor>a73d0c86a0af440fe4acc19498513837b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>polymorphic_allocator</name>
      <anchorfile>classplayrho_1_1pmr_1_1polymorphic__allocator.html</anchorfile>
      <anchor>aaa1cec0db31cfb043da145e7ba0657e2</anchor>
      <arglist>(const polymorphic_allocator &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>polymorphic_allocator</name>
      <anchorfile>classplayrho_1_1pmr_1_1polymorphic__allocator.html</anchorfile>
      <anchor>a63a0d07a4a4da34b4a55b167f1db43bc</anchor>
      <arglist>(const polymorphic_allocator&lt; U &gt; &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>polymorphic_allocator</name>
      <anchorfile>classplayrho_1_1pmr_1_1polymorphic__allocator.html</anchorfile>
      <anchor>a57cd89ff990eeb07d539780a2f20f20a</anchor>
      <arglist>(ResourceType resource=nullptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>allocate</name>
      <anchorfile>classplayrho_1_1pmr_1_1polymorphic__allocator.html</anchorfile>
      <anchor>aa7ea36cd57aa0b5c275824c2237e6c8f</anchor>
      <arglist>(std::size_t n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocate</name>
      <anchorfile>classplayrho_1_1pmr_1_1polymorphic__allocator.html</anchorfile>
      <anchor>a4076f013bd2d6dc0b755ed04169e3644</anchor>
      <arglist>(T *p, std::size_t n) noexcept</arglist>
    </member>
    <member kind="function">
      <type>polymorphic_allocator &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1pmr_1_1polymorphic__allocator.html</anchorfile>
      <anchor>aebd2e4ec6381b061b85cf08135d6878f</anchor>
      <arglist>(const polymorphic_allocator &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>ResourceType</type>
      <name>resource</name>
      <anchorfile>classplayrho_1_1pmr_1_1polymorphic__allocator.html</anchorfile>
      <anchor>af66b4aacf8f390d5483a7eb4ce0d7ea0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1pmr_1_1polymorphic__allocator.html</anchorfile>
      <anchor>a19e5b2a88faabde5bf1eeeaf7f96643a</anchor>
      <arglist>(const polymorphic_allocator &amp;lhs, const polymorphic_allocator &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1pmr_1_1polymorphic__allocator.html</anchorfile>
      <anchor>a183cc3cc48239066c03d7ddb574d64f7</anchor>
      <arglist>(const polymorphic_allocator &amp;lhs, const polymorphic_allocator &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::pmr::pool_options</name>
    <filename>structplayrho_1_1pmr_1_1pool__options.html</filename>
    <member kind="variable">
      <type>std::size_t</type>
      <name>largest_required_pool_block</name>
      <anchorfile>structplayrho_1_1pmr_1_1pool__options.html</anchorfile>
      <anchor>abfda7a6cc9077b103f3e3ab2ef327b4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>max_blocks_per_chunk</name>
      <anchorfile>structplayrho_1_1pmr_1_1pool__options.html</anchorfile>
      <anchor>a1c3e64ad38aaa234023eea3fe1aab126</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::pmr::PoolMemoryOptions</name>
    <filename>structplayrho_1_1pmr_1_1PoolMemoryOptions.html</filename>
    <member kind="variable">
      <type>std::size_t</type>
      <name>limitBuffers</name>
      <anchorfile>structplayrho_1_1pmr_1_1PoolMemoryOptions.html</anchorfile>
      <anchor>a674c3cbe662e5887b46dc85c9c023b98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>releasable</name>
      <anchorfile>structplayrho_1_1pmr_1_1PoolMemoryOptions.html</anchorfile>
      <anchor>a578db7146e64c1661c89e824bbca9ff3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>reserveBuffers</name>
      <anchorfile>structplayrho_1_1pmr_1_1PoolMemoryOptions.html</anchorfile>
      <anchor>a3e5da6604085aabf68e3e6f0f17a785b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>reserveBytes</name>
      <anchorfile>structplayrho_1_1pmr_1_1PoolMemoryOptions.html</anchorfile>
      <anchor>a3e8f7b40513a18e1d579e066c10e4c53</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::pmr::PoolMemoryResource</name>
    <filename>classplayrho_1_1pmr_1_1PoolMemoryResource.html</filename>
    <base>playrho::pmr::memory_resource</base>
    <class kind="class">playrho::pmr::PoolMemoryResource::BufferRecord</class>
    <class kind="struct">playrho::pmr::PoolMemoryResource::Stats</class>
    <member kind="function">
      <type></type>
      <name>PoolMemoryResource</name>
      <anchorfile>classplayrho_1_1pmr_1_1PoolMemoryResource.html</anchorfile>
      <anchor>a7299ae0de325d95bfdf294a382601449</anchor>
      <arglist>(const PoolMemoryOptions &amp;options={}, memory_resource *upstream=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PoolMemoryResource</name>
      <anchorfile>classplayrho_1_1pmr_1_1PoolMemoryResource.html</anchorfile>
      <anchor>acb9dab11e75b4438ff9cc9adb17057ef</anchor>
      <arglist>(const PoolMemoryResource &amp;other)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PoolMemoryResource</name>
      <anchorfile>classplayrho_1_1pmr_1_1PoolMemoryResource.html</anchorfile>
      <anchor>ab080526c2eb8b928d912a8c0aa09624d</anchor>
      <arglist>(memory_resource *upstream)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PoolMemoryResource</name>
      <anchorfile>classplayrho_1_1pmr_1_1PoolMemoryResource.html</anchorfile>
      <anchor>a1d81a56117a0eb55ac0fff3256353ad9</anchor>
      <arglist>(PoolMemoryResource &amp;&amp;other)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PoolMemoryResource</name>
      <anchorfile>classplayrho_1_1pmr_1_1PoolMemoryResource.html</anchorfile>
      <anchor>a11de22c20d940ca43de62f1ae580ca78</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>do_allocate</name>
      <anchorfile>classplayrho_1_1pmr_1_1PoolMemoryResource.html</anchorfile>
      <anchor>ae884de5fa5403099698ffe6ac5d1fbf2</anchor>
      <arglist>(std::size_t num_bytes, std::size_t alignment) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>do_deallocate</name>
      <anchorfile>classplayrho_1_1pmr_1_1PoolMemoryResource.html</anchorfile>
      <anchor>af6b80fc984facbf65eb909b2d821133c</anchor>
      <arglist>(void *p, std::size_t num_bytes, std::size_t alignment) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>do_is_equal</name>
      <anchorfile>classplayrho_1_1pmr_1_1PoolMemoryResource.html</anchorfile>
      <anchor>ab47e11fdf091536d13cb095eba4d0acd</anchor>
      <arglist>(const memory_resource &amp;other) const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>PoolMemoryOptions</type>
      <name>GetOptions</name>
      <anchorfile>classplayrho_1_1pmr_1_1PoolMemoryResource.html</anchorfile>
      <anchor>a97cc3358403f57bda0fc3b492ecf1e45</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Stats</type>
      <name>GetStats</name>
      <anchorfile>classplayrho_1_1pmr_1_1PoolMemoryResource.html</anchorfile>
      <anchor>aafe27409fc234557990dafef341977e5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>memory_resource *</type>
      <name>GetUpstream</name>
      <anchorfile>classplayrho_1_1pmr_1_1PoolMemoryResource.html</anchorfile>
      <anchor>a1d66150680ebaf770e6c3e24e3801086</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>PoolMemoryResource &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1pmr_1_1PoolMemoryResource.html</anchorfile>
      <anchor>a1b7a6ea6b1a5e1e5255c13c5cd52f8af</anchor>
      <arglist>(const PoolMemoryResource &amp;other)=delete</arglist>
    </member>
    <member kind="function">
      <type>PoolMemoryResource &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1pmr_1_1PoolMemoryResource.html</anchorfile>
      <anchor>a7905ad91da845be1d19b44bab7d29cc3</anchor>
      <arglist>(PoolMemoryResource &amp;&amp;other)=delete</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::size_t</type>
      <name>GetMaxNumBytes</name>
      <anchorfile>classplayrho_1_1pmr_1_1PoolMemoryResource.html</anchorfile>
      <anchor>a13d7d7199bab33f9582b48f6ec89e30e</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::Position</name>
    <filename>structplayrho_1_1d2_1_1Position.html</filename>
    <member kind="function">
      <type>constexpr</type>
      <name>Position</name>
      <anchorfile>structplayrho_1_1d2_1_1Position.html</anchorfile>
      <anchor>a8628e18e3fde0f0a8726ba4011a372a6</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Position</name>
      <anchorfile>structplayrho_1_1d2_1_1Position.html</anchorfile>
      <anchor>ae09d01cb11883d4545e18f7eb7d8a097</anchor>
      <arglist>(Length2 l, Angle a=0_deg) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Angle</type>
      <name>angular</name>
      <anchorfile>structplayrho_1_1d2_1_1Position.html</anchorfile>
      <anchor>a9736efa8287839f997bfe73a2cca5d19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>linear</name>
      <anchorfile>structplayrho_1_1d2_1_1Position.html</anchorfile>
      <anchor>a0e1c6a8ff1b5c12185ed6d168168352d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>Cap</name>
      <anchorfile>structplayrho_1_1d2_1_1Position.html</anchorfile>
      <anchor>a2fd12fe4d010345504eeee95534dbed6</anchor>
      <arglist>(Position pos, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>GetPosition</name>
      <anchorfile>structplayrho_1_1d2_1_1Position.html</anchorfile>
      <anchor>a30e3652aa86130f81c948112cf4538d6</anchor>
      <arglist>(const Position &amp;pos0, const Position &amp;pos1, Real beta) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>structplayrho_1_1d2_1_1Position.html</anchorfile>
      <anchor>ae5cbbddc6b8f2b557ba2e87f43c64802</anchor>
      <arglist>(const d2::Position &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1d2_1_1Position.html</anchorfile>
      <anchor>a920e4ebf45a599f01060d56b280adc74</anchor>
      <arglist>(const Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Position</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1d2_1_1Position.html</anchorfile>
      <anchor>ab6cbd956958f8a1cd6726ad4e0cf2e43</anchor>
      <arglist>(const Real scalar, const Position &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Position</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1d2_1_1Position.html</anchorfile>
      <anchor>adc427276624c31301f4d2c3c202497d8</anchor>
      <arglist>(const Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Position</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1d2_1_1Position.html</anchorfile>
      <anchor>a8e75f2489f1991855f31108826613c6f</anchor>
      <arglist>(const Position &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Position &amp;</type>
      <name>operator+=</name>
      <anchorfile>structplayrho_1_1d2_1_1Position.html</anchorfile>
      <anchor>adad2c25d2579c31f2091a842e17fa2c3</anchor>
      <arglist>(Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Position</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1d2_1_1Position.html</anchorfile>
      <anchor>ab4a62d780748e8a22c6fe64234f6d121</anchor>
      <arglist>(const Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Position</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1d2_1_1Position.html</anchorfile>
      <anchor>acf4c47e7d8cba3a76dcdc9fa4b79d242</anchor>
      <arglist>(const Position &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Position &amp;</type>
      <name>operator-=</name>
      <anchorfile>structplayrho_1_1d2_1_1Position.html</anchorfile>
      <anchor>a3f8a057d7496ce6e5c72debd2361de5c</anchor>
      <arglist>(Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1d2_1_1Position.html</anchorfile>
      <anchor>a5e0589100dc43e1301d6b8b945ccb37c</anchor>
      <arglist>(const Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::PositionConstraint</name>
    <filename>structplayrho_1_1d2_1_1PositionConstraint.html</filename>
    <member kind="variable">
      <type>BodyID</type>
      <name>bodyA</name>
      <anchorfile>structplayrho_1_1d2_1_1PositionConstraint.html</anchorfile>
      <anchor>a2671333d0b0e393716474ffa865da297</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BodyID</type>
      <name>bodyB</name>
      <anchorfile>structplayrho_1_1d2_1_1PositionConstraint.html</anchorfile>
      <anchor>ab4e68a890fc996dce50840a4ab3041d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Manifold</type>
      <name>manifold</name>
      <anchorfile>structplayrho_1_1d2_1_1PositionConstraint.html</anchorfile>
      <anchor>a5c075475304d221d85d788b1ed2044e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegativeFF&lt; Length &gt;</type>
      <name>totalRadius</name>
      <anchorfile>structplayrho_1_1d2_1_1PositionConstraint.html</anchorfile>
      <anchor>ab701abecbc286549bd3f6ea4bbaa30b9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::PositionSolution</name>
    <filename>structplayrho_1_1d2_1_1PositionSolution.html</filename>
    <member kind="variable">
      <type>Length</type>
      <name>min_separation</name>
      <anchorfile>structplayrho_1_1d2_1_1PositionSolution.html</anchorfile>
      <anchor>a97ddb12bb40404b746000169247f3d07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Position</type>
      <name>pos_a</name>
      <anchorfile>structplayrho_1_1d2_1_1PositionSolution.html</anchorfile>
      <anchor>a94dcd535a62f19ae0753dd1013a23f3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Position</type>
      <name>pos_b</name>
      <anchorfile>structplayrho_1_1d2_1_1PositionSolution.html</anchorfile>
      <anchor>a4a2eb9fb99af276f37080ed47ee29f1f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::PositionSolverManifold</name>
    <filename>structplayrho_1_1d2_1_1PositionSolverManifold.html</filename>
    <member kind="variable">
      <type>UnitVec</type>
      <name>m_normal</name>
      <anchorfile>structplayrho_1_1d2_1_1PositionSolverManifold.html</anchorfile>
      <anchor>ae2a97c6f55ca6b63af6d0ac5cb8051af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>m_point</name>
      <anchorfile>structplayrho_1_1d2_1_1PositionSolverManifold.html</anchorfile>
      <anchor>a815fb3af92df6eb9f46ab5ac45d69d7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>m_separation</name>
      <anchorfile>structplayrho_1_1d2_1_1PositionSolverManifold.html</anchorfile>
      <anchor>a3bfdfd3b788793b1a0f17dc99e72cdbe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::PositiveChecker</name>
    <filename>structplayrho_1_1detail_1_1PositiveChecker.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structplayrho_1_1detail_1_1PositiveChecker.html</anchorfile>
      <anchor>a07b42e1171835505ccc4a93058b5e431</anchor>
      <arglist>(const T &amp;v) const noexcept -&gt; decltype(v &gt; T{}, static_cast&lt; const char * &gt;(nullptr))</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::PreStepStats</name>
    <filename>structplayrho_1_1PreStepStats.html</filename>
    <member kind="typedef">
      <type>std::uint32_t</type>
      <name>counter_type</name>
      <anchorfile>structplayrho_1_1PreStepStats.html</anchorfile>
      <anchor>a3d2ba1ef027e1612d7631cc1a3c0de33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>added</name>
      <anchorfile>structplayrho_1_1PreStepStats.html</anchorfile>
      <anchor>a9342f0dc6ecefd1d1519804f013cd164</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>destroyed</name>
      <anchorfile>structplayrho_1_1PreStepStats.html</anchorfile>
      <anchor>a62ba523ddae45bd7f16766075b5d71ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>ignored</name>
      <anchorfile>structplayrho_1_1PreStepStats.html</anchorfile>
      <anchor>a935bdc19edba8c3a8e4e83203d5ff534</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>proxiesMoved</name>
      <anchorfile>structplayrho_1_1PreStepStats.html</anchorfile>
      <anchor>aa74721e50128fa65a1de046dbf368743</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>skipped</name>
      <anchorfile>structplayrho_1_1PreStepStats.html</anchorfile>
      <anchor>a4ac67155c97fe89e223375eb442ebfba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>updated</name>
      <anchorfile>structplayrho_1_1PreStepStats.html</anchorfile>
      <anchor>a0f7525eed88446bcb034e37bb8f51f94</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::GearJointConf::PrismaticData</name>
    <filename>structplayrho_1_1d2_1_1GearJointConf_1_1PrismaticData.html</filename>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorA</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf_1_1PrismaticData.html</anchorfile>
      <anchor>a0a98bbe64479fae81083903617821f7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorB</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf_1_1PrismaticData.html</anchorfile>
      <anchor>a304ed4fbe4e5e4249b34979392789a1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitVec</type>
      <name>localAxis</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf_1_1PrismaticData.html</anchorfile>
      <anchor>a3bd0fa6f9da05dbf3224c674403e8d44</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf_1_1PrismaticData.html</anchorfile>
      <anchor>a8ad81220811f446279361ecc24a27be8</anchor>
      <arglist>(const GearJointConf::PrismaticData &amp;lhs, const GearJointConf::PrismaticData &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf_1_1PrismaticData.html</anchorfile>
      <anchor>aa482162774c71ee7192c4844799def17</anchor>
      <arglist>(const GearJointConf::PrismaticData &amp;lhs, const GearJointConf::PrismaticData &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::PrismaticJointConf</name>
    <filename>structplayrho_1_1d2_1_1PrismaticJointConf.html</filename>
    <base>JointBuilder&lt; PrismaticJointConf &gt;</base>
    <member kind="typedef">
      <type>JointBuilder&lt; PrismaticJointConf &gt;</type>
      <name>super</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a97aa04eb737dafc20bd6b9c71cd08027</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>PrismaticJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a9b76797314abf649aca7f87b7e3e9191</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrismaticJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a8c90f6a56c21d59e8ada5dfc0f40006c</anchor>
      <arglist>(BodyID bA, BodyID bB, const Length2 &amp;laA=Length2{}, const Length2 &amp;laB=Length2{}, const UnitVec &amp;axisA=UnitVec::GetRight(), Angle angle=0_deg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseEnableLimit</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>ab010c9604512cb79a09253482e9bd559</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseEnableMotor</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>ace422d036befc7e926efbadbeb3642e2</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseLowerLength</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a9b73c5bff4ea8bdaa5b42f8e882de767</anchor>
      <arglist>(Length v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseMaxMotorForce</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a91481b538e49b617523672325d920a28</anchor>
      <arglist>(Force v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseMotorSpeed</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a037f5b7765f9cafd69579aed3e954643</anchor>
      <arglist>(AngularVelocity v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseUpperLength</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a2d8a78fc77867eda7b72b72464edf701</anchor>
      <arglist>(Length v) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>a1</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a8705d4670751de3ae963acbe28eafc0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>a2</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a2535fceb972bd87cfca65ee408553d6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitVec</type>
      <name>axis</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a18db439953db54ad4bfd8e41e8540d61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enableLimit</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a1828f7c8df20ebd1a9dc9d7b7544683a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enableMotor</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>aeb33a2ae730aed0a2100bdb9d582d0fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3</type>
      <name>impulse</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>ac3e92d1fcca2d855a50bcf71419747e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Mat33</type>
      <name>K</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>af209b878a64342c846628b69acdf8d3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LimitState</type>
      <name>limitState</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>ab98364cefceb415295f3f15b2d908ef0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorA</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>acb27b85c4d08c968759d5d7796a1c029</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorB</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a5a48a83723f94a0b0cdc50db53f39863</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitVec</type>
      <name>localXAxisA</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>aedd5a22dbbb99341d5651ec2ea00b267</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitVec</type>
      <name>localYAxisA</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a0567ec7dc3cdc8dad075eedc919fccf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>lowerTranslation</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a1ffc6b4859a9124c61781fd10eea8ada</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Force</type>
      <name>maxMotorForce</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a98ff45552fc5f8fe747626a43b4765da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum</type>
      <name>motorImpulse</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>ab08a4f1fd8763ab6d9db6ff0ca5d8dad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Mass</type>
      <name>motorMass</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>aa42ec51f663b5f2a09ff5dced64ec523</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AngularVelocity</type>
      <name>motorSpeed</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a5ac7078c1d1fe807b2597830995eede5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitVec</type>
      <name>perp</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a5c6bb33262e82da581c459f95c503318</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Angle</type>
      <name>referenceAngle</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>acf649fb9b1aa944fca93ce9a3aa0f35d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>s1</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a6e98d931a2e1fcaaf58ea317ca0d3de6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>s2</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a1e976fff53b6b864da6d1796fc26f447</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>upperTranslation</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>aba43283e8cb93bca0a1aca2b6cd303a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>acf7e81444165613ee2710dfc8804a04a</anchor>
      <arglist>(const PrismaticJointConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLinearLowerLimit</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a2972598e6c903720d93d1aba138ec7b3</anchor>
      <arglist>(const PrismaticJointConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a27fc45b373f9d4f6ff5fe190c9343649</anchor>
      <arglist>(const PrismaticJointConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLinearUpperLimit</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a239db9ab5446fbb27eb532c45965cbe4</anchor>
      <arglist>(const PrismaticJointConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>ac1c8f45842be63b34da6d53d811881db</anchor>
      <arglist>(PrismaticJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetLinearLimits</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>ab3e9cb2455b78052970feaabe8cf3b1b</anchor>
      <arglist>(PrismaticJointConf &amp;conf, Length lower, Length upper) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetMaxMotorForce</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a354d65b6b0cac0916b4788e0ce1a5470</anchor>
      <arglist>(PrismaticJointConf &amp;object, Force value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>ShiftOrigin</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>afd69a0ec99e9a354fff052aeb7deefc9</anchor>
      <arglist>(PrismaticJointConf &amp;, const Length2 &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a9781e7946b790d5697f7692de702ab82</anchor>
      <arglist>(const PrismaticJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a6ee4f0a073351cace3dc1ba478411140</anchor>
      <arglist>(PrismaticJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::PulleyJointConf</name>
    <filename>structplayrho_1_1d2_1_1PulleyJointConf.html</filename>
    <base>JointBuilder&lt; PulleyJointConf &gt;</base>
    <member kind="typedef">
      <type>JointBuilder&lt; PulleyJointConf &gt;</type>
      <name>super</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>a1919cd604668a09cab637428f1860840</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PulleyJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>a8259ee38c23914223b018750df2c27c0</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PulleyJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>a2de1d89c58200f1bbdaf33e23b9a817a</anchor>
      <arglist>(BodyID bA, BodyID bB, const Length2 &amp;gaA=DefaultGroundAnchorA, const Length2 &amp;gaB=DefaultGroundAnchorB, const Length2 &amp;laA=DefaultLocalAnchorA, const Length2 &amp;laB=DefaultLocalAnchorB, Length lA=0_m, Length lB=0_m)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>a487ae923af494e25a655fb41dca87d92</anchor>
      <arglist>(Real v) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>groundAnchorA</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>ae871b9f7f4170ab3c5d8649b105be628</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>groundAnchorB</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>abad43cab21334c27e18eddbcd29a307d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum</type>
      <name>impulse</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>a3227b4d84ed9ed030294e6b2a59e97f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>lengthA</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>acff474ab17b3eef88979384619ca35e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>lengthB</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>a4f166e163524dd6342f9a4e8dcbdabbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorA</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>a5654e8eb83ec564fd4e13bc78c508ad7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorB</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>a812dd6e228eee80b1ae52345f80bff79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Mass</type>
      <name>mass</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>aaf3ced4d8560e9cd3c06e7c1db092cce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>rA</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>a81701da4d08879ed645570c8249e8c0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>ratio</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>af58f34604aac5e68a092cc8a14ac3170</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>rB</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>ac4ec4a50941868a13a27b1a4cb2bb385</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitVec</type>
      <name>uA</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>a69c38d72cd597598dd50941abd3c16ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitVec</type>
      <name>uB</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>a7da6f6cf80cd196bd2c223fabe5d72cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Length2</type>
      <name>DefaultGroundAnchorA</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>a41075cd6efbcadb66a18f637da481eec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Length2</type>
      <name>DefaultGroundAnchorB</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>a339e04304f259e0e6ed66adf5c19314d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Length2</type>
      <name>DefaultLocalAnchorA</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>a8482f925cae8e66cf13cbba4eda7b920</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Length2</type>
      <name>DefaultLocalAnchorB</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>af3fbe0b06f27ea75c47d9dece43ced46</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>ad042f7000a43ec5b29154a07465005f6</anchor>
      <arglist>(const PulleyJointConf &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLengthA</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>a94c0bc2a8291d96ff45e0d157a9d5bf3</anchor>
      <arglist>(const PulleyJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLengthB</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>aac6b715e0df3e5be4be5ccae4ac4fa36</anchor>
      <arglist>(const PulleyJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>a587b3fc0018a0aba1d156dcd26147d1d</anchor>
      <arglist>(const PulleyJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>a4bc9c62ac7aaef84c0c536a1b439ccf9</anchor>
      <arglist>(PulleyJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>abe7de7c24d8d14d4dd2a34e2ecc386b3</anchor>
      <arglist>(PulleyJointConf &amp;object, Real value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ShiftOrigin</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>a8d925f52e0c91c5aa818b30e6629f61c</anchor>
      <arglist>(PulleyJointConf &amp;object, const Length2 &amp;newOrigin) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>afa2b76fbf75674d72e4bab581590eec4</anchor>
      <arglist>(const PulleyJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>ac62c3b05e95c61b801722de099d962de</anchor>
      <arglist>(PulleyJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::RayCastHit</name>
    <filename>structplayrho_1_1d2_1_1RayCastHit.html</filename>
    <member kind="variable">
      <type>UnitIntervalFF&lt; Real &gt;</type>
      <name>fraction</name>
      <anchorfile>structplayrho_1_1d2_1_1RayCastHit.html</anchorfile>
      <anchor>a82347d4f9d32413e2148960ebc66ff1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitVec</type>
      <name>normal</name>
      <anchorfile>structplayrho_1_1d2_1_1RayCastHit.html</anchorfile>
      <anchor>a2a993f3e785fc0929c42d5cfe3efeb31</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::RayCastInput</name>
    <filename>structplayrho_1_1detail_1_1RayCastInput.html</filename>
    <templarg>N</templarg>
    <member kind="variable">
      <type>UnitInterval&lt; Real &gt;</type>
      <name>maxFraction</name>
      <anchorfile>structplayrho_1_1detail_1_1RayCastInput.html</anchorfile>
      <anchor>aa0b141435d73218cda9930d7cc723ef7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; Length, N &gt;</type>
      <name>p1</name>
      <anchorfile>structplayrho_1_1detail_1_1RayCastInput.html</anchorfile>
      <anchor>ae704520881afed2dde9ad52c23466250</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; Length, N &gt;</type>
      <name>p2</name>
      <anchorfile>structplayrho_1_1detail_1_1RayCastInput.html</anchorfile>
      <anchor>ac2bf0abf53cc75c30d40e38440688dbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>GetAABB</name>
      <anchorfile>structplayrho_1_1detail_1_1RayCastInput.html</anchorfile>
      <anchor>a5c551f67d9d86f42a5518cc7cc69a2ff</anchor>
      <arglist>(const playrho::detail::RayCastInput&lt; 2 &gt; &amp;input) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::RegStepStats</name>
    <filename>structplayrho_1_1RegStepStats.html</filename>
    <member kind="typedef">
      <type>std::uint32_t</type>
      <name>counter_type</name>
      <anchorfile>structplayrho_1_1RegStepStats.html</anchorfile>
      <anchor>a28c54150b3b815b281bf5edeeea9a531</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BodyCounter</type>
      <name>bodiesSlept</name>
      <anchorfile>structplayrho_1_1RegStepStats.html</anchorfile>
      <anchor>ae3bf4dd1fb90ec5796fec9384cf8e9f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>contactsAdded</name>
      <anchorfile>structplayrho_1_1RegStepStats.html</anchorfile>
      <anchor>a4072966f53fbc8629e9ca20f80fbdc3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BodyCounter</type>
      <name>islandsFound</name>
      <anchorfile>structplayrho_1_1RegStepStats.html</anchorfile>
      <anchor>ab7d450a02ef4369564d88a69b53cc915</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BodyCounter</type>
      <name>islandsSolved</name>
      <anchorfile>structplayrho_1_1RegStepStats.html</anchorfile>
      <anchor>a47e17195aadb3418bab41d74262f0358</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum</type>
      <name>maxIncImpulse</name>
      <anchorfile>structplayrho_1_1RegStepStats.html</anchorfile>
      <anchor>ade610bd3954daebf0c1ade2b7d04a69e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BodyCounter</type>
      <name>maxIslandBodies</name>
      <anchorfile>structplayrho_1_1RegStepStats.html</anchorfile>
      <anchor>aaa37625be8b01a8d29b5502dce6c166d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>minSeparation</name>
      <anchorfile>structplayrho_1_1RegStepStats.html</anchorfile>
      <anchor>a81e12bb435f7cefe9879cca393b246fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>proxiesMoved</name>
      <anchorfile>structplayrho_1_1RegStepStats.html</anchorfile>
      <anchor>aad48bb0799fbca241b0fe72b71a9ad85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>sumPosIters</name>
      <anchorfile>structplayrho_1_1RegStepStats.html</anchorfile>
      <anchor>a617e466c8bed191b228829b18436c0f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>sumVelIters</name>
      <anchorfile>structplayrho_1_1RegStepStats.html</anchorfile>
      <anchor>acf9a3a63b6c0c7182005ff7ae6d381c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>RegStepStats &amp;</type>
      <name>Update</name>
      <anchorfile>structplayrho_1_1RegStepStats.html</anchorfile>
      <anchor>a3129f24959327f2ae255de4d0b2badba</anchor>
      <arglist>(RegStepStats &amp;lhs, const IslandStats &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::part::RestitutionIs</name>
    <filename>structplayrho_1_1d2_1_1part_1_1RestitutionIs.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">playrho::d2::part::DefaultPolicies</base>
    <member kind="typedef">
      <type>Policy</type>
      <name>Restitution</name>
      <anchorfile>structplayrho_1_1d2_1_1part_1_1RestitutionIs.html</anchorfile>
      <anchor>a75ef91a9ea0d8cfbe88e817d917ec4cb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::ReversionWrapper</name>
    <filename>structplayrho_1_1ReversionWrapper.html</filename>
    <templarg></templarg>
    <member kind="variable">
      <type>T &amp;</type>
      <name>iterable</name>
      <anchorfile>structplayrho_1_1ReversionWrapper.html</anchorfile>
      <anchor>abfedf868e0ac963a5d40177f282982ae</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::GearJointConf::RevoluteData</name>
    <filename>structplayrho_1_1d2_1_1GearJointConf_1_1RevoluteData.html</filename>
    <member kind="variable">
      <type>Angle</type>
      <name>referenceAngle</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf_1_1RevoluteData.html</anchorfile>
      <anchor>a4b655e55e9c9619a08ac4352006854b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf_1_1RevoluteData.html</anchorfile>
      <anchor>a24b0f175ed2d20f9b7282990b2f30333</anchor>
      <arglist>(const GearJointConf::RevoluteData &amp;lhs, const GearJointConf::RevoluteData &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf_1_1RevoluteData.html</anchorfile>
      <anchor>ab7f36c40b8f0777a2f745dc5078300d3</anchor>
      <arglist>(const GearJointConf::RevoluteData &amp;lhs, const GearJointConf::RevoluteData &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::RevoluteJointConf</name>
    <filename>structplayrho_1_1d2_1_1RevoluteJointConf.html</filename>
    <base>JointBuilder&lt; RevoluteJointConf &gt;</base>
    <member kind="typedef">
      <type>JointBuilder&lt; RevoluteJointConf &gt;</type>
      <name>super</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a65d0db4433a486e5e210757ba4b3c95f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>RevoluteJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a1eea94f5e9307aaee48dc535d2d7fcea</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RevoluteJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a496c059cb92605ace07c11bd5fd88b3a</anchor>
      <arglist>(BodyID bA, BodyID bB, const Length2 &amp;laA=Length2{}, const Length2 &amp;laB=Length2{}, Angle ra=0_deg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseEnableLimit</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a5497df64cd4353899fb0e4f193cd5ae4</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseEnableMotor</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>af050ebf56be26fd58c1487ccd039a179</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseLowerAngle</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a5683e696ea5b45aaa9e95db47852c175</anchor>
      <arglist>(Angle v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseMaxMotorTorque</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a5a154078f81c967a0c0023bc5fce353a</anchor>
      <arglist>(Torque v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseMotorSpeed</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a3627767a065767618571ce350dff633d</anchor>
      <arglist>(AngularVelocity v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseUpperAngle</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a3fd01969e76c450d4eb251f0c2157017</anchor>
      <arglist>(Angle v) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>RotInertia</type>
      <name>angularMass</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>abfd11f99eb34bb03fdcd63378ec6fb19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AngularMomentum</type>
      <name>angularMotorImpulse</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>af2a98bbc7424fe8a5d9d7ddb949dc6cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enableLimit</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>abb607270b510bd784d929c9338377987</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enableMotor</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>ac3dad8b2ed239ab461f6f46f02a91d31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3</type>
      <name>impulse</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a553d6dfaae6e30f193e3a5f281975e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LimitState</type>
      <name>limitState</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>ac03368c87b9686e5be982b5b8b6eca55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorA</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a2fcc05a844f7b23c1f6436a14ddc6b9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorB</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>ae121b11f06c2846c9c21f6bb859b41a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Angle</type>
      <name>lowerAngle</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a0ccc513b9e7cb2de2e69dc3ddafaa5d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Mat33</type>
      <name>mass</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a552eaed98a8f72e184f299c64e1ac8bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Torque</type>
      <name>maxMotorTorque</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a06214676ef7b5c1bde90398241c69f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AngularVelocity</type>
      <name>motorSpeed</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>ad4ade0ad13e33db6ff8ac1d7dc2a95f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>rA</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>ac32a2aa5fabef213cfa88fcc64492f04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>rB</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a56ecc3e9e21f7ddd82d62bd57139fd2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Angle</type>
      <name>referenceAngle</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>ae12fcb14448e24409280a4b2d680862f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Angle</type>
      <name>upperAngle</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a48178eb3386b21661b50428ad01a83a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr Angle</type>
      <name>GetAngularLowerLimit</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>afd8850ec299f0679c41ca58081408de8</anchor>
      <arglist>(const RevoluteJointConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a4ee40ca4a9dbe09390f0ff493f276dac</anchor>
      <arglist>(const RevoluteJointConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Angle</type>
      <name>GetAngularUpperLimit</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a0f475e87122dc3f396a975f55b1c70d0</anchor>
      <arglist>(const RevoluteJointConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a2cae96cc4b8f16e7a9ce6abd543f09c1</anchor>
      <arglist>(const RevoluteJointConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a7b32961588123ecf24d8c176b39be0b8</anchor>
      <arglist>(RevoluteJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetAngularLimits</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>ae5635ff98f64bcbf6a31cba670913afc</anchor>
      <arglist>(RevoluteJointConf &amp;object, Angle lower, Angle upper) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetMaxMotorTorque</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>ac5613ecd1ba9cd47dcfa45191c137dbd</anchor>
      <arglist>(RevoluteJointConf &amp;object, Torque value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>ShiftOrigin</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>af7ebe3d8362ba3517d73e536888ca270</anchor>
      <arglist>(RevoluteJointConf &amp;, const Length2 &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a15b5d820404f01071ece796f787c4fab</anchor>
      <arglist>(const RevoluteJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>aa27f190089266d9d8de1d9f3ae963999</anchor>
      <arglist>(RevoluteJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::RopeJointConf</name>
    <filename>structplayrho_1_1d2_1_1RopeJointConf.html</filename>
    <base>JointBuilder&lt; RopeJointConf &gt;</base>
    <member kind="typedef">
      <type>JointBuilder&lt; RopeJointConf &gt;</type>
      <name>super</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>a8602b4d23d1f5952bf35c6cdb4c4885f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>RopeJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>a34c804081c9fd43f40b5227aee89e0be</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>RopeJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>a866fca253c714c5c35cc7fb3de5b214e</anchor>
      <arglist>(BodyID bA, BodyID bB) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseMaxLength</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>a8665e7bae650f9d04c8fa2d9edf97026</anchor>
      <arglist>(Length v) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Momentum</type>
      <name>impulse</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>a6e5e59377727a518a6946cc6b830625f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>length</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>ab87366b4a26de4915c78d9575c0bbcfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LimitState</type>
      <name>limitState</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>ae485076c7c97334431e7bc8d9118fad6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorA</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>acd5e67cc48836a7f923bc80919896665</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorB</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>ae118b073aebd3f30cc2305ab98a00e3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Mass</type>
      <name>mass</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>accff532beebf0e6ea538a5d714fb8f49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>maxLength</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>a99f6e04f43dec401dd2428001f67339a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>rA</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>a7a1174bb5af831f04e94ff983a6aa642</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>rB</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>af61dcf4e43d6354a70f942f9769d1560</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitVec</type>
      <name>u</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>a1ab89591502601289dea1121f89af556</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>af3c61329399916ae2b063e6ba94ffb6e</anchor>
      <arglist>(const RopeJointConf &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>ac7acc7a694d7729620e48300eb157d7b</anchor>
      <arglist>(const RopeJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetMaxLength</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>ad5cf9d398d3e370e806a070fdbb8d685</anchor>
      <arglist>(const RopeJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>a0fa82bd7d2ebe576faf0ceac30982870</anchor>
      <arglist>(RopeJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetMaxLength</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>aeeffd09d05131a961e0d3bd87f94c889</anchor>
      <arglist>(RopeJointConf &amp;object, Length value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>ShiftOrigin</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>ad7f4d500e1470889c5896aefbbc2f2b2</anchor>
      <arglist>(RopeJointConf &amp;, const Length2 &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>a168b27b3bf6ef8dec62708dd2037abcb</anchor>
      <arglist>(const RopeJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>a67249c115b7b84fc2a58abc83664c934</anchor>
      <arglist>(RopeJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::part::SensorIs</name>
    <filename>structplayrho_1_1d2_1_1part_1_1SensorIs.html</filename>
    <templarg></templarg>
    <base virtualness="virtual">playrho::d2::part::DefaultPolicies</base>
    <member kind="typedef">
      <type>Policy</type>
      <name>Sensor</name>
      <anchorfile>structplayrho_1_1d2_1_1part_1_1SensorIs.html</anchorfile>
      <anchor>af776fa3201a1e3b66c3e389a3898fa16</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::SeparationInfo</name>
    <filename>structplayrho_1_1detail_1_1SeparationInfo.html</filename>
    <templarg>N</templarg>
    <member kind="variable">
      <type>Length</type>
      <name>distance</name>
      <anchorfile>structplayrho_1_1detail_1_1SeparationInfo.html</anchorfile>
      <anchor>a52e9b815b891868dea807e7163cb62cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VertexCounter</type>
      <name>firstShape</name>
      <anchorfile>structplayrho_1_1detail_1_1SeparationInfo.html</anchorfile>
      <anchor>afa2a42c94308c4343111fff4d7880dab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VertexCounterArray&lt; N &gt;</type>
      <name>secondShape</name>
      <anchorfile>structplayrho_1_1detail_1_1SeparationInfo.html</anchorfile>
      <anchor>a889ca2d038a15d1243ed8d7c56eee94c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::SeparationScenarioFaceA</name>
    <filename>structplayrho_1_1d2_1_1SeparationScenarioFaceA.html</filename>
    <member kind="variable">
      <type>UnitVec</type>
      <name>axis</name>
      <anchorfile>structplayrho_1_1d2_1_1SeparationScenarioFaceA.html</anchorfile>
      <anchor>abca9a658c13084bb74715a4b4ecff334</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localPoint</name>
      <anchorfile>structplayrho_1_1d2_1_1SeparationScenarioFaceA.html</anchorfile>
      <anchor>a99a7738d25f60ab9e5d0969e16bf87fa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::SeparationScenarioFaceB</name>
    <filename>structplayrho_1_1d2_1_1SeparationScenarioFaceB.html</filename>
    <member kind="variable">
      <type>UnitVec</type>
      <name>axis</name>
      <anchorfile>structplayrho_1_1d2_1_1SeparationScenarioFaceB.html</anchorfile>
      <anchor>ad0cdaac308a66b80a89a1e1ee0b5c691</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localPoint</name>
      <anchorfile>structplayrho_1_1d2_1_1SeparationScenarioFaceB.html</anchorfile>
      <anchor>a5bba7d5fa7eb706bc4e1066a085d1f15</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::SeparationScenarioPoints</name>
    <filename>structplayrho_1_1d2_1_1SeparationScenarioPoints.html</filename>
    <member kind="variable">
      <type>UnitVec</type>
      <name>axis</name>
      <anchorfile>structplayrho_1_1d2_1_1SeparationScenarioPoints.html</anchorfile>
      <anchor>ad1d3896ff7ee1b8e0ffade81686ff81d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::Shape</name>
    <filename>classplayrho_1_1d2_1_1Shape.html</filename>
    <member kind="function">
      <type></type>
      <name>Shape</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>abb58ed48e6319ee154511d7cf777cc65</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Shape</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a03cb5cf92904b4d0fa1fc7ac6100693e</anchor>
      <arglist>(const Shape &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Shape</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a3b3e2bdf92a75c20cd217306b8eca737</anchor>
      <arglist>(Shape &amp;&amp;other) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Shape</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a62f403b88ce9b5418b70a1cafd83f327</anchor>
      <arglist>(T &amp;&amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_value</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>aca717d0407529c53735c9b71df6a3b87</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Shape &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a401fa0a6768311754bf95fc058961cdd</anchor>
      <arglist>(const Shape &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Shape &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>acbee1b56e39a192551950a196bb8b6be</anchor>
      <arglist>(Shape &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>Shape &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>ae872806cb88b008d75250f30e60b3ec3</anchor>
      <arglist>(T &amp;&amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a63cf8a6770b252e74335895bc5e2cdcc</anchor>
      <arglist>(Shape &amp;other) noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultDensity</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a681ea9a5463263cebd463ed4ae579646</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend DistanceProxy</type>
      <name>GetChild</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>aef5a495e8d68c39d47d049f51ec5452f</anchor>
      <arglist>(const Shape &amp;shape, ChildCounter index)</arglist>
    </member>
    <member kind="friend">
      <type>friend ChildCounter</type>
      <name>GetChildCount</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>ac04194136cade2a9cb3db0ce6234b3fc</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend const void *</type>
      <name>GetData</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a2b3ae4694d7e8995f4500e9a84e25046</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend NonNegative&lt; AreaDensity &gt;</type>
      <name>GetDensity</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a154958fa91ee5653a279fc28e1472ab8</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend Filter</type>
      <name>GetFilter</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a33cf55ee2ed74e277059798c7d227661</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend NonNegativeFF&lt; Real &gt;</type>
      <name>GetFriction</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a038d3af137f7e5f006855cfbcad9b7ea</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend MassData</type>
      <name>GetMassData</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a194d825eec87fa11a2f6436bedc11736</anchor>
      <arglist>(const Shape &amp;shape)</arglist>
    </member>
    <member kind="friend">
      <type>friend Real</type>
      <name>GetRestitution</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>ab731ba8dc3b08ed048d5348def3f0ab6</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend TypeID</type>
      <name>GetType</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>aa0874edd64ea7ae7e3dc4a49f88cd15f</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a9d425ca5951dc633c1a63d5449091871</anchor>
      <arglist>(const Shape &amp;shape, ChildCounter idx)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>IsSensor</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a5e0a94bccb99d4a607fe4da03c5b19f1</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a8725ac7fabaac950fabc413b492da29e</anchor>
      <arglist>(const Shape &amp;lhs, const Shape &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>aab78335ce5150860eca7156ef23cc6c4</anchor>
      <arglist>(const Shape &amp;lhs, const Shape &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>Rotate</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>ad0a4c924c809e055c72602b69ac143ec</anchor>
      <arglist>(Shape &amp;shape, const UnitVec &amp;value)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>Scale</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a153845452232d7af3347d24c4cc7f1a2</anchor>
      <arglist>(Shape &amp;shape, const Vec2 &amp;value)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>SetDensity</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>aa96c782e816b1385c9389f057d32f59c</anchor>
      <arglist>(Shape &amp;shape, NonNegative&lt; AreaDensity &gt; value)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>SetFilter</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>ab165c5f10475ef41f95442c80299de70</anchor>
      <arglist>(Shape &amp;shape, Filter value)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>SetFriction</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a2259da8ada8b6a103ddb2f1a94f642e0</anchor>
      <arglist>(Shape &amp;shape, NonNegative&lt; Real &gt; value)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>SetRestitution</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>ad604adb4ccb3a057445c77ac659db204</anchor>
      <arglist>(Shape &amp;shape, Real value)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>SetSensor</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>ad088625d8696f80fba12fa7a9be3b558</anchor>
      <arglist>(Shape &amp;shape, bool value)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>SetVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>ad12a3e159f77c5d514253e68dece435c</anchor>
      <arglist>(Shape &amp;shape, ChildCounter idx, NonNegative&lt; Length &gt; value)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>Translate</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a942893e7d737d102ce2d53f5e0c53bee</anchor>
      <arglist>(Shape &amp;shape, const Length2 &amp;value)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::add_pointer_t&lt; std::add_const_t&lt; T &gt; &gt;</type>
      <name>TypeCast</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a26f0e014fb16e6493ff6fb297d6a726a</anchor>
      <arglist>(const Shape *value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeAABB</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>ad9151c5a36cb5bb68c4a09a8571e5e98</anchor>
      <arglist>(const Shape &amp;shape, const Transformation &amp;xf)</arglist>
    </member>
    <member kind="function">
      <type>NonNegativeFF&lt; Real &gt;</type>
      <name>GetDefaultFriction</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>ae22ed2de98d0e1d8a06ec370159038ef</anchor>
      <arglist>(const Shape &amp;a, const Shape &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetDefaultRestitution</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a5c54c5f7b57db25cefecbcef1fcf1452</anchor>
      <arglist>(const Shape &amp;a, const Shape &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>VertexCounter</type>
      <name>GetVertexCount</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>ad164dccb6b5dcf68fbcd9e7918f17eec</anchor>
      <arglist>(const Shape &amp;shape, ChildCounter index)</arglist>
    </member>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gaada5f6c5635166baaf1bc81636d8b93a</anchor>
      <arglist>(const Shape &amp;shape, ChildCounter childIndex, const RayCastInput &amp;input, const Transformation &amp;transform) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ShouldCollide</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a252601c955ff120821c067c7fd9ebf6c</anchor>
      <arglist>(const Shape &amp;a, const Shape &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestPoint</name>
      <anchorfile>group__TestPointGroup.html</anchorfile>
      <anchor>ga76680b0ead06bcd405828dc4ac179641</anchor>
      <arglist>(const Shape &amp;shape, const Length2 &amp;point) noexcept</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>TypeCast</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a2552f9d7b9b8d2c5cf4b5ef71140b709</anchor>
      <arglist>(const Shape &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::ShapeBuilder</name>
    <filename>structplayrho_1_1d2_1_1ShapeBuilder.html</filename>
    <templarg></templarg>
    <base>playrho::d2::BaseShapeConf</base>
    <member kind="function">
      <type>constexpr ConcreteConf &amp;</type>
      <name>UseDensity</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>ada5289c242c8db386aee2da38dc6e510</anchor>
      <arglist>(NonNegative&lt; AreaDensity &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ConcreteConf &amp;</type>
      <name>UseFilter</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>aaa6eca27d4bb7d60c5e5a5eb453be8a9</anchor>
      <arglist>(Filter value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ConcreteConf &amp;</type>
      <name>UseFriction</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a178bb3a59366b17f0c122c32d4b0b8e3</anchor>
      <arglist>(NonNegative&lt; Real &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ConcreteConf &amp;</type>
      <name>UseIsSensor</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a6b3f2e74b516cd72d358dfda0db90ea5</anchor>
      <arglist>(bool value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ConcreteConf &amp;</type>
      <name>UseRestitution</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a3d4e6ad77845a03047737cce3037fffe</anchor>
      <arglist>(Finite&lt; Real &gt; value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeBuilder&lt; ChainShapeConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1ShapeBuilder.html</filename>
    <base>playrho::d2::BaseShapeConf</base>
    <member kind="function">
      <type>constexpr ChainShapeConf &amp;</type>
      <name>UseDensity</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>ada5289c242c8db386aee2da38dc6e510</anchor>
      <arglist>(NonNegative&lt; AreaDensity &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ChainShapeConf &amp;</type>
      <name>UseFilter</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>aaa6eca27d4bb7d60c5e5a5eb453be8a9</anchor>
      <arglist>(Filter value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ChainShapeConf &amp;</type>
      <name>UseFriction</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a178bb3a59366b17f0c122c32d4b0b8e3</anchor>
      <arglist>(NonNegative&lt; Real &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ChainShapeConf &amp;</type>
      <name>UseIsSensor</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a6b3f2e74b516cd72d358dfda0db90ea5</anchor>
      <arglist>(bool value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ChainShapeConf &amp;</type>
      <name>UseRestitution</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a3d4e6ad77845a03047737cce3037fffe</anchor>
      <arglist>(Finite&lt; Real &gt; value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeBuilder&lt; DiskShapeConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1ShapeBuilder.html</filename>
    <base>playrho::d2::BaseShapeConf</base>
    <member kind="function">
      <type>constexpr DiskShapeConf &amp;</type>
      <name>UseDensity</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>ada5289c242c8db386aee2da38dc6e510</anchor>
      <arglist>(NonNegative&lt; AreaDensity &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr DiskShapeConf &amp;</type>
      <name>UseFilter</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>aaa6eca27d4bb7d60c5e5a5eb453be8a9</anchor>
      <arglist>(Filter value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr DiskShapeConf &amp;</type>
      <name>UseFriction</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a178bb3a59366b17f0c122c32d4b0b8e3</anchor>
      <arglist>(NonNegative&lt; Real &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr DiskShapeConf &amp;</type>
      <name>UseIsSensor</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a6b3f2e74b516cd72d358dfda0db90ea5</anchor>
      <arglist>(bool value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr DiskShapeConf &amp;</type>
      <name>UseRestitution</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a3d4e6ad77845a03047737cce3037fffe</anchor>
      <arglist>(Finite&lt; Real &gt; value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeBuilder&lt; EdgeShapeConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1ShapeBuilder.html</filename>
    <base>playrho::d2::BaseShapeConf</base>
    <member kind="function">
      <type>constexpr EdgeShapeConf &amp;</type>
      <name>UseDensity</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>ada5289c242c8db386aee2da38dc6e510</anchor>
      <arglist>(NonNegative&lt; AreaDensity &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr EdgeShapeConf &amp;</type>
      <name>UseFilter</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>aaa6eca27d4bb7d60c5e5a5eb453be8a9</anchor>
      <arglist>(Filter value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr EdgeShapeConf &amp;</type>
      <name>UseFriction</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a178bb3a59366b17f0c122c32d4b0b8e3</anchor>
      <arglist>(NonNegative&lt; Real &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr EdgeShapeConf &amp;</type>
      <name>UseIsSensor</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a6b3f2e74b516cd72d358dfda0db90ea5</anchor>
      <arglist>(bool value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr EdgeShapeConf &amp;</type>
      <name>UseRestitution</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a3d4e6ad77845a03047737cce3037fffe</anchor>
      <arglist>(Finite&lt; Real &gt; value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeBuilder&lt; MultiShapeConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1ShapeBuilder.html</filename>
    <base>playrho::d2::BaseShapeConf</base>
    <member kind="function">
      <type>constexpr MultiShapeConf &amp;</type>
      <name>UseDensity</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>ada5289c242c8db386aee2da38dc6e510</anchor>
      <arglist>(NonNegative&lt; AreaDensity &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr MultiShapeConf &amp;</type>
      <name>UseFilter</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>aaa6eca27d4bb7d60c5e5a5eb453be8a9</anchor>
      <arglist>(Filter value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr MultiShapeConf &amp;</type>
      <name>UseFriction</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a178bb3a59366b17f0c122c32d4b0b8e3</anchor>
      <arglist>(NonNegative&lt; Real &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr MultiShapeConf &amp;</type>
      <name>UseIsSensor</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a6b3f2e74b516cd72d358dfda0db90ea5</anchor>
      <arglist>(bool value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr MultiShapeConf &amp;</type>
      <name>UseRestitution</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a3d4e6ad77845a03047737cce3037fffe</anchor>
      <arglist>(Finite&lt; Real &gt; value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeBuilder&lt; PolygonShapeConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1ShapeBuilder.html</filename>
    <base>playrho::d2::BaseShapeConf</base>
    <member kind="function">
      <type>constexpr PolygonShapeConf &amp;</type>
      <name>UseDensity</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>ada5289c242c8db386aee2da38dc6e510</anchor>
      <arglist>(NonNegative&lt; AreaDensity &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr PolygonShapeConf &amp;</type>
      <name>UseFilter</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>aaa6eca27d4bb7d60c5e5a5eb453be8a9</anchor>
      <arglist>(Filter value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr PolygonShapeConf &amp;</type>
      <name>UseFriction</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a178bb3a59366b17f0c122c32d4b0b8e3</anchor>
      <arglist>(NonNegative&lt; Real &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr PolygonShapeConf &amp;</type>
      <name>UseIsSensor</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a6b3f2e74b516cd72d358dfda0db90ea5</anchor>
      <arglist>(bool value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr PolygonShapeConf &amp;</type>
      <name>UseRestitution</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a3d4e6ad77845a03047737cce3037fffe</anchor>
      <arglist>(Finite&lt; Real &gt; value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeBuilder&lt; ShapeConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1ShapeBuilder.html</filename>
    <base>playrho::d2::BaseShapeConf</base>
    <member kind="function">
      <type>constexpr ShapeConf &amp;</type>
      <name>UseDensity</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>ada5289c242c8db386aee2da38dc6e510</anchor>
      <arglist>(NonNegative&lt; AreaDensity &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ShapeConf &amp;</type>
      <name>UseFilter</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>aaa6eca27d4bb7d60c5e5a5eb453be8a9</anchor>
      <arglist>(Filter value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ShapeConf &amp;</type>
      <name>UseFriction</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a178bb3a59366b17f0c122c32d4b0b8e3</anchor>
      <arglist>(NonNegative&lt; Real &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ShapeConf &amp;</type>
      <name>UseIsSensor</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a6b3f2e74b516cd72d358dfda0db90ea5</anchor>
      <arglist>(bool value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ShapeConf &amp;</type>
      <name>UseRestitution</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a3d4e6ad77845a03047737cce3037fffe</anchor>
      <arglist>(Finite&lt; Real &gt; value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::detail::ShapeConcept</name>
    <filename>structplayrho_1_1d2_1_1detail_1_1ShapeConcept.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual std::unique_ptr&lt; ShapeConcept &gt;</type>
      <name>Clone_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeConcept.html</anchorfile>
      <anchor>a2caae38c76403971530cbd4207d05691</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DistanceProxy</type>
      <name>GetChild_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeConcept.html</anchorfile>
      <anchor>ad548aa03e30e916b6ec7cdad08cad357</anchor>
      <arglist>(ChildCounter index) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ChildCounter</type>
      <name>GetChildCount_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeConcept.html</anchorfile>
      <anchor>ab7e89658228847c3cf3c2fc5137ce82c</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const void *</type>
      <name>GetData_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeConcept.html</anchorfile>
      <anchor>a8811082995f7df29b8a5792159c329b2</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual NonNegative&lt; AreaDensity &gt;</type>
      <name>GetDensity_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeConcept.html</anchorfile>
      <anchor>a7941eb8955bf2dc1b18b90fa69bdc9eb</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Filter</type>
      <name>GetFilter_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeConcept.html</anchorfile>
      <anchor>af55c65f23a1edbb079d84f93e410a49e</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual NonNegativeFF&lt; Real &gt;</type>
      <name>GetFriction_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeConcept.html</anchorfile>
      <anchor>a76921e62f530d9eb9080b5174e3d23bd</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual MassData</type>
      <name>GetMassData_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeConcept.html</anchorfile>
      <anchor>ae5df229b170744c75861b4eb48b538d2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Real</type>
      <name>GetRestitution_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeConcept.html</anchorfile>
      <anchor>a6dae1893dc19eef6f8b461e87a0d0e18</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TypeID</type>
      <name>GetType_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeConcept.html</anchorfile>
      <anchor>aefe28ab40e71d769a7f6f50bc064d150</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeConcept.html</anchorfile>
      <anchor>ab406c23aeb216f89519e2cf83c4d4cce</anchor>
      <arglist>(ChildCounter idx) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>IsEqual_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeConcept.html</anchorfile>
      <anchor>ac561d6c466046de3e358cfb80464df94</anchor>
      <arglist>(const ShapeConcept &amp;other) const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>IsSensor_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeConcept.html</anchorfile>
      <anchor>acaa3e8e6d2f9f4d5785b2a91c8d0a417</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Rotate_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeConcept.html</anchorfile>
      <anchor>af99c9af7c208bf8bc6da3f0779c8685f</anchor>
      <arglist>(const UnitVec &amp;value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Scale_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeConcept.html</anchorfile>
      <anchor>abad151bfe3cb5ef14b12bb4641670a23</anchor>
      <arglist>(const Vec2 &amp;value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetDensity_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeConcept.html</anchorfile>
      <anchor>aed3d64c5707384e52d227f378c4e0ac4</anchor>
      <arglist>(NonNegative&lt; AreaDensity &gt;) noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetFilter_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeConcept.html</anchorfile>
      <anchor>af3a058a54c971160edd1d2cc32798b6e</anchor>
      <arglist>(Filter value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetFriction_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeConcept.html</anchorfile>
      <anchor>a72d3663dda81507b297cc05a6f492c99</anchor>
      <arglist>(NonNegative&lt; Real &gt; value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetRestitution_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeConcept.html</anchorfile>
      <anchor>a875338d325a906af9cd133343985f45a</anchor>
      <arglist>(Real value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetSensor_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeConcept.html</anchorfile>
      <anchor>ad8c016a04c1038fb5145ea0e3d043d77</anchor>
      <arglist>(bool value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetVertexRadius_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeConcept.html</anchorfile>
      <anchor>a9435967878a0bb48ffadcbdc2161f2e2</anchor>
      <arglist>(ChildCounter idx, NonNegative&lt; Length &gt; value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Translate_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeConcept.html</anchorfile>
      <anchor>a42a9a4f2d2c236accfbc44b574468d90</anchor>
      <arglist>(const Length2 &amp;value)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::ShapeConf</name>
    <filename>structplayrho_1_1d2_1_1ShapeConf.html</filename>
    <base>ShapeBuilder&lt; ShapeConf &gt;</base>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::detail::ShapeModel</name>
    <filename>structplayrho_1_1d2_1_1detail_1_1ShapeModel.html</filename>
    <templarg></templarg>
    <base>playrho::d2::detail::ShapeConcept</base>
    <member kind="typedef">
      <type>T</type>
      <name>data_type</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeModel.html</anchorfile>
      <anchor>ae6bb9f895358122b0869a38a60cda8b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ShapeModel</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeModel.html</anchorfile>
      <anchor>abdd2f214c16effa849b4659aa8133718</anchor>
      <arglist>(U &amp;&amp;arg) noexcept(std::is_nothrow_constructible_v&lt; T, U &gt;)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; ShapeConcept &gt;</type>
      <name>Clone_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeModel.html</anchorfile>
      <anchor>acd91a16381bae4cc621c60de8206db3f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>DistanceProxy</type>
      <name>GetChild_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeModel.html</anchorfile>
      <anchor>a034f1b1ca8493afd6754e0747e0f7f4d</anchor>
      <arglist>(ChildCounter index) const override</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetChildCount_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeModel.html</anchorfile>
      <anchor>abd35bda5eeb0f9d0b40812cb0c06be76</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>GetData_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeModel.html</anchorfile>
      <anchor>af94fa9b4c2c2a1765499ab15fcb22979</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; AreaDensity &gt;</type>
      <name>GetDensity_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeModel.html</anchorfile>
      <anchor>ad70089b5b342bc16ff94ea2446f62ca0</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>Filter</type>
      <name>GetFilter_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeModel.html</anchorfile>
      <anchor>a18b801707e0e4a2c914cfa122542f755</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>NonNegativeFF&lt; Real &gt;</type>
      <name>GetFriction_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeModel.html</anchorfile>
      <anchor>a8f6115fdb5c01b82f108264c5b6d5456</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeModel.html</anchorfile>
      <anchor>ab6237f9b81f720eb116a44ab32e5d8b1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetRestitution_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeModel.html</anchorfile>
      <anchor>a483944deeadece45b3a03f1c77d5c0f9</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>TypeID</type>
      <name>GetType_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeModel.html</anchorfile>
      <anchor>a1c2f33349c0f2a8f370544e477715d52</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeModel.html</anchorfile>
      <anchor>a66ee178e68e315ad314b35ce54f187f1</anchor>
      <arglist>(ChildCounter idx) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEqual_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeModel.html</anchorfile>
      <anchor>a82bc0d7fdfcd916f75ab7f7ab2c034b3</anchor>
      <arglist>(const ShapeConcept &amp;other) const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSensor_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeModel.html</anchorfile>
      <anchor>ac1ce9799721b87363ca6519261cebec7</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Rotate_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeModel.html</anchorfile>
      <anchor>acf74361365c52acfdbed531530c25ce5</anchor>
      <arglist>(const UnitVec &amp;value) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Scale_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeModel.html</anchorfile>
      <anchor>aa1f556cc50674ac2cc1094aa5523f127</anchor>
      <arglist>(const Vec2 &amp;value) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDensity_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeModel.html</anchorfile>
      <anchor>ad8a5e35fdaf8b1f055c73268325b6be3</anchor>
      <arglist>(NonNegative&lt; AreaDensity &gt; value) noexcept override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFilter_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeModel.html</anchorfile>
      <anchor>a12cdd213b5ee40fc8a24bab28f47aac0</anchor>
      <arglist>(Filter value) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFriction_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeModel.html</anchorfile>
      <anchor>af321f5a67d781df63dcd2c8d215bfaf2</anchor>
      <arglist>(NonNegative&lt; Real &gt; value) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRestitution_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeModel.html</anchorfile>
      <anchor>a37802a2472912a9e2015157884c3c2fa</anchor>
      <arglist>(Real value) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSensor_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeModel.html</anchorfile>
      <anchor>ade0045db72b4ced5f7134434cfca7f71</anchor>
      <arglist>(bool value) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVertexRadius_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeModel.html</anchorfile>
      <anchor>a4554660ab3cadff3005e6602da250683</anchor>
      <arglist>(ChildCounter idx, NonNegative&lt; Length &gt; value) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Translate_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeModel.html</anchorfile>
      <anchor>a5e1adbff8960683de9b3a624392b3da5</anchor>
      <arglist>(const Length2 &amp;value) override</arglist>
    </member>
    <member kind="variable">
      <type>data_type</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1ShapeModel.html</anchorfile>
      <anchor>a0f7b8c52d21e16a4fb871a39f40c2877</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::Simplex</name>
    <filename>classplayrho_1_1d2_1_1Simplex.html</filename>
    <class kind="struct">playrho::d2::Simplex::Cache</class>
    <member kind="typedef">
      <type>ArrayList&lt; Real, MaxSimplexEdges, std::remove_const_t&lt; decltype(MaxSimplexEdges)&gt; &gt;</type>
      <name>Coefficients</name>
      <anchorfile>classplayrho_1_1d2_1_1Simplex.html</anchorfile>
      <anchor>a5a066c6962efe38ba7a805e7976adffe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SimplexEdges::size_type</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1d2_1_1Simplex.html</anchorfile>
      <anchor>aa09547ee35a1d556d336b39bb4e42f1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr Real</type>
      <name>GetCoefficient</name>
      <anchorfile>classplayrho_1_1d2_1_1Simplex.html</anchorfile>
      <anchor>a926797bdfce0464e1067ca352486dac1</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr SimplexEdges</type>
      <name>GetEdges</name>
      <anchorfile>classplayrho_1_1d2_1_1Simplex.html</anchorfile>
      <anchor>a10ef4ae3f0939a14934d7d96dd78a4e1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const SimplexEdge &amp;</type>
      <name>GetSimplexEdge</name>
      <anchorfile>classplayrho_1_1d2_1_1Simplex.html</anchorfile>
      <anchor>a84c15cfdf23cccd81f1a3213b1557863</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classplayrho_1_1d2_1_1Simplex.html</anchorfile>
      <anchor>a01271aa5f68e6c0360d1b5709128770f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Real</type>
      <name>CalcMetric</name>
      <anchorfile>classplayrho_1_1d2_1_1Simplex.html</anchorfile>
      <anchor>a21f4fbe4f435a497f723ba4692745d13</anchor>
      <arglist>(const SimplexEdges &amp;simplexEdges)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Simplex</type>
      <name>Get</name>
      <anchorfile>classplayrho_1_1d2_1_1Simplex.html</anchorfile>
      <anchor>aa29f341b7742ae85f6a0650d8e495a6a</anchor>
      <arglist>(const SimplexEdge &amp;s0) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Simplex</type>
      <name>Get</name>
      <anchorfile>classplayrho_1_1d2_1_1Simplex.html</anchorfile>
      <anchor>a67974276b721135016f384f5475990ef</anchor>
      <arglist>(const SimplexEdge &amp;s0, const SimplexEdge &amp;s1) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Simplex</type>
      <name>Get</name>
      <anchorfile>classplayrho_1_1d2_1_1Simplex.html</anchorfile>
      <anchor>ab745b96a84c8e8340e8abf7efbfd3c69</anchor>
      <arglist>(const SimplexEdge &amp;s0, const SimplexEdge &amp;s1, const SimplexEdge &amp;s2) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Simplex</type>
      <name>Get</name>
      <anchorfile>classplayrho_1_1d2_1_1Simplex.html</anchorfile>
      <anchor>a9c422b7a3f95fe304c3d442350fe2301</anchor>
      <arglist>(const SimplexEdges &amp;edges) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Cache</type>
      <name>GetCache</name>
      <anchorfile>classplayrho_1_1d2_1_1Simplex.html</anchorfile>
      <anchor>ae4e2c906e65ba580c20f5b5fe6d1f37e</anchor>
      <arglist>(const SimplexEdges &amp;edges) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::SimplexEdge</name>
    <filename>classplayrho_1_1d2_1_1SimplexEdge.html</filename>
    <member kind="function">
      <type></type>
      <name>SimplexEdge</name>
      <anchorfile>classplayrho_1_1d2_1_1SimplexEdge.html</anchorfile>
      <anchor>a302d4590ff337587c2be97914585b990</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>SimplexEdge</name>
      <anchorfile>classplayrho_1_1d2_1_1SimplexEdge.html</anchorfile>
      <anchor>ab22276346f99ca2631d5588500449bd3</anchor>
      <arglist>(const Length2 &amp;pA, VertexCounter iA, const Length2 &amp;pB, VertexCounter iB) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetIndexA</name>
      <anchorfile>classplayrho_1_1d2_1_1SimplexEdge.html</anchorfile>
      <anchor>a8df75aba147bfcd60a777351a653903e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetIndexB</name>
      <anchorfile>classplayrho_1_1d2_1_1SimplexEdge.html</anchorfile>
      <anchor>a5b2d2fef45819121bdd387a56a44471a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetIndexPair</name>
      <anchorfile>classplayrho_1_1d2_1_1SimplexEdge.html</anchorfile>
      <anchor>aa6759d7ab3da8f2cdb271bf046031a82</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetPointA</name>
      <anchorfile>classplayrho_1_1d2_1_1SimplexEdge.html</anchorfile>
      <anchor>a39f8f8045f66f2a391023c38d2f732d4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetPointB</name>
      <anchorfile>classplayrho_1_1d2_1_1SimplexEdge.html</anchorfile>
      <anchor>a237041927bcfca462c005529d21a13d2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::Span</name>
    <filename>classplayrho_1_1Span.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>const data_type *</type>
      <name>const_pointer</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>a39a9dc64a82a8fce7d934c6914789165</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>data_type</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>a71f2562f09ebcc2077d54844556707d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>data_type *</type>
      <name>pointer</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>a4ebcb51676a0de69e4a8e1ed2c389762</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>ab168aaeaa6439758345a1ad6d2d3368e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Span</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>a7de1ab7b524515dce4cb659b64cb3881</anchor>
      <arglist>(data_type(&amp;array)[SIZE]) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Span</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>ad851b25c4531c92389186dbe1814fe79</anchor>
      <arglist>(pointer array, size_type size) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Span</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>a92b02e6a1208189dc8d6af2a5ec84fc4</anchor>
      <arglist>(std::initializer_list&lt; T &gt; list) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Span</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>a3859c35e2b5bf0c7e2646819f0065ef3</anchor>
      <arglist>(U &amp;&amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr pointer</type>
      <name>begin</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>a4118a698be775a35ecf712375a70efb0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr pointer</type>
      <name>data</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>a7c0d9b02c59367849f951fe567c33e1c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>a798828a0922d7a61c8005316cd80f76d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr pointer</type>
      <name>end</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>a25ff5593137a0fdad34336306e7ae193</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr data_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>ad6d80d0e150d26436d467b63c24593c9</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>aface1cea0aaf8e6911a8f3473712285f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::StackAllocator</name>
    <filename>classplayrho_1_1StackAllocator.html</filename>
    <class kind="struct">playrho::StackAllocator::Conf</class>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>a0bafd291e17d9f128088d4bef621e9f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StackAllocator</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>a6a11ab98a32ce9f945ea4f36dbc94bc9</anchor>
      <arglist>(const Conf &amp;config=GetDefaultConf())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StackAllocator</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>a758d218aef5b2637acdf12bea4700b71</anchor>
      <arglist>(const StackAllocator &amp;copy)=delete</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>Allocate</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>a1ecbcaa8d549ffa1522e7128fc8a684d</anchor>
      <arglist>(size_type size)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>AllocateArray</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>a1902b15365c55a19c21e9103565e3447</anchor>
      <arglist>(size_type size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Free</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>a74aadaded9475221a0ea343bff727df5</anchor>
      <arglist>(void *p) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetAllocation</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>a1c161fe331b7784d7139e6032dc754a1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetEntryCount</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>a1d9b7f75f4b0e9f03723023a051196b2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetIndex</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>afdba831ecea6d5cc6d44a4051a65e6a4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetMaxAllocation</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>a5dea6fdea4c280522c87c9971d309f6c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetMaxEntries</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>a2314cc547523157f10b1afe5e53105f6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetPreallocatedSize</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>ae9af1be801d148021936d83e00dccd1b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>a42fcb9c0ff893451d417a7390a0779d8</anchor>
      <arglist>(void *p) noexcept</arglist>
    </member>
    <member kind="function">
      <type>StackAllocator &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>a8a48daabf0a431c13a008db54879b7cc</anchor>
      <arglist>(const StackAllocator &amp;other)=delete</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr Conf</type>
      <name>GetDefaultConf</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>aa8e1777833bf1c2b10679acd4daa99ae</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::part::StaticAreaDensity</name>
    <filename>structplayrho_1_1d2_1_1part_1_1StaticAreaDensity.html</filename>
    <templarg>D</templarg>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>density</name>
      <anchorfile>structplayrho_1_1d2_1_1part_1_1StaticAreaDensity.html</anchorfile>
      <anchor>a8af24a4fa42c237a6bf4830eeb6d1930</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::part::StaticFilter</name>
    <filename>structplayrho_1_1d2_1_1part_1_1StaticFilter.html</filename>
    <templarg>CategoryBits</templarg>
    <templarg>MaskBits</templarg>
    <templarg>GroupIndex</templarg>
    <member kind="variable" static="yes">
      <type>static const auto</type>
      <name>filter</name>
      <anchorfile>structplayrho_1_1d2_1_1part_1_1StaticFilter.html</anchorfile>
      <anchor>a5a0a743a2acc9502ee5615044c76d901</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::part::StaticFriction</name>
    <filename>structplayrho_1_1d2_1_1part_1_1StaticFriction.html</filename>
    <templarg>F</templarg>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>friction</name>
      <anchorfile>structplayrho_1_1d2_1_1part_1_1StaticFriction.html</anchorfile>
      <anchor>a47a89ecfed1bd0ad7c86421048767d6b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::part::StaticRectangle</name>
    <filename>classplayrho_1_1d2_1_1part_1_1StaticRectangle.html</filename>
    <templarg>W</templarg>
    <templarg>H</templarg>
    <templarg>V</templarg>
    <member kind="function">
      <type>DistanceProxy</type>
      <name>GetChild</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1StaticRectangle.html</anchorfile>
      <anchor>a5b9fa062e8dc0e3bdc49d1f222f26588</anchor>
      <arglist>(ChildCounter index) const</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetChildCount</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1StaticRectangle.html</anchorfile>
      <anchor>a91887c0cf511d7b93d3d9039cf7d21b3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length2</type>
      <name>GetDimensions</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1StaticRectangle.html</anchorfile>
      <anchor>ad29bd5ff19f181f5b3b55137acbac866</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1StaticRectangle.html</anchorfile>
      <anchor>a59221ed58b2b64d6e31ef43eee705705</anchor>
      <arglist>(NonNegative&lt; AreaDensity &gt; density) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::array&lt; UnitVec, 4u &gt; &amp;</type>
      <name>GetNormals</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1StaticRectangle.html</anchorfile>
      <anchor>a0d8febee8a5437cff4ab71de1644e3a2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length2</type>
      <name>GetOffset</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1StaticRectangle.html</anchorfile>
      <anchor>acca380844a280690a2d7de80087bc7d4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1StaticRectangle.html</anchorfile>
      <anchor>a206f6edb145b51b149c455cae79cef16</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::array&lt; Length2, 4u &gt; &amp;</type>
      <name>GetVertices</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1StaticRectangle.html</anchorfile>
      <anchor>a45ffac749189ee8f7f0a46fe9a24066a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDimensions</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1StaticRectangle.html</anchorfile>
      <anchor>a3eb8bf985709f7904676fa664dcb278f</anchor>
      <arglist>(Length2 val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetOffset</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1StaticRectangle.html</anchorfile>
      <anchor>af0306edea24278fc71aa6a4f93da13a0</anchor>
      <arglist>(Length2 val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1part_1_1StaticRectangle.html</anchorfile>
      <anchor>aa686d236034097c2f019da7353b4b680</anchor>
      <arglist>(ChildCounter, NonNegative&lt; Length &gt; value)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::part::StaticRestitution</name>
    <filename>structplayrho_1_1d2_1_1part_1_1StaticRestitution.html</filename>
    <templarg>R</templarg>
    <member kind="variable" static="yes">
      <type>static const auto</type>
      <name>restitution</name>
      <anchorfile>structplayrho_1_1d2_1_1part_1_1StaticRestitution.html</anchorfile>
      <anchor>a4c62e4011fc260bc8fc896eeb9ac029c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::part::StaticSensor</name>
    <filename>structplayrho_1_1d2_1_1part_1_1StaticSensor.html</filename>
    <templarg>V</templarg>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>sensor</name>
      <anchorfile>structplayrho_1_1d2_1_1part_1_1StaticSensor.html</anchorfile>
      <anchor>a724483439a2d0e2105ad620f8ee28fad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::part::StaticTenthsFriction</name>
    <filename>structplayrho_1_1d2_1_1part_1_1StaticTenthsFriction.html</filename>
    <templarg>F</templarg>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>friction</name>
      <anchorfile>structplayrho_1_1d2_1_1part_1_1StaticTenthsFriction.html</anchorfile>
      <anchor>ab3305a7bc4d017df1c58110426660848</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::ToiOutput::Statistics</name>
    <filename>structplayrho_1_1ToiOutput_1_1Statistics.html</filename>
    <member kind="typedef">
      <type>std::remove_const_t&lt; decltype(DefaultMaxDistanceIters)&gt;</type>
      <name>dist_iter_type</name>
      <anchorfile>structplayrho_1_1ToiOutput_1_1Statistics.html</anchorfile>
      <anchor>a43880a9f123aa918e752767eb8b78b78</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>WiderType&lt; dist_iter_type &gt;</type>
      <name>dist_sum_type</name>
      <anchorfile>structplayrho_1_1ToiOutput_1_1Statistics.html</anchorfile>
      <anchor>ad3a1b95442ef275cee5b46b4ed2d1eff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const_t&lt; decltype(DefaultMaxToiRootIters)&gt;</type>
      <name>root_iter_type</name>
      <anchorfile>structplayrho_1_1ToiOutput_1_1Statistics.html</anchorfile>
      <anchor>a9b1ca9bb6e6beaf52d16bea85f07a308</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>WiderType&lt; root_iter_type &gt;</type>
      <name>root_sum_type</name>
      <anchorfile>structplayrho_1_1ToiOutput_1_1Statistics.html</anchorfile>
      <anchor>ab92647c3b6f47d11b963feb7773ad01d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const_t&lt; decltype(DefaultMaxToiIters)&gt;</type>
      <name>toi_iter_type</name>
      <anchorfile>structplayrho_1_1ToiOutput_1_1Statistics.html</anchorfile>
      <anchor>a34773001b6f0343f87496ffc6fdaf2d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>WiderType&lt; toi_iter_type &gt;</type>
      <name>toi_sum_type</name>
      <anchorfile>structplayrho_1_1ToiOutput_1_1Statistics.html</anchorfile>
      <anchor>acab309974c85b595db8c170fb5583c1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>dist_iter_type</type>
      <name>max_dist_iters</name>
      <anchorfile>structplayrho_1_1ToiOutput_1_1Statistics.html</anchorfile>
      <anchor>a8608a6125c953acbe4d0a2e9a5832b78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>root_iter_type</type>
      <name>max_root_iters</name>
      <anchorfile>structplayrho_1_1ToiOutput_1_1Statistics.html</anchorfile>
      <anchor>a8710df9264dda401cbcf032dcbdf0790</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>dist_sum_type</type>
      <name>sum_dist_iters</name>
      <anchorfile>structplayrho_1_1ToiOutput_1_1Statistics.html</anchorfile>
      <anchor>ac1d30a0381e2084a9f774ed5c2b54e1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>toi_sum_type</type>
      <name>sum_finder_iters</name>
      <anchorfile>structplayrho_1_1ToiOutput_1_1Statistics.html</anchorfile>
      <anchor>a0433a9df0316c9a7147b21503e6723e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>root_sum_type</type>
      <name>sum_root_iters</name>
      <anchorfile>structplayrho_1_1ToiOutput_1_1Statistics.html</anchorfile>
      <anchor>a6d92a8bd39ae222883209f31e8b182fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>toi_iter_type</type>
      <name>toi_iters</name>
      <anchorfile>structplayrho_1_1ToiOutput_1_1Statistics.html</anchorfile>
      <anchor>a101e059e703f0043fc3dcb912690430f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::pmr::PoolMemoryResource::Stats</name>
    <filename>structplayrho_1_1pmr_1_1PoolMemoryResource_1_1Stats.html</filename>
    <member kind="variable">
      <type>std::size_t</type>
      <name>allocatedBuffers</name>
      <anchorfile>structplayrho_1_1pmr_1_1PoolMemoryResource_1_1Stats.html</anchorfile>
      <anchor>a657cac18388640fbff11e44126a99bef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>maxBytes</name>
      <anchorfile>structplayrho_1_1pmr_1_1PoolMemoryResource_1_1Stats.html</anchorfile>
      <anchor>a54e4e6b237b8ba51b6714b50d42a378f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>numBuffers</name>
      <anchorfile>structplayrho_1_1pmr_1_1PoolMemoryResource_1_1Stats.html</anchorfile>
      <anchor>a3408ddd8d25bbb3700a7fc918f112c67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>totalBytes</name>
      <anchorfile>structplayrho_1_1pmr_1_1PoolMemoryResource_1_1Stats.html</anchorfile>
      <anchor>a9962c482f7c91a3b1814f607f3f2649e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1pmr_1_1PoolMemoryResource_1_1Stats.html</anchorfile>
      <anchor>a1f89e493b7bdb9a273b7e8401e8af666</anchor>
      <arglist>(const Stats &amp;lhs, const Stats &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1pmr_1_1PoolMemoryResource_1_1Stats.html</anchorfile>
      <anchor>a2b99f261710cb7d1dc88c102c9d380e2</anchor>
      <arglist>(const Stats &amp;lhs, const Stats &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::pmr::StatsResource::Stats</name>
    <filename>structplayrho_1_1pmr_1_1StatsResource_1_1Stats.html</filename>
    <member kind="variable">
      <type>std::size_t</type>
      <name>blocksAllocated</name>
      <anchorfile>structplayrho_1_1pmr_1_1StatsResource_1_1Stats.html</anchorfile>
      <anchor>a956e99eb1a758d3e4c95ec894a9357b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>bytesAllocated</name>
      <anchorfile>structplayrho_1_1pmr_1_1StatsResource_1_1Stats.html</anchorfile>
      <anchor>ada65bdf4089d5fa0f558dc0c7ee7b4d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>maxAlignment</name>
      <anchorfile>structplayrho_1_1pmr_1_1StatsResource_1_1Stats.html</anchorfile>
      <anchor>ac5255c3948c931f1abbd3c5c354b921d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>maxBlocksAllocated</name>
      <anchorfile>structplayrho_1_1pmr_1_1StatsResource_1_1Stats.html</anchorfile>
      <anchor>a56e4f230ff9e4009cf740bbb06d74600</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>maxBytes</name>
      <anchorfile>structplayrho_1_1pmr_1_1StatsResource_1_1Stats.html</anchorfile>
      <anchor>a5e8306daf14d76f913f5fd6413cf0fb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>maxBytesAllocated</name>
      <anchorfile>structplayrho_1_1pmr_1_1StatsResource_1_1Stats.html</anchorfile>
      <anchor>ac0e2fd3c85d4e6cd2da706cb833621f4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::pmr::StatsResource</name>
    <filename>classplayrho_1_1pmr_1_1StatsResource.html</filename>
    <base>playrho::pmr::memory_resource</base>
    <class kind="struct">playrho::pmr::StatsResource::Stats</class>
    <member kind="function">
      <type></type>
      <name>StatsResource</name>
      <anchorfile>classplayrho_1_1pmr_1_1StatsResource.html</anchorfile>
      <anchor>a55199718f598c07763f11b23bd692153</anchor>
      <arglist>(memory_resource *resource=new_delete_resource()) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Stats</type>
      <name>GetStats</name>
      <anchorfile>classplayrho_1_1pmr_1_1StatsResource.html</anchorfile>
      <anchor>a85518d827c51d0cccafbe69c86a09746</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pmr::memory_resource *</type>
      <name>upstream_resource</name>
      <anchorfile>classplayrho_1_1pmr_1_1StatsResource.html</anchorfile>
      <anchor>a8ac26759f8cb7d76b2167e377ad88124</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::StepConf</name>
    <filename>structplayrho_1_1StepConf.html</filename>
    <member kind="typedef">
      <type>TimestepIters</type>
      <name>iteration_type</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a8e5a2fa02589f5bdd860ce232242cdc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>aabbExtension</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a2843eaacd8bc5a99f9764d734deb5399</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AngularVelocity</type>
      <name>angularSleepTolerance</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>afc71be34f8fdc86f38a743b939445747</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Positive&lt; Angle &gt;</type>
      <name>angularSlop</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a7c61d899e596d1fb07b1cc80ada0efbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Time</type>
      <name>deltaTime</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>aa18cfd71f1a39e7dd9912d7038f6364e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>displaceMultiplier</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>adf8c8af6cc3464d9d035d58ac27e9cbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>doBlocksolve</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a628dca6d25124bf34e9c3c830b691c4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>doToi</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a281a00a1aea4cd4a3390b16b4d49e881</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>doWarmStart</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a15442afc3e0dc7b585a950938440f3eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>dtRatio</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a457b239d0d715ceab05b1c78425633a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinearVelocity</type>
      <name>linearSleepTolerance</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a79e5be983b4eba45d408543271083682</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Positive&lt; Length &gt;</type>
      <name>linearSlop</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a0a8774f5c57ec70ec8b1ca0ad7073e4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Angle</type>
      <name>maxAngularCorrection</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a5eb64a27f2fb8884d6dd4565ed691f66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>maxCirclesRatio</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a46c9f8cd3881c7f65056c485110230ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iteration_type</type>
      <name>maxDistanceIters</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a6bf667a0a634c992cbe1c3f5112f50e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>maxLinearCorrection</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a24913ef211ff767753c1eb318e0514da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Angle</type>
      <name>maxRotation</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a0ab48d76f772682e5d2d2d937eacdde4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iteration_type</type>
      <name>maxSubSteps</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>aa3a018f1176d9ab03b89d15090bdda7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iteration_type</type>
      <name>maxToiIters</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a75c4fdf3872c14c4fbdb2eac5c3cace4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iteration_type</type>
      <name>maxToiRootIters</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a8add4646cce4ae296e2e129b074bc3d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>maxTranslation</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>ac3d3dd18627b28b89a94eb32bb0763f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Time</type>
      <name>minStillTimeToSleep</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a07971deda1d7a35d41eb9019721d13ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum</type>
      <name>regMinMomentum</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a31610ef1c5216ed2bf50e5229ef05470</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>regMinSeparation</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a7b18d37a3c6cd9b55ea0d17cbda2ec11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iteration_type</type>
      <name>regPositionIters</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>add2582a7769e1b924ca89a25b13edb2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>regResolutionRate</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a5d582ba59086657963565e68978f10ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iteration_type</type>
      <name>regVelocityIters</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a85a1b86a1db52946d460095c7936b8dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Length &gt;</type>
      <name>targetDepth</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>ac48271af211639086661dbd78518652e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum</type>
      <name>toiMinMomentum</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a8a28be956ca4e2e4d9c0c626c9314e5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>toiMinSeparation</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a35a04831d008075123c6c211b4ce12f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iteration_type</type>
      <name>toiPositionIters</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a64dc46a8eec49d93ecee19465ba868bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>toiResolutionRate</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>abbf7f5f8efc72c95dec494efcdec09e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iteration_type</type>
      <name>toiVelocityIters</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>ac886c4a98f090a5b8d8104a173e493c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Length &gt;</type>
      <name>tolerance</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a74a6805a0aa494299d5dc1ef6f7666db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinearVelocity</type>
      <name>velocityThreshold</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a1df1b4fee721cf88f35fc08879027033</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultAabbExtension</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a50f1af3038d050555d7745c10562d73e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultAngularSleepTolerance</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a237e95f4205fbb3377a757ddda43402b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultAngularSlop</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a0283b4474e25540fd52639d62a6668b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultCirclesRatio</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a1e913eae756e29f405b4a24ec234207f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultDistanceMultiplier</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a8e726febcfa64bcc0fe00dd746322593</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultDoBlocksolve</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a68967922918a4dcd43f229c92424bbf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultDoToi</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a05fdb5099d374ffe68ec20df7b627a8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultDoWarmStart</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a312fecba2360c8bb3a50a7ea4031f7aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultDtRatio</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a1b8fdfe14c6201526804eac8b3b7804f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultLinearSleepTolerance</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a672299b8c2561814cdd201c267ab7956</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultLinearSlop</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>aad62d2d55f6102e38139bd4bca7e209b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultMaxAngularCorrection</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a9878cef588140d19e9f03dde1b27328a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultMaxDistanceIters</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a982df88b80dc588090cc3aa621383168</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultMaxLinearCorrection</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a28882d431e6f0942c811fee8cd7e62a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultMaxRotation</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a212944150be182ed44684f1dfe2dd88a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultMaxSubSteps</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a4de2fd66086ea7aaa4df7e35ce4a9ea7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultMaxToiIters</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a2a764f7503734ba63145fc6b7c5876d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultMaxToiRootIters</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a35b61830c9aaf3910108417b59391b57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultMaxTranslation</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a0151b43b7bd993fcd331434e6200b080</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultMinStillTimeToSleep</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>aff5951be0126c02d7708d46343667f89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultRegMinMomentum</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>ab191f6d144a676c9ccf49c45a7c6702b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultRegMinSeparation</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>ab460727869ca2daa5b6a0d9f334e5ad9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultRegPositionIters</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>abdd0289a9c8707adb4cd1bcde2e67182</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultRegResolutionRate</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>aa805b41428ad177a45843fe92ea584f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultRegVelocityIters</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a94feeb757dc8f6cb88d5a1c4f5db17d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultStepTime</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a66fd476c4e02f02180f1c8d9a844350c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultTargetDepth</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a767ad207dac518d594923a04a52db06d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultToiMinMomentum</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a5957144f38b57a58cc3500b16fb47338</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultToiMinSeparation</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a897665ea36aa024ddb358f7bf2ce2263</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultToiPositionIters</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>ab2b893ce74c6ddb6a5b0b27ba8c7c4c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultToiResolutionRate</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>ae5d3df4e6b2331c84a860056924a81b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultToiVelocityIters</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>aa06a4be73b34a3bb73bfdedac831c6d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultTolerance</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a37688252846b1de0b16194957c8d6a96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultVelocityThreshold</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a737ee75c77571d2a02eac645a4a605ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>InvalidIteration</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a50f4d886787a88a1e353637e78e0a8f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetMaxRegLinearCorrection</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a396f543b42eadf60ef9e730edc77912c</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MovementConf</type>
      <name>GetMovementConf</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a9f5227d01d6f7c75ac2399c3da7b5572</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMaxTranslationWithinTolerance</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a05d21c386ca6d39d5cc35cbad350a8c9</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::StepStats</name>
    <filename>structplayrho_1_1StepStats.html</filename>
    <member kind="variable">
      <type>PreStepStats</type>
      <name>pre</name>
      <anchorfile>structplayrho_1_1StepStats.html</anchorfile>
      <anchor>aaa9b52669cc1a5c973e02b0191fe3ad1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RegStepStats</type>
      <name>reg</name>
      <anchorfile>structplayrho_1_1StepStats.html</anchorfile>
      <anchor>aefbc7755ee10149deec23d10ab7de550</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ToiStepStats</type>
      <name>toi</name>
      <anchorfile>structplayrho_1_1StepStats.html</anchorfile>
      <anchor>a0d07c4b00bc71b0dc49c15ca0e1e8177</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::Sweep</name>
    <filename>structplayrho_1_1d2_1_1Sweep.html</filename>
    <member kind="function">
      <type>constexpr</type>
      <name>Sweep</name>
      <anchorfile>structplayrho_1_1d2_1_1Sweep.html</anchorfile>
      <anchor>a225e563780e93bc73e7e227e58b0a333</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Sweep</name>
      <anchorfile>structplayrho_1_1d2_1_1Sweep.html</anchorfile>
      <anchor>aa006e5a25c140fabc14ad45aebb91147</anchor>
      <arglist>(const Position &amp;p, const Length2 &amp;lc=Length2{0_m, 0_m})</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Sweep</name>
      <anchorfile>structplayrho_1_1d2_1_1Sweep.html</anchorfile>
      <anchor>a3abbfe162dc24c21cff2b5de562be691</anchor>
      <arglist>(const Position &amp;p0, const Position &amp;p1, const Length2 &amp;lc=Length2{0_m, 0_m}, ZeroToUnderOneFF&lt; Real &gt; a0={}) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>ZeroToUnderOneFF&lt; Real &gt;</type>
      <name>alpha0</name>
      <anchorfile>structplayrho_1_1d2_1_1Sweep.html</anchorfile>
      <anchor>a6730c6ee88deda065c9dbf8659b251da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localCenter</name>
      <anchorfile>structplayrho_1_1d2_1_1Sweep.html</anchorfile>
      <anchor>a80a374190f6721da6e737805d85cfe4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Position</type>
      <name>pos0</name>
      <anchorfile>structplayrho_1_1d2_1_1Sweep.html</anchorfile>
      <anchor>afd1e30ab1f1cfc33d1cef14028815fcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Position</type>
      <name>pos1</name>
      <anchorfile>structplayrho_1_1d2_1_1Sweep.html</anchorfile>
      <anchor>ab5e2f463dbb73884d939921442975d70</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Sweep</type>
      <name>GetNormalized</name>
      <anchorfile>structplayrho_1_1d2_1_1Sweep.html</anchorfile>
      <anchor>a09b21383c1a73afea37f11e0ba906a76</anchor>
      <arglist>(Sweep sweep) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>structplayrho_1_1d2_1_1Sweep.html</anchorfile>
      <anchor>afce9c1dea61c4ba26d5785f2f20c3bff</anchor>
      <arglist>(const d2::Sweep &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1d2_1_1Sweep.html</anchorfile>
      <anchor>af0f08a3cbef074f5f78272c205967888</anchor>
      <arglist>(const Sweep &amp;lhs, const Sweep &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1d2_1_1Sweep.html</anchorfile>
      <anchor>af317b3462727e3832e11d157b7e0b7b4</anchor>
      <arglist>(const Sweep &amp;lhs, const Sweep &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLocalCenter</name>
      <anchorfile>structplayrho_1_1d2_1_1Sweep.html</anchorfile>
      <anchor>ac4ef7260bbcab43966bde5b1e8b8a284</anchor>
      <arglist>(Sweep &amp;sweep, const Length2 &amp;value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::TargetJointConf</name>
    <filename>structplayrho_1_1d2_1_1TargetJointConf.html</filename>
    <base>JointBuilder&lt; TargetJointConf &gt;</base>
    <member kind="typedef">
      <type>JointBuilder&lt; TargetJointConf &gt;</type>
      <name>super</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a6a8c5eb78f152275cb85f5663d90849a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>TargetJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a313c01107a1db6ffd2758230d9913b10</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>TargetJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>ad4446bba768db20d53a2c054dd607d4d</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseAnchor</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>abe2503c546bd2ca7425637c6ce7d1aea</anchor>
      <arglist>(const Length2 &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseDampingRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a60fb6c4ed8577f60ac2c761211e454eb</anchor>
      <arglist>(NonNegative&lt; Real &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseFrequency</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a9e21a61026dba2ad7aa89a5cf894dbcb</anchor>
      <arglist>(NonNegative&lt; Frequency &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseMaxForce</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a23e362cd5938c66979a7a2e37d4e0fc2</anchor>
      <arglist>(NonNegative&lt; Force &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseTarget</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a25b6dd2b9a0e6c86dc02fe8e329a021c</anchor>
      <arglist>(const Length2 &amp;v) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>LinearVelocity2</type>
      <name>C</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>aa032969e3948762ea46f6560743e3d53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Real &gt;</type>
      <name>dampingRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>ad29e45c3c35828dd86d1c7d6d7c0d7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Frequency &gt;</type>
      <name>frequency</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>aec28fc57d68a4813f7ccffd86f9680de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InvMass</type>
      <name>gamma</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>af72b0470815ad15e5624fc446602113a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum2</type>
      <name>impulse</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a942a1aa3000753b79d28b278f6616b45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorB</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a72b323ef7b13dbb4c938b3c1e52fdf05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Mass22</type>
      <name>mass</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a29911e97b716ea01dd4e9e3f62300923</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Force &gt;</type>
      <name>maxForce</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a749a955e6dc7a4e5a7ded98234247e54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>rB</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a473831ba28c4809ec7410244b1a4749b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>target</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>aa959f11ea9a7a0bb34f26bddd23ac279</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultDampingRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>ac1f693a5652a1d16cf0ae07fa002700f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultFrequency</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>aaac6dbae36cc216ee77efd965123a2d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultMaxForce</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>af7047fe0f9f92a560ed1fcc7ff1df8fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>afa5cbad1175b924fab7ca3259d3ba8a9</anchor>
      <arglist>(const TargetJointConf &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Mass22</type>
      <name>GetEffectiveMassMatrix</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a6cb7d8c6d0e8773c08196d43f14cc022</anchor>
      <arglist>(const TargetJointConf &amp;object, const BodyConstraint &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a7ec73e83dfde52a4e59c7ef6099e5073</anchor>
      <arglist>(const TargetJointConf &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLocalAnchorA</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a742f3193b44e8038c6e21455f2cc3630</anchor>
      <arglist>(const TargetJointConf &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetMaxForce</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a5433a140e014287406113e1ce6508dae</anchor>
      <arglist>(const TargetJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetTarget</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a643e49fe049c3befd1f928e4d732493c</anchor>
      <arglist>(const TargetJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a1bc16ad22662f69d6218f879a5c17245</anchor>
      <arglist>(TargetJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetDampingRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a93ccadc0666446729427c72fbdac4ad4</anchor>
      <arglist>(TargetJointConf &amp;object, Real value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetFrequency</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>ac9971494480e00e4c3fa99cba906339e</anchor>
      <arglist>(TargetJointConf &amp;object, NonNegative&lt; Frequency &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetMaxForce</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a26488bda71d5ddb9df78975b2f37cb03</anchor>
      <arglist>(TargetJointConf &amp;object, NonNegative&lt; Force &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetTarget</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>af3c4565c108e29e4d157795b643ba1b6</anchor>
      <arglist>(TargetJointConf &amp;object, const Length2 &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>ShiftOrigin</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a9d14d5505620acfa85582ea26fa733eb</anchor>
      <arglist>(TargetJointConf &amp;object, const Length2 &amp;newOrigin)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>aba1c39224829d2133085afdba47705ae</anchor>
      <arglist>(const TargetJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a87f0cb382d657fcac4402b3896269fe3</anchor>
      <arglist>(TargetJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::ThreadLocalAllocator</name>
    <filename>classplayrho_1_1ThreadLocalAllocator.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>MemoryResourceArgs</templarg>
    <member kind="typedef">
      <type>std::tuple&lt; MemoryResourceArgs... &gt;</type>
      <name>resource_args</name>
      <anchorfile>classplayrho_1_1ThreadLocalAllocator.html</anchorfile>
      <anchor>a9c4a432f2eaf3f2d2954e1e99abc5574</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MemoryResource</type>
      <name>resource_type</name>
      <anchorfile>classplayrho_1_1ThreadLocalAllocator.html</anchorfile>
      <anchor>a2b9607ba80cedc4d927c4db768a69164</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1ThreadLocalAllocator.html</anchorfile>
      <anchor>ab8ce82b655ad7215f0475864dceacf12</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ThreadLocalAllocator</name>
      <anchorfile>classplayrho_1_1ThreadLocalAllocator.html</anchorfile>
      <anchor>acfea7f3306b8455ceaa97917421ade6f</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ThreadLocalAllocator</name>
      <anchorfile>classplayrho_1_1ThreadLocalAllocator.html</anchorfile>
      <anchor>aab9e96928923dc6448b2e6c1c12d5619</anchor>
      <arglist>(const ThreadLocalAllocator&lt; U, MemoryResource, MemoryResourceArgs... &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>allocate</name>
      <anchorfile>classplayrho_1_1ThreadLocalAllocator.html</anchorfile>
      <anchor>a82ccdd76d166d3e04adcbb5647d350ad</anchor>
      <arglist>(std::size_t n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocate</name>
      <anchorfile>classplayrho_1_1ThreadLocalAllocator.html</anchorfile>
      <anchor>a7c412c46a7ac9587a7a51aa37cd8a07b</anchor>
      <arglist>(T *p, std::size_t n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>max_size</name>
      <anchorfile>classplayrho_1_1ThreadLocalAllocator.html</anchorfile>
      <anchor>a1dc08a000546d591242a221752ee9429</anchor>
      <arglist>() noexcept -&gt; std::size_t</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PLAYRHO_EXPORT auto</type>
      <name>resource</name>
      <anchorfile>classplayrho_1_1ThreadLocalAllocator.html</anchorfile>
      <anchor>aa55d74268abb2cef3f2385d081cd752b</anchor>
      <arglist>() -&gt; MemoryResource *</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1ThreadLocalAllocator.html</anchorfile>
      <anchor>aafee2b95fb52fd4846056c9d7dcd7fbb</anchor>
      <arglist>(const ThreadLocalAllocator &amp;lhs, const ThreadLocalAllocator &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1ThreadLocalAllocator.html</anchorfile>
      <anchor>ac1d68f154e6ef3166b1e7701ee321132</anchor>
      <arglist>(const ThreadLocalAllocator &amp;, const ThreadLocalAllocator &amp;) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::ToiConf</name>
    <filename>structplayrho_1_1ToiConf.html</filename>
    <member kind="typedef">
      <type>std::remove_const_t&lt; decltype(DefaultMaxDistanceIters)&gt;</type>
      <name>dist_iter_type</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>a0ff3e3a12ba7dc27ca177605b2628d61</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const_t&lt; decltype(DefaultMaxToiRootIters)&gt;</type>
      <name>root_iter_type</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>ab10cdf8d530017347dbb4ac0cbd8d8aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const_t&lt; decltype(DefaultMaxToiIters)&gt;</type>
      <name>toi_iter_type</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>ab5f13b8bcacb8b94f6f35d5b6c89edcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr ToiConf &amp;</type>
      <name>UseMaxDistIters</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>a60e907eebd04753e4e439662d6173fc0</anchor>
      <arglist>(dist_iter_type value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ToiConf &amp;</type>
      <name>UseMaxRootIters</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>a7964804fa919853789eb420fe0160562</anchor>
      <arglist>(root_iter_type value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ToiConf &amp;</type>
      <name>UseMaxToiIters</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>a95df3b9fec0fbf550e5be10b55008d28</anchor>
      <arglist>(toi_iter_type value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ToiConf &amp;</type>
      <name>UseTargetDepth</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>a9098b9de7e8ecbe8de034acf05f2d769</anchor>
      <arglist>(NonNegative&lt; Length &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ToiConf &amp;</type>
      <name>UseTimeMax</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>a8bc0cd3e003d7c18470e1906173f8393</anchor>
      <arglist>(UnitInterval&lt; Real &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ToiConf &amp;</type>
      <name>UseTolerance</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>a51c195b71203089fe2fea9ee30afb0d0</anchor>
      <arglist>(NonNegative&lt; Length &gt; value) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>dist_iter_type</type>
      <name>maxDistIters</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>a888c7b7e3b1da157e13e5ffe3e8d2fc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>root_iter_type</type>
      <name>maxRootIters</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>ae0b64b5021ec7955f14bd38a110da96d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>toi_iter_type</type>
      <name>maxToiIters</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>a650135a3a192ec27008d761829999a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Length &gt;</type>
      <name>targetDepth</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>af03e0e0558160cceecdc3d91065ebe2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitInterval&lt; Real &gt;</type>
      <name>timeMax</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>a6f2f434f716f5214aa948eeaf0ea0502</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Length &gt;</type>
      <name>tolerance</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>af3adc26131d9ff0ad07394050a9bed29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultTargetDepth</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>ace49a31b5094c8156a5b05664522e91b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultTimeMax</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>a4207f64a9eab67ca8e83e9deeebbbb70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultTolerance</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>adda48f44c0984bdf5203eec6cf8143ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetDefaultToiConf</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>a4dd2e3047d7ac0836f8921a496e8d432</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ToiConf</type>
      <name>GetToiConf</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>a81146aa4336173a38310c4227a4b115b</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::ToiOutput</name>
    <filename>structplayrho_1_1ToiOutput.html</filename>
    <class kind="struct">playrho::ToiOutput::Statistics</class>
    <member kind="enumvalue">
      <name>e_belowMinTarget</name>
      <anchorfile>structplayrho_1_1ToiOutput.html</anchorfile>
      <anchor>a61ba03d1326b88ed12049500df7ca76fa983ba94b9a2f278da961e0358bbaddd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_maxDistIters</name>
      <anchorfile>structplayrho_1_1ToiOutput.html</anchorfile>
      <anchor>a61ba03d1326b88ed12049500df7ca76faf6be962a6a6b1f53c68cb8abad1c4f31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_maxRootIters</name>
      <anchorfile>structplayrho_1_1ToiOutput.html</anchorfile>
      <anchor>a61ba03d1326b88ed12049500df7ca76fad0cebf27fc4fa4209b0bb90fc6a28901</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_maxToiIters</name>
      <anchorfile>structplayrho_1_1ToiOutput.html</anchorfile>
      <anchor>a61ba03d1326b88ed12049500df7ca76fa64a97694e7d0f68339d6f9cd321c54d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_nextAfter</name>
      <anchorfile>structplayrho_1_1ToiOutput.html</anchorfile>
      <anchor>a61ba03d1326b88ed12049500df7ca76fa3f2ae9edca60b816b165fde5378caa85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_overlapped</name>
      <anchorfile>structplayrho_1_1ToiOutput.html</anchorfile>
      <anchor>a61ba03d1326b88ed12049500df7ca76fa704373a48b14f57cf740e1ad77f1e999</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_separated</name>
      <anchorfile>structplayrho_1_1ToiOutput.html</anchorfile>
      <anchor>a61ba03d1326b88ed12049500df7ca76fa0f6d8985882a87a8a552ea5aed11e37c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_touching</name>
      <anchorfile>structplayrho_1_1ToiOutput.html</anchorfile>
      <anchor>a61ba03d1326b88ed12049500df7ca76faba52239c88a9b8d7ddb7dfd51ea64603</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_unknown</name>
      <anchorfile>structplayrho_1_1ToiOutput.html</anchorfile>
      <anchor>a61ba03d1326b88ed12049500df7ca76fa0a418c1b9b53d3fbe6c529c128b60bff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>State</name>
      <anchorfile>structplayrho_1_1ToiOutput.html</anchorfile>
      <anchor>a61ba03d1326b88ed12049500df7ca76f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_unknown</name>
      <anchorfile>structplayrho_1_1ToiOutput.html</anchorfile>
      <anchor>a61ba03d1326b88ed12049500df7ca76fa0a418c1b9b53d3fbe6c529c128b60bff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_touching</name>
      <anchorfile>structplayrho_1_1ToiOutput.html</anchorfile>
      <anchor>a61ba03d1326b88ed12049500df7ca76faba52239c88a9b8d7ddb7dfd51ea64603</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_separated</name>
      <anchorfile>structplayrho_1_1ToiOutput.html</anchorfile>
      <anchor>a61ba03d1326b88ed12049500df7ca76fa0f6d8985882a87a8a552ea5aed11e37c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_overlapped</name>
      <anchorfile>structplayrho_1_1ToiOutput.html</anchorfile>
      <anchor>a61ba03d1326b88ed12049500df7ca76fa704373a48b14f57cf740e1ad77f1e999</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_maxRootIters</name>
      <anchorfile>structplayrho_1_1ToiOutput.html</anchorfile>
      <anchor>a61ba03d1326b88ed12049500df7ca76fad0cebf27fc4fa4209b0bb90fc6a28901</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_nextAfter</name>
      <anchorfile>structplayrho_1_1ToiOutput.html</anchorfile>
      <anchor>a61ba03d1326b88ed12049500df7ca76fa3f2ae9edca60b816b165fde5378caa85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_maxToiIters</name>
      <anchorfile>structplayrho_1_1ToiOutput.html</anchorfile>
      <anchor>a61ba03d1326b88ed12049500df7ca76fa64a97694e7d0f68339d6f9cd321c54d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_belowMinTarget</name>
      <anchorfile>structplayrho_1_1ToiOutput.html</anchorfile>
      <anchor>a61ba03d1326b88ed12049500df7ca76fa983ba94b9a2f278da961e0358bbaddd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_maxDistIters</name>
      <anchorfile>structplayrho_1_1ToiOutput.html</anchorfile>
      <anchor>a61ba03d1326b88ed12049500df7ca76faf6be962a6a6b1f53c68cb8abad1c4f31</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ToiOutput</name>
      <anchorfile>structplayrho_1_1ToiOutput.html</anchorfile>
      <anchor>a98eade001026160f2593d11a98f90d01</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ToiOutput</name>
      <anchorfile>structplayrho_1_1ToiOutput.html</anchorfile>
      <anchor>a0913340a5150a784db62366893c14bc8</anchor>
      <arglist>(UnitIntervalFF&lt; Real &gt; t, Statistics s, State z) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>State</type>
      <name>state</name>
      <anchorfile>structplayrho_1_1ToiOutput.html</anchorfile>
      <anchor>af5ab391b2c5c912330d0f4bd43be8ae4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Statistics</type>
      <name>stats</name>
      <anchorfile>structplayrho_1_1ToiOutput.html</anchorfile>
      <anchor>a88bda234ab37f3998711404ebe701932</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitIntervalFF&lt; Real &gt;</type>
      <name>time</name>
      <anchorfile>structplayrho_1_1ToiOutput.html</anchorfile>
      <anchor>a2783d78e9dde36adff5a829e759cede8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ToiOutput</type>
      <name>GetToiViaSat</name>
      <anchorfile>structplayrho_1_1ToiOutput.html</anchorfile>
      <anchor>a19b308c9b3b8f5292b9f3dad183c9d76</anchor>
      <arglist>(const DistanceProxy &amp;proxyA, const Sweep &amp;sweepA, const DistanceProxy &amp;proxyB, const Sweep &amp;sweepB, const ToiConf &amp;conf=GetDefaultToiConf())</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::ToiStepStats</name>
    <filename>structplayrho_1_1ToiStepStats.html</filename>
    <member kind="typedef">
      <type>std::uint32_t</type>
      <name>counter_type</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>ac6751bb15f4e9ac864f105551c2d6daa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const_t&lt; decltype(DefaultMaxDistanceIters)&gt;</type>
      <name>dist_iter_type</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>a233a1bd5828e9486d91c79e763dcdc84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const_t&lt; decltype(DefaultMaxToiRootIters)&gt;</type>
      <name>root_iter_type</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>a216fcb42e756f4ee07567bbb3c1a197c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const_t&lt; decltype(DefaultMaxToiIters)&gt;</type>
      <name>toi_iter_type</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>a4a222feaf06a3ac6a60c07288cb5dbd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>contactsAdded</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>a8a4b932412bdcac28d1442b23be55955</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>contactsAtMaxSubSteps</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>aed71e06c62e9d8d09d3a598d4cf82666</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>contactsFound</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>a614585faa33479c9e38f256ca8b170ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>contactsSkippedTouching</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>a58dfb912213be2db96c30613441e7f94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>contactsUpdatedToi</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>a29e709023574e867b53672010c5c9fb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>contactsUpdatedTouching</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>ab0204469cd47268bd459ea7141ec26e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>islandsFound</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>ae466af8e97bb15813097cec240589f44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>islandsSolved</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>aba23e37196c26b7b6afa20156e846727</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>dist_iter_type</type>
      <name>maxDistIters</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>ac02dc191dbd8b62af27ee8a8756b6950</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum</type>
      <name>maxIncImpulse</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>a3d086070f4bad6c7156e9e398092111a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>root_iter_type</type>
      <name>maxRootIters</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>ac9684005b60da6251f1cc4add7cea2c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>toi_iter_type</type>
      <name>maxToiIters</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>abff84a9f2765a553fa7c015d4236a294</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>minSeparation</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>a9596997026a847f921188645090d1663</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>proxiesMoved</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>ac63aa8851a42781c9150241e55aa93cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>sumPosIters</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>ab7c0a5025aa30d4aa806f630b686ce70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>sumVelIters</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>a3c428fa3b8f15202af3462dedb152451</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::Transformation</name>
    <filename>structplayrho_1_1d2_1_1Transformation.html</filename>
    <member kind="variable">
      <type>Length2</type>
      <name>p</name>
      <anchorfile>structplayrho_1_1d2_1_1Transformation.html</anchorfile>
      <anchor>ab2b20471f74fef015279a0bb396210e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitVec</type>
      <name>q</name>
      <anchorfile>structplayrho_1_1d2_1_1Transformation.html</anchorfile>
      <anchor>a1f21f610db905ad56edc7720dd8598f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>structplayrho_1_1d2_1_1Transformation.html</anchorfile>
      <anchor>af76924a9aee97c42840a3867b3cb612c</anchor>
      <arglist>(const d2::Transformation &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1d2_1_1Transformation.html</anchorfile>
      <anchor>ac100cc2e77031bd058367006ddd2ebe1</anchor>
      <arglist>(const Transformation &amp;lhs, const Transformation &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1d2_1_1Transformation.html</anchorfile>
      <anchor>a9f366fc4f9a298d3dded719b628a9933</anchor>
      <arglist>(const Transformation &amp;lhs, const Transformation &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::DynamicTree::TreeNode</name>
    <filename>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</filename>
    <member kind="function">
      <type>constexpr</type>
      <name>TreeNode</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a1d9a63fc94b7a41f57158f37e2c0360f</anchor>
      <arglist>(const Contactable &amp;value, const AABB &amp;aabb, Size other=DynamicTree::GetInvalidSize()) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>TreeNode</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a860274e9ce96b9ddb32f7324cc414b4f</anchor>
      <arglist>(const DynamicTreeBranchData &amp;value, const AABB &amp;aabb, Height height, Size other=DynamicTree::GetInvalidSize()) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>TreeNode</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>acfda0cebec26589b52bf3abe4c558a2b</anchor>
      <arglist>(const TreeNode &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>TreeNode</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a3fac557e91648e18349c9ba97d864217</anchor>
      <arglist>(Size other=DynamicTree::GetInvalidSize()) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>TreeNode</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a37aa8412243dcb10959e13bbc4162759</anchor>
      <arglist>(TreeNode &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr DynamicTreeBranchData</type>
      <name>AsBranch</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a71dc1857fb80501f2999ae86ab7cc5ea</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Contactable</type>
      <name>AsLeaf</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a3a4cec6e49a9128b74e5678ecb01ef5f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>Assign</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a6c0a10ffe90e339c768f9cacb759a2f4</anchor>
      <arglist>(const Contactable &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>Assign</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>adb78b86619d5b3b121376fe2de540c0c</anchor>
      <arglist>(const DynamicTreeBranchData &amp;v, const AABB &amp;bb, Height h) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>Assign</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a6e1b7b9dfed071d7bf5beb780a8c8f53</anchor>
      <arglist>(const DynamicTreeUnusedData &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr DynamicTreeUnusedData</type>
      <name>AsUnused</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a8ae77380018638779d08a015b7b8c7a2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB</type>
      <name>GetAABB</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a9a68dec55589b5db9dee942e1d4f085a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Height</type>
      <name>GetHeight</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a1568672ba85575d567bb32c2e813a74d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Size</type>
      <name>GetOther</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>af5bf613443ef6a3dc8b19204fd4b5a69</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>TreeNode &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a31bdee8b0731760ab5754a994675d309</anchor>
      <arglist>(const TreeNode &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetAABB</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a3f9145731dfb4e46a4e645877f762743</anchor>
      <arglist>(const AABB &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetOther</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a96b983ee96239e7fd46f6c7e47141d66</anchor>
      <arglist>(Size other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB</type>
      <name>GetAABB</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>ab6f093bc8ffe077f0d5895bfc5b672a7</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr DynamicTree::Size</type>
      <name>GetNext</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>acd3a93c79eb73866acfe12518491c2cd</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsBranch</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a7d5284fb35640d9a05b6b5346933c82a</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsBranch</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a7d5284fb35640d9a05b6b5346933c82a</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsLeaf</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>aae0b95c4e9a195b7c6c5d64c8664ab35</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsLeaf</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>aae0b95c4e9a195b7c6c5d64c8664ab35</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsUnused</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a3ad7a716e1b2bc2677ebf9ec441401f4</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsUnused</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a3ad7a716e1b2bc2677ebf9ec441401f4</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::tuple_element&lt; I, playrho::d2::UnitVec &gt;</name>
    <filename>classstd_1_1tuple__element_3_01I_00_01playrho_1_1d2_1_1UnitVec_01_4.html</filename>
    <templarg>I</templarg>
    <member kind="typedef">
      <type>playrho::Real</type>
      <name>type</name>
      <anchorfile>classstd_1_1tuple__element_3_01I_00_01playrho_1_1d2_1_1UnitVec_01_4.html</anchorfile>
      <anchor>a5bc886e515b6f24c8733d5e99d63c78d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::tuple_element&lt; I, playrho::Vector&lt; T, N &gt; &gt;</name>
    <filename>classstd_1_1tuple__element_3_01I_00_01playrho_1_1Vector_3_01T_00_01N_01_4_01_4.html</filename>
    <templarg>I</templarg>
    <templarg></templarg>
    <templarg>N</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>type</name>
      <anchorfile>classstd_1_1tuple__element_3_01I_00_01playrho_1_1Vector_3_01T_00_01N_01_4_01_4.html</anchorfile>
      <anchor>a8b0304c7b250c39300ab4ad96e299953</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::tuple_size&lt; playrho::ArrayList&lt; T, N, SIZE_TYPE &gt; &gt;</name>
    <filename>classstd_1_1tuple__size_3_01playrho_1_1ArrayList_3_01T_00_01N_00_01SIZE__TYPE_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>std::tuple_size&lt; playrho::d2::UnitVec &gt;</name>
    <filename>classstd_1_1tuple__size_3_01playrho_1_1d2_1_1UnitVec_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>std::tuple_size&lt; playrho::Vector&lt; T, N &gt; &gt;</name>
    <filename>classstd_1_1tuple__size_3_01playrho_1_1Vector_3_01T_00_01N_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
  </compound>
  <compound kind="class">
    <name>playrho::TypeID</name>
    <filename>classplayrho_1_1TypeID.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeID</name>
      <anchorfile>classplayrho_1_1TypeID.html</anchorfile>
      <anchor>a6b7ffdbea3e307f5214d1df59354e296</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr const char *</type>
      <name>GetName</name>
      <anchorfile>classplayrho_1_1TypeID.html</anchorfile>
      <anchor>a55c03aa7355a9a6d27cee22d5420b10a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend TypeID</type>
      <name>GetTypeID</name>
      <anchorfile>classplayrho_1_1TypeID.html</anchorfile>
      <anchor>ab8288dbdc38a94e0030b60947cf717d8</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend TypeID</type>
      <name>GetTypeID</name>
      <anchorfile>classplayrho_1_1TypeID.html</anchorfile>
      <anchor>a3ad5cdd03ce44fac293672482232e1e0</anchor>
      <arglist>(const T &amp;) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1TypeID.html</anchorfile>
      <anchor>a318b41ddc6c40bcfa5c9760bfe218db4</anchor>
      <arglist>(const TypeID &amp;lhs, const TypeID &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1TypeID.html</anchorfile>
      <anchor>afa623cfaa1da630f060a6606563110b4</anchor>
      <arglist>(const TypeID &amp;lhs, const TypeID &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1TypeID.html</anchorfile>
      <anchor>af658aed91bbc85f35fb421bc55950ea3</anchor>
      <arglist>(const TypeID &amp;lhs, const TypeID &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1TypeID.html</anchorfile>
      <anchor>aa7de39654fb03fa5729a07697d80a31e</anchor>
      <arglist>(const TypeID &amp;lhs, const TypeID &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1TypeID.html</anchorfile>
      <anchor>a2d1d3eeab4a222706711af96bd303687</anchor>
      <arglist>(const TypeID &amp;lhs, const TypeID &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1TypeID.html</anchorfile>
      <anchor>aecfeaa1d740c59a52b35b92328d0709a</anchor>
      <arglist>(const TypeID &amp;lhs, const TypeID &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::TypeInfo</name>
    <filename>structplayrho_1_1detail_1_1TypeInfo.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const char *const</type>
      <name>name</name>
      <anchorfile>structplayrho_1_1detail_1_1TypeInfo.html</anchorfile>
      <anchor>a339609cc2cfce26f8759045ee435e029</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::TypeInfo&lt; playrho::d2::ChainShapeConf &gt;</name>
    <filename>structplayrho_1_1detail_1_1TypeInfo_3_01playrho_1_1d2_1_1ChainShapeConf_01_4.html</filename>
    <member kind="variable" static="yes">
      <type>static constexpr const char *</type>
      <name>name</name>
      <anchorfile>structplayrho_1_1detail_1_1TypeInfo_3_01playrho_1_1d2_1_1ChainShapeConf_01_4.html</anchorfile>
      <anchor>ae734095e623f078f3e909385e6701ec5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::TypeInfo&lt; playrho::d2::DiskShapeConf &gt;</name>
    <filename>structplayrho_1_1detail_1_1TypeInfo_3_01playrho_1_1d2_1_1DiskShapeConf_01_4.html</filename>
    <member kind="variable" static="yes">
      <type>static constexpr const char *</type>
      <name>name</name>
      <anchorfile>structplayrho_1_1detail_1_1TypeInfo_3_01playrho_1_1d2_1_1DiskShapeConf_01_4.html</anchorfile>
      <anchor>a25a80c325c53f9fd48f8db88182bcd29</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::TypeInfo&lt; playrho::d2::DistanceJointConf &gt;</name>
    <filename>structplayrho_1_1detail_1_1TypeInfo_3_01playrho_1_1d2_1_1DistanceJointConf_01_4.html</filename>
    <member kind="variable" static="yes">
      <type>static constexpr const char *</type>
      <name>name</name>
      <anchorfile>structplayrho_1_1detail_1_1TypeInfo_3_01playrho_1_1d2_1_1DistanceJointConf_01_4.html</anchorfile>
      <anchor>a1641b2bd7fa7f80eb2859f2bb6b77185</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::TypeInfo&lt; playrho::d2::EdgeShapeConf &gt;</name>
    <filename>structplayrho_1_1detail_1_1TypeInfo_3_01playrho_1_1d2_1_1EdgeShapeConf_01_4.html</filename>
    <member kind="variable" static="yes">
      <type>static constexpr const char *</type>
      <name>name</name>
      <anchorfile>structplayrho_1_1detail_1_1TypeInfo_3_01playrho_1_1d2_1_1EdgeShapeConf_01_4.html</anchorfile>
      <anchor>aa0ecbb5e55649cf87c2cd62b5f0b8de7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::TypeInfo&lt; playrho::d2::FrictionJointConf &gt;</name>
    <filename>structplayrho_1_1detail_1_1TypeInfo_3_01playrho_1_1d2_1_1FrictionJointConf_01_4.html</filename>
    <member kind="variable" static="yes">
      <type>static constexpr const char *</type>
      <name>name</name>
      <anchorfile>structplayrho_1_1detail_1_1TypeInfo_3_01playrho_1_1d2_1_1FrictionJointConf_01_4.html</anchorfile>
      <anchor>a55ffdf7a1576db977b65ad38f0d51a34</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::TypeInfo&lt; playrho::d2::GearJointConf &gt;</name>
    <filename>structplayrho_1_1detail_1_1TypeInfo_3_01playrho_1_1d2_1_1GearJointConf_01_4.html</filename>
    <member kind="variable" static="yes">
      <type>static constexpr const char *</type>
      <name>name</name>
      <anchorfile>structplayrho_1_1detail_1_1TypeInfo_3_01playrho_1_1d2_1_1GearJointConf_01_4.html</anchorfile>
      <anchor>a4dce4f2f94e9c1b080081a7d68c3500d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::TypeInfo&lt; playrho::d2::MotorJointConf &gt;</name>
    <filename>structplayrho_1_1detail_1_1TypeInfo_3_01playrho_1_1d2_1_1MotorJointConf_01_4.html</filename>
    <member kind="variable" static="yes">
      <type>static constexpr const char *</type>
      <name>name</name>
      <anchorfile>structplayrho_1_1detail_1_1TypeInfo_3_01playrho_1_1d2_1_1MotorJointConf_01_4.html</anchorfile>
      <anchor>a07729d0724061bd2dbb8c47b7ec39141</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::TypeInfo&lt; playrho::d2::MultiShapeConf &gt;</name>
    <filename>structplayrho_1_1detail_1_1TypeInfo_3_01playrho_1_1d2_1_1MultiShapeConf_01_4.html</filename>
    <member kind="variable" static="yes">
      <type>static constexpr const char *</type>
      <name>name</name>
      <anchorfile>structplayrho_1_1detail_1_1TypeInfo_3_01playrho_1_1d2_1_1MultiShapeConf_01_4.html</anchorfile>
      <anchor>ab6ac1e0311f2aae17fa7c4d974495b04</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::TypeInfo&lt; playrho::d2::PolygonShapeConf &gt;</name>
    <filename>structplayrho_1_1detail_1_1TypeInfo_3_01playrho_1_1d2_1_1PolygonShapeConf_01_4.html</filename>
    <member kind="variable" static="yes">
      <type>static constexpr const char *</type>
      <name>name</name>
      <anchorfile>structplayrho_1_1detail_1_1TypeInfo_3_01playrho_1_1d2_1_1PolygonShapeConf_01_4.html</anchorfile>
      <anchor>a8c976fd5e8a42192393fd1055a728cdd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::TypeInfo&lt; playrho::d2::PrismaticJointConf &gt;</name>
    <filename>structplayrho_1_1detail_1_1TypeInfo_3_01playrho_1_1d2_1_1PrismaticJointConf_01_4.html</filename>
    <member kind="variable" static="yes">
      <type>static constexpr const char *</type>
      <name>name</name>
      <anchorfile>structplayrho_1_1detail_1_1TypeInfo_3_01playrho_1_1d2_1_1PrismaticJointConf_01_4.html</anchorfile>
      <anchor>ad7e10a3d1cc6639384c91427ac19f6ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::TypeInfo&lt; playrho::d2::PulleyJointConf &gt;</name>
    <filename>structplayrho_1_1detail_1_1TypeInfo_3_01playrho_1_1d2_1_1PulleyJointConf_01_4.html</filename>
    <member kind="variable" static="yes">
      <type>static constexpr const char *</type>
      <name>name</name>
      <anchorfile>structplayrho_1_1detail_1_1TypeInfo_3_01playrho_1_1d2_1_1PulleyJointConf_01_4.html</anchorfile>
      <anchor>a5f57524d9fad7e24144dd865071f99f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::TypeInfo&lt; playrho::d2::RevoluteJointConf &gt;</name>
    <filename>structplayrho_1_1detail_1_1TypeInfo_3_01playrho_1_1d2_1_1RevoluteJointConf_01_4.html</filename>
    <member kind="variable" static="yes">
      <type>static constexpr const char *</type>
      <name>name</name>
      <anchorfile>structplayrho_1_1detail_1_1TypeInfo_3_01playrho_1_1d2_1_1RevoluteJointConf_01_4.html</anchorfile>
      <anchor>a0d9e6b11e04e7ef6d14e4f47ba2015c7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::TypeInfo&lt; playrho::d2::RopeJointConf &gt;</name>
    <filename>structplayrho_1_1detail_1_1TypeInfo_3_01playrho_1_1d2_1_1RopeJointConf_01_4.html</filename>
    <member kind="variable" static="yes">
      <type>static constexpr const char *</type>
      <name>name</name>
      <anchorfile>structplayrho_1_1detail_1_1TypeInfo_3_01playrho_1_1d2_1_1RopeJointConf_01_4.html</anchorfile>
      <anchor>a1693b9384125e67ee13cbd9585cbc902</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::TypeInfo&lt; playrho::d2::TargetJointConf &gt;</name>
    <filename>structplayrho_1_1detail_1_1TypeInfo_3_01playrho_1_1d2_1_1TargetJointConf_01_4.html</filename>
    <member kind="variable" static="yes">
      <type>static constexpr const char *</type>
      <name>name</name>
      <anchorfile>structplayrho_1_1detail_1_1TypeInfo_3_01playrho_1_1d2_1_1TargetJointConf_01_4.html</anchorfile>
      <anchor>a483de7cc85b6a4dc1f2dc774cc55213b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::TypeInfo&lt; playrho::d2::WeldJointConf &gt;</name>
    <filename>structplayrho_1_1detail_1_1TypeInfo_3_01playrho_1_1d2_1_1WeldJointConf_01_4.html</filename>
    <member kind="variable" static="yes">
      <type>static constexpr const char *</type>
      <name>name</name>
      <anchorfile>structplayrho_1_1detail_1_1TypeInfo_3_01playrho_1_1d2_1_1WeldJointConf_01_4.html</anchorfile>
      <anchor>a00d17716814e02db23b54e38aec3fd2e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::TypeInfo&lt; playrho::d2::WheelJointConf &gt;</name>
    <filename>structplayrho_1_1detail_1_1TypeInfo_3_01playrho_1_1d2_1_1WheelJointConf_01_4.html</filename>
    <member kind="variable" static="yes">
      <type>static constexpr const char *</type>
      <name>name</name>
      <anchorfile>structplayrho_1_1detail_1_1TypeInfo_3_01playrho_1_1d2_1_1WheelJointConf_01_4.html</anchorfile>
      <anchor>a9d69f12e2b364d22aaa4f952681949ac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::underlying_type</name>
    <filename>structplayrho_1_1detail_1_1underlying__type.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::underlying_type&lt; T, std::enable_if_t&lt; has_underlying_type_member&lt; T &gt;::value &gt; &gt;</name>
    <filename>structplayrho_1_1detail_1_1underlying__type_3_01T_00_01std_1_1enable__if__t_3_01has__underlying_2212b27bd541046396e8289902d743ef.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename T::underlying_type</type>
      <name>type</name>
      <anchorfile>structplayrho_1_1detail_1_1underlying__type_3_01T_00_01std_1_1enable__if__t_3_01has__underlying_2212b27bd541046396e8289902d743ef.html</anchorfile>
      <anchor>ad0c380132fdbaeb9a1adb8ea08066fcf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::underlying_type&lt; T, std::enable_if_t&lt; std::is_enum_v&lt; T &gt; &gt; &gt;</name>
    <filename>structplayrho_1_1detail_1_1underlying__type_3_01T_00_01std_1_1enable__if__t_3_01std_1_1is__enum__v_3_01T_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::underlying_type_t&lt; T &gt;</type>
      <name>type</name>
      <anchorfile>structplayrho_1_1detail_1_1underlying__type_3_01T_00_01std_1_1enable__if__t_3_01std_1_1is__enum__v_3_01T_01_4_01_4_01_4.html</anchorfile>
      <anchor>a333dc81b4752f28345284240d110806f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::UnitIntervalChecker</name>
    <filename>structplayrho_1_1detail_1_1UnitIntervalChecker.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structplayrho_1_1detail_1_1UnitIntervalChecker.html</anchorfile>
      <anchor>afee794eb882c7e20cfe4473f4429ac46</anchor>
      <arglist>() const noexcept -&gt; decltype(static_cast&lt; T &gt;(0))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structplayrho_1_1detail_1_1UnitIntervalChecker.html</anchorfile>
      <anchor>a621c8e3b1933f7e3474b3cbb55666f43</anchor>
      <arglist>(const T &amp;v) const noexcept -&gt; decltype((v &gt;=static_cast&lt; T &gt;(0)) &amp;&amp;(v&lt;=static_cast&lt; T &gt;(1)), static_cast&lt; const char * &gt;(nullptr))</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::UnitVec</name>
    <filename>classplayrho_1_1d2_1_1UnitVec.html</filename>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_iterator</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a8768204b9d09d03c772c14967a925791</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_pointer</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>ab01e2b6172ff17d8ef644c5915ac0ddc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a3f9af7e3f3778be7c5397325fdfda6b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a7913b334ce42e2e6dd740254e76cec64</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::enable_if_t&lt; IsArithmeticV&lt; T &gt;, std::pair&lt; UnitVec, T &gt; &gt;</type>
      <name>PolarCoord</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>af22dca7068a1cb5ce4737d834a366759</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a4c0ec8c437dcabe459480d31af35d31b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Real</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a1a7a18b4800feac830d4375c39889da2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>UnitVec</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a55c6910d3679c13827703bbb4a769b41</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec</type>
      <name>Absolute</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>ad1bcbfce894d533d52b98c6032da9661</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>at</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a7067c246d03f6de8a054b8ce3810b9b2</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a1daed0036c85f79db339d621bd821e7e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a05b457eb94056a8e3b3865024d9e7597</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>aa0a3a0f53320c3e0461bee2b2c8ea30b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crbegin</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>ab22cbe6daab96aee5c3c4117834b06c7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crend</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a8d44f8cbedd5f58a3a47ec217607e2cd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_pointer</type>
      <name>data</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>ab20e84975636fb39972c50fb55251771</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a51c92fd671c1aa855d11fc2270d27b8f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec</type>
      <name>FlipX</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a9383bbc355a8e001d1eda9fcc0f98aa2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec</type>
      <name>FlipXY</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a292d9c273617a3ada4a20f53b0e22cbf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec</type>
      <name>FlipY</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a939f4c4a3315818d7cdbb2475406cc41</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec</type>
      <name>GetFwdPerpendicular</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a7b903c5d18da3007dad5d31d66ffa872</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec</type>
      <name>GetRevPerpendicular</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a1d9cfdf4a1d77ff7f795f4208170a239</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetX</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a5b4a5ee8a7ab899d9dc87e948f0efbf9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetY</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>afd94abdf9e62bb60313227c20a5757d8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>ab4d6bd9c4e747cc1f0118769269df628</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a897c2964930d475d582c5ccfd8cee10f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a1e6755e80f6737ff7823b135a1f47318</anchor>
      <arglist>(size_type pos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a2395f8349fa44e4705f22704a40b6603</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a0fc0438361d440f40960594f3c50e9d6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec</type>
      <name>Rotate</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>af5826655ebc87a6fdcbd95aebdbc2600</anchor>
      <arglist>(const UnitVec &amp;amount) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>empty</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a4295ff1ce4d06924eb3d56d929430f8e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UnitVec</type>
      <name>Get</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>aada8938ada086cdf245e879c8fae979d</anchor>
      <arglist>(Angle angle) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PolarCoord&lt; T &gt;</type>
      <name>Get</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>ad0a48968338c274289983ba5c44d58ca</anchor>
      <arglist>(const T x, const T y, const UnitVec &amp;fallback=GetDefaultFallback()) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr UnitVec</type>
      <name>GetDefaultFallback</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a9c0d12b9f3e418a49933c367305c01c0</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr UnitVec</type>
      <name>GetDown</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a13ca76ab4ff89575ffebe1308f6b8353</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr UnitVec</type>
      <name>GetDownRight</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a9d411847130a0053ee8826d6d487b707</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr UnitVec</type>
      <name>GetLeft</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a44b186e8e5faa989049dcb9fba7367c7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr UnitVec</type>
      <name>GetRight</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a989ef293213c6b3a4d1901533445cd85</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr UnitVec</type>
      <name>GetUp</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a082d654dabe4bb87cbfe3f748ee85505</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr UnitVec</type>
      <name>GetUpRight</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a336c73df89c6e93dfa73c38e7223cce2</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr UnitVec</type>
      <name>GetZero</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a36ae084e9c7c9e474738daa40674bf73</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a5b5bd431bf1f2e911b12d5333873e244</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>size</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a0d153d66b2d5ce6e7d5fd5cb79b9479d</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::Vector</name>
    <filename>structplayrho_1_1Vector.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a01d534d2b418dd90b646a4b9258efcfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>adb95a88a8f0a112b81be5904979fd1c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9da6840475f24afb0745263ad7a20314</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0ed34a0b33733cd906a69be2afeeeb1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0807d5f6ad7825293d92e8a6e0242734</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a541212ea3d3edf87f5f1ced1a9d3fb84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a55cf503243bd308dc9961ba0970ab6ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a1dac8a92ef859aec019358fed5b4badd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; iterator &gt;</type>
      <name>reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a2134b5edd0c13e27350197a8a0268c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0bb82780552c224e3736ed516d1c0dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a92ca95984a7bf625e8705b97245a7a8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa368db46827a37158002ac586f3f55c2</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a64e86fe825332bc262819c5edbc4115f</anchor>
      <arglist>(std::enable_if_t&lt; sizeof...(Tail)+1==N, T &gt; head, Tail... tail) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a96eefa7a8f43dddee954f5cda427d1f8</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ac4fa1827bdfc14cc0c2c1778394f7b70</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0e4e393aa9b3999b5e7bcd756c7ce88e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a640fd6dd0af7123b6e8b47feceaf5375</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9bebd544f9cb7bb77c8f2600bd194c8f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae2cae3925bba1dc9890cb171491b5c8c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab8f7823fbdb7a68dcc009294228f0b9f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7516a64e5f7a1463fb12f7b6f880ffb5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ac0ee63043ed80188d8e400b7de4668aa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a88f495a57b2564bd76d45d515486617c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af101191765d6e6e8ea67d2365d190cc4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9b2981be03a89e12d9783d08d941c5bd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa90e470ba330d396ba83db1dc29b9522</anchor>
      <arglist>(size_type pos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a4cf7068d7d3c4ea1a2c6859ffd7e749b</anchor>
      <arglist>(size_type pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a324c2160a22774e96726fbaa148c552f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a820156d1e812484e5962b33ada91027a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7e1b4d33490c25fd9f0c5a9031ebf823</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0de188288645c01c7a0d5663f3ba1624</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>empty</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a243341024feadee447e86055cf84d363</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ad58ba69787a0a92a46d3a58ef1298a19</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa7a558d2ae6d126fd6565ee121d020bb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>elements</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a439b81a4f7eb326deec945e632ec37b0</anchor>
      <arglist>[N? N:1]</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>abs</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a594091c0fcb9865f2d102f3b8ee973b3</anchor>
      <arglist>(const Vector&lt; T, N &gt; &amp;v) noexcept -&gt; decltype(abs(T{}), Vector&lt; T, N &gt;{})</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>get</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa10d9373a7aa5e3492fee0877900f738</anchor>
      <arglist>(Vector&lt; T, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0e16f08723028c63f043c1ad42891b11</anchor>
      <arglist>(const Vector&lt; T, N &gt; &amp;lhs, const Vector&lt; T, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliableV&lt; T1, T2 &gt; &amp;&amp;!IsVectorV&lt; T1 &gt;, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a2722bc95da32ec0b7f65c9dff9aa0dcc</anchor>
      <arglist>(const T1 &amp;s, const Vector&lt; T2, N &gt; &amp;a) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliableV&lt; T1, T2 &gt; &amp;&amp;!IsVectorV&lt; T2 &gt;, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a17bf68739331457fd06d2ac83a971ce7</anchor>
      <arglist>(const Vector&lt; T1, N &gt; &amp;a, const T2 &amp;s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliableV&lt; T1, T2 &gt;, Vector&lt; Vector&lt; OT, C &gt;, A &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a53d7a33cd41bce2acd1d6b8292487981</anchor>
      <arglist>(const Vector&lt; Vector&lt; T1, B &gt;, A &gt; &amp;lhs, const Vector&lt; Vector&lt; T2, C &gt;, B &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; T1, decltype(T1{} *T2{})&gt;, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator*=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af081fa6bf4de6ca0c13938151e91dbb6</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; T, decltype(T{}+T{})&gt;, Vector&lt; T, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ad9320003d829a8e98e1e77bcd28adab4</anchor>
      <arglist>(Vector&lt; T, N &gt; lhs, const Vector&lt; T, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; T, decltype(+T{})&gt;, Vector&lt; T, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae70d6dcc29a595bcc1a08b80d06f6e10</anchor>
      <arglist>(Vector&lt; T, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; T, decltype(T{}+T{})&gt;, Vector&lt; T, N &gt; &amp; &gt;</type>
      <name>operator+=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a319c9b996615a5d406c9db90f5e4578f</anchor>
      <arglist>(Vector&lt; T, N &gt; &amp;lhs, const Vector&lt; T, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; T, decltype(T{} - T{})&gt;, Vector&lt; T, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a1ea7b0293964b22ae57e18fc36518d75</anchor>
      <arglist>(Vector&lt; T, N &gt; lhs, const Vector&lt; T, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; T, decltype(-T{})&gt;, Vector&lt; T, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a30c1fd567af542eaca195272f717e6bd</anchor>
      <arglist>(Vector&lt; T, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; T, decltype(T{} - T{})&gt;, Vector&lt; T, N &gt; &amp; &gt;</type>
      <name>operator-=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a6fba1d15bc6902dca10efe3a579d1c0a</anchor>
      <arglist>(Vector&lt; T, N &gt; &amp;lhs, const Vector&lt; T, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsDivisableV&lt; T1, T2 &gt; &amp;&amp;!IsVectorV&lt; T2 &gt;, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a6da12fe999b8b56930c6cbd9dd4cd920</anchor>
      <arglist>(const Vector&lt; T1, N &gt; &amp;a, const T2 &amp;s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; T1, decltype(T1{}/T2{})&gt;, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator/=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a8af63c98286091483bcd8bc55a8072d1</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a4eaedfa824fd2df1b6450a875b144ed0</anchor>
      <arglist>(const Vector&lt; T0, N0 &gt; &amp;lhs, const Vector&lt; T1, N1 &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af157a36bb1282e34b967881c199d15fa</anchor>
      <arglist>(::std::ostream &amp;os, const Vector&lt; T, N &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab0d92fceef8d7757ae713bd166391c21</anchor>
      <arglist>(const Vector&lt; T, N &gt; &amp;lhs, const Vector&lt; T, N &gt; &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Vector&lt; InvMass &gt;</name>
    <filename>structplayrho_1_1Vector.html</filename>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a01d534d2b418dd90b646a4b9258efcfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>adb95a88a8f0a112b81be5904979fd1c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9da6840475f24afb0745263ad7a20314</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0ed34a0b33733cd906a69be2afeeeb1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0807d5f6ad7825293d92e8a6e0242734</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a541212ea3d3edf87f5f1ced1a9d3fb84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a55cf503243bd308dc9961ba0970ab6ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a1dac8a92ef859aec019358fed5b4badd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; iterator &gt;</type>
      <name>reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a2134b5edd0c13e27350197a8a0268c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0bb82780552c224e3736ed516d1c0dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InvMass</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a92ca95984a7bf625e8705b97245a7a8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa368db46827a37158002ac586f3f55c2</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a64e86fe825332bc262819c5edbc4115f</anchor>
      <arglist>(std::enable_if_t&lt; sizeof...(Tail)+1==N, InvMass &gt; head, Tail... tail) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a96eefa7a8f43dddee954f5cda427d1f8</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ac4fa1827bdfc14cc0c2c1778394f7b70</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0e4e393aa9b3999b5e7bcd756c7ce88e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a640fd6dd0af7123b6e8b47feceaf5375</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9bebd544f9cb7bb77c8f2600bd194c8f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae2cae3925bba1dc9890cb171491b5c8c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab8f7823fbdb7a68dcc009294228f0b9f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7516a64e5f7a1463fb12f7b6f880ffb5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ac0ee63043ed80188d8e400b7de4668aa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a88f495a57b2564bd76d45d515486617c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af101191765d6e6e8ea67d2365d190cc4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9b2981be03a89e12d9783d08d941c5bd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa90e470ba330d396ba83db1dc29b9522</anchor>
      <arglist>(size_type pos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a4cf7068d7d3c4ea1a2c6859ffd7e749b</anchor>
      <arglist>(size_type pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a324c2160a22774e96726fbaa148c552f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a820156d1e812484e5962b33ada91027a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7e1b4d33490c25fd9f0c5a9031ebf823</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0de188288645c01c7a0d5663f3ba1624</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>empty</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a243341024feadee447e86055cf84d363</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ad58ba69787a0a92a46d3a58ef1298a19</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa7a558d2ae6d126fd6565ee121d020bb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>elements</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a439b81a4f7eb326deec945e632ec37b0</anchor>
      <arglist>[N? N:1]</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>abs</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a594091c0fcb9865f2d102f3b8ee973b3</anchor>
      <arglist>(const Vector&lt; InvMass, N &gt; &amp;v) noexcept -&gt; decltype(abs(InvMass {}), Vector&lt; InvMass, N &gt;{})</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>get</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa10d9373a7aa5e3492fee0877900f738</anchor>
      <arglist>(Vector&lt; InvMass, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0e16f08723028c63f043c1ad42891b11</anchor>
      <arglist>(const Vector&lt; InvMass, N &gt; &amp;lhs, const Vector&lt; InvMass, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliableV&lt; T1, T2 &gt; &amp;&amp;!IsVectorV&lt; T1 &gt;, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a2722bc95da32ec0b7f65c9dff9aa0dcc</anchor>
      <arglist>(const T1 &amp;s, const Vector&lt; T2, N &gt; &amp;a) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliableV&lt; T1, T2 &gt; &amp;&amp;!IsVectorV&lt; T2 &gt;, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a17bf68739331457fd06d2ac83a971ce7</anchor>
      <arglist>(const Vector&lt; T1, N &gt; &amp;a, const T2 &amp;s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliableV&lt; T1, T2 &gt;, Vector&lt; Vector&lt; OT, C &gt;, A &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a53d7a33cd41bce2acd1d6b8292487981</anchor>
      <arglist>(const Vector&lt; Vector&lt; T1, B &gt;, A &gt; &amp;lhs, const Vector&lt; Vector&lt; T2, C &gt;, B &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; T1, decltype(T1{} *T2{})&gt;, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator*=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af081fa6bf4de6ca0c13938151e91dbb6</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; InvMass, decltype(InvMass {}+InvMass {})&gt;, Vector&lt; InvMass, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ad9320003d829a8e98e1e77bcd28adab4</anchor>
      <arglist>(Vector&lt; InvMass, N &gt; lhs, const Vector&lt; InvMass, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; InvMass, decltype(+InvMass {})&gt;, Vector&lt; InvMass, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae70d6dcc29a595bcc1a08b80d06f6e10</anchor>
      <arglist>(Vector&lt; InvMass, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; InvMass, decltype(InvMass {}+InvMass {})&gt;, Vector&lt; InvMass, N &gt; &amp; &gt;</type>
      <name>operator+=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a319c9b996615a5d406c9db90f5e4578f</anchor>
      <arglist>(Vector&lt; InvMass, N &gt; &amp;lhs, const Vector&lt; InvMass, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; InvMass, decltype(InvMass {} - InvMass {})&gt;, Vector&lt; InvMass, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a1ea7b0293964b22ae57e18fc36518d75</anchor>
      <arglist>(Vector&lt; InvMass, N &gt; lhs, const Vector&lt; InvMass, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; InvMass, decltype(-InvMass {})&gt;, Vector&lt; InvMass, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a30c1fd567af542eaca195272f717e6bd</anchor>
      <arglist>(Vector&lt; InvMass, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; InvMass, decltype(InvMass {} - InvMass {})&gt;, Vector&lt; InvMass, N &gt; &amp; &gt;</type>
      <name>operator-=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a6fba1d15bc6902dca10efe3a579d1c0a</anchor>
      <arglist>(Vector&lt; InvMass, N &gt; &amp;lhs, const Vector&lt; InvMass, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsDivisableV&lt; T1, T2 &gt; &amp;&amp;!IsVectorV&lt; T2 &gt;, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a6da12fe999b8b56930c6cbd9dd4cd920</anchor>
      <arglist>(const Vector&lt; T1, N &gt; &amp;a, const T2 &amp;s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; T1, decltype(T1{}/T2{})&gt;, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator/=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a8af63c98286091483bcd8bc55a8072d1</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a4eaedfa824fd2df1b6450a875b144ed0</anchor>
      <arglist>(const Vector&lt; T0, N0 &gt; &amp;lhs, const Vector&lt; T1, N1 &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af157a36bb1282e34b967881c199d15fa</anchor>
      <arglist>(::std::ostream &amp;os, const Vector&lt; InvMass, N &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab0d92fceef8d7757ae713bd166391c21</anchor>
      <arglist>(const Vector&lt; InvMass, N &gt; &amp;lhs, const Vector&lt; InvMass, N &gt; &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Vector&lt; Length &gt;</name>
    <filename>structplayrho_1_1Vector.html</filename>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a01d534d2b418dd90b646a4b9258efcfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>adb95a88a8f0a112b81be5904979fd1c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9da6840475f24afb0745263ad7a20314</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0ed34a0b33733cd906a69be2afeeeb1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0807d5f6ad7825293d92e8a6e0242734</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a541212ea3d3edf87f5f1ced1a9d3fb84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a55cf503243bd308dc9961ba0970ab6ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a1dac8a92ef859aec019358fed5b4badd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; iterator &gt;</type>
      <name>reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a2134b5edd0c13e27350197a8a0268c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0bb82780552c224e3736ed516d1c0dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Length</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a92ca95984a7bf625e8705b97245a7a8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa368db46827a37158002ac586f3f55c2</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a64e86fe825332bc262819c5edbc4115f</anchor>
      <arglist>(std::enable_if_t&lt; sizeof...(Tail)+1==N, Length &gt; head, Tail... tail) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a96eefa7a8f43dddee954f5cda427d1f8</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ac4fa1827bdfc14cc0c2c1778394f7b70</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0e4e393aa9b3999b5e7bcd756c7ce88e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a640fd6dd0af7123b6e8b47feceaf5375</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9bebd544f9cb7bb77c8f2600bd194c8f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae2cae3925bba1dc9890cb171491b5c8c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab8f7823fbdb7a68dcc009294228f0b9f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7516a64e5f7a1463fb12f7b6f880ffb5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ac0ee63043ed80188d8e400b7de4668aa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a88f495a57b2564bd76d45d515486617c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af101191765d6e6e8ea67d2365d190cc4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9b2981be03a89e12d9783d08d941c5bd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa90e470ba330d396ba83db1dc29b9522</anchor>
      <arglist>(size_type pos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a4cf7068d7d3c4ea1a2c6859ffd7e749b</anchor>
      <arglist>(size_type pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a324c2160a22774e96726fbaa148c552f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a820156d1e812484e5962b33ada91027a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7e1b4d33490c25fd9f0c5a9031ebf823</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0de188288645c01c7a0d5663f3ba1624</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>empty</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a243341024feadee447e86055cf84d363</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ad58ba69787a0a92a46d3a58ef1298a19</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa7a558d2ae6d126fd6565ee121d020bb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>elements</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a439b81a4f7eb326deec945e632ec37b0</anchor>
      <arglist>[N? N:1]</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>abs</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a594091c0fcb9865f2d102f3b8ee973b3</anchor>
      <arglist>(const Vector&lt; Length, N &gt; &amp;v) noexcept -&gt; decltype(abs(Length {}), Vector&lt; Length, N &gt;{})</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>get</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa10d9373a7aa5e3492fee0877900f738</anchor>
      <arglist>(Vector&lt; Length, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0e16f08723028c63f043c1ad42891b11</anchor>
      <arglist>(const Vector&lt; Length, N &gt; &amp;lhs, const Vector&lt; Length, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliableV&lt; T1, T2 &gt; &amp;&amp;!IsVectorV&lt; T1 &gt;, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a2722bc95da32ec0b7f65c9dff9aa0dcc</anchor>
      <arglist>(const T1 &amp;s, const Vector&lt; T2, N &gt; &amp;a) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliableV&lt; T1, T2 &gt; &amp;&amp;!IsVectorV&lt; T2 &gt;, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a17bf68739331457fd06d2ac83a971ce7</anchor>
      <arglist>(const Vector&lt; T1, N &gt; &amp;a, const T2 &amp;s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliableV&lt; T1, T2 &gt;, Vector&lt; Vector&lt; OT, C &gt;, A &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a53d7a33cd41bce2acd1d6b8292487981</anchor>
      <arglist>(const Vector&lt; Vector&lt; T1, B &gt;, A &gt; &amp;lhs, const Vector&lt; Vector&lt; T2, C &gt;, B &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; T1, decltype(T1{} *T2{})&gt;, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator*=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af081fa6bf4de6ca0c13938151e91dbb6</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; Length, decltype(Length {}+Length {})&gt;, Vector&lt; Length, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ad9320003d829a8e98e1e77bcd28adab4</anchor>
      <arglist>(Vector&lt; Length, N &gt; lhs, const Vector&lt; Length, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; Length, decltype(+Length {})&gt;, Vector&lt; Length, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae70d6dcc29a595bcc1a08b80d06f6e10</anchor>
      <arglist>(Vector&lt; Length, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; Length, decltype(Length {}+Length {})&gt;, Vector&lt; Length, N &gt; &amp; &gt;</type>
      <name>operator+=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a319c9b996615a5d406c9db90f5e4578f</anchor>
      <arglist>(Vector&lt; Length, N &gt; &amp;lhs, const Vector&lt; Length, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; Length, decltype(Length {} - Length {})&gt;, Vector&lt; Length, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a1ea7b0293964b22ae57e18fc36518d75</anchor>
      <arglist>(Vector&lt; Length, N &gt; lhs, const Vector&lt; Length, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; Length, decltype(-Length {})&gt;, Vector&lt; Length, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a30c1fd567af542eaca195272f717e6bd</anchor>
      <arglist>(Vector&lt; Length, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; Length, decltype(Length {} - Length {})&gt;, Vector&lt; Length, N &gt; &amp; &gt;</type>
      <name>operator-=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a6fba1d15bc6902dca10efe3a579d1c0a</anchor>
      <arglist>(Vector&lt; Length, N &gt; &amp;lhs, const Vector&lt; Length, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsDivisableV&lt; T1, T2 &gt; &amp;&amp;!IsVectorV&lt; T2 &gt;, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a6da12fe999b8b56930c6cbd9dd4cd920</anchor>
      <arglist>(const Vector&lt; T1, N &gt; &amp;a, const T2 &amp;s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; T1, decltype(T1{}/T2{})&gt;, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator/=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a8af63c98286091483bcd8bc55a8072d1</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a4eaedfa824fd2df1b6450a875b144ed0</anchor>
      <arglist>(const Vector&lt; T0, N0 &gt; &amp;lhs, const Vector&lt; T1, N1 &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af157a36bb1282e34b967881c199d15fa</anchor>
      <arglist>(::std::ostream &amp;os, const Vector&lt; Length, N &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab0d92fceef8d7757ae713bd166391c21</anchor>
      <arglist>(const Vector&lt; Length, N &gt; &amp;lhs, const Vector&lt; Length, N &gt; &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Vector&lt; Length, N &gt;</name>
    <filename>structplayrho_1_1Vector.html</filename>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a01d534d2b418dd90b646a4b9258efcfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>adb95a88a8f0a112b81be5904979fd1c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9da6840475f24afb0745263ad7a20314</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0ed34a0b33733cd906a69be2afeeeb1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0807d5f6ad7825293d92e8a6e0242734</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a541212ea3d3edf87f5f1ced1a9d3fb84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a55cf503243bd308dc9961ba0970ab6ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a1dac8a92ef859aec019358fed5b4badd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; iterator &gt;</type>
      <name>reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a2134b5edd0c13e27350197a8a0268c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0bb82780552c224e3736ed516d1c0dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Length</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a92ca95984a7bf625e8705b97245a7a8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa368db46827a37158002ac586f3f55c2</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a64e86fe825332bc262819c5edbc4115f</anchor>
      <arglist>(std::enable_if_t&lt; sizeof...(Tail)+1==N, Length &gt; head, Tail... tail) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a96eefa7a8f43dddee954f5cda427d1f8</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ac4fa1827bdfc14cc0c2c1778394f7b70</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0e4e393aa9b3999b5e7bcd756c7ce88e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a640fd6dd0af7123b6e8b47feceaf5375</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9bebd544f9cb7bb77c8f2600bd194c8f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae2cae3925bba1dc9890cb171491b5c8c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab8f7823fbdb7a68dcc009294228f0b9f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7516a64e5f7a1463fb12f7b6f880ffb5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ac0ee63043ed80188d8e400b7de4668aa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a88f495a57b2564bd76d45d515486617c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af101191765d6e6e8ea67d2365d190cc4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9b2981be03a89e12d9783d08d941c5bd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa90e470ba330d396ba83db1dc29b9522</anchor>
      <arglist>(size_type pos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a4cf7068d7d3c4ea1a2c6859ffd7e749b</anchor>
      <arglist>(size_type pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a324c2160a22774e96726fbaa148c552f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a820156d1e812484e5962b33ada91027a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7e1b4d33490c25fd9f0c5a9031ebf823</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0de188288645c01c7a0d5663f3ba1624</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>empty</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a243341024feadee447e86055cf84d363</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ad58ba69787a0a92a46d3a58ef1298a19</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa7a558d2ae6d126fd6565ee121d020bb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>elements</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a439b81a4f7eb326deec945e632ec37b0</anchor>
      <arglist>[N? N:1]</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>abs</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a594091c0fcb9865f2d102f3b8ee973b3</anchor>
      <arglist>(const Vector&lt; Length, N &gt; &amp;v) noexcept -&gt; decltype(abs(Length {}), Vector&lt; Length, N &gt;{})</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>get</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa10d9373a7aa5e3492fee0877900f738</anchor>
      <arglist>(Vector&lt; Length, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0e16f08723028c63f043c1ad42891b11</anchor>
      <arglist>(const Vector&lt; Length, N &gt; &amp;lhs, const Vector&lt; Length, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliableV&lt; T1, T2 &gt; &amp;&amp;!IsVectorV&lt; T1 &gt;, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a2722bc95da32ec0b7f65c9dff9aa0dcc</anchor>
      <arglist>(const T1 &amp;s, const Vector&lt; T2, N &gt; &amp;a) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliableV&lt; T1, T2 &gt; &amp;&amp;!IsVectorV&lt; T2 &gt;, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a17bf68739331457fd06d2ac83a971ce7</anchor>
      <arglist>(const Vector&lt; T1, N &gt; &amp;a, const T2 &amp;s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliableV&lt; T1, T2 &gt;, Vector&lt; Vector&lt; OT, C &gt;, A &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a53d7a33cd41bce2acd1d6b8292487981</anchor>
      <arglist>(const Vector&lt; Vector&lt; T1, B &gt;, A &gt; &amp;lhs, const Vector&lt; Vector&lt; T2, C &gt;, B &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; T1, decltype(T1{} *T2{})&gt;, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator*=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af081fa6bf4de6ca0c13938151e91dbb6</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; Length, decltype(Length {}+Length {})&gt;, Vector&lt; Length, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ad9320003d829a8e98e1e77bcd28adab4</anchor>
      <arglist>(Vector&lt; Length, N &gt; lhs, const Vector&lt; Length, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; Length, decltype(+Length {})&gt;, Vector&lt; Length, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae70d6dcc29a595bcc1a08b80d06f6e10</anchor>
      <arglist>(Vector&lt; Length, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; Length, decltype(Length {}+Length {})&gt;, Vector&lt; Length, N &gt; &amp; &gt;</type>
      <name>operator+=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a319c9b996615a5d406c9db90f5e4578f</anchor>
      <arglist>(Vector&lt; Length, N &gt; &amp;lhs, const Vector&lt; Length, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; Length, decltype(Length {} - Length {})&gt;, Vector&lt; Length, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a1ea7b0293964b22ae57e18fc36518d75</anchor>
      <arglist>(Vector&lt; Length, N &gt; lhs, const Vector&lt; Length, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; Length, decltype(-Length {})&gt;, Vector&lt; Length, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a30c1fd567af542eaca195272f717e6bd</anchor>
      <arglist>(Vector&lt; Length, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; Length, decltype(Length {} - Length {})&gt;, Vector&lt; Length, N &gt; &amp; &gt;</type>
      <name>operator-=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a6fba1d15bc6902dca10efe3a579d1c0a</anchor>
      <arglist>(Vector&lt; Length, N &gt; &amp;lhs, const Vector&lt; Length, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsDivisableV&lt; T1, T2 &gt; &amp;&amp;!IsVectorV&lt; T2 &gt;, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a6da12fe999b8b56930c6cbd9dd4cd920</anchor>
      <arglist>(const Vector&lt; T1, N &gt; &amp;a, const T2 &amp;s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; T1, decltype(T1{}/T2{})&gt;, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator/=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a8af63c98286091483bcd8bc55a8072d1</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a4eaedfa824fd2df1b6450a875b144ed0</anchor>
      <arglist>(const Vector&lt; T0, N0 &gt; &amp;lhs, const Vector&lt; T1, N1 &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af157a36bb1282e34b967881c199d15fa</anchor>
      <arglist>(::std::ostream &amp;os, const Vector&lt; Length, N &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab0d92fceef8d7757ae713bd166391c21</anchor>
      <arglist>(const Vector&lt; Length, N &gt; &amp;lhs, const Vector&lt; Length, N &gt; &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Vector&lt; LinearAcceleration &gt;</name>
    <filename>structplayrho_1_1Vector.html</filename>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a01d534d2b418dd90b646a4b9258efcfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>adb95a88a8f0a112b81be5904979fd1c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9da6840475f24afb0745263ad7a20314</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0ed34a0b33733cd906a69be2afeeeb1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0807d5f6ad7825293d92e8a6e0242734</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a541212ea3d3edf87f5f1ced1a9d3fb84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a55cf503243bd308dc9961ba0970ab6ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a1dac8a92ef859aec019358fed5b4badd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; iterator &gt;</type>
      <name>reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a2134b5edd0c13e27350197a8a0268c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0bb82780552c224e3736ed516d1c0dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinearAcceleration</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a92ca95984a7bf625e8705b97245a7a8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa368db46827a37158002ac586f3f55c2</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a64e86fe825332bc262819c5edbc4115f</anchor>
      <arglist>(std::enable_if_t&lt; sizeof...(Tail)+1==N, LinearAcceleration &gt; head, Tail... tail) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a96eefa7a8f43dddee954f5cda427d1f8</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ac4fa1827bdfc14cc0c2c1778394f7b70</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0e4e393aa9b3999b5e7bcd756c7ce88e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a640fd6dd0af7123b6e8b47feceaf5375</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9bebd544f9cb7bb77c8f2600bd194c8f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae2cae3925bba1dc9890cb171491b5c8c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab8f7823fbdb7a68dcc009294228f0b9f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7516a64e5f7a1463fb12f7b6f880ffb5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ac0ee63043ed80188d8e400b7de4668aa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a88f495a57b2564bd76d45d515486617c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af101191765d6e6e8ea67d2365d190cc4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9b2981be03a89e12d9783d08d941c5bd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa90e470ba330d396ba83db1dc29b9522</anchor>
      <arglist>(size_type pos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a4cf7068d7d3c4ea1a2c6859ffd7e749b</anchor>
      <arglist>(size_type pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a324c2160a22774e96726fbaa148c552f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a820156d1e812484e5962b33ada91027a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7e1b4d33490c25fd9f0c5a9031ebf823</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0de188288645c01c7a0d5663f3ba1624</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>empty</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a243341024feadee447e86055cf84d363</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ad58ba69787a0a92a46d3a58ef1298a19</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa7a558d2ae6d126fd6565ee121d020bb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>elements</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a439b81a4f7eb326deec945e632ec37b0</anchor>
      <arglist>[N? N:1]</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>abs</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a594091c0fcb9865f2d102f3b8ee973b3</anchor>
      <arglist>(const Vector&lt; LinearAcceleration, N &gt; &amp;v) noexcept -&gt; decltype(abs(LinearAcceleration {}), Vector&lt; LinearAcceleration, N &gt;{})</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>get</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa10d9373a7aa5e3492fee0877900f738</anchor>
      <arglist>(Vector&lt; LinearAcceleration, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0e16f08723028c63f043c1ad42891b11</anchor>
      <arglist>(const Vector&lt; LinearAcceleration, N &gt; &amp;lhs, const Vector&lt; LinearAcceleration, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliableV&lt; T1, T2 &gt; &amp;&amp;!IsVectorV&lt; T1 &gt;, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a2722bc95da32ec0b7f65c9dff9aa0dcc</anchor>
      <arglist>(const T1 &amp;s, const Vector&lt; T2, N &gt; &amp;a) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliableV&lt; T1, T2 &gt; &amp;&amp;!IsVectorV&lt; T2 &gt;, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a17bf68739331457fd06d2ac83a971ce7</anchor>
      <arglist>(const Vector&lt; T1, N &gt; &amp;a, const T2 &amp;s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliableV&lt; T1, T2 &gt;, Vector&lt; Vector&lt; OT, C &gt;, A &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a53d7a33cd41bce2acd1d6b8292487981</anchor>
      <arglist>(const Vector&lt; Vector&lt; T1, B &gt;, A &gt; &amp;lhs, const Vector&lt; Vector&lt; T2, C &gt;, B &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; T1, decltype(T1{} *T2{})&gt;, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator*=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af081fa6bf4de6ca0c13938151e91dbb6</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; LinearAcceleration, decltype(LinearAcceleration {}+LinearAcceleration {})&gt;, Vector&lt; LinearAcceleration, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ad9320003d829a8e98e1e77bcd28adab4</anchor>
      <arglist>(Vector&lt; LinearAcceleration, N &gt; lhs, const Vector&lt; LinearAcceleration, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; LinearAcceleration, decltype(+LinearAcceleration {})&gt;, Vector&lt; LinearAcceleration, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae70d6dcc29a595bcc1a08b80d06f6e10</anchor>
      <arglist>(Vector&lt; LinearAcceleration, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; LinearAcceleration, decltype(LinearAcceleration {}+LinearAcceleration {})&gt;, Vector&lt; LinearAcceleration, N &gt; &amp; &gt;</type>
      <name>operator+=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a319c9b996615a5d406c9db90f5e4578f</anchor>
      <arglist>(Vector&lt; LinearAcceleration, N &gt; &amp;lhs, const Vector&lt; LinearAcceleration, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; LinearAcceleration, decltype(LinearAcceleration {} - LinearAcceleration {})&gt;, Vector&lt; LinearAcceleration, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a1ea7b0293964b22ae57e18fc36518d75</anchor>
      <arglist>(Vector&lt; LinearAcceleration, N &gt; lhs, const Vector&lt; LinearAcceleration, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; LinearAcceleration, decltype(-LinearAcceleration {})&gt;, Vector&lt; LinearAcceleration, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a30c1fd567af542eaca195272f717e6bd</anchor>
      <arglist>(Vector&lt; LinearAcceleration, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; LinearAcceleration, decltype(LinearAcceleration {} - LinearAcceleration {})&gt;, Vector&lt; LinearAcceleration, N &gt; &amp; &gt;</type>
      <name>operator-=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a6fba1d15bc6902dca10efe3a579d1c0a</anchor>
      <arglist>(Vector&lt; LinearAcceleration, N &gt; &amp;lhs, const Vector&lt; LinearAcceleration, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsDivisableV&lt; T1, T2 &gt; &amp;&amp;!IsVectorV&lt; T2 &gt;, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a6da12fe999b8b56930c6cbd9dd4cd920</anchor>
      <arglist>(const Vector&lt; T1, N &gt; &amp;a, const T2 &amp;s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; T1, decltype(T1{}/T2{})&gt;, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator/=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a8af63c98286091483bcd8bc55a8072d1</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a4eaedfa824fd2df1b6450a875b144ed0</anchor>
      <arglist>(const Vector&lt; T0, N0 &gt; &amp;lhs, const Vector&lt; T1, N1 &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af157a36bb1282e34b967881c199d15fa</anchor>
      <arglist>(::std::ostream &amp;os, const Vector&lt; LinearAcceleration, N &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab0d92fceef8d7757ae713bd166391c21</anchor>
      <arglist>(const Vector&lt; LinearAcceleration, N &gt; &amp;lhs, const Vector&lt; LinearAcceleration, N &gt; &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Vector&lt; LinearVelocity &gt;</name>
    <filename>structplayrho_1_1Vector.html</filename>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a01d534d2b418dd90b646a4b9258efcfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>adb95a88a8f0a112b81be5904979fd1c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9da6840475f24afb0745263ad7a20314</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0ed34a0b33733cd906a69be2afeeeb1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0807d5f6ad7825293d92e8a6e0242734</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a541212ea3d3edf87f5f1ced1a9d3fb84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a55cf503243bd308dc9961ba0970ab6ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a1dac8a92ef859aec019358fed5b4badd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; iterator &gt;</type>
      <name>reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a2134b5edd0c13e27350197a8a0268c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0bb82780552c224e3736ed516d1c0dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinearVelocity</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a92ca95984a7bf625e8705b97245a7a8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa368db46827a37158002ac586f3f55c2</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a64e86fe825332bc262819c5edbc4115f</anchor>
      <arglist>(std::enable_if_t&lt; sizeof...(Tail)+1==N, LinearVelocity &gt; head, Tail... tail) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a96eefa7a8f43dddee954f5cda427d1f8</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ac4fa1827bdfc14cc0c2c1778394f7b70</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0e4e393aa9b3999b5e7bcd756c7ce88e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a640fd6dd0af7123b6e8b47feceaf5375</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9bebd544f9cb7bb77c8f2600bd194c8f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae2cae3925bba1dc9890cb171491b5c8c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab8f7823fbdb7a68dcc009294228f0b9f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7516a64e5f7a1463fb12f7b6f880ffb5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ac0ee63043ed80188d8e400b7de4668aa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a88f495a57b2564bd76d45d515486617c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af101191765d6e6e8ea67d2365d190cc4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9b2981be03a89e12d9783d08d941c5bd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa90e470ba330d396ba83db1dc29b9522</anchor>
      <arglist>(size_type pos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a4cf7068d7d3c4ea1a2c6859ffd7e749b</anchor>
      <arglist>(size_type pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a324c2160a22774e96726fbaa148c552f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a820156d1e812484e5962b33ada91027a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7e1b4d33490c25fd9f0c5a9031ebf823</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0de188288645c01c7a0d5663f3ba1624</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>empty</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a243341024feadee447e86055cf84d363</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ad58ba69787a0a92a46d3a58ef1298a19</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa7a558d2ae6d126fd6565ee121d020bb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>elements</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a439b81a4f7eb326deec945e632ec37b0</anchor>
      <arglist>[N? N:1]</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>abs</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a594091c0fcb9865f2d102f3b8ee973b3</anchor>
      <arglist>(const Vector&lt; LinearVelocity, N &gt; &amp;v) noexcept -&gt; decltype(abs(LinearVelocity {}), Vector&lt; LinearVelocity, N &gt;{})</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>get</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa10d9373a7aa5e3492fee0877900f738</anchor>
      <arglist>(Vector&lt; LinearVelocity, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0e16f08723028c63f043c1ad42891b11</anchor>
      <arglist>(const Vector&lt; LinearVelocity, N &gt; &amp;lhs, const Vector&lt; LinearVelocity, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliableV&lt; T1, T2 &gt; &amp;&amp;!IsVectorV&lt; T1 &gt;, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a2722bc95da32ec0b7f65c9dff9aa0dcc</anchor>
      <arglist>(const T1 &amp;s, const Vector&lt; T2, N &gt; &amp;a) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliableV&lt; T1, T2 &gt; &amp;&amp;!IsVectorV&lt; T2 &gt;, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a17bf68739331457fd06d2ac83a971ce7</anchor>
      <arglist>(const Vector&lt; T1, N &gt; &amp;a, const T2 &amp;s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliableV&lt; T1, T2 &gt;, Vector&lt; Vector&lt; OT, C &gt;, A &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a53d7a33cd41bce2acd1d6b8292487981</anchor>
      <arglist>(const Vector&lt; Vector&lt; T1, B &gt;, A &gt; &amp;lhs, const Vector&lt; Vector&lt; T2, C &gt;, B &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; T1, decltype(T1{} *T2{})&gt;, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator*=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af081fa6bf4de6ca0c13938151e91dbb6</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; LinearVelocity, decltype(LinearVelocity {}+LinearVelocity {})&gt;, Vector&lt; LinearVelocity, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ad9320003d829a8e98e1e77bcd28adab4</anchor>
      <arglist>(Vector&lt; LinearVelocity, N &gt; lhs, const Vector&lt; LinearVelocity, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; LinearVelocity, decltype(+LinearVelocity {})&gt;, Vector&lt; LinearVelocity, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae70d6dcc29a595bcc1a08b80d06f6e10</anchor>
      <arglist>(Vector&lt; LinearVelocity, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; LinearVelocity, decltype(LinearVelocity {}+LinearVelocity {})&gt;, Vector&lt; LinearVelocity, N &gt; &amp; &gt;</type>
      <name>operator+=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a319c9b996615a5d406c9db90f5e4578f</anchor>
      <arglist>(Vector&lt; LinearVelocity, N &gt; &amp;lhs, const Vector&lt; LinearVelocity, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; LinearVelocity, decltype(LinearVelocity {} - LinearVelocity {})&gt;, Vector&lt; LinearVelocity, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a1ea7b0293964b22ae57e18fc36518d75</anchor>
      <arglist>(Vector&lt; LinearVelocity, N &gt; lhs, const Vector&lt; LinearVelocity, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; LinearVelocity, decltype(-LinearVelocity {})&gt;, Vector&lt; LinearVelocity, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a30c1fd567af542eaca195272f717e6bd</anchor>
      <arglist>(Vector&lt; LinearVelocity, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; LinearVelocity, decltype(LinearVelocity {} - LinearVelocity {})&gt;, Vector&lt; LinearVelocity, N &gt; &amp; &gt;</type>
      <name>operator-=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a6fba1d15bc6902dca10efe3a579d1c0a</anchor>
      <arglist>(Vector&lt; LinearVelocity, N &gt; &amp;lhs, const Vector&lt; LinearVelocity, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsDivisableV&lt; T1, T2 &gt; &amp;&amp;!IsVectorV&lt; T2 &gt;, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a6da12fe999b8b56930c6cbd9dd4cd920</anchor>
      <arglist>(const Vector&lt; T1, N &gt; &amp;a, const T2 &amp;s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; T1, decltype(T1{}/T2{})&gt;, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator/=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a8af63c98286091483bcd8bc55a8072d1</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a4eaedfa824fd2df1b6450a875b144ed0</anchor>
      <arglist>(const Vector&lt; T0, N0 &gt; &amp;lhs, const Vector&lt; T1, N1 &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af157a36bb1282e34b967881c199d15fa</anchor>
      <arglist>(::std::ostream &amp;os, const Vector&lt; LinearVelocity, N &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab0d92fceef8d7757ae713bd166391c21</anchor>
      <arglist>(const Vector&lt; LinearVelocity, N &gt; &amp;lhs, const Vector&lt; LinearVelocity, N &gt; &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Vector&lt; Mass &gt;</name>
    <filename>structplayrho_1_1Vector.html</filename>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a01d534d2b418dd90b646a4b9258efcfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>adb95a88a8f0a112b81be5904979fd1c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9da6840475f24afb0745263ad7a20314</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0ed34a0b33733cd906a69be2afeeeb1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0807d5f6ad7825293d92e8a6e0242734</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a541212ea3d3edf87f5f1ced1a9d3fb84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a55cf503243bd308dc9961ba0970ab6ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a1dac8a92ef859aec019358fed5b4badd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; iterator &gt;</type>
      <name>reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a2134b5edd0c13e27350197a8a0268c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0bb82780552c224e3736ed516d1c0dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mass</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a92ca95984a7bf625e8705b97245a7a8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa368db46827a37158002ac586f3f55c2</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a64e86fe825332bc262819c5edbc4115f</anchor>
      <arglist>(std::enable_if_t&lt; sizeof...(Tail)+1==N, Mass &gt; head, Tail... tail) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a96eefa7a8f43dddee954f5cda427d1f8</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ac4fa1827bdfc14cc0c2c1778394f7b70</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0e4e393aa9b3999b5e7bcd756c7ce88e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a640fd6dd0af7123b6e8b47feceaf5375</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9bebd544f9cb7bb77c8f2600bd194c8f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae2cae3925bba1dc9890cb171491b5c8c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab8f7823fbdb7a68dcc009294228f0b9f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7516a64e5f7a1463fb12f7b6f880ffb5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ac0ee63043ed80188d8e400b7de4668aa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a88f495a57b2564bd76d45d515486617c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af101191765d6e6e8ea67d2365d190cc4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9b2981be03a89e12d9783d08d941c5bd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa90e470ba330d396ba83db1dc29b9522</anchor>
      <arglist>(size_type pos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a4cf7068d7d3c4ea1a2c6859ffd7e749b</anchor>
      <arglist>(size_type pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a324c2160a22774e96726fbaa148c552f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a820156d1e812484e5962b33ada91027a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7e1b4d33490c25fd9f0c5a9031ebf823</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0de188288645c01c7a0d5663f3ba1624</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>empty</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a243341024feadee447e86055cf84d363</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ad58ba69787a0a92a46d3a58ef1298a19</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa7a558d2ae6d126fd6565ee121d020bb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>elements</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a439b81a4f7eb326deec945e632ec37b0</anchor>
      <arglist>[N? N:1]</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>abs</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a594091c0fcb9865f2d102f3b8ee973b3</anchor>
      <arglist>(const Vector&lt; Mass, N &gt; &amp;v) noexcept -&gt; decltype(abs(Mass {}), Vector&lt; Mass, N &gt;{})</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>get</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa10d9373a7aa5e3492fee0877900f738</anchor>
      <arglist>(Vector&lt; Mass, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0e16f08723028c63f043c1ad42891b11</anchor>
      <arglist>(const Vector&lt; Mass, N &gt; &amp;lhs, const Vector&lt; Mass, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliableV&lt; T1, T2 &gt; &amp;&amp;!IsVectorV&lt; T1 &gt;, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a2722bc95da32ec0b7f65c9dff9aa0dcc</anchor>
      <arglist>(const T1 &amp;s, const Vector&lt; T2, N &gt; &amp;a) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliableV&lt; T1, T2 &gt; &amp;&amp;!IsVectorV&lt; T2 &gt;, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a17bf68739331457fd06d2ac83a971ce7</anchor>
      <arglist>(const Vector&lt; T1, N &gt; &amp;a, const T2 &amp;s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliableV&lt; T1, T2 &gt;, Vector&lt; Vector&lt; OT, C &gt;, A &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a53d7a33cd41bce2acd1d6b8292487981</anchor>
      <arglist>(const Vector&lt; Vector&lt; T1, B &gt;, A &gt; &amp;lhs, const Vector&lt; Vector&lt; T2, C &gt;, B &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; T1, decltype(T1{} *T2{})&gt;, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator*=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af081fa6bf4de6ca0c13938151e91dbb6</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; Mass, decltype(Mass {}+Mass {})&gt;, Vector&lt; Mass, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ad9320003d829a8e98e1e77bcd28adab4</anchor>
      <arglist>(Vector&lt; Mass, N &gt; lhs, const Vector&lt; Mass, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; Mass, decltype(+Mass {})&gt;, Vector&lt; Mass, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae70d6dcc29a595bcc1a08b80d06f6e10</anchor>
      <arglist>(Vector&lt; Mass, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; Mass, decltype(Mass {}+Mass {})&gt;, Vector&lt; Mass, N &gt; &amp; &gt;</type>
      <name>operator+=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a319c9b996615a5d406c9db90f5e4578f</anchor>
      <arglist>(Vector&lt; Mass, N &gt; &amp;lhs, const Vector&lt; Mass, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; Mass, decltype(Mass {} - Mass {})&gt;, Vector&lt; Mass, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a1ea7b0293964b22ae57e18fc36518d75</anchor>
      <arglist>(Vector&lt; Mass, N &gt; lhs, const Vector&lt; Mass, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; Mass, decltype(-Mass {})&gt;, Vector&lt; Mass, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a30c1fd567af542eaca195272f717e6bd</anchor>
      <arglist>(Vector&lt; Mass, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; Mass, decltype(Mass {} - Mass {})&gt;, Vector&lt; Mass, N &gt; &amp; &gt;</type>
      <name>operator-=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a6fba1d15bc6902dca10efe3a579d1c0a</anchor>
      <arglist>(Vector&lt; Mass, N &gt; &amp;lhs, const Vector&lt; Mass, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsDivisableV&lt; T1, T2 &gt; &amp;&amp;!IsVectorV&lt; T2 &gt;, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a6da12fe999b8b56930c6cbd9dd4cd920</anchor>
      <arglist>(const Vector&lt; T1, N &gt; &amp;a, const T2 &amp;s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; T1, decltype(T1{}/T2{})&gt;, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator/=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a8af63c98286091483bcd8bc55a8072d1</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a4eaedfa824fd2df1b6450a875b144ed0</anchor>
      <arglist>(const Vector&lt; T0, N0 &gt; &amp;lhs, const Vector&lt; T1, N1 &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af157a36bb1282e34b967881c199d15fa</anchor>
      <arglist>(::std::ostream &amp;os, const Vector&lt; Mass, N &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab0d92fceef8d7757ae713bd166391c21</anchor>
      <arglist>(const Vector&lt; Mass, N &gt; &amp;lhs, const Vector&lt; Mass, N &gt; &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Vector&lt; Momentum &gt;</name>
    <filename>structplayrho_1_1Vector.html</filename>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a01d534d2b418dd90b646a4b9258efcfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>adb95a88a8f0a112b81be5904979fd1c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9da6840475f24afb0745263ad7a20314</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0ed34a0b33733cd906a69be2afeeeb1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0807d5f6ad7825293d92e8a6e0242734</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a541212ea3d3edf87f5f1ced1a9d3fb84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a55cf503243bd308dc9961ba0970ab6ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a1dac8a92ef859aec019358fed5b4badd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; iterator &gt;</type>
      <name>reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a2134b5edd0c13e27350197a8a0268c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0bb82780552c224e3736ed516d1c0dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Momentum</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a92ca95984a7bf625e8705b97245a7a8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa368db46827a37158002ac586f3f55c2</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a64e86fe825332bc262819c5edbc4115f</anchor>
      <arglist>(std::enable_if_t&lt; sizeof...(Tail)+1==N, Momentum &gt; head, Tail... tail) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a96eefa7a8f43dddee954f5cda427d1f8</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ac4fa1827bdfc14cc0c2c1778394f7b70</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0e4e393aa9b3999b5e7bcd756c7ce88e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a640fd6dd0af7123b6e8b47feceaf5375</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9bebd544f9cb7bb77c8f2600bd194c8f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae2cae3925bba1dc9890cb171491b5c8c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab8f7823fbdb7a68dcc009294228f0b9f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7516a64e5f7a1463fb12f7b6f880ffb5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ac0ee63043ed80188d8e400b7de4668aa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a88f495a57b2564bd76d45d515486617c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af101191765d6e6e8ea67d2365d190cc4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9b2981be03a89e12d9783d08d941c5bd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa90e470ba330d396ba83db1dc29b9522</anchor>
      <arglist>(size_type pos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a4cf7068d7d3c4ea1a2c6859ffd7e749b</anchor>
      <arglist>(size_type pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a324c2160a22774e96726fbaa148c552f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a820156d1e812484e5962b33ada91027a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7e1b4d33490c25fd9f0c5a9031ebf823</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0de188288645c01c7a0d5663f3ba1624</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>empty</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a243341024feadee447e86055cf84d363</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ad58ba69787a0a92a46d3a58ef1298a19</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa7a558d2ae6d126fd6565ee121d020bb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>elements</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a439b81a4f7eb326deec945e632ec37b0</anchor>
      <arglist>[N? N:1]</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>abs</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a594091c0fcb9865f2d102f3b8ee973b3</anchor>
      <arglist>(const Vector&lt; Momentum, N &gt; &amp;v) noexcept -&gt; decltype(abs(Momentum {}), Vector&lt; Momentum, N &gt;{})</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>get</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa10d9373a7aa5e3492fee0877900f738</anchor>
      <arglist>(Vector&lt; Momentum, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0e16f08723028c63f043c1ad42891b11</anchor>
      <arglist>(const Vector&lt; Momentum, N &gt; &amp;lhs, const Vector&lt; Momentum, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliableV&lt; T1, T2 &gt; &amp;&amp;!IsVectorV&lt; T1 &gt;, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a2722bc95da32ec0b7f65c9dff9aa0dcc</anchor>
      <arglist>(const T1 &amp;s, const Vector&lt; T2, N &gt; &amp;a) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliableV&lt; T1, T2 &gt; &amp;&amp;!IsVectorV&lt; T2 &gt;, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a17bf68739331457fd06d2ac83a971ce7</anchor>
      <arglist>(const Vector&lt; T1, N &gt; &amp;a, const T2 &amp;s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliableV&lt; T1, T2 &gt;, Vector&lt; Vector&lt; OT, C &gt;, A &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a53d7a33cd41bce2acd1d6b8292487981</anchor>
      <arglist>(const Vector&lt; Vector&lt; T1, B &gt;, A &gt; &amp;lhs, const Vector&lt; Vector&lt; T2, C &gt;, B &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; T1, decltype(T1{} *T2{})&gt;, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator*=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af081fa6bf4de6ca0c13938151e91dbb6</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; Momentum, decltype(Momentum {}+Momentum {})&gt;, Vector&lt; Momentum, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ad9320003d829a8e98e1e77bcd28adab4</anchor>
      <arglist>(Vector&lt; Momentum, N &gt; lhs, const Vector&lt; Momentum, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; Momentum, decltype(+Momentum {})&gt;, Vector&lt; Momentum, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae70d6dcc29a595bcc1a08b80d06f6e10</anchor>
      <arglist>(Vector&lt; Momentum, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; Momentum, decltype(Momentum {}+Momentum {})&gt;, Vector&lt; Momentum, N &gt; &amp; &gt;</type>
      <name>operator+=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a319c9b996615a5d406c9db90f5e4578f</anchor>
      <arglist>(Vector&lt; Momentum, N &gt; &amp;lhs, const Vector&lt; Momentum, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; Momentum, decltype(Momentum {} - Momentum {})&gt;, Vector&lt; Momentum, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a1ea7b0293964b22ae57e18fc36518d75</anchor>
      <arglist>(Vector&lt; Momentum, N &gt; lhs, const Vector&lt; Momentum, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; Momentum, decltype(-Momentum {})&gt;, Vector&lt; Momentum, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a30c1fd567af542eaca195272f717e6bd</anchor>
      <arglist>(Vector&lt; Momentum, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; Momentum, decltype(Momentum {} - Momentum {})&gt;, Vector&lt; Momentum, N &gt; &amp; &gt;</type>
      <name>operator-=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a6fba1d15bc6902dca10efe3a579d1c0a</anchor>
      <arglist>(Vector&lt; Momentum, N &gt; &amp;lhs, const Vector&lt; Momentum, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsDivisableV&lt; T1, T2 &gt; &amp;&amp;!IsVectorV&lt; T2 &gt;, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a6da12fe999b8b56930c6cbd9dd4cd920</anchor>
      <arglist>(const Vector&lt; T1, N &gt; &amp;a, const T2 &amp;s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; T1, decltype(T1{}/T2{})&gt;, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator/=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a8af63c98286091483bcd8bc55a8072d1</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a4eaedfa824fd2df1b6450a875b144ed0</anchor>
      <arglist>(const Vector&lt; T0, N0 &gt; &amp;lhs, const Vector&lt; T1, N1 &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af157a36bb1282e34b967881c199d15fa</anchor>
      <arglist>(::std::ostream &amp;os, const Vector&lt; Momentum, N &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab0d92fceef8d7757ae713bd166391c21</anchor>
      <arglist>(const Vector&lt; Momentum, N &gt; &amp;lhs, const Vector&lt; Momentum, N &gt; &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Vector&lt; Real &gt;</name>
    <filename>structplayrho_1_1Vector.html</filename>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a01d534d2b418dd90b646a4b9258efcfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>adb95a88a8f0a112b81be5904979fd1c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9da6840475f24afb0745263ad7a20314</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0ed34a0b33733cd906a69be2afeeeb1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0807d5f6ad7825293d92e8a6e0242734</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a541212ea3d3edf87f5f1ced1a9d3fb84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a55cf503243bd308dc9961ba0970ab6ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a1dac8a92ef859aec019358fed5b4badd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; iterator &gt;</type>
      <name>reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a2134b5edd0c13e27350197a8a0268c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0bb82780552c224e3736ed516d1c0dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Real</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a92ca95984a7bf625e8705b97245a7a8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa368db46827a37158002ac586f3f55c2</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a64e86fe825332bc262819c5edbc4115f</anchor>
      <arglist>(std::enable_if_t&lt; sizeof...(Tail)+1==N, Real &gt; head, Tail... tail) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a96eefa7a8f43dddee954f5cda427d1f8</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ac4fa1827bdfc14cc0c2c1778394f7b70</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0e4e393aa9b3999b5e7bcd756c7ce88e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a640fd6dd0af7123b6e8b47feceaf5375</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9bebd544f9cb7bb77c8f2600bd194c8f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae2cae3925bba1dc9890cb171491b5c8c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab8f7823fbdb7a68dcc009294228f0b9f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7516a64e5f7a1463fb12f7b6f880ffb5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ac0ee63043ed80188d8e400b7de4668aa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a88f495a57b2564bd76d45d515486617c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af101191765d6e6e8ea67d2365d190cc4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9b2981be03a89e12d9783d08d941c5bd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa90e470ba330d396ba83db1dc29b9522</anchor>
      <arglist>(size_type pos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a4cf7068d7d3c4ea1a2c6859ffd7e749b</anchor>
      <arglist>(size_type pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a324c2160a22774e96726fbaa148c552f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a820156d1e812484e5962b33ada91027a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7e1b4d33490c25fd9f0c5a9031ebf823</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0de188288645c01c7a0d5663f3ba1624</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>empty</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a243341024feadee447e86055cf84d363</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ad58ba69787a0a92a46d3a58ef1298a19</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa7a558d2ae6d126fd6565ee121d020bb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>elements</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a439b81a4f7eb326deec945e632ec37b0</anchor>
      <arglist>[N? N:1]</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>abs</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a594091c0fcb9865f2d102f3b8ee973b3</anchor>
      <arglist>(const Vector&lt; Real, N &gt; &amp;v) noexcept -&gt; decltype(abs(Real {}), Vector&lt; Real, N &gt;{})</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>get</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa10d9373a7aa5e3492fee0877900f738</anchor>
      <arglist>(Vector&lt; Real, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0e16f08723028c63f043c1ad42891b11</anchor>
      <arglist>(const Vector&lt; Real, N &gt; &amp;lhs, const Vector&lt; Real, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliableV&lt; T1, T2 &gt; &amp;&amp;!IsVectorV&lt; T1 &gt;, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a2722bc95da32ec0b7f65c9dff9aa0dcc</anchor>
      <arglist>(const T1 &amp;s, const Vector&lt; T2, N &gt; &amp;a) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliableV&lt; T1, T2 &gt; &amp;&amp;!IsVectorV&lt; T2 &gt;, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a17bf68739331457fd06d2ac83a971ce7</anchor>
      <arglist>(const Vector&lt; T1, N &gt; &amp;a, const T2 &amp;s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliableV&lt; T1, T2 &gt;, Vector&lt; Vector&lt; OT, C &gt;, A &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a53d7a33cd41bce2acd1d6b8292487981</anchor>
      <arglist>(const Vector&lt; Vector&lt; T1, B &gt;, A &gt; &amp;lhs, const Vector&lt; Vector&lt; T2, C &gt;, B &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; T1, decltype(T1{} *T2{})&gt;, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator*=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af081fa6bf4de6ca0c13938151e91dbb6</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; Real, decltype(Real {}+Real {})&gt;, Vector&lt; Real, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ad9320003d829a8e98e1e77bcd28adab4</anchor>
      <arglist>(Vector&lt; Real, N &gt; lhs, const Vector&lt; Real, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; Real, decltype(+Real {})&gt;, Vector&lt; Real, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae70d6dcc29a595bcc1a08b80d06f6e10</anchor>
      <arglist>(Vector&lt; Real, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; Real, decltype(Real {}+Real {})&gt;, Vector&lt; Real, N &gt; &amp; &gt;</type>
      <name>operator+=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a319c9b996615a5d406c9db90f5e4578f</anchor>
      <arglist>(Vector&lt; Real, N &gt; &amp;lhs, const Vector&lt; Real, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; Real, decltype(Real {} - Real {})&gt;, Vector&lt; Real, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a1ea7b0293964b22ae57e18fc36518d75</anchor>
      <arglist>(Vector&lt; Real, N &gt; lhs, const Vector&lt; Real, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; Real, decltype(-Real {})&gt;, Vector&lt; Real, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a30c1fd567af542eaca195272f717e6bd</anchor>
      <arglist>(Vector&lt; Real, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; Real, decltype(Real {} - Real {})&gt;, Vector&lt; Real, N &gt; &amp; &gt;</type>
      <name>operator-=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a6fba1d15bc6902dca10efe3a579d1c0a</anchor>
      <arglist>(Vector&lt; Real, N &gt; &amp;lhs, const Vector&lt; Real, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsDivisableV&lt; T1, T2 &gt; &amp;&amp;!IsVectorV&lt; T2 &gt;, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a6da12fe999b8b56930c6cbd9dd4cd920</anchor>
      <arglist>(const Vector&lt; T1, N &gt; &amp;a, const T2 &amp;s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; T1, decltype(T1{}/T2{})&gt;, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator/=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a8af63c98286091483bcd8bc55a8072d1</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a4eaedfa824fd2df1b6450a875b144ed0</anchor>
      <arglist>(const Vector&lt; T0, N0 &gt; &amp;lhs, const Vector&lt; T1, N1 &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af157a36bb1282e34b967881c199d15fa</anchor>
      <arglist>(::std::ostream &amp;os, const Vector&lt; Real, N &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab0d92fceef8d7757ae713bd166391c21</anchor>
      <arglist>(const Vector&lt; Real, N &gt; &amp;lhs, const Vector&lt; Real, N &gt; &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::Velocity</name>
    <filename>structplayrho_1_1d2_1_1Velocity.html</filename>
    <member kind="variable">
      <type>AngularVelocity</type>
      <name>angular</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>accc1d801801fb20a83fb5451ad8dd46d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinearVelocity2</type>
      <name>linear</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>afc8399d7200b4299a0e21cc184db0f0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Velocity</type>
      <name>Cap</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>a3d2551fe26d1aa448d4d4b337e5aa66c</anchor>
      <arglist>(Velocity velocity, Time h, const MovementConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>a1735a28e0a25cc77e59fafe1d840c242</anchor>
      <arglist>(const d2::Velocity &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>a50aa6c2021393ced745d056c34b3bc07</anchor>
      <arglist>(const Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>a285d8d7bdef58a4c7210516b1060beef</anchor>
      <arglist>(const Real lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>a5d52ed09352bfd1dd80dc6b138a19f55</anchor>
      <arglist>(const Velocity &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity &amp;</type>
      <name>operator*=</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>a7083f8551c8713a94d38f614a7ebc3b5</anchor>
      <arglist>(Velocity &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>a7608d9d4b5ffcc571a17bacf9faa411e</anchor>
      <arglist>(const Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>acf1a262569fd1d300ef359200d514d6a</anchor>
      <arglist>(const Velocity &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity &amp;</type>
      <name>operator+=</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>a3be07a7714bf76d380af60fa8ef623d3</anchor>
      <arglist>(Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>ab2f3370383aaf9a8443cacef7841c5a0</anchor>
      <arglist>(const Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>ab9cbc07fb71929600cae9ef2f69e35ac</anchor>
      <arglist>(const Velocity &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity &amp;</type>
      <name>operator-=</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>ad2577d7502ee2442b81d0e6570c00d6f</anchor>
      <arglist>(Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity</type>
      <name>operator/</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>aec5f4967a3c7e58ccf6c9fb4aafa90a1</anchor>
      <arglist>(const Velocity &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity &amp;</type>
      <name>operator/=</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>afafe86dc357999a8933a71f73dcce818</anchor>
      <arglist>(Velocity &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>afe4f2bcd98877c4562293dfe2dbcfa8b</anchor>
      <arglist>(const Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::VelocityConstraint</name>
    <filename>classplayrho_1_1d2_1_1VelocityConstraint.html</filename>
    <class kind="struct">playrho::d2::VelocityConstraint::Conf</class>
    <class kind="struct">playrho::d2::VelocityConstraint::Point</class>
    <member kind="typedef">
      <type>std::remove_const_t&lt; decltype(MaxManifoldPoints)&gt;</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>ad5763d77b7aa66fc5186b09bd822ee8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VelocityConstraint</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a0c3f7e151e178001bf8bde596c4eaabd</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VelocityConstraint</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>acbc4406b84a48b4ad550f75fcc1fe496</anchor>
      <arglist>(const VelocityConstraint &amp;copy)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VelocityConstraint</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>abebb8afee132b1f990d43a9a223fd5ed</anchor>
      <arglist>(Real friction, Real restitution, LinearVelocity tangentSpeed, const WorldManifold &amp;worldManifold, BodyID bA, BodyID bB, const Span&lt; const BodyConstraint &gt; &amp;bodies, const Conf &amp;conf=GetDefaultConf())</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>GetBodyA</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>aeb754b07cd2f58c4eafcbd741c12a707</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>GetBodyB</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a1ccc0122d9b8ecaee49b5b3920d8a6ee</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetFriction</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>ab4aa128a02dd806edc05d3d2cbe2071a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>InvMass22</type>
      <name>GetK</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a7b7672fe3674a94c46c62b5840391286</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetNormal</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>ad5201366b8f451d9a90878ecdbb040ff</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Momentum</type>
      <name>GetNormalImpulseAtPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a6a5259904d3d85487c99a8dcf3871efb</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Mass22</type>
      <name>GetNormalMass</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a9606f1efd3c728bf4d0d589512034d95</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Mass</type>
      <name>GetNormalMassAtPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a0134eed6e1ce2d374b788e60260817fe</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Point &amp;</type>
      <name>GetPointAt</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a0522810720f80c9e976e069aaca09cf4</anchor>
      <arglist>(size_type index) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>GetPointCount</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a8328fb8755ee63d4fc286122bb9a7a5c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetPointRelPosA</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a573ec1fc0c8ab0000450972a2044b177</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetPointRelPosB</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a589e8910a29d0e55302f149f27a43945</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetRestitution</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a2cb4f41d6a645fabcf4e69b298547100</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetTangent</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a5770dc875b387fa5f557c0d49f30877b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Momentum</type>
      <name>GetTangentImpulseAtPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>aed8f9f12932d039a598e993d6633c6ec</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Mass</type>
      <name>GetTangentMassAtPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a5f65c818d7969342f30b4fab4c5e6f56</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity</type>
      <name>GetTangentSpeed</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>aa68c6da65b556cc282a0ec4455eddd1b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity</type>
      <name>GetVelocityBiasAtPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>ad644e82e53d3a176cba7feead0de3225</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>VelocityConstraint &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a41f32b7118af764c0e2f4b10007b3812</anchor>
      <arglist>(const VelocityConstraint &amp;copy)=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNormalImpulseAtPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>aa3f9e7f3833a2b0e25873d24d651285a</anchor>
      <arglist>(size_type index, Momentum value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTangentImpulseAtPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a704bed5b7edd9bb43be3a000d13cc6ac</anchor>
      <arglist>(size_type index, Momentum value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr Conf</type>
      <name>GetDefaultConf</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>acda9d12d13b5c85da4b395e7d94a96f4</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::Version</name>
    <filename>structplayrho_1_1Version.html</filename>
    <member kind="typedef">
      <type>std::int32_t</type>
      <name>Revnum</name>
      <anchorfile>structplayrho_1_1Version.html</anchorfile>
      <anchor>a23217efbacc179609b7be472819121ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Revnum</type>
      <name>major</name>
      <anchorfile>structplayrho_1_1Version.html</anchorfile>
      <anchor>a5e92cad7b20b19f8efc5ea4801bb6f53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Revnum</type>
      <name>minor</name>
      <anchorfile>structplayrho_1_1Version.html</anchorfile>
      <anchor>abb97e498445e0c35f20f37fbe82cf800</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Revnum</type>
      <name>revision</name>
      <anchorfile>structplayrho_1_1Version.html</anchorfile>
      <anchor>a44abbe204a839327b55036549ef3b7eb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::VertexSet</name>
    <filename>classplayrho_1_1d2_1_1VertexSet.html</filename>
    <member kind="typedef">
      <type>const Length2 *</type>
      <name>const_pointer</name>
      <anchorfile>classplayrho_1_1d2_1_1VertexSet.html</anchorfile>
      <anchor>a6975aa99493c5666ee93ba6c8a6d0d2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VertexSet</name>
      <anchorfile>classplayrho_1_1d2_1_1VertexSet.html</anchorfile>
      <anchor>add430fa9d90fffb18596d1f45a89b515</anchor>
      <arglist>(Area minSepSquared=GetDefaultMinSeparationSquared())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add</name>
      <anchorfile>classplayrho_1_1d2_1_1VertexSet.html</anchorfile>
      <anchor>adc19ac4a697e509933d23a532b089310</anchor>
      <arglist>(const Length2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const_pointer</type>
      <name>begin</name>
      <anchorfile>classplayrho_1_1d2_1_1VertexSet.html</anchorfile>
      <anchor>abadbc6490a6c6dcb89b7b95362c97b24</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classplayrho_1_1d2_1_1VertexSet.html</anchorfile>
      <anchor>a2db75b4004bb99e8dcd5e275805d158a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_pointer</type>
      <name>data</name>
      <anchorfile>classplayrho_1_1d2_1_1VertexSet.html</anchorfile>
      <anchor>a9e8b4281b5e4edddfec2238f43a356a0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_pointer</type>
      <name>end</name>
      <anchorfile>classplayrho_1_1d2_1_1VertexSet.html</anchorfile>
      <anchor>a69b1ebcc8dfe166de45450dc724e834a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_pointer</type>
      <name>find</name>
      <anchorfile>classplayrho_1_1d2_1_1VertexSet.html</anchorfile>
      <anchor>a14cdd5584f6eb0bf44942c2a72b00167</anchor>
      <arglist>(const Length2 &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>Area</type>
      <name>GetMinSeparationSquared</name>
      <anchorfile>classplayrho_1_1d2_1_1VertexSet.html</anchorfile>
      <anchor>aab2c23f7f7344bc31409837dbd1946c3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1d2_1_1VertexSet.html</anchorfile>
      <anchor>a6cd15a8277866afd8e620c0df9a2fc8d</anchor>
      <arglist>(std::size_t index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classplayrho_1_1d2_1_1VertexSet.html</anchorfile>
      <anchor>aa5e49e3b445c8dd4d78f9fd72fb50a20</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Area</type>
      <name>GetDefaultMinSeparationSquared</name>
      <anchorfile>classplayrho_1_1d2_1_1VertexSet.html</anchorfile>
      <anchor>a5a33cdf5ac70599dfe9d1881b8d58484</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::ChainShapeConf::VerticesWithNormals</name>
    <filename>classplayrho_1_1d2_1_1ChainShapeConf_1_1VerticesWithNormals.html</filename>
    <member kind="function">
      <type></type>
      <name>VerticesWithNormals</name>
      <anchorfile>classplayrho_1_1d2_1_1ChainShapeConf_1_1VerticesWithNormals.html</anchorfile>
      <anchor>ab2707fda60d7fd47090ff2e40f874602</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VerticesWithNormals</name>
      <anchorfile>classplayrho_1_1d2_1_1ChainShapeConf_1_1VerticesWithNormals.html</anchorfile>
      <anchor>a7cf2dbec90371bbca710828e7681dfc2</anchor>
      <arglist>(std::vector&lt; Length2 &gt; vertices)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetNormals</name>
      <anchorfile>classplayrho_1_1d2_1_1ChainShapeConf_1_1VerticesWithNormals.html</anchorfile>
      <anchor>a7e14ae73a1760b9482e86dda2f5489f3</anchor>
      <arglist>() const noexcept -&gt; decltype((m_normals))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetVertices</name>
      <anchorfile>classplayrho_1_1d2_1_1ChainShapeConf_1_1VerticesWithNormals.html</anchorfile>
      <anchor>a0b5078b0f074438af4d74da43e1fe230</anchor>
      <arglist>() const noexcept -&gt; decltype((m_vertices))</arglist>
    </member>
    <member kind="friend">
      <type>friend auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1d2_1_1ChainShapeConf_1_1VerticesWithNormals.html</anchorfile>
      <anchor>a8fa6e0c765f107afb14ebb8b26fd13a6</anchor>
      <arglist>(const VerticesWithNormals &amp;lhs, const VerticesWithNormals &amp;rhs) noexcept -&gt; bool</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::WeldJointConf</name>
    <filename>structplayrho_1_1d2_1_1WeldJointConf.html</filename>
    <base>JointBuilder&lt; WeldJointConf &gt;</base>
    <member kind="typedef">
      <type>JointBuilder&lt; WeldJointConf &gt;</type>
      <name>super</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>a3b7a9abbeb1afe692eea673d5fee51e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>WeldJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>acca2a66e205fe7e19a1c1a164d1d505f</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WeldJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>aba269a3bb6b09cfdf742c34030af780f</anchor>
      <arglist>(BodyID bA, BodyID bB, const Length2 &amp;laA=Length2{}, const Length2 &amp;laB=Length2{}, Angle ra=0_deg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseDampingRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>ae12cf838d0ee610508effae6cd2bd6b0</anchor>
      <arglist>(Real v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseFrequency</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>a6659bb4e8d1bb440deeb0db686248139</anchor>
      <arglist>(NonNegative&lt; Frequency &gt; v) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>AngularVelocity</type>
      <name>bias</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>a3cac14436dd81909cc54a1281dad77c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>dampingRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>afee42514df393a55d877e40e7029f272</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Frequency &gt;</type>
      <name>frequency</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>abe7eaa827e2ff98a2e326e52aaf4d1fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InvRotInertia</type>
      <name>gamma</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>a1224276539bf5acefe7e72d649448ed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3</type>
      <name>impulse</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>af3c322fc61de6e984b5058c2830716a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorA</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>ab3dde206619d336dfc9c9cf97f6fc5e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorB</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>a4e4abd2ed2af3a24f651acb7e5c93d5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Mat33</type>
      <name>mass</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>ab7265d54adb75383a22a3fe513c48a3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>rA</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>a71a06cab23c166512d5c778a15d36c9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>rB</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>ad972744d99cee6c331a4b89f0d16be0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Angle</type>
      <name>referenceAngle</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>ab389da792b6a560ef3d7d2d7e6fc706a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultFrequency</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>a44e520f51d1a9d4fdb14b240a3225695</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>a3739f4255fc019f68cd74d5c21867845</anchor>
      <arglist>(const WeldJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>a2c609024f0b536db041b19c8f8869479</anchor>
      <arglist>(const WeldJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>ad9a429415a87a06a9134b001d73bf508</anchor>
      <arglist>(WeldJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetDampingRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>a58977ddd709fa03560c34fcb92949f42</anchor>
      <arglist>(WeldJointConf &amp;object, Real value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetFrequency</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>acafa97d5359a1791ded4ccbc48a0cfaa</anchor>
      <arglist>(WeldJointConf &amp;object, NonNegative&lt; Frequency &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>ShiftOrigin</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>aeda6621d8761f8343b4b1ed7046d7387</anchor>
      <arglist>(WeldJointConf &amp;, const Length2 &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>a0a2a5151fb0a799e0d2f0a84e4534b94</anchor>
      <arglist>(const WeldJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>a25cfb7a5d3d5f2aeef028803b37454da</anchor>
      <arglist>(WeldJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::WheelJointConf</name>
    <filename>structplayrho_1_1d2_1_1WheelJointConf.html</filename>
    <base>JointBuilder&lt; WheelJointConf &gt;</base>
    <member kind="typedef">
      <type>JointBuilder&lt; WheelJointConf &gt;</type>
      <name>super</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a240852c6cb7436e2c7e53cc4573b1be6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>WheelJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a0d671fd8ffb237697e52cec7f20161a3</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WheelJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a2ad4def96da10d2f1a8f19cc41b9bc14</anchor>
      <arglist>(BodyID bA, BodyID bB, const Length2 &amp;laA=Length2{}, const Length2 &amp;laB=Length2{}, const UnitVec &amp;axis=UnitVec::GetRight()) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseDampingRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>acf3b1550db087e14a1c1f5bcd34f091a</anchor>
      <arglist>(Real v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseEnableMotor</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a20131effb23d017c7c39d007a38ad1c4</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseFrequency</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>aaeff1687b5f6680aea45e0dcbc85308f</anchor>
      <arglist>(NonNegative&lt; Frequency &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseMaxMotorTorque</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a8b0b34635a62ab7d05e55f9d0d80f928</anchor>
      <arglist>(Torque v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseMotorSpeed</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>ac470c4d2636133430986fe5efe0d55aa</anchor>
      <arglist>(AngularVelocity v) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>AngularMomentum</type>
      <name>angularImpulse</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>ac9bc9f152829e8d2c233867a75ba02c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RotInertia</type>
      <name>angularMass</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>aca9eca3ea04a615d6f68b5497edf4287</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitVec</type>
      <name>ax</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a8f7e54ad163b00983f3aa66c5449d858</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitVec</type>
      <name>ay</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>aa31e5dc81abaec747c5af5b05f8d5cb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinearVelocity</type>
      <name>bias</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a5a74133f44fa555fec8254234ada043a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>dampingRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a5f4a94799d991dc1c2de5697be080a77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enableMotor</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a5c928a9b40a91ca1b6f9a65ee7981f70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Frequency &gt;</type>
      <name>frequency</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>ac121e206ac0a526e5712f10f90cc5abb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InvMass</type>
      <name>gamma</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>ac7c9f433c088735f68efe4f9c6653e8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum</type>
      <name>impulse</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>aa091de716ab5ac0b584c02affc2b6d85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorA</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a4dc88db92528abe99f69a29a8eb8f827</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorB</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a8bcbb0908f80409feaa1ee94834f0204</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitVec</type>
      <name>localXAxisA</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a46e7ce6bff277ac8f735c202803e7184</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitVec</type>
      <name>localYAxisA</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>aa27ff21f996540548aee3217a64d0009</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Mass</type>
      <name>mass</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>ae5a173252ebf35be76b0f523ebb01de6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Torque</type>
      <name>maxMotorTorque</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>aaccd1864d05cc579ec3d01e7a9172334</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AngularVelocity</type>
      <name>motorSpeed</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a754cc95814f79f32891079314488da37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>sAx</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>ae9cdaace74bb65a9a85eb4759d4b72ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>sAy</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a3d68dd4d683d9336b160a960e9867cde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>sBx</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>ace11d1bea979d706daccc13b1bf6161b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>sBy</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a6c65241ddfc34b459dd81a67956d2413</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum</type>
      <name>springImpulse</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>ab865f557cca6f3bb8777d3cde2e41afc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Mass</type>
      <name>springMass</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>ae44f1dcdd5b7f3341184892e8765e78a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultDampingRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a3ac44f2404fbdee0e1784b555b272846</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultFrequency</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>acef0f74e0c54277beee6b7eebc39a499</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>aef25b1a360e19b38a39af5a4b776eceb</anchor>
      <arglist>(const WheelJointConf &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a9e194ef30b3a342a38f9afc09c629f6d</anchor>
      <arglist>(WheelJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetDampingRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>ae7f1530d1c2de2df859dfae6eb23d141</anchor>
      <arglist>(WheelJointConf &amp;object, Real value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetFrequency</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>adcd79908a087d2c25629aa14895bf49c</anchor>
      <arglist>(WheelJointConf &amp;object, NonNegative&lt; Frequency &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetMaxMotorTorque</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a7f82a394a8c0f5a020f8647ce0a34d39</anchor>
      <arglist>(WheelJointConf &amp;object, Torque value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>ShiftOrigin</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>af9f2e8564393a81a357767951bf5a80b</anchor>
      <arglist>(WheelJointConf &amp;, const Length2 &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a14e495be301fc95b5f890716f9e51309</anchor>
      <arglist>(const WheelJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a6474e7647ffafa7698e6b2fb0282f3cc</anchor>
      <arglist>(WheelJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::Wider</name>
    <filename>structplayrho_1_1detail_1_1Wider.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::Wider&lt; double &gt;</name>
    <filename>structplayrho_1_1detail_1_1Wider_3_01double_01_4.html</filename>
    <member kind="typedef">
      <type>long double</type>
      <name>type</name>
      <anchorfile>structplayrho_1_1detail_1_1Wider_3_01double_01_4.html</anchorfile>
      <anchor>ad3ec258dd08338e4d555cbe1cde8ca67</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::Wider&lt; float &gt;</name>
    <filename>structplayrho_1_1detail_1_1Wider_3_01float_01_4.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>type</name>
      <anchorfile>structplayrho_1_1detail_1_1Wider_3_01float_01_4.html</anchorfile>
      <anchor>ae495ebf5d3e471ad56b88fb6b945d523</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::Wider&lt; std::int16_t &gt;</name>
    <filename>structplayrho_1_1detail_1_1Wider_3_01std_1_1int16__t_01_4.html</filename>
    <member kind="typedef">
      <type>std::int32_t</type>
      <name>type</name>
      <anchorfile>structplayrho_1_1detail_1_1Wider_3_01std_1_1int16__t_01_4.html</anchorfile>
      <anchor>a7d95f6cc6f5ff40a844e1481659249b0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::Wider&lt; std::int32_t &gt;</name>
    <filename>structplayrho_1_1detail_1_1Wider_3_01std_1_1int32__t_01_4.html</filename>
    <member kind="typedef">
      <type>std::int64_t</type>
      <name>type</name>
      <anchorfile>structplayrho_1_1detail_1_1Wider_3_01std_1_1int32__t_01_4.html</anchorfile>
      <anchor>a21eca35c653e45ad3d894e982950cd4c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::Wider&lt; std::int8_t &gt;</name>
    <filename>structplayrho_1_1detail_1_1Wider_3_01std_1_1int8__t_01_4.html</filename>
    <member kind="typedef">
      <type>std::int16_t</type>
      <name>type</name>
      <anchorfile>structplayrho_1_1detail_1_1Wider_3_01std_1_1int8__t_01_4.html</anchorfile>
      <anchor>a5349b188762f6687faff98435c162361</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::Wider&lt; std::uint16_t &gt;</name>
    <filename>structplayrho_1_1detail_1_1Wider_3_01std_1_1uint16__t_01_4.html</filename>
    <member kind="typedef">
      <type>std::uint32_t</type>
      <name>type</name>
      <anchorfile>structplayrho_1_1detail_1_1Wider_3_01std_1_1uint16__t_01_4.html</anchorfile>
      <anchor>ad3b0dfca49e22cba0bdcfcd8d9978638</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::Wider&lt; std::uint32_t &gt;</name>
    <filename>structplayrho_1_1detail_1_1Wider_3_01std_1_1uint32__t_01_4.html</filename>
    <member kind="typedef">
      <type>std::uint64_t</type>
      <name>type</name>
      <anchorfile>structplayrho_1_1detail_1_1Wider_3_01std_1_1uint32__t_01_4.html</anchorfile>
      <anchor>ab51eb18b709aa2ee4d43c11d3ad7dfc9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::Wider&lt; std::uint8_t &gt;</name>
    <filename>structplayrho_1_1detail_1_1Wider_3_01std_1_1uint8__t_01_4.html</filename>
    <member kind="typedef">
      <type>std::uint16_t</type>
      <name>type</name>
      <anchorfile>structplayrho_1_1detail_1_1Wider_3_01std_1_1uint8__t_01_4.html</anchorfile>
      <anchor>a19651fbe5eb36cb2767a737894745a44</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::World</name>
    <filename>classplayrho_1_1d2_1_1World.html</filename>
    <member kind="function">
      <type></type>
      <name>World</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ae0dbefcd9b9d640f7013360f040c392f</anchor>
      <arglist>(const World &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>World</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a35fa8cfc0ffd391f66a288b9f42ef51c</anchor>
      <arglist>(const WorldConf &amp;def=WorldConf{})</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>World</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>accad76fd2cc3c8dbbe594e8398b5990c</anchor>
      <arglist>(T &amp;&amp;arg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>World</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a8c3309c18306b35ea1285c336f5d4772</anchor>
      <arglist>(World &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~World</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>acd12237b5cc3cdbaa791c6bf4730b48b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>World &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a4b2d37998661b12ac6ef32c46b59d81e</anchor>
      <arglist>(const World &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>World &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a4ee37754b28ce8089e59b092f3f980d1</anchor>
      <arglist>(World &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>Clear</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a8811dc9edaaa6fa9aa10dc843bf4bb9a</anchor>
      <arglist>(World &amp;world) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend BodyID</type>
      <name>CreateBody</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ac844fbdfb282bfd77c0dfea427eab4a1</anchor>
      <arglist>(World &amp;world, const Body &amp;body, bool resetMassData)</arglist>
    </member>
    <member kind="friend">
      <type>friend JointID</type>
      <name>CreateJoint</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a306ddb4629a63298afd72f849a05bbe5</anchor>
      <arglist>(World &amp;world, const Joint &amp;def)</arglist>
    </member>
    <member kind="friend">
      <type>friend ShapeID</type>
      <name>CreateShape</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a0c9c3b453fbbd92e68a34d87ac2f3f51</anchor>
      <arglist>(World &amp;world, const Shape &amp;def)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>Destroy</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a5220bddd2803e882d97dfbce54bdceda</anchor>
      <arglist>(World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>Destroy</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a806941861724bdba59cbcc6fc0cea61e</anchor>
      <arglist>(World &amp;world, JointID id)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>Destroy</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a9ec04c5ac50c1fd979dc8381553a06cf</anchor>
      <arglist>(World &amp;world, ShapeID id)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::vector&lt; BodyID &gt;</type>
      <name>GetBodies</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a0d2b9ee7cc0c7c9f802fd9b1b8dc07bb</anchor>
      <arglist>(const World &amp;world)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::vector&lt; BodyID &gt;</type>
      <name>GetBodiesForProxies</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>af77e52b661cd5bd3a63fc0afd1f6d0a9</anchor>
      <arglist>(const World &amp;world)</arglist>
    </member>
    <member kind="friend">
      <type>friend Body</type>
      <name>GetBody</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a2199f831c19d0cbd2c438289d261cf4f</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="friend">
      <type>friend BodyCounter</type>
      <name>GetBodyRange</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>abe80bceeb031d85076c29f75f0241475</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend Contact</type>
      <name>GetContact</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a6f2b9d9e75eadfecbb342e71fac5aeec</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="friend">
      <type>friend ContactCounter</type>
      <name>GetContactRange</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aa69d38b444407e38b21ea8a4dd875678</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::vector&lt; KeyedContactID &gt;</type>
      <name>GetContacts</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a34e9cb3c59ddbec342231439846c800b</anchor>
      <arglist>(const World &amp;world)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::vector&lt; std::tuple&lt; ContactKey, ContactID &gt; &gt;</type>
      <name>GetContacts</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aa9f52fbbb0cc05ff81e48bfb123aeb4d</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="friend">
      <type>friend Frequency</type>
      <name>GetInvDeltaTime</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a6a91938b2e0e8bf532d5cf6333d707e6</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend Joint</type>
      <name>GetJoint</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ab4500192b931d67c539a51bfa283dc30</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="friend">
      <type>friend JointCounter</type>
      <name>GetJointRange</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ade6a80b2e35e7e0a4a7374925497a2bd</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::vector&lt; JointID &gt;</type>
      <name>GetJoints</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ae37c7f05d1fd2f1525195e99c8d25aa6</anchor>
      <arglist>(const World &amp;world)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::vector&lt; std::pair&lt; BodyID, JointID &gt; &gt;</type>
      <name>GetJoints</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a5a9aed61ac8bb76a62266c417ce7c069</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="friend">
      <type>friend Manifold</type>
      <name>GetManifold</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a7414d190bc45dd19d1b3c8193ffa5857</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::optional&lt; pmr::StatsResource::Stats &gt;</type>
      <name>GetResourceStats</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>af4ed91cadd7a9906db75f43bebdae850</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend Shape</type>
      <name>GetShape</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a5cc81eddf326e3dd1aea01176a7abd37</anchor>
      <arglist>(const World &amp;world, ShapeID id)</arglist>
    </member>
    <member kind="friend">
      <type>friend ShapeCounter</type>
      <name>GetShapeRange</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a24e75e18d22082b813fac0ff95964e83</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::vector&lt; ShapeID &gt;</type>
      <name>GetShapes</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ae03323f8c13d67d677bc80495e435324</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>GetSubStepping</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ab8d7ece82bb9a60db3d1f1d98ac80b98</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend const DynamicTree &amp;</type>
      <name>GetTree</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a33b8ffd62a7bc59f2a6eb84089f40faf</anchor>
      <arglist>(const World &amp;world)</arglist>
    </member>
    <member kind="friend">
      <type>friend TypeID</type>
      <name>GetType</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a4c81c2aec5732bbd9c967814a429cad9</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend Interval&lt; Positive&lt; Length &gt; &gt;</type>
      <name>GetVertexRadiusInterval</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a42bb94f56f5b0b875eff78bae253f3b8</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>IsLocked</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a095b61ca2deae60b58a13ddfacabf37e</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>IsStepComplete</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a3f6f9b1ea104f31fb5472da3b5d5afa7</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>adc8864aaec6270f856793ee21b288aa9</anchor>
      <arglist>(const World &amp;lhs, const World &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a820b3ef0edffea284f9e9ea4b0a2f002</anchor>
      <arglist>(const World &amp;lhs, const World &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>SetBeginContactListener</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ad8ceb871bdce878a9245625853a60f07</anchor>
      <arglist>(World &amp;world, ContactFunction listener) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>SetBody</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a96b67e48017d5525b014c82845ac8ddc</anchor>
      <arglist>(World &amp;world, BodyID id, const Body &amp;body)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>SetContact</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>af66ef8ef333d03072a9a9fe66cc0309a</anchor>
      <arglist>(World &amp;world, ContactID id, const Contact &amp;value)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>SetDetachListener</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ad0ed9315bf38921f8ea330cfbcad318c</anchor>
      <arglist>(World &amp;world, BodyShapeFunction listener) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>SetEndContactListener</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a971da02f73c79a4e5a926173fd629d3d</anchor>
      <arglist>(World &amp;world, ContactFunction listener) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>SetJoint</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ac4b3a69acd5e4d6ccceda622fd2a3e9a</anchor>
      <arglist>(World &amp;world, JointID id, const Joint &amp;def)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>SetJointDestructionListener</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aa3f54eb44df4b7664524668ec28195e6</anchor>
      <arglist>(World &amp;world, JointFunction listener) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>SetPostSolveContactListener</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a7447c164a2e23733203b8b3d95042006</anchor>
      <arglist>(World &amp;world, ContactImpulsesFunction listener) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>SetPreSolveContactListener</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a191148c9d76df25f534fda1020558fab</anchor>
      <arglist>(World &amp;world, ContactManifoldFunction listener) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>SetShape</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a417584620ced50458841d6ff330c2200</anchor>
      <arglist>(World &amp;world, ShapeID, const Shape &amp;def)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>SetShapeDestructionListener</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a4daad38da20300a81e6820182a94571a</anchor>
      <arglist>(World &amp;world, ShapeFunction listener) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>SetSubStepping</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>abd11a65631c7b9dd009090492fe98874</anchor>
      <arglist>(World &amp;world, bool flag) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>ShiftOrigin</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a1cbf0207cba6413f1b4be63024e788e5</anchor>
      <arglist>(World &amp;world, const Length2 &amp;newOrigin)</arglist>
    </member>
    <member kind="friend">
      <type>friend StepStats</type>
      <name>Step</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>afcc3f1e70508f04ccd1367c6cd475235</anchor>
      <arglist>(World &amp;world, const StepConf &amp;conf)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::add_pointer_t&lt; std::add_const_t&lt; T &gt; &gt;</type>
      <name>TypeCast</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a83b4e4f1a951b2b920cfaca34a7d67d0</anchor>
      <arglist>(const World *value) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::add_pointer_t&lt; T &gt;</type>
      <name>TypeCast</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a19bf8d6dd669aaf0745ca5c2cb30ca0c</anchor>
      <arglist>(World *value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyAngularImpulse</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a1b34b2cc77e2ef64a6155572fc589ead</anchor>
      <arglist>(World &amp;world, BodyID id, AngularMomentum impulse)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyForce</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aa4467a2050404136d210f7d81017f2d6</anchor>
      <arglist>(World &amp;world, BodyID id, const Force2 &amp;force, const Length2 &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyForceToCenter</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ac7a5e9073194a89035ad2f060435542b</anchor>
      <arglist>(World &amp;world, BodyID id, const Force2 &amp;force)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyLinearImpulse</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ae8035737582098cec34f2a9411c603a1</anchor>
      <arglist>(World &amp;world, BodyID id, const Momentum2 &amp;impulse, const Length2 &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyTorque</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a63de8f07f975cb055b0790364f2f6a69</anchor>
      <arglist>(World &amp;world, BodyID id, Torque torque)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Attach</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a996ed1f41eac5d7c4cb19e2331a6b8d6</anchor>
      <arglist>(World &amp;world, BodyID id, const Shape &amp;shape, bool resetMassData=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Attach</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a8fc37277523dd773ed28f503011ab780</anchor>
      <arglist>(World &amp;world, BodyID id, ShapeID shapeID, bool resetMassData=true)</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>Awaken</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a34d47805ec61d71bda42670383331329</anchor>
      <arglist>(World &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Awaken</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a4968cdffa51be385b42f978f3226901d</anchor>
      <arglist>(World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>Acceleration</type>
      <name>CalcGravitationalAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a145bc2034162d0e6684d8d606211fb5e</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearForces</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a1af6a33d54c562234a4ba6f70f03cc62</anchor>
      <arglist>(World &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeAABB</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a1d603ef750cabe3be9f7e4035f9ba442</anchor>
      <arglist>(const World &amp;world, BodyID bodyID, ShapeID shapeID)</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeAABB</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a37bb405e5a603696123a9cd9c6c8a376</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeIntersectingAABB</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a13c40dc095fbb69e9b4a1961b96c36da</anchor>
      <arglist>(const World &amp;world, BodyID bA, ShapeID sA, ChildCounter iA, BodyID bB, ShapeID sB, ChildCounter iB)</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeIntersectingAABB</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a58da6fd8e2c8f3ad974474ce7983dbf4</anchor>
      <arglist>(const World &amp;world, const Contact &amp;contact)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>ComputeMassData</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a0f6db19ca88cbfda1c130583c367b97e</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>ComputeMassData</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a9b2fd5b66ced5973a015d6cca9f7e2aa</anchor>
      <arglist>(const World &amp;world, const Span&lt; const ShapeID &gt; &amp;ids)</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>CreateBody</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a5764c533041da652a4ecc038da04a832</anchor>
      <arglist>(World &amp;world, const BodyConf &amp;def, bool resetMassData=true)</arglist>
    </member>
    <member kind="function">
      <type>JointID</type>
      <name>CreateJoint</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ae2daf9b23558da46e3662b2405f97156</anchor>
      <arglist>(World &amp;world, const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>CreateShape</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a305401791bf73ad8008d2640a827c840</anchor>
      <arglist>(World &amp;world, const T &amp;shapeConf) -&gt; decltype(CreateShape(world, Shape{shapeConf}))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Detach</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a2deb14a935d70b77006d09595891719b</anchor>
      <arglist>(World &amp;world, BodyID id, bool resetMassData=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Detach</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a85d44d22075436c1472c545f66e1ebe7</anchor>
      <arglist>(World &amp;world, BodyID id, ShapeID shapeID, bool resetMassData=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnableLimit</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ae88a98bb1700968afaff9b143820e0d1</anchor>
      <arglist>(World &amp;world, JointID id, bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnableMotor</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aec28b93da1c0c63493d4a9d05e95eff2</anchor>
      <arglist>(World &amp;world, JointID id, bool value)</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>FindClosestBody</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a678b061692e87f71d512b8bb80f9377d</anchor>
      <arglist>(const World &amp;world, const Length2 &amp;location)</arglist>
    </member>
    <member kind="function">
      <type>Acceleration</type>
      <name>GetAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a8c16a3a5c5a313873e82f2a5b3c5a444</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetAnchorA</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ad3c653a34c7a681dbc60ec447225e85f</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetAnchorB</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aa88982e1bd4c8bafe0160cdad5a68a71</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngle</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a65c0c4c3adb519277e5418ec800bb7b3</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngle</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ab6330d5a0349c5c78357355a05815694</anchor>
      <arglist>(const World &amp;world, const RevoluteJointConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngle</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a488b1925795688fed10e2f506cda91c5</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>AngularAcceleration</type>
      <name>GetAngularAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a05620c9ad05a74b4cd9799d76f4df0ed</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>Frequency</type>
      <name>GetAngularDamping</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aec885dc5540478cf5ffef4e893e82fcd</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngularLowerLimit</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a25c524e133872333f16ba15dec55a23d</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>RotInertia</type>
      <name>GetAngularMass</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a69407c4afef863d09f490618aa390318</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>AngularMomentum</type>
      <name>GetAngularMotorImpulse</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a80c87366a9452f7ef76b5474a723e245</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngularOffset</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a1671b9e54818077d726f3f6cba342eb4</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a57bbf093e91c58e3bdf61479c561bee0</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngularUpperLimit</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a16abb6c18ad6df80be85a69e6cef496c</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetAngularVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a116c82c48643c1ef6199d27e9b9dd882</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetAngularVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a2103c29612c27b521ec004b60c4b77e5</anchor>
      <arglist>(const World &amp;world, const RevoluteJointConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetAngularVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a54073d6bb0b399295ab2b2ce105b02f4</anchor>
      <arglist>(const World &amp;world, const WheelJointConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetAngularVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>af0d81eef4bb9836cfc9afef270a17054</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>ShapeCounter</type>
      <name>GetAssociationCount</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a4d10c607f9c0b7fdbc823bc0ec672859</anchor>
      <arglist>(const World &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>GetAwakeCount</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>af15d54d1b2fe282fe518d52df5898078</anchor>
      <arglist>(const World &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>GetBodyA</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aa8c24669bbb9850b21ef17c5217f0a45</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>GetBodyA</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a75920437a0a87a24443296f1191db23b</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>GetBodyB</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a379c87f1276cec0f81e35942dc144b27</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>GetBodyB</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a3f6b43a34cbbdbc34530e5513820e2ac</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>GetBodyCount</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a54933e742508cac5c0b219c653c67674</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Force2</type>
      <name>GetCentripetalForce</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ae563375c4aff49f02b9ecab9dce5fc62</anchor>
      <arglist>(const World &amp;world, BodyID id, const Length2 &amp;axis)</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetChildIndexA</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a24ba41bdcb80e48e4bfebac362eb23db</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetChildIndexB</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a708d52132fb3f4ffbd49bf09ebc64740</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetCollideConnected</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a3b869cbb8b5896ccdf15c66f1d00761a</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>ContactCounter</type>
      <name>GetContactCount</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ac7b6c00fbd4fc40a4957bd082c9437b4</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetCurrentLengthA</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>afd81bf06efee4b29f2490134f52baddc</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetCurrentLengthB</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a11679510e7348f8480d317a02ba3e2aa</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetDampingRatio</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aeb5fc13ad106742d7189897e0a95c2de</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetDefaultFriction</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ad4c197be0402b89a41342cfe51523d45</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetDefaultRestitution</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ad04dd80754bf974462c8796cd3c95b07</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; AreaDensity &gt;</type>
      <name>GetDensity</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>adab20005951080fe5ffdcfb739de5101</anchor>
      <arglist>(const World &amp;world, ShapeID id)</arglist>
    </member>
    <member kind="function">
      <type>DistanceJointConf</type>
      <name>GetDistanceJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aeca593754c5f10e69f145526786978fe</anchor>
      <arglist>(const World &amp;world, BodyID bodyA, BodyID bodyB, const Length2 &amp;anchorA=Length2{}, const Length2 &amp;anchorB=Length2{})</arglist>
    </member>
    <member kind="function">
      <type>Filter</type>
      <name>GetFilterData</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a68a8481357c2c64f7a7761ab2cfd09f9</anchor>
      <arglist>(const World &amp;world, ShapeID id)</arglist>
    </member>
    <member kind="function">
      <type>Frequency</type>
      <name>GetFrequency</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a72d60d568707d6551e9dedb02c9e2724</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>NonNegativeFF&lt; Real &gt;</type>
      <name>GetFriction</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>afba77e9f2885ab686b15965c7e8ae8ba</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>NonNegativeFF&lt; Real &gt;</type>
      <name>GetFriction</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a9e023831cf2d8ec20c37de0906ba2137</anchor>
      <arglist>(const World &amp;world, ShapeID id)</arglist>
    </member>
    <member kind="function">
      <type>FrictionJointConf</type>
      <name>GetFrictionJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ac56d029ee5321fc56731aa0941892b01</anchor>
      <arglist>(const World &amp;world, BodyID bodyA, BodyID bodyB, const Length2 &amp;anchor)</arglist>
    </member>
    <member kind="function">
      <type>GearJointConf</type>
      <name>GetGearJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a2e2f7487e6bca2b26a9dc6779a9bc72b</anchor>
      <arglist>(const World &amp;world, JointID id1, JointID id2, Real ratio=Real{1})</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetGroundAnchorA</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a5e44d6db77292b823171b97df09a3cd8</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetGroundAnchorB</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a5011bee6db23c7f1d50cadf00674e692</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>InvMass</type>
      <name>GetInvMass</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ae67b1e703960f2ac4bfefc9d38c7a164</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>InvRotInertia</type>
      <name>GetInvRotInertia</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>adbe356dc1eaa258248d26ba77fc8491f</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>JointCounter</type>
      <name>GetJointCount</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a7484e45a19ce38178de17a2f0bfdb519</anchor>
      <arglist>(const World &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetJointTranslation</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a0469ef558d7b14efb4792c7f24084d7e</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetLength</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a806d53a54ac5ef05308d51d87cdf0192</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>LimitState</type>
      <name>GetLimitState</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>af0dcaa1775e96d5b8014493d6e3dbc7d</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>LinearAcceleration2</type>
      <name>GetLinearAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ae8ca55fff3e787fcbc3d30fc8f39f49c</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>Frequency</type>
      <name>GetLinearDamping</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ad68f40e70485dd95d747d0531f2debad</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>Momentum</type>
      <name>GetLinearMotorImpulse</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a1136742708ea7dc3cfd2ec1fc3435e1b</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLinearOffset</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a730510b6851cf86fdc29a007ff3b26f0</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a3faa14e4c0188345c54d433a877ae01f</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity2</type>
      <name>GetLinearVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>afb257e46e441021d64884e95c400fa0f</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity</type>
      <name>GetLinearVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ab7b59db43cee6a26c0433b69476b0c9b</anchor>
      <arglist>(const World &amp;world, const PrismaticJointConf &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalAnchorA</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>acde3e0a71def1cfceb2c821288555155</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalAnchorB</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a1aebe08694e219bf5032c3c44c5cc5ab</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalCenter</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a0d96416fb8a1165678be1c50fce12cc6</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ac93113a8f2585e325504a6b56b85329e</anchor>
      <arglist>(const World &amp;world, BodyID id, const Length2 &amp;worldPoint)</arglist>
    </member>
    <member kind="function">
      <type>RotInertia</type>
      <name>GetLocalRotInertia</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ad374df7cc8d1a5a9a186e0ae8a7c8cb3</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetLocalVector</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ae06bc4d6dc0dd90c8be5bb0227710c33</anchor>
      <arglist>(const World &amp;world, BodyID body, const UnitVec &amp;uv)</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetLocalXAxisA</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a35b304b54e47447d5277528ad2a9b469</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetLocalYAxisA</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>af6865d25a20091233c0f8b104c658df2</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocation</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aabf27f5cfd9092be041a781d24cfa9a1</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>Mass</type>
      <name>GetMass</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ad51a22660fa68bff534e3ae5bbcaba38</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a873904ef02cab072a393ef4554c17ea3</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a47407eaad3ab71e4a0951ebae3f9d6ad</anchor>
      <arglist>(const World &amp;world, ShapeID id)</arglist>
    </member>
    <member kind="function">
      <type>Torque</type>
      <name>GetMaxMotorTorque</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>af1b821c24f62a16d978fcce0f6ed0375</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Force</type>
      <name>GetMotorForce</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a3e6c752f15d341da441a3b7541bf8791</anchor>
      <arglist>(const World &amp;world, JointID id, Frequency inv_dt)</arglist>
    </member>
    <member kind="function">
      <type>MotorJointConf</type>
      <name>GetMotorJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>abc10ead5563974d639870bb4c9955a51</anchor>
      <arglist>(const World &amp;world, BodyID bA, BodyID bB)</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetMotorSpeed</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a688c457d004db7df23965d2227f4124e</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Torque</type>
      <name>GetMotorTorque</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a2eb6880ff8f81a8555c092138e0c6759</anchor>
      <arglist>(const World &amp;world, JointID id, Frequency inv_dt)</arglist>
    </member>
    <member kind="function">
      <type>PrismaticJointConf</type>
      <name>GetPrismaticJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ac73b18891488c4115cee3fdbcdde26a9</anchor>
      <arglist>(const World &amp;world, BodyID bA, BodyID bB, const Length2 &amp;anchor, const UnitVec &amp;axis)</arglist>
    </member>
    <member kind="function">
      <type>PulleyJointConf</type>
      <name>GetPulleyJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a52974eadc9023357fc460b5392160a0e</anchor>
      <arglist>(const World &amp;world, BodyID bA, BodyID bB, const Length2 &amp;groundA, const Length2 &amp;groundB, const Length2 &amp;anchorA, const Length2 &amp;anchorB)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetRatio</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a7089b428b6ec35dc8b4d62396982bbd0</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetReferenceAngle</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a902c4e2db9331be98f4150759ed738bd</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetRestitution</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ada6f0319b80bd4a62673f539e41d0b86</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetRestitution</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aa20fdcc2d0f6e0f7eae9184853b7dbf8</anchor>
      <arglist>(const World &amp;world, ShapeID id)</arglist>
    </member>
    <member kind="function">
      <type>RevoluteJointConf</type>
      <name>GetRevoluteJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a15d06d3d244fd8367e8e12892c3f9f1f</anchor>
      <arglist>(const World &amp;world, BodyID bodyA, BodyID bodyB, const Length2 &amp;anchor)</arglist>
    </member>
    <member kind="function">
      <type>RotInertia</type>
      <name>GetRotInertia</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a8cc24a20ec1f33d8e51baf8bc435406a</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>ShapeID</type>
      <name>GetShapeA</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>acbcbafdab9eb0a9ad1b9a7cd6dad5643</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>ShapeID</type>
      <name>GetShapeB</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aad506200695ac8ed2f733feec13f874b</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>ShapeCounter</type>
      <name>GetShapeCount</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a2b0f7ff26c079a36bedd550809792e8a</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity</type>
      <name>GetTangentSpeed</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a2a314b9568d6553aaac1df1a0054250e</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetTarget</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a74c3d7ede9ca7f67050e7ef5c109d212</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; UnitIntervalFF&lt; Real &gt; &gt;</type>
      <name>GetToi</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a8189382c46b921930c7c0117b9ea9cc2</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>TimestepIters</type>
      <name>GetToiCount</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ab2cf2abf28efb6e6ba368648b49484f0</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>ContactCounter</type>
      <name>GetTouchingCount</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ae5b0af933e7baf3192d91272ced7ee94</anchor>
      <arglist>(const World &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>Transformation</type>
      <name>GetTransformation</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ae851807b71a13326be2635fb8af75ab6</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>BodyType</type>
      <name>GetType</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a1d049ed1a0633d0c0a7138a2c79823b5</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>TypeID</type>
      <name>GetType</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a27fd66901457a53162b0e900ca1b46a9</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>TypeID</type>
      <name>GetType</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a5d3f5c76d3a916ff0547b2f8d15c43d6</anchor>
      <arglist>(const World &amp;world, ShapeID id)</arglist>
    </member>
    <member kind="function">
      <type>ShapeCounter</type>
      <name>GetUsedShapesCount</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a288814235303f24727cfe8ffe7544fdd</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Velocity</type>
      <name>GetVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>acc05b211fd414f80784e7250c1f0b173</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>WeldJointConf</type>
      <name>GetWeldJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>acbf62b8ed6ade16505b38b91fd20c26a</anchor>
      <arglist>(const World &amp;world, BodyID bodyA, BodyID bodyB, const Length2 &amp;anchor=Length2{})</arglist>
    </member>
    <member kind="function">
      <type>WheelJointConf</type>
      <name>GetWheelJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a6c59c4c9bd80594d67304e30500d42c9</anchor>
      <arglist>(const World &amp;world, BodyID bodyA, BodyID bodyB, const Length2 &amp;anchor, const UnitVec &amp;axis=UnitVec::GetRight())</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetWorldCenter</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a32537729a6c93bba8c9ea99a3bcd737f</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>GetWorldIndex</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a730c61c0b7b9ed98996116e9a30ee429</anchor>
      <arglist>(const World &amp;, BodyID id) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JointCounter</type>
      <name>GetWorldIndex</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a7f947cedd7b1df8d14a192fa35dd1889</anchor>
      <arglist>(const World &amp;, JointID id) noexcept</arglist>
    </member>
    <member kind="function">
      <type>WorldManifold</type>
      <name>GetWorldManifold</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a9e4fddd252b20dfceb87d93f5ad11087</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetWorldPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a2c7b440f52475ea8487d8f14898f232a</anchor>
      <arglist>(const World &amp;world, BodyID id, const Length2 &amp;localPoint)</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetWorldVector</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>accaf3b08287d4bc8e5e5849d5b7278a8</anchor>
      <arglist>(const World &amp;world, BodyID id, const UnitVec &amp;localVector)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasValidToi</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aae57c7aca1c8c840ea8eb1ba1d44ef07</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAccelerable</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ac33af5ec304e45152ffb2d275ba5093c</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAwake</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aa7a828e4da95fbbaffcfc14186e451a1</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAwake</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a89c2757003061a1852f035d352ec68a5</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>acf3eb15a8221d495856fd34c831255a1</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a10fdf8ef9cbd8b1ff7b51334e72a6ef5</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ac628649081fe495f59e06aff27f3201d</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsFixedRotation</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a0a234fed595bbb7745f54c0820597260</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsImpenetrable</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a11893b06ac5c981fc1da435d2a07063f</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLimitEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aea48262785f5cc1a4efcb6856e8327f2</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMassDataDirty</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a28c9e02154e09942576f0edc8297415c</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMotorEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a9f9bc9518243b79711cd0defe739671c</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSensor</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>adb8c246c43508ceb0682cb186c63077a</anchor>
      <arglist>(const World &amp;world, ShapeID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSleepingAllowed</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>abf1860a0b9cd6de8e35cf3ab3353db31</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSpeedable</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a5a9a1e21b5e0f1b2200d902a3f577e6e</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsTouching</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a386a732d954a80f48e6a3ac7beca1237</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>NeedsFiltering</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aadd14b7a073e106ee40d4488d131f673</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>NeedsUpdating</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aaada9701c50ea1607ecf3ae02c8f72c1</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>ga694dc50f9191401bc87ab1abae2b05e9</anchor>
      <arglist>(const World &amp;world, const RayCastInput &amp;input, const ShapeRayCastCB &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetFriction</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a74979affb98f9307f121fd8f4f63910d</anchor>
      <arglist>(World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetMassData</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a0f4a5600e14e8a21bdf50bfe3382cb55</anchor>
      <arglist>(World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetRestitution</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>af23360c9130e209a06ae0c111f274876</anchor>
      <arglist>(World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Rotate</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a98f982554dffd55be9ebd4af9dc5d8cb</anchor>
      <arglist>(World &amp;world, ShapeID id, const UnitVec &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RotateAboutLocalPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a6b9860df331457be3f96e1e8ea60f008</anchor>
      <arglist>(World &amp;world, BodyID id, Angle amount, const Length2 &amp;localPoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RotateAboutWorldPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ab9ef983690f331d44c4133541cf75f52</anchor>
      <arglist>(World &amp;world, BodyID id, Angle amount, const Length2 &amp;worldPoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Scale</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a431b7e952ad3dd27b23b493eac9c4f6e</anchor>
      <arglist>(World &amp;world, ShapeID id, const Vec2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a7d38270de7497d14ebf2dfe48eb64699</anchor>
      <arglist>(World &amp;world, BodyID id, AngularAcceleration value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a807adacd603ead8acfbbf475cb34337a</anchor>
      <arglist>(World &amp;world, BodyID id, const Acceleration &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a344c8fa3a4c5472c6713e001ffe66ab6</anchor>
      <arglist>(World &amp;world, BodyID id, const LinearAcceleration2 &amp;linear, AngularAcceleration angular)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aa9b9ae0feba89e1b02a0eff8a203302b</anchor>
      <arglist>(World &amp;world, BodyID id, const LinearAcceleration2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAccelerations</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a1da520e8e551b0dfdfdaae26c02f4409</anchor>
      <arglist>(World &amp;world, const Acceleration &amp;acceleration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAccelerations</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aefc6056117c0c5de5c33693514d82738</anchor>
      <arglist>(World &amp;world, const LinearAcceleration2 &amp;acceleration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAccelerations</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ae23446b68b07e35cff2b642c5573acfe</anchor>
      <arglist>(World &amp;world, F fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngle</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a245759e710fc195c98621e6d1ceb4433</anchor>
      <arglist>(World &amp;world, BodyID id, Angle value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngularDamping</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a79dbcc9738c04b86acf653b8cab48971</anchor>
      <arglist>(World &amp;world, BodyID id, NonNegative&lt; Frequency &gt; angularDamping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngularLimits</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aa07553452b8502796da81d8bb81b73d1</anchor>
      <arglist>(World &amp;world, JointID id, Angle lower, Angle upper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngularOffset</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>abddeb217913218d82cfb1857fc14e12b</anchor>
      <arglist>(World &amp;world, JointID id, Angle value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAwake</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a67874514581554435fd8065942a33050</anchor>
      <arglist>(World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAwake</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aeaa33fbede9039afb79513b1a7432278</anchor>
      <arglist>(World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAwake</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a85c5cee4a3713d3ef248eab7b4d05926</anchor>
      <arglist>(World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDensity</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a5d0fa4ba1079cd9085242ea60aea3b9a</anchor>
      <arglist>(World &amp;world, ShapeID id, NonNegative&lt; AreaDensity &gt; value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a36fa18310477a7ab081e0b81425b5bad</anchor>
      <arglist>(World &amp;world, BodyID id, bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aaccb259506fe50452b035158ec12e47b</anchor>
      <arglist>(World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ae6e78139be823080998e2cf046601977</anchor>
      <arglist>(World &amp;world, ContactID id, bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFilterData</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a72ded352d9c27de9f4b11effe9384b52</anchor>
      <arglist>(World &amp;world, ShapeID id, const Filter &amp;filter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFixedRotation</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a1a11e67e4bda096d53e4c6a55272656b</anchor>
      <arglist>(World &amp;world, BodyID id, bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetForce</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>adb7f803accaca7a22ef4ba09067c4eea</anchor>
      <arglist>(World &amp;world, BodyID id, const Force2 &amp;force, const Length2 &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFrequency</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a23e2f1041c3b5a7cbc2c1b1d7f7ff689</anchor>
      <arglist>(World &amp;world, JointID id, Frequency value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFriction</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aec48aad60bfb4a7a8e1cc7f16e45254d</anchor>
      <arglist>(World &amp;world, ContactID id, NonNegative&lt; Real &gt; friction)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFriction</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a13ddb75843bf4c3fe3c8417b9ed38c1a</anchor>
      <arglist>(World &amp;world, ShapeID id, NonNegative&lt; Real &gt; value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetImpenetrable</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>afb1332e63f530ca56d0efa14deb06bba</anchor>
      <arglist>(World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetImpenetrable</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>adb8a3d49c66601ec5953d19714aa9759</anchor>
      <arglist>(World &amp;world, BodyID id, bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetJoint</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ac07ce291e8ce59c988ee4bafca890059</anchor>
      <arglist>(World &amp;world, JointID id, const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLinearDamping</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a9fd32bf6cda4a42e0b61db21fb7bfe5c</anchor>
      <arglist>(World &amp;world, BodyID id, NonNegative&lt; Frequency &gt; linearDamping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLinearOffset</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a1a08c176fc555b93a78759bfd6b54ad9</anchor>
      <arglist>(World &amp;world, JointID id, const Length2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLocation</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a24171371121ba2731d443e46c66771fc</anchor>
      <arglist>(World &amp;world, BodyID id, const Length2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMassData</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>abe6b45c9a1aeec496d83c00a6f587740</anchor>
      <arglist>(World &amp;world, BodyID id, const MassData &amp;massData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMaxMotorTorque</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aa4a8c62d8ac89a11ae8f6be2e8cded5a</anchor>
      <arglist>(World &amp;world, JointID id, Torque value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMotorSpeed</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a900537131a6eb2dc318a7990d8c544b8</anchor>
      <arglist>(World &amp;world, JointID id, AngularVelocity value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRestitution</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a74f86083992d822f2b6376b98c8e8a79</anchor>
      <arglist>(World &amp;world, ContactID id, Real restitution)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRestitution</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aca71caa2d00f9db8bfa34b14d61382de</anchor>
      <arglist>(World &amp;world, ShapeID id, Real value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSensor</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a3aa6414bc698385f2012afefdfe74a25</anchor>
      <arglist>(World &amp;world, ShapeID id, bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSleepingAllowed</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a8f148aa57e72254d95694d31c7b4dbb1</anchor>
      <arglist>(World &amp;world, BodyID, bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTangentSpeed</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>adaae6c7d046c05b5b2f79c2e0d3fedae</anchor>
      <arglist>(World &amp;world, ContactID id, LinearVelocity value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTarget</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a3735014cef0818bf68d3a97369d02ddc</anchor>
      <arglist>(World &amp;world, JointID id, const Length2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTorque</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a3d9a38048c742739a263fdbb742a505d</anchor>
      <arglist>(World &amp;world, BodyID id, Torque torque)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTransform</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a46058bb93704b80b5e41bab8c0b5e66a</anchor>
      <arglist>(World &amp;world, BodyID id, const Length2 &amp;location, Angle angle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTransformation</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a2f675745ce151ddf090b0ee6ad9df9f0</anchor>
      <arglist>(World &amp;world, BodyID id, const Transformation &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetType</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>abe9472104a0c01207d97300925853ed3</anchor>
      <arglist>(World &amp;world, BodyID id, BodyType value, bool resetMassData=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>abe9eb60684f92671b2acf31c20e7bfdb</anchor>
      <arglist>(World &amp;world, BodyID id, AngularVelocity value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ab57a90509099257c82af9931964780d0</anchor>
      <arglist>(World &amp;world, BodyID id, const LinearVelocity2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ad96f80e152c8b40ffb278dd171a018fc</anchor>
      <arglist>(World &amp;world, BodyID id, const Velocity &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ShiftOrigin</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ad62d6449249c875dad60364b076bf182</anchor>
      <arglist>(World &amp;world, JointID id, const Length2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>StepStats</type>
      <name>Step</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a98f8ea974c7cc90e2a093cedaa757d6d</anchor>
      <arglist>(World &amp;world, Time delta, TimestepIters velocityIterations=StepConf::DefaultRegVelocityIters, TimestepIters positionIterations=StepConf::DefaultRegPositionIters)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestPoint</name>
      <anchorfile>group__TestPointGroup.html</anchorfile>
      <anchor>gae87b356a8656d30d3b7b3a3251906f21</anchor>
      <arglist>(const World &amp;world, BodyID bodyId, ShapeID shapeId, const Length2 &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Translate</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ad9a429ab8cf54bad83743fc742920eff</anchor>
      <arglist>(World &amp;world, ShapeID id, const Length2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>TypeCast</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a7493a5895010c14c51c60b3a0a62b0c4</anchor>
      <arglist>(const World &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>TypeCast</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a144d9b00180e9b914d070c7a8fc0a186</anchor>
      <arglist>(World &amp;&amp;value)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>TypeCast</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a188e9f5b3bcd077a6e2ee611cc0b5693</anchor>
      <arglist>(World &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetAwake</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>abb9770df3b38d727d39b7ac13ba4c77b</anchor>
      <arglist>(World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a6b1a2071021c814a1ee5bfe54c994287</anchor>
      <arglist>(World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetImpenetrable</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a66f55f614954b3969e3fb94733834a61</anchor>
      <arglist>(World &amp;world, BodyID id)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::detail::WorldConcept</name>
    <filename>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~WorldConcept</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>aec5c4473f57309d216746e90b0ecfd9a</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Clear_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>aa29540e84ebf69fb453cf366ce7e6f65</anchor>
      <arglist>() noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::unique_ptr&lt; WorldConcept &gt;</type>
      <name>Clone_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>a183eac98bba42619cb25e4afdfe90ea2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual BodyID</type>
      <name>CreateBody_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>aa276656bdf34d045190567697f5b16dc</anchor>
      <arglist>(const Body &amp;body)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual JointID</type>
      <name>CreateJoint_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>a03139c5d2d49ba33b884e1d2db8d4a52</anchor>
      <arglist>(const Joint &amp;def)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ShapeID</type>
      <name>CreateShape_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>ae73bb67d717eafe353690a58ad61c74a</anchor>
      <arglist>(const Shape &amp;def)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Destroy_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>af73d1c570a5288966ff5c2e178f984ad</anchor>
      <arglist>(BodyID id)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Destroy_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>a24d13f12f7047246fa0ffface93cb923</anchor>
      <arglist>(JointID id)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Destroy_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>a6d98af44110af2099ecd39b421030c9e</anchor>
      <arglist>(ShapeID id)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; BodyID &gt;</type>
      <name>GetBodies_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>a2440b3a821b548a9f18319dd36b12c6c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; BodyID &gt;</type>
      <name>GetBodiesForProxies_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>a7490e431c62e6b5b87b91d718b0cff7b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Body</type>
      <name>GetBody_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>af72c5c5c801eb4976ee8ffcf85b7d04d</anchor>
      <arglist>(BodyID id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual BodyCounter</type>
      <name>GetBodyRange_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>aed6790009c23a0414cdd038f52cc7fee</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Contact</type>
      <name>GetContact_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>a54ed811730aef904b77d3937517d8114</anchor>
      <arglist>(ContactID id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ContactCounter</type>
      <name>GetContactRange_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>ab769e7408b0d65279d80feef5906ba42</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; KeyedContactID &gt;</type>
      <name>GetContacts_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>a42a72fe0f356c1663842693bbf5d93e4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::tuple&lt; ContactKey, ContactID &gt; &gt;</type>
      <name>GetContacts_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>ab32df9fae7c003d4594e42b3177efcc7</anchor>
      <arglist>(BodyID id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const void *</type>
      <name>GetData_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>a1d674cb61b9a5a9fcaf5bf918339fe6e</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void *</type>
      <name>GetData_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>a768122118f542eeffc1515b0e075a5e2</anchor>
      <arglist>() noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Frequency</type>
      <name>GetInvDeltaTime_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>a894b5a309e3b99dd847d0c950198c856</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Joint</type>
      <name>GetJoint_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>ab3bd8c2d0dce013c04e38970b17bb786</anchor>
      <arglist>(JointID id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual JointCounter</type>
      <name>GetJointRange_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>acd1f71fa599819b900bc585a5ee5832a</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; JointID &gt;</type>
      <name>GetJoints_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>aa7f4355f7e8290829a12b8302a301ecb</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::pair&lt; BodyID, JointID &gt; &gt;</type>
      <name>GetJoints_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>a038e4fbbfaf9ca1624c9dd5e8511a3fd</anchor>
      <arglist>(BodyID id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Manifold</type>
      <name>GetManifold_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>aa08dcec093bd0035d8cfc081301dfe55</anchor>
      <arglist>(ContactID id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::optional&lt; pmr::StatsResource::Stats &gt;</type>
      <name>GetResourceStats_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>a5ee42ab8f5b19cb0c82f4667ab3abc13</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Shape</type>
      <name>GetShape_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>af57cc37fa43dc88e0d71e53b907e26b9</anchor>
      <arglist>(ShapeID id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ShapeCounter</type>
      <name>GetShapeRange_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>a29dc22d0bdf7e135a51f484d35b56ee8</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; ShapeID &gt;</type>
      <name>GetShapes_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>a43f76ed5b5ca4939ea9f552fa0926c58</anchor>
      <arglist>(BodyID id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>GetSubStepping_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>ad34d5cd67320a33104f9921f14b97a93</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const DynamicTree &amp;</type>
      <name>GetTree_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>a19aa81fa76f54b2bc7cfee36951110fc</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TypeID</type>
      <name>GetType_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>a85824bab3d5cd30f7c9deef07410a1ba</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Interval&lt; Positive&lt; Length &gt; &gt;</type>
      <name>GetVertexRadiusInterval_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>af15a56891b79fe1238255c07a4e2b84e</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>IsEqual_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>a91637112dd5fa942d3c1a915f8f1f4b9</anchor>
      <arglist>(const WorldConcept &amp;other) const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>IsLocked_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>a4f6c0b0d12b26f515a1c2a3f6ca62761</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>IsStepComplete_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>ac8e4d655a8815ac498f416b277d122e2</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetBeginContactListener_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>a510830aae7a3c424e4a2dbae60c0eea0</anchor>
      <arglist>(ContactFunction listener) noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetBody_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>af65755a4e6ec5b297de5377676bb8d5d</anchor>
      <arglist>(BodyID id, const Body &amp;value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetContact_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>aaea56d49977d63ca60efb0c8ab48dbbc</anchor>
      <arglist>(ContactID id, const Contact &amp;value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetDetachListener_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>a1a4554b469aced5ca981ffa4eb456010</anchor>
      <arglist>(BodyShapeFunction listener) noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetEndContactListener_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>a9d91f9d23857a405dd5a14d4a8ab0945</anchor>
      <arglist>(ContactFunction listener) noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetJoint_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>aac35ee5001ff3b80959d567961bdfe15</anchor>
      <arglist>(JointID id, const Joint &amp;def)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetJointDestructionListener_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>ad674dc876c88d98267597b0b9ec95723</anchor>
      <arglist>(JointFunction listener) noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetPostSolveContactListener_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>a1c2ecd1bb64f5d37bd7f60dd0388dec8</anchor>
      <arglist>(ContactImpulsesFunction listener) noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetPreSolveContactListener_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>a08f52ba52ae7a13ff5e4c8fd07a21284</anchor>
      <arglist>(ContactManifoldFunction listener) noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetShape_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>a7210bf9e2213a4cc92cfded4f02bd09b</anchor>
      <arglist>(ShapeID id, const Shape &amp;def)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetShapeDestructionListener_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>af9831546ba3c20dab49a6d808ad0e712</anchor>
      <arglist>(ShapeFunction listener) noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetSubStepping_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>a5471799959eff6dbf05a9e8fb91c7919</anchor>
      <arglist>(bool flag) noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>ShiftOrigin_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>a7bf0f69516433e0859869263aa0c72ab</anchor>
      <arglist>(const Length2 &amp;newOrigin)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual StepStats</type>
      <name>Step_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldConcept.html</anchorfile>
      <anchor>a88599a583b4f95cd6511a62a98b42002</anchor>
      <arglist>(const StepConf &amp;conf)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::WorldConf</name>
    <filename>structplayrho_1_1d2_1_1WorldConf.html</filename>
    <member kind="function">
      <type>constexpr WorldConf &amp;</type>
      <name>UseContactCapacity</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldConf.html</anchorfile>
      <anchor>a9fcd6d992b3374c8631fb25f21c1ad5e</anchor>
      <arglist>(ContactCounter value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr WorldConf &amp;</type>
      <name>UseProxyCapacity</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldConf.html</anchorfile>
      <anchor>a533acf76f238e58718de3f7839704877</anchor>
      <arglist>(ContactCounter value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr WorldConf &amp;</type>
      <name>UseTreeCapacity</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldConf.html</anchorfile>
      <anchor>ad4067fd486081be786422d5123c99114</anchor>
      <arglist>(ContactCounter value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr WorldConf &amp;</type>
      <name>UseUpstream</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldConf.html</anchorfile>
      <anchor>abbaee9a6fde3206dd7966b5897dddb10</anchor>
      <arglist>(pmr::memory_resource *value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr WorldConf &amp;</type>
      <name>UseVertexRadius</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldConf.html</anchorfile>
      <anchor>a956b4be82f6dafcca3d2ee6f5ac06af7</anchor>
      <arglist>(const Interval&lt; Positive&lt; Length &gt;&gt; &amp;value) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>ContactCounter</type>
      <name>contactCapacity</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldConf.html</anchorfile>
      <anchor>a9471b1aaa6963e94646648c99f1a71a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>doStats</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldConf.html</anchorfile>
      <anchor>aee4b702f19ffc1911ffdbfce1f5d32a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ContactCounter</type>
      <name>proxyCapacity</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldConf.html</anchorfile>
      <anchor>a7cdbec7a7c527bf06833afb9778a81da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BodyCounter</type>
      <name>reserveBodyConstraints</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldConf.html</anchorfile>
      <anchor>a568343ef6750b16ad606f7b617236053</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BodyCounter</type>
      <name>reserveBodyStack</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldConf.html</anchorfile>
      <anchor>ad0748a7eceac5b2fa9756ecb7f0299fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::uint8_t</type>
      <name>reserveBuffers</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldConf.html</anchorfile>
      <anchor>a31093e514aaa4f1972268251fa3a1916</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ContactCounter</type>
      <name>reserveContactKeys</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldConf.html</anchorfile>
      <anchor>a12cf9f90aa486d275a75580974435e44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ContactCounter</type>
      <name>reserveDistanceConstraints</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldConf.html</anchorfile>
      <anchor>a14377ea9017d41392a489406857df937</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ContactCounter</type>
      <name>treeCapacity</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldConf.html</anchorfile>
      <anchor>a6a37242f59e40ed94f9aa21168a4f056</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>pmr::memory_resource *</type>
      <name>upstream</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldConf.html</anchorfile>
      <anchor>a49a7d344019d7b19abde84cdda343520</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Interval&lt; Positive&lt; Length &gt; &gt;</type>
      <name>vertexRadius</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldConf.html</anchorfile>
      <anchor>ad5e3c01387e1a51cda9d2f25639dd89a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultContactCapacity</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldConf.html</anchorfile>
      <anchor>a307ea5fb4d40ad80fbeddbee88f3c1a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultDoStats</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldConf.html</anchorfile>
      <anchor>a71646877a178e36bc0aa031dbd50a246</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultProxyCapacity</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldConf.html</anchorfile>
      <anchor>a9337689fcc661505e3dfda29c9cf5fcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultReserveBodyConstraints</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldConf.html</anchorfile>
      <anchor>ae8d5987db9b953e427e9496aec84eb86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultReserveBodyStack</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldConf.html</anchorfile>
      <anchor>a37768a0ea5d3e2afd13c4f27a5ee5647</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultReserveBuffers</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldConf.html</anchorfile>
      <anchor>aa0047f6b27bf3e3bbf1ce6949e883057</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultReserveContactKeys</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldConf.html</anchorfile>
      <anchor>a152b5e79a96cce15d7fb5350d2661ffe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultReserveDistanceConstraints</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldConf.html</anchorfile>
      <anchor>aa12224c892c51946d14a5d6fe636b013</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultTreeCapacity</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldConf.html</anchorfile>
      <anchor>a72db96c311ffc30620b566aef059b6b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const auto</type>
      <name>DefaultUpstream</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldConf.html</anchorfile>
      <anchor>ad14b6288f0a20855813c0c3a73257f4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>DefaultVertexRadius</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldConf.html</anchorfile>
      <anchor>a3915c5543eb1c70426ff242f6d91b90b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::WorldManifold</name>
    <filename>classplayrho_1_1d2_1_1WorldManifold.html</filename>
    <class kind="struct">playrho::d2::WorldManifold::PointData</class>
    <member kind="typedef">
      <type>std::remove_const_t&lt; decltype(MaxManifoldPoints)&gt;</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldManifold.html</anchorfile>
      <anchor>a3364bb2fd0616d3c684fc95bd8d8aa04</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WorldManifold</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldManifold.html</anchorfile>
      <anchor>a82f1ad79d18712eb0a8ad4692c063083</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>WorldManifold</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldManifold.html</anchorfile>
      <anchor>a04c4dbe5c4e4af86342b2e16abb68edf</anchor>
      <arglist>(const UnitVec &amp;normal) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>WorldManifold</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldManifold.html</anchorfile>
      <anchor>aabb4bec5f62b872b6140bae09cdedf26</anchor>
      <arglist>(const UnitVec &amp;normal, const PointData &amp;ps0) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>WorldManifold</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldManifold.html</anchorfile>
      <anchor>a8023843bc15f1b2539248e5c8027796a</anchor>
      <arglist>(const UnitVec &amp;normal, const PointData &amp;ps0, const PointData &amp;ps1) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Momentum2</type>
      <name>GetImpulses</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldManifold.html</anchorfile>
      <anchor>a82d672d8bf598bf27a746423392b72b3</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetNormal</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldManifold.html</anchorfile>
      <anchor>a2ce12d689aa54e581abdc238fe95d2cc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldManifold.html</anchorfile>
      <anchor>a4872f3b8f5ec291a4e2d8324829f82b6</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>GetPointCount</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldManifold.html</anchorfile>
      <anchor>ae1cb8e651628460be908ba768c7d3883</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetSeparation</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldManifold.html</anchorfile>
      <anchor>a0e20bfa57459aa27c74c57043b822bd0</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::detail::WorldModel</name>
    <filename>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</filename>
    <templarg></templarg>
    <base>playrho::d2::detail::WorldConcept</base>
    <member kind="typedef">
      <type>T</type>
      <name>data_type</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>aaafdf8bf05e7922fdf0c0ef856d57529</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WorldModel</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>accc8428cc7e1d608077d0a7c1511822c</anchor>
      <arglist>(U &amp;&amp;arg) noexcept(std::is_nothrow_constructible_v&lt; T, U &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>accc64482970c30923a7bbc55258ede10</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; WorldConcept &gt;</type>
      <name>Clone_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>ad78c56f13050589a793d48052bb51ad2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>CreateBody_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>a89b15453b190d5385c6d960d094c4420</anchor>
      <arglist>(const Body &amp;body) override</arglist>
    </member>
    <member kind="function">
      <type>JointID</type>
      <name>CreateJoint_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>aeb81f9ec3d26b6c81637e811b191cca0</anchor>
      <arglist>(const Joint &amp;def) override</arglist>
    </member>
    <member kind="function">
      <type>ShapeID</type>
      <name>CreateShape_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>a3e9c58fb7d0d5ff0608635ed81a08df1</anchor>
      <arglist>(const Shape &amp;def) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Destroy_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>a424c6d6c2a879c0ecc4a6d3e0b26da88</anchor>
      <arglist>(BodyID id) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Destroy_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>a4af0e4d0fb1ecedb1049d13318b0fa98</anchor>
      <arglist>(JointID id) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Destroy_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>ab345f51a398f0dad411895214193a27c</anchor>
      <arglist>(ShapeID id) override</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; BodyID &gt;</type>
      <name>GetBodies_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>a6b3da74d78ed7c5b62d12dd09998b470</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; BodyID &gt;</type>
      <name>GetBodiesForProxies_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>aaf87e36e20bd4f8e9c54e24c3d6f21a8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Body</type>
      <name>GetBody_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>a148a7378130716cf03afba6d1e9c3b16</anchor>
      <arglist>(BodyID id) const override</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>GetBodyRange_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>a3b277b678812c103d5ecf372a1884569</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>Contact</type>
      <name>GetContact_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>a1ed5d975b3960dbb7b02a86574cbb53c</anchor>
      <arglist>(ContactID id) const override</arglist>
    </member>
    <member kind="function">
      <type>ContactCounter</type>
      <name>GetContactRange_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>a4da6d15181f442cf8379e2c6ea5c24d9</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; KeyedContactID &gt;</type>
      <name>GetContacts_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>aecdb9271b7c7a4d63605599e8c5b1665</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::tuple&lt; ContactKey, ContactID &gt; &gt;</type>
      <name>GetContacts_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>ae39ded2f620d5bf23f6e187496908f03</anchor>
      <arglist>(BodyID id) const override</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>GetData_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>a8e457ac7beef12f02cab67c04286e5cc</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetData_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>a9b2fa6aacd8557ad35dfeb1cc3a8b3c6</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>Frequency</type>
      <name>GetInvDeltaTime_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>aba5158c6e212d69d59fb6a5153f53b47</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>Joint</type>
      <name>GetJoint_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>a9abe257c3b4fd3436d5b2d7311323389</anchor>
      <arglist>(JointID id) const override</arglist>
    </member>
    <member kind="function">
      <type>JointCounter</type>
      <name>GetJointRange_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>ad1bf10ed4e004e785ece2f33c7a7e25c</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; JointID &gt;</type>
      <name>GetJoints_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>a3df8267377bfa6d1161ea31ebfe5a491</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::pair&lt; BodyID, JointID &gt; &gt;</type>
      <name>GetJoints_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>ae777daaebd665135afa31a0bc09f69ee</anchor>
      <arglist>(BodyID id) const override</arglist>
    </member>
    <member kind="function">
      <type>Manifold</type>
      <name>GetManifold_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>aaae6481817fe6c491370565d5cca6063</anchor>
      <arglist>(ContactID id) const override</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; pmr::StatsResource::Stats &gt;</type>
      <name>GetResourceStats_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>ae093f4d1b8e88b89c1e1a8569861e020</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>Shape</type>
      <name>GetShape_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>aea2de03ec645a1018733e5ec3a7e5eff</anchor>
      <arglist>(ShapeID id) const override</arglist>
    </member>
    <member kind="function">
      <type>ShapeCounter</type>
      <name>GetShapeRange_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>af1c7527b188527f777ff4a237aff8a91</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ShapeID &gt;</type>
      <name>GetShapes_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>adb143e52c9cc3e0a17aa8d26cab111de</anchor>
      <arglist>(BodyID id) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetSubStepping_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>a3a8fe32007b49b070776b6ed9483616c</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>const DynamicTree &amp;</type>
      <name>GetTree_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>aeb753fc57a8af5537b0c66bc9257ad4c</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>TypeID</type>
      <name>GetType_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>a47c82fee4b1b2afb69a0212bec29230b</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>Interval&lt; Positive&lt; Length &gt; &gt;</type>
      <name>GetVertexRadiusInterval_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>a6cd63c27e1867d9e60f12df900ac10af</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEqual_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>a3202a9d52c409c4929e465ec12318c6b</anchor>
      <arglist>(const WorldConcept &amp;other) const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLocked_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>a55806e475807689cd3d523b822190acd</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsStepComplete_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>ae9d50ef12804949bb7c350dadec30916</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBeginContactListener_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>abd35210073eac29e6eba6df627d8fe40</anchor>
      <arglist>(ContactFunction listener) noexcept override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBody_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>a03a2253d1db7579c6f04d4360eec5acd</anchor>
      <arglist>(BodyID id, const Body &amp;value) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetContact_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>ad943ffc4cfcdb47989b57587d69e919a</anchor>
      <arglist>(ContactID id, const Contact &amp;value) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDetachListener_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>ab23fc4dc5532ab9eb2fc44cd4d038b4e</anchor>
      <arglist>(BodyShapeFunction listener) noexcept override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEndContactListener_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>abb3cdcb27061c7c6dbb2c13396814382</anchor>
      <arglist>(ContactFunction listener) noexcept override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetJoint_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>aa6a47ce61cf9ed665dfc0837e82adb4a</anchor>
      <arglist>(JointID id, const Joint &amp;def) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetJointDestructionListener_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>a68baa72c33aee6d31d69964513ab6e0f</anchor>
      <arglist>(JointFunction listener) noexcept override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPostSolveContactListener_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>a6d18c859c6a51f4f5768f0a648135324</anchor>
      <arglist>(ContactImpulsesFunction listener) noexcept override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPreSolveContactListener_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>ae39f73ce1dc52aebc234c4dff61fa692</anchor>
      <arglist>(ContactManifoldFunction listener) noexcept override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetShape_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>a600e5d8528d7a369c751515aa5059785</anchor>
      <arglist>(ShapeID id, const Shape &amp;def) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetShapeDestructionListener_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>a3905d225202af4696288314ad137cca6</anchor>
      <arglist>(ShapeFunction listener) noexcept override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSubStepping_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>ab5a7fd36aa4ea2b6f1b95d2eeb52f90e</anchor>
      <arglist>(bool flag) noexcept override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ShiftOrigin_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>aa6331206e7be546c5cd5cb99c9b13b56</anchor>
      <arglist>(const Length2 &amp;newOrigin) override</arglist>
    </member>
    <member kind="function">
      <type>StepStats</type>
      <name>Step_</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>a4edaa52f7ca82dc405bd44eafe30b3b5</anchor>
      <arglist>(const StepConf &amp;conf) override</arglist>
    </member>
    <member kind="variable">
      <type>data_type</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1d2_1_1detail_1_1WorldModel.html</anchorfile>
      <anchor>a7fad866e558fa35fb97acfce2153e504</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::WrongState</name>
    <filename>classplayrho_1_1WrongState.html</filename>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::ZeroToUnderOneChecker</name>
    <filename>structplayrho_1_1detail_1_1ZeroToUnderOneChecker.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structplayrho_1_1detail_1_1ZeroToUnderOneChecker.html</anchorfile>
      <anchor>a5e66d55b8787c6c31a7350bbc2cfe500</anchor>
      <arglist>() const noexcept -&gt; decltype(static_cast&lt; T &gt;(0))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structplayrho_1_1detail_1_1ZeroToUnderOneChecker.html</anchorfile>
      <anchor>a1f703d83efd1f425c07a340b1fe6b913</anchor>
      <arglist>(const T &amp;v) const noexcept -&gt; decltype((v &gt;=static_cast&lt; T &gt;(0)) &amp;&amp;(v&lt; static_cast&lt; T &gt;(1)), static_cast&lt; const char * &gt;(nullptr))</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>playrho</name>
    <filename>namespaceplayrho.html</filename>
    <namespace>playrho::d2</namespace>
    <namespace>playrho::detail</namespace>
    <namespace>playrho::pmr</namespace>
    <class kind="class">playrho::ArrayList</class>
    <class kind="class">playrho::BlockAllocator</class>
    <class kind="struct">playrho::BlockDeallocator</class>
    <class kind="struct">playrho::ConstraintSolverConf</class>
    <class kind="class">playrho::Contact</class>
    <class kind="struct">playrho::Contactable</class>
    <class kind="struct">playrho::ContactFeature</class>
    <class kind="class">playrho::ContactKey</class>
    <class kind="struct">playrho::DynamicTreeBranchData</class>
    <class kind="struct">playrho::DynamicTreeUnusedData</class>
    <class kind="union">playrho::DynamicTreeVariantData</class>
    <class kind="struct">playrho::Filter</class>
    <class kind="class">playrho::FlagGuard</class>
    <class kind="class">playrho::GrowableStack</class>
    <class kind="class">playrho::Interval</class>
    <class kind="class">playrho::InvalidArgument</class>
    <class kind="struct">playrho::Island</class>
    <class kind="struct">playrho::IslandStats</class>
    <class kind="class">playrho::LengthError</class>
    <class kind="struct">playrho::LengthIndexPair</class>
    <class kind="struct">playrho::LexicographicalGreater</class>
    <class kind="struct">playrho::LexicographicalGreaterEqual</class>
    <class kind="struct">playrho::LexicographicalLess</class>
    <class kind="struct">playrho::LexicographicalLessEqual</class>
    <class kind="struct">playrho::MovementConf</class>
    <class kind="class">playrho::ObjectPool</class>
    <class kind="struct">playrho::PreStepStats</class>
    <class kind="struct">playrho::RegStepStats</class>
    <class kind="struct">playrho::ReversionWrapper</class>
    <class kind="class">playrho::Span</class>
    <class kind="class">playrho::StackAllocator</class>
    <class kind="struct">playrho::StepConf</class>
    <class kind="struct">playrho::StepStats</class>
    <class kind="class">playrho::ThreadLocalAllocator</class>
    <class kind="struct">playrho::ToiConf</class>
    <class kind="struct">playrho::ToiOutput</class>
    <class kind="struct">playrho::ToiStepStats</class>
    <class kind="class">playrho::TypeID</class>
    <class kind="struct">playrho::Vector</class>
    <class kind="struct">playrho::Version</class>
    <class kind="class">playrho::WrongState</class>
    <member kind="typedef">
      <type>detail::plane_angle</type>
      <name>Angle</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gabb35ed422281bfdf3c41a276958898fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::angular_acceleration</type>
      <name>AngularAcceleration</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga240f19679aa74a8999d4093089351f22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::angular_momentum</type>
      <name>AngularMomentum</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga747a451cf2286bc935336043c212b74d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::angular_velocity</type>
      <name>AngularVelocity</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga8b4603a98e526262c2e4adfe99510672</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::area</type>
      <name>Area</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga708ceb55bdc6043d445776d1886802eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::surface_density</type>
      <name>AreaDensity</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga6bcf1d1de9ef60a9833c222efe7ffd57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const_t&lt; decltype(MaxBodies)&gt;</type>
      <name>BodyCounter</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a261b3039a098762462a17164898bb647</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::IndexingNamedType&lt; BodyCounter, struct BodyIdentifier &gt;</type>
      <name>BodyID</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9d094e8b19ea714a079a48c336abad92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(std::pair&lt; BodyID, ShapeID &gt;)&gt;</type>
      <name>BodyShapeFunction</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a33405bfc73fdf1a786a72b98e846e9c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const_t&lt; decltype(MaxChildCount)&gt;</type>
      <name>ChildCounter</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a0e937a573db2db27b95156590ef5dd12</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>WiderType&lt; BodyCounter &gt;</type>
      <name>ContactCounter</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a5fd824505590e2ca67e0ef804ede6e34</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(ContactID)&gt;</type>
      <name>ContactFunction</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ae4fcaffc82149e8a51dccba6b31f4d52</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::IndexingNamedType&lt; ContactCounter, struct ContactIdentifier &gt;</type>
      <name>ContactID</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>abe7a48a3a0e57fa1a9dd9e396b6b24f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::enable_if_t&lt;!std::is_same_v&lt; DecayedType, Check &gt;, DecayedType &gt;</type>
      <name>DecayedTypeIfNotSame</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad26feaced5599b43b28c4de2a2f861b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ContactCounter</type>
      <name>DynamicTreeSize</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a1b77ef4b74a0e14a9d2f7cea193b2245</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::Checked&lt; T, detail::FiniteChecker&lt; T &gt; &gt;</type>
      <name>Finite</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga60e4df9fe0eb8c6732b0316face647ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::Checked&lt; T, detail::FiniteChecker&lt; T &gt;, true &gt;</type>
      <name>FiniteFF</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga5c4898ce94c2c3bd2059864e7466ed12</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::force</type>
      <name>Force</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gad51dd88ec6a5b3bf384dc89a63019d9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector2&lt; Force &gt;</type>
      <name>Force2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2d09dc7b51321c052b071485357ca1f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::frequency</type>
      <name>Frequency</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga526d114a9d34d7237ed3e41829ab3eff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::HasFunctor&lt; Type, Return()&gt;</type>
      <name>HasNullaryFunctor</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a938af6ffa35b77fb176a9533d9b2f902</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::HasFunctor&lt; Type, Return(Arg)&gt;</type>
      <name>HasUnaryFunctor</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9f7d6112b6c359e797237cf305277451</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; VertexCounter, VertexCounter &gt;</type>
      <name>IndexPair</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a7d449e0a1528c10ae0f241713fb69b40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::array&lt; IndexPair, MaxSimplexEdges &gt;</type>
      <name>IndexPair3</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a704da3b24d9b1f9135e140dcd5420518</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::inverse_mass</type>
      <name>InvMass</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gab878660e71529c9163185103d206f9f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector2&lt; InvMass &gt;</type>
      <name>InvMass2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab4f2424eab18780894e83bbc4127fe67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix22&lt; InvMass &gt;</type>
      <name>InvMass22</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a507cf0b47bd41371f90aa8f78f1d7c8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector3&lt; InvMass &gt;</type>
      <name>InvMass3</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9d3b57b56d804cd09ae743e670e866d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::inverse_moment_of_inertia</type>
      <name>InvRotInertia</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga8ec7c3082c9a05e095b45f6b1c7caaaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const_t&lt; decltype(MaxJoints)&gt;</type>
      <name>JointCounter</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a3fff859979ed48e0d223d1584eb985c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(JointID)&gt;</type>
      <name>JointFunction</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>addebc455127a1209e0543ce6a853ebaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::IndexingNamedType&lt; JointCounter, struct JointIdentifier &gt;</type>
      <name>JointID</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a8e3114be8fb50493389d7991db4f2b3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; ContactKey, ContactID &gt;</type>
      <name>KeyedContactID</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4191fb4470c5c3670c83670c53eac824</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::length</type>
      <name>Length</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga8705f1923f7cff39bf09f6d01989770d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector2&lt; Length &gt;</type>
      <name>Length2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a7dc68cd0ce177e175ae0bb6c39db158d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::acceleration</type>
      <name>LinearAcceleration</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gaea2069744ddc1c5068705b00f957451a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector2&lt; LinearAcceleration &gt;</type>
      <name>LinearAcceleration2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a5822921028100052d4c6dfb43c7f6c4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::velocity</type>
      <name>LinearVelocity</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gaf4434fe902be456f845c8e478bd48f97</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector2&lt; LinearVelocity &gt;</type>
      <name>LinearVelocity2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2faa31bff8794a0c4191d8b042f7deeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::mass</type>
      <name>Mass</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gaaf74540633aeb472114381118842149e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector2&lt; Mass &gt;</type>
      <name>Mass2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>acfba2b26f22dcc026361ed5a0ccf3966</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix22&lt; Mass &gt;</type>
      <name>Mass22</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a358c8036b278316ab41b3f35b56342a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector3&lt; Mass &gt;</type>
      <name>Mass3</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a996c0271f83c70e94b485ff59bb468a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix22&lt; Real &gt;</type>
      <name>Mat22</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a02c09bb6556e3168c0085871358d2f71</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix33&lt; Real &gt;</type>
      <name>Mat33</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aabd44d74c5bc530c9b6676c6a61e6b31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; Vector&lt; T, N &gt;, M &gt;</type>
      <name>Matrix</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>acbf97bd8e3f0f2ce4588735388f4089a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; T, 2, 2 &gt;</type>
      <name>Matrix22</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a26aabbb6723402cb9e12cf32e17beebc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; T, 3, 3 &gt;</type>
      <name>Matrix33</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a92e228aada1d7ca23d9f6c2c9ce3b415</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::momentum</type>
      <name>Momentum</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gad36b742307f9f19c2c8c95e9372a3613</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector2&lt; Momentum &gt;</type>
      <name>Momentum2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a1fa6ffb2e67c2e2f620eed088412b146</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::Checked&lt; T, detail::NegativeChecker&lt; T &gt; &gt;</type>
      <name>Negative</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>gae249aaac842934d7f33e0f90012c409a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::Checked&lt; T, detail::NegativeChecker&lt; T &gt;, true &gt;</type>
      <name>NegativeFF</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga9d1fdcdd87aa834539d3b58cdee6db3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::Checked&lt; T, detail::NonNegativeChecker&lt; T &gt; &gt;</type>
      <name>NonNegative</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga7ab2310a74db36363887ad368d5c3118</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::Checked&lt; T, detail::NonNegativeChecker&lt; T &gt;, true &gt;</type>
      <name>NonNegativeFF</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>gafcee23e546ebf8053221fa14741f0dc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::enable_if_t&lt; std::is_pointer_v&lt; T &gt;, detail::Checked&lt; T, detail::NonZeroChecker&lt; T &gt; &gt;&gt;</type>
      <name>NonNull</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga9a1e056867aa49f7ac5d12a557fef88c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::enable_if_t&lt; std::is_pointer_v&lt; T &gt;, detail::Checked&lt; T, detail::NonZeroChecker&lt; T &gt;, true &gt; &gt;</type>
      <name>NonNullFF</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga11e09f5578ccdd32e48595e68bad4cea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::Checked&lt; T, detail::NonPositiveChecker&lt; T &gt; &gt;</type>
      <name>NonPositive</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga631ddc4411751edeb5acbbeeb3ea622b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::Checked&lt; T, detail::NonPositiveChecker&lt; T &gt;, true &gt;</type>
      <name>NonPositiveFF</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>gabcc3093225e2a92cd20e21719cddc120</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::enable_if_t&lt;!std::is_pointer_v&lt; T &gt;, detail::Checked&lt; T, detail::NonZeroChecker&lt; T &gt; &gt;&gt;</type>
      <name>NonZero</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga02f02efffaeefcfeb7bd228ef7da12a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::enable_if_t&lt;!std::is_pointer_v&lt; T &gt;, detail::Checked&lt; T, detail::NonZeroChecker&lt; T &gt;, true &gt; &gt;</type>
      <name>NonZeroFF</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga7b3ab69bdace3bd39222135fc9646225</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; Length2, Length2 &gt;</type>
      <name>PairLength2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ae444a62491fcb2b10f0f06a41b1ac406</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::Checked&lt; T, detail::PositiveChecker&lt; T &gt; &gt;</type>
      <name>Positive</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga1fce58e6740bd8d9f025e08472071a9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::Checked&lt; T, detail::PositiveChecker&lt; T &gt;, true &gt;</type>
      <name>PositiveFF</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga521f0650a33330a43eafb31ecb6d4ae5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>float</type>
      <name>Real</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a1fc125070a08100d083a1360f7167f87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::moment_of_inertia</type>
      <name>RotInertia</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga81349200b6a963bf87885ab7e89e981d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::second_moment_of_area</type>
      <name>SecondMomentOfArea</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga687546b31c191aeeacf223bdbebe6747</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const_t&lt; decltype(MaxShapes)&gt;</type>
      <name>ShapeCounter</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a238bb543bc4c65753c931c94c8bd70cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(ShapeID)&gt;</type>
      <name>ShapeFunction</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab3c103ca9fa0984be180fdf4adea623e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::IndexingNamedType&lt; ShapeCounter, struct ShapeIdentifier &gt;</type>
      <name>ShapeID</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a664fbedb33a4af92883576fbee62fd28</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::time</type>
      <name>Time</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gaa4842e1cf025b86cafb4b09c0f51bc18</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::uint8_t</type>
      <name>TimestepIters</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a3898807006fd29cd5c4fc2e1a9cf5536</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::torque</type>
      <name>Torque</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga1acd0787ea4caa9725577e0aa2fdc9b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::Checked&lt; T, detail::UnitIntervalChecker&lt; T &gt; &gt;</type>
      <name>UnitInterval</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga4a5a66199e77439cdac1b5a16831484e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::Checked&lt; T, detail::UnitIntervalChecker&lt; T &gt;, true &gt;</type>
      <name>UnitIntervalFF</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga309960da94ba655d5101c19da5c55c1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector2&lt; Real &gt;</type>
      <name>Vec2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad93c0cd83df090aba6593ffac4b628ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector3&lt; Real &gt;</type>
      <name>Vec3</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a63f6dcdf3763052ea25099973c7c00ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; T, 2 &gt;</type>
      <name>Vector2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a97243f194a9406d0fdcf5f6f833851ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; T, 3 &gt;</type>
      <name>Vector3</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad07b44f811ac4c7551067fb1d3554ec5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const_t&lt; decltype(MaxShapeVertices)&gt;</type>
      <name>VertexCounter</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4505f6a4017695c48bd81225eaf9c28a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VertexCounterArray&lt; 2 &gt;</type>
      <name>VertexCounter2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ae2ea03f9c65d074dfd1aa21b6352f293</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::array&lt; VertexCounter, N &gt;</type>
      <name>VertexCounterArray</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a0a8c8047429035c030e233c9503cbec9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename detail::Wider&lt; T &gt;::type</type>
      <name>WiderType</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a0d090b6b86609a8e93cb933b2b223e63</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::Checked&lt; T, detail::ZeroToUnderOneChecker&lt; T &gt; &gt;</type>
      <name>ZeroToUnderOne</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga6d33fe002089badc48d22d99ec924ee4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::Checked&lt; T, detail::ZeroToUnderOneChecker&lt; T &gt;, true &gt;</type>
      <name>ZeroToUnderOneFF</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga82f43e0e8a9fa443bc746a5f865effef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BodyType</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a098b0ef528e3b728af8e3e17873963f7</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceplayrho.html" anchor="a098b0ef528e3b728af8e3e17873963f7a84a8921b25f505d0d2077aeb5db4bc16">Static</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a098b0ef528e3b728af8e3e17873963f7a40c78b58b86002ee38fad2d3c9dd787e">Kinematic</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a098b0ef528e3b728af8e3e17873963f7a971fd8cc345d8bd9f92e9f7d88fdf20c">Dynamic</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LimitState</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a854ac3ed65c77740c30c5d097b11435c</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceplayrho.html" anchor="a854ac3ed65c77740c30c5d097b11435ca1f7b8a0fe66401e83219c7a6b7271e77">e_inactiveLimit</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a854ac3ed65c77740c30c5d097b11435cab5be4dc895bc396de7129733217d2d1d">e_atLowerLimit</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a854ac3ed65c77740c30c5d097b11435ca719db30ca9dc11b4ef7229efab6efb59">e_atUpperLimit</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a854ac3ed65c77740c30c5d097b11435ca4737f7baf9c11f81fc69998ca490edab">e_equalLimits</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>PointState</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a06f67e158a928ef59e4263facac8fb0b</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceplayrho.html" anchor="a06f67e158a928ef59e4263facac8fb0babbb93ef26e3c101ff11cdd21cab08a94">Null</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a06f67e158a928ef59e4263facac8fb0baec211f7c20af43e742bf2570c3cb84f9">Add</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a06f67e158a928ef59e4263facac8fb0ba5a7dacb6e9b5ba37e22f825429355174">Persist</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a06f67e158a928ef59e4263facac8fb0ba1063e38cb53d94d386f21227fcd84717">Remove</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>RayCastOpcode</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a66189f1fe36ac717e284ab1099171106</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceplayrho.html" anchor="a66189f1fe36ac717e284ab1099171106a056fa3d840f48b7bfbbd68c19a4797b3">Terminate</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a66189f1fe36ac717e284ab1099171106aaf8767ee039cdc51717435bb815da593">IgnoreFixture</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a66189f1fe36ac717e284ab1099171106a8dcfe18b6245b17c9cd69d5af7ef1847">ClipRay</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a66189f1fe36ac717e284ab1099171106a4592f28dc9d11de3ce507bebafd9de16">ResetRay</enumvalue>
    </member>
    <member kind="function">
      <type>d2::UnitVec</type>
      <name>abs</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac862a8609b82126d0683ecb38a498087</anchor>
      <arglist>(const d2::UnitVec &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>abs</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a594091c0fcb9865f2d102f3b8ee973b3</anchor>
      <arglist>(const Vector&lt; T, N &gt; &amp;v) noexcept -&gt; decltype(abs(T{}), Vector&lt; T, N &gt;{})</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>Alloc</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a516a3bbb73371cdc53f348b67f43bb1f</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>AllocArray</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2943dd9a79b7fc1fa196af1208b00388</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>AlmostEqual</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga8b872c5026531f33636758bb11b167e6</anchor>
      <arglist>(T a, T b, int ulp=4) -&gt; std::enable_if_t&lt; IsArithmeticV&lt; T &gt;, bool &gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>AlmostZero</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga994ed50293b78dff53a5c7bce78602bf</anchor>
      <arglist>(const T &amp;value) -&gt; decltype(abs(value)&lt; std::numeric_limits&lt; T &gt;::min())</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>Atan2</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gab870a9188fcc77c905807fa718a8268d</anchor>
      <arglist>(T y, T x)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>Average</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga5928e1bb2ea4a8d60673314ff46a83cf</anchor>
      <arglist>(const T &amp;span)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>begin</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a429625691c6a45944e55fe50f9a59199</anchor>
      <arglist>(ReversionWrapper&lt; T &gt; w)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Bisect</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gad9807960f6f6e39b0449aec22d646669</anchor>
      <arglist>(const T &amp;a1, const T &amp;a2) -&gt; decltype((a1+a2)/2)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>cfloor</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga3f6e8b69eaeee408d3894b59629cffe9</anchor>
      <arglist>(T v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad21356f425ceb245286afe5a7b3b9b7b</anchor>
      <arglist>(Island &amp;island) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>compare</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a5ff2551e46a5f342484d8f0ec42c44e3</anchor>
      <arglist>(const Version &amp;lhs, const Version &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>ComputeCentroid</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gae769785f0540a4b8960b282f6b105c14</anchor>
      <arglist>(const Span&lt; const Length2 &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>Count</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>abddcd2c8f0eff0c93d899e8ddcc6308a</anchor>
      <arglist>(const Island &amp;island, BodyID entry)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>Count</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a898248ef79f7b944f24106f73c3a0fcd</anchor>
      <arglist>(const Island &amp;island, ContactID entry)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>Count</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a54f9744256467cb8d34121dba6dbe294</anchor>
      <arglist>(const Island &amp;island, JointID entry)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Cross</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gab5164277624274fde39d33fd4f0f5dd5</anchor>
      <arglist>(const T1 &amp;a, const T2 &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>ctrunc</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gaff0508a648e02202d025b83e46973e45</anchor>
      <arglist>(T v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Dot</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga08e3eae87277d85db13cce6b12facf1e</anchor>
      <arglist>(const T1 &amp;a, const T2 &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a98ab78cb47da6f6d872d617cc66040a6</anchor>
      <arglist>(IndexPair3 pairs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>end</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a370e741c22960aad46732cdc0353f428</anchor>
      <arglist>(ReversionWrapper&lt; T &gt; w)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Equal</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a322b53a66a869cf225db329fc8c07f90</anchor>
      <arglist>(InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2) -&gt; decltype(first1==last1, first2==last2,++first1,++first2, *first1== *first2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>EraseAll</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aa5b77298f0fc2a2ae88ececbc3fb23d1</anchor>
      <arglist>(T &amp;container, const U &amp;value) -&gt; decltype(distance(container.erase(remove(begin(container), end(container), value), end(container)), end(container)))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>EraseFirst</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad559996a9d085eb07a18b5b88525761f</anchor>
      <arglist>(T &amp;container, const U &amp;value) -&gt; decltype(container.erase(find(begin(container), end(container), value)) !=end(container))</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>FlagForFiltering</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac1efaeb0c030854ede6606021ba56d30</anchor>
      <arglist>(Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>FlagForUpdating</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac1ec70ebc79af5b28899b8d0a1341141</anchor>
      <arglist>(Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ContactFeature</type>
      <name>Flip</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a43951f69f7ead57450bac66cbb76b0e1</anchor>
      <arglist>(ContactFeature val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Free</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a62c138018c11ab3c255b410f2dedd7d2</anchor>
      <arglist>(void *mem)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>get</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a32a27488878deb0db4face63ec9749b1</anchor>
      <arglist>(const Vector&lt; T, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>get</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aa10d9373a7aa5e3492fee0877900f738</anchor>
      <arglist>(Vector&lt; T, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngle</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga941d2e26e203e19b567a018570417be3</anchor>
      <arglist>(const Vector2&lt; T &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>NonNegativeFF&lt; Area &gt;</type>
      <name>GetAreaOfCircle</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga007d43d0fd5ce900118dd41e3197d887</anchor>
      <arglist>(Length radius)</arglist>
    </member>
    <member kind="function">
      <type>NonNegativeFF&lt; Area &gt;</type>
      <name>GetAreaOfPolygon</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga760effc058042418453697e733937b2f</anchor>
      <arglist>(const Span&lt; const Length2 &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyID</type>
      <name>GetBodyA</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab6119f387b09a5ece4a552f3b3aa1565</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyID</type>
      <name>GetBodyB</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aa747a1797c3953dfc068ce03901695ed</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetBuildDetails</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>adcc4cbaff2da580cdaa7f8e2e45c4856</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetCenter</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a8abbe9590460876ec82bf7dd801fb1f0</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;v) noexcept(noexcept((v.GetMin()+v.GetMax())/2))</arglist>
    </member>
    <member kind="function">
      <type>constexpr ChildCounter</type>
      <name>GetChildIndexA</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2e63c4946d742afab47f8a1c00ae2a8a</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ChildCounter</type>
      <name>GetChildIndexB</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a676e6537b55110a4aa43e3e0a113f8b9</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Length2 &gt;</type>
      <name>GetCircleVertices</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga338c586cf1a29f27ee334d061fa59b5d</anchor>
      <arglist>(Length radius, std::size_t slices, Angle start=0_deg, Real turns=Real(1))</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt;!IsVectorV&lt; T &gt;, Vector&lt; Vector&lt; T, 1 &gt;, N &gt; &gt;</type>
      <name>GetColumnMatrix</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9d367e915b012ac8ebfdbfd2817a40ae</anchor>
      <arglist>(Vector&lt; T, N &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>constexpr ConstraintSolverConf</type>
      <name>GetDefaultPositionSolverConf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a081dbfc95d4d3139eb2817a1f11a5af3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetDefaultToiConf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4dd2e3047d7ac0836f8921a496e8d432</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr ConstraintSolverConf</type>
      <name>GetDefaultToiPositionSolverConf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a56b5137ea90045d15dfb2279d5773b46</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ContactFeature</type>
      <name>GetFaceFaceContactFeature</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aa64fefdeb5b40b3ee00c30dc263397b9</anchor>
      <arglist>(ContactFeature::Index a, ContactFeature::Index b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ContactFeature</type>
      <name>GetFaceVertexContactFeature</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a874b42008ce4794858edc982ba13534a</anchor>
      <arglist>(ContactFeature::Index a, ContactFeature::Index b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>VertexCounter</type>
      <name>GetFirstShapeVertexIdx</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a24de24fa4d8c10dea7826ce11c81ff36</anchor>
      <arglist>(const detail::SeparationInfo&lt; N &gt; &amp;info) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetFriction</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a1e3bad8be42524709861c9e728048ea2</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetFwdPerpendicular</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a25080522fd228616931476a49b5295d3</anchor>
      <arglist>(const Vector2&lt; T &gt; &amp;vector) noexcept -&gt; Vector2&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr Angle</type>
      <name>GetFwdRotationalAngle</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga5d41854b91fcfb6b8ea05e7b8c92e304</anchor>
      <arglist>(const Angle &amp;a1, const Angle &amp;a2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsSquareMatrixV&lt; T &gt;, T &gt;</type>
      <name>GetIdentity</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aff2ccc0dc9ac07175382084cee633e49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt;!IsVectorV&lt; T &gt;, Matrix&lt; T, N, N &gt; &gt;</type>
      <name>GetIdentityMatrix</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a40b372974bcf478fe0254a0a29a2dd14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr Interval&lt; T &gt;</type>
      <name>GetIntersection</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4baf1dd76711ae5151d0ee07a8b345d0</anchor>
      <arglist>(Interval&lt; T &gt; a, const Interval&lt; T &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetInverse22</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga0a9354b34edeb8433cd3062aecb78143</anchor>
      <arglist>(const Mat33 &amp;value) noexcept -&gt; Mat33</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetMagnitude</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gafe323c1c5ab88d30d18413a3c1f10abb</anchor>
      <arglist>(const T &amp;value) noexcept(noexcept(sqrt(GetMagnitudeSquared(value)))) -&gt; decltype(sqrt(GetMagnitudeSquared(value)))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetMagnitudeSquared</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga36866f7061dfa4d056405aa5da0daf84</anchor>
      <arglist>(const T &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetMaxRegLinearCorrection</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a396f543b42eadf60ef9e730edc77912c</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetModuloNext</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga81dbf936e69c8d2ecc9ca3600c6be3a1</anchor>
      <arglist>(T value, const T count) noexcept -&gt; decltype(++value,(value&lt; count)? value:static_cast&lt; T &gt;(0), T())</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetModuloPrev</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga6434759234bd5e94759bf10cc4eb5ac5</anchor>
      <arglist>(const T value, const T count) noexcept -&gt; decltype((value ? value :count) - static_cast&lt; T &gt;(1), T())</arglist>
    </member>
    <member kind="function">
      <type>MovementConf</type>
      <name>GetMovementConf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a43351fde9d622f4762a47e6618daf2f7</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetName</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a64ed2f85beec0b69745b971ce3d028ac</anchor>
      <arglist>(const TypeID &amp;id) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const char *</type>
      <name>GetName</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4f6b450f2f1fb0bad7e9cd47269e33c6</anchor>
      <arglist>(ContactFeature::Type type) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetName</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad04315ff1bed5ea49e5a0990893e7976</anchor>
      <arglist>(ToiOutput::State state) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetNormalized</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga156a2abff11f978a8df25efbf0c10147</anchor>
      <arglist>(Angle value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::size_t</type>
      <name>GetNumValidIndices</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad136f8db9fd6c0c583c1890b8a3cc504</anchor>
      <arglist>(IndexPair3 pairs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetOtherBody</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ae8ddd62df538578a056ac976e42d9739</anchor>
      <arglist>(const Contact &amp;c, BodyID bodyID) noexcept</arglist>
    </member>
    <member kind="function">
      <type>SecondMomentOfArea</type>
      <name>GetPolarMoment</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gaee743e28b24b01d9101b8a2e7bd72284</anchor>
      <arglist>(const Span&lt; const Length2 &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function">
      <type>ConstraintSolverConf</type>
      <name>GetRegConstraintSolverConf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aacaf6573afe5f3fb0803faa353dc9c65</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetRestitution</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a8623a4509113eb33f84ea8aba436396e</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetRevPerpendicular</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a6526ea72d722d9cccd28199e6e917fb3</anchor>
      <arglist>(const Vector2&lt; T &gt; &amp;vector) noexcept -&gt; Vector2&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr Angle</type>
      <name>GetRevRotationalAngle</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga1413e02cc41bf9943071baa2ae242c27</anchor>
      <arglist>(const Angle &amp;a1, const Angle &amp;a2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt;!IsVectorV&lt; T &gt;, Vector&lt; Vector&lt; T, N &gt;, 1 &gt; &gt;</type>
      <name>GetRowMatrix</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a38be88271d1aa1c71ad994a9d5e1df77</anchor>
      <arglist>(Vector&lt; T, N &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>VertexCounter</type>
      <name>GetSecondShapeVertexIdx</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a435b2e5c84e285bf7f0ac9486c2512d3</anchor>
      <arglist>(const detail::SeparationInfo&lt; N &gt; &amp;info) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ShapeID</type>
      <name>GetShapeA</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a3905c9d50e61b110388dcf71176cd1fe</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ShapeID</type>
      <name>GetShapeB</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a1bff0722b0746e1ba9d6cf2015e4bc95</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetShortestDelta</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gac9b72aa4a587e552a586a42494d614c1</anchor>
      <arglist>(Angle a0, Angle a1) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetSize</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a64b898ee30ff659e61f3bfdcc78cc233</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;v) noexcept(noexcept(v.GetMax() - v.GetMin()))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetSymInverse33</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga39333b6fc4de2a8f365b74194e42ceef</anchor>
      <arglist>(const Mat33 &amp;value) noexcept -&gt; Mat33</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetTangentSpeed</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a568a3fc3585eb44878213a919420f847</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetToi</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>acd05d6b92912a6430c09ad8a74bcbc73</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ToiConf</type>
      <name>GetToiConf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9864179cb9a35cb6665d429656ad0e9b</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ConstraintSolverConf</type>
      <name>GetToiConstraintSolverConf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>afdb8daa84d36ac948934ee05eb4cb242</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetToiCount</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>abce1723933df3c7d4054975daa7ac724</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TypeID</type>
      <name>GetTypeID</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a23d832d9a5d4ee71d8ab03b1f07d46c5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>TypeID</type>
      <name>GetTypeID</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac87b4d8c11b416f868a72b7c43463adb</anchor>
      <arglist>(const T &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const char *</type>
      <name>GetTypeName</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a267edfe760bf1c787ca0487b93e0c719</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetVec2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ae60cf2dee0c139d2d97580c0620819ab</anchor>
      <arglist>(const Vector2&lt; Real &gt; &amp;value) -&gt; Vec2</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetVec2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a54e07128f6626a7f9dbe5e973a9fba19</anchor>
      <arglist>(const Vector2&lt; T &gt; &amp;value) -&gt; decltype(Vec2{static_cast&lt; Real &gt;(get&lt; 0 &gt;(value).value()), static_cast&lt; Real &gt;(get&lt; 1 &gt;(value).value())})</arglist>
    </member>
    <member kind="function">
      <type>Version</type>
      <name>GetVersion</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>af43ad5413c876b34dcf8430c045986cc</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ContactFeature</type>
      <name>GetVertexFaceContactFeature</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a525adfccea1a81ce8311751fc90d0614</anchor>
      <arglist>(ContactFeature::Index a, ContactFeature::Index b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ContactFeature</type>
      <name>GetVertexVertexContactFeature</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad0c8c86c92d71e89dd707af00b1de6a8</anchor>
      <arglist>(ContactFeature::Index a, ContactFeature::Index b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetX</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a97da0937ffb65980d65b6ce06e839f3f</anchor>
      <arglist>(const Vector&lt; T, N &gt; &amp;value) -&gt; decltype(get&lt; 0 &gt;(value))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetX</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aa756520228b8263fe552931f66882d39</anchor>
      <arglist>(Vector&lt; T, N &gt; &amp;value) -&gt; decltype(get&lt; 0 &gt;(value))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetY</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a048efa57c5e7a10eec78126f8d0f3ab4</anchor>
      <arglist>(const Vector&lt; T, N &gt; &amp;value) -&gt; decltype(get&lt; 1 &gt;(value))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetY</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a653020af6186410ade265e09b6196ca5</anchor>
      <arglist>(Vector&lt; T, N &gt; &amp;value) -&gt; decltype(get&lt; 1 &gt;(value))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetZ</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a3ca6251fe41049230563ab530a9e7f81</anchor>
      <arglist>(const Vector&lt; T, N &gt; &amp;value) -&gt; decltype(get&lt; 2 &gt;(value))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetZ</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab58db5b079020b9fbf4fbb674a7eb01d</anchor>
      <arglist>(Vector&lt; T, N &gt; &amp;value) -&gt; decltype(get&lt; 2 &gt;(value))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>HasValidToi</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a77e830664360ead07ab616d934ff2550</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vec2</type>
      <name>InverseTransform</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga68c69326c22bafb811d6e00b9e6966cc</anchor>
      <arglist>(const Vec2 &amp;v, const Mat22 &amp;A) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Invert</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga01639d99c5401d526aeb5c6df075e153</anchor>
      <arglist>(const Matrix22&lt; IN_TYPE &gt; &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAccelerable</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a6514752c0838613cfaf76ea7e03581cd</anchor>
      <arglist>(BodyType type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsActive</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ae659e1f443f30d7813853f6763f1f22f</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsEnabled</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>acf2071b64988e62193b4a2567bdde292</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsEntirelyAfter</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>abc6f0d8de107567baafd2ff6770ded72</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;a, const Interval&lt; T &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsEntirelyBefore</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a537b76dc4bd198e60d148282e032533c</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;a, const Interval&lt; T &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsEntirelyEnclosing</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a32133337daeb0dd2b8b5a78f42a8a526</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;a, const Interval&lt; T &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsFor</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aa8f91c8a02e1886e4e9f90d0926e075a</anchor>
      <arglist>(const Contact &amp;c, BodyID bodyID, ShapeID shapeID) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsFor</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a283c9f04ceb148910537dc1cd3f37c00</anchor>
      <arglist>(const Contact &amp;c, ShapeID shapeID) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsFor</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a078999e2c900ac9ee1b081be6934d5b7</anchor>
      <arglist>(const Contactable &amp;c, BodyID bodyID, ShapeID shapeID) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsFullOfBodies</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad81cfb61a8aae11d28836a542584dd7f</anchor>
      <arglist>(const Island &amp;island)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsFullOfContacts</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a0613fe306ae99ce5ca98798c757a3dc2</anchor>
      <arglist>(const Island &amp;island)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsImpenetrable</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a885fded7567b0972b4af486e5df9afea</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsIntersecting</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab9dc0da0330f8a1c23b44b919f02fed7</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;a, const Interval&lt; T &gt; &amp;b) noexcept(noexcept(T{}&lt; T{}) &amp;&amp;noexcept(T{} &gt;=T{}))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMaxTranslationWithinTolerance</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aa0aadd87d13ef022c24b3c4feed422d3</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>IsOdd</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga96fac7df522251c1cc54aeafbfe3b737</anchor>
      <arglist>(const T &amp;val) -&gt; decltype((val % 2) !=T{})</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>IsPowerOfTwo</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga08b9672d78dbe1aa5275a9c514b422f5</anchor>
      <arglist>(const T &amp;n) -&gt; decltype(n &amp;&amp;!(n &amp;(n - 1)))</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsSensor</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab8801b7203d1ab9a06ca349a9d304f3c</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSpeedable</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a76e2dcc5aeb221351e51ad965e9de893</anchor>
      <arglist>(BodyType type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsTouching</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aecbf667797116ec6c5e84d896f05daa6</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab7404128f6225cf6915219bb784c7843</anchor>
      <arglist>(const BodyID &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>adc42b14180314ff41872c38c5596970c</anchor>
      <arglist>(const ContactID &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a299c547b3a13504426688a0c968e2891</anchor>
      <arglist>(const d2::Acceleration &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab903c93dd80fcff6148a66dbc7c89687</anchor>
      <arglist>(const d2::Manifold &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aa4eafabdd97553a750feb39943d629da</anchor>
      <arglist>(const d2::Position &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4eebf111910b8b036f4caca5e01fcab3</anchor>
      <arglist>(const d2::Sweep &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>abdecea4e39775053f705ca921b5080fe</anchor>
      <arglist>(const d2::Transformation &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a5351f2762c5c98b723679795e0a79287</anchor>
      <arglist>(const d2::UnitVec &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a904477c2aa4c83f49b1c55f393bd79d2</anchor>
      <arglist>(const d2::Velocity &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a7144be2e84f00033cbbadfae783092ed</anchor>
      <arglist>(const JointID &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a0fa02e6b0d55e9363ad4afb89a755fc1</anchor>
      <arglist>(const Mat22 &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>abcaa90580702a0b52b67e21d863eaf83</anchor>
      <arglist>(const ShapeID &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a048e0ad2c0fac1472430520c115466eb</anchor>
      <arglist>(const std::size_t &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a7dde95b5e9b50eb6552368d0c57cfc88</anchor>
      <arglist>(const T &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab698eb521c2d14d3d88ee3ac4cacd7c6</anchor>
      <arglist>(const Vector2&lt; TYPE &gt; &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>MakeUnsigned</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aee56c4a29a6dd23450e8be8027929f6c</anchor>
      <arglist>(const T &amp;arg) noexcept -&gt; std::enable_if_t&lt; std::is_signed_v&lt; T &gt;, std::make_unsigned_t&lt; T &gt;&gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>max_size</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac32367e964a575ebee3ed45c8ddb0afe</anchor>
      <arglist>(IndexPair3 pairs) -&gt; decltype(pairs.max_size())</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>MixFriction</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2fce5cef2c9f11a5e880c1f6b54bb80f</anchor>
      <arglist>(NonNegativeFF&lt; Real &gt; friction1, NonNegativeFF&lt; Real &gt; friction2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>MixRestitution</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>af99b1684f31a12e9151c9abeafdc74fe</anchor>
      <arglist>(Real restitution1, Real restitution2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>ModuloViaFmod</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gab53c16bcb68dd36d3b18027a2ac6b1b2</anchor>
      <arglist>(T dividend, T divisor)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>ModuloViaTrunc</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga84e7cb2a415fcb956202c8d7e1b1d200</anchor>
      <arglist>(T dividend, T divisor) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mat22</type>
      <name>MulT</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gab471bae6413067374ab8d8262533e402</anchor>
      <arglist>(const Mat22 &amp;A, const Mat22 &amp;B) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>NeedsFiltering</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a92b68ee2dcf7f21577269938c5267f5f</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>NeedsUpdating</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a00846636a226626c5dd4151893f397f7</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>NextPowerOfTwo</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gac9c45595993e763f220e4018c3780058</anchor>
      <arglist>(T x) -&gt; decltype((x|(x &gt;&gt; 1u)), T(++x))</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>Normalize</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga0c7d2525a406c1f83c0574e46a2cee32</anchor>
      <arglist>(Vec2 &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a67e0766a9469380763fd0e3b0a5107e6</anchor>
      <arglist>(const ArrayList&lt; T, LhsSize &gt; &amp;lhs, const ArrayList&lt; T, RhsSize &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a425d26025dffe3901caa095b9fa19682</anchor>
      <arglist>(const BlockAllocator &amp;a, const BlockAllocator &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a253588f96c2b53aec235c79675776988</anchor>
      <arglist>(const Contact &amp;lhs, const Contact &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a64c43d9f4a2db2922f8816f960ece8ec</anchor>
      <arglist>(const Contactable &amp;lhs, const Contactable &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a7c47651b8e0165d5ac406946d49ae60f</anchor>
      <arglist>(const ContactKey &amp;lhs, const ContactKey &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab71806508440416ef208f51580a6c50c</anchor>
      <arglist>(const Filter lhs, const Filter rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a861fb100d29d58d6f26f3767017886b3</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;a, const Interval&lt; T &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a124127e30fbdbb52415324763e22a8f9</anchor>
      <arglist>(const Span&lt; T &gt; &amp;lhs, const Span&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a0e16f08723028c63f043c1ad42891b11</anchor>
      <arglist>(const Vector&lt; T, N &gt; &amp;lhs, const Vector&lt; T, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a1b902ac6a7cd1b01dc4a4981889d2820</anchor>
      <arglist>(const Version &amp;lhs, const Version &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9bcf95269c48c96b8af0854d24894e3d</anchor>
      <arglist>(ContactFeature lhs, ContactFeature rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_cm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga8265c747e9b00e05f54f0aee1a4fdbf7</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_cm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga9a1d9f65f4ef9fdc77b5393cced60d0e</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Time</type>
      <name>operator&quot;&quot;_d</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga4699929ce883b631701b929a3a4a1511</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Time</type>
      <name>operator&quot;&quot;_d</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga1124541f25e0b4e9024f3da77b60ce29</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Angle</type>
      <name>operator&quot;&quot;_deg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gad590043c44d46c43cf3e38bbb231ec8d</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Angle</type>
      <name>operator&quot;&quot;_deg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga1a68411c9bee133e430474fecd57df06</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_dm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga58b222eced4c7ed60fd64bb6c3ba48e9</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_dm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga9beacde5d50cff177d145f33530e0ced</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mass</type>
      <name>operator&quot;&quot;_g</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gac348f2b6f845962edbc4fc12b326abbc</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mass</type>
      <name>operator&quot;&quot;_g</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga41c7f5697708c39baa2004b88bd4040c</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_Gm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gad6a94286306b5fc6540f06c33c4c6f5b</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_Gm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga05ef5a19b234b013f397d727a647898a</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Time</type>
      <name>operator&quot;&quot;_h</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga0f4ecfc991b77fa7038f6d26ae391f10</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Time</type>
      <name>operator&quot;&quot;_h</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga70c986f4d0ec946de664094ab57d467f</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Frequency</type>
      <name>operator&quot;&quot;_Hz</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gada3861ed51714dec5584f5ac2eccb351</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Frequency</type>
      <name>operator&quot;&quot;_Hz</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gabc754da89d9edea817c08ec30248f51e</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mass</type>
      <name>operator&quot;&quot;_kg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gab37a1df675967bc0408835763b38eb9b</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mass</type>
      <name>operator&quot;&quot;_kg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga1ec30bdee6208ced65e61642dc51a57a</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AreaDensity</type>
      <name>operator&quot;&quot;_kgpm2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga35d81e0c97d9e681cde91485230c0b11</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AreaDensity</type>
      <name>operator&quot;&quot;_kgpm2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga3102ca198b5559fcd97d9a847ddafdf9</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_km</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gae0d611695e995c22b52ba406e3d938af</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_km</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gafeb3f293ac0ab46917302e403bd41be8</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr LinearVelocity</type>
      <name>operator&quot;&quot;_kps</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga0f62968533e8cd267de90c1afa366d29</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr LinearVelocity</type>
      <name>operator&quot;&quot;_kps</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gae2a535f5043fab4f1d085061b85c2a8c</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_m</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gaab1d37a1ac19ffdb90d209251c9be0af</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_m</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga8a14e71e7bcc58c55976face61eed135</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Area</type>
      <name>operator&quot;&quot;_m2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga61eb3c1eb2284bb30dcb127c0ca730db</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Area</type>
      <name>operator&quot;&quot;_m2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga20a403f71b8175cfb90bc4d970909301</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Time</type>
      <name>operator&quot;&quot;_min</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga0b1a7f4abf19d284ab6db1da9b47de8b</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Time</type>
      <name>operator&quot;&quot;_min</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga212e5deefc8ccc59e0d81d1b1a76f01d</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_Mm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gafdb01dc5edc19a0616bae6f98bcd4b25</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_Mm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gade5160c838dead45f9d2f43297642923</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr LinearVelocity</type>
      <name>operator&quot;&quot;_mps</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gafff79dc3f94f4e1ee0f38eaf65b7e475</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr LinearVelocity</type>
      <name>operator&quot;&quot;_mps</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga29c9f5a17cc4033b8fd3e9486eec80e6</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr LinearAcceleration</type>
      <name>operator&quot;&quot;_mps2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gad1433e48714ffae291e3122d6ae60686</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr LinearAcceleration</type>
      <name>operator&quot;&quot;_mps2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga93977e9c554959304f2d4212d373a3c6</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Force</type>
      <name>operator&quot;&quot;_N</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gab0c745951bdfb935ce193ce74add4f7f</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Force</type>
      <name>operator&quot;&quot;_N</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga50e6a3c896dea20d70bfd5d7664e2830</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Torque</type>
      <name>operator&quot;&quot;_Nm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gaf9b52e6dd8edf9b4342075e88be348ed</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Torque</type>
      <name>operator&quot;&quot;_Nm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gaf5c1a86e9698626ca29c2ea17f3eee1d</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum</type>
      <name>operator&quot;&quot;_Ns</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gaf456e41b17a6b04735df20d018dfe914</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum</type>
      <name>operator&quot;&quot;_Ns</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gafa460cc2672c862e9b7834bfa49440fc</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mass</type>
      <name>operator&quot;&quot;_Pg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga829ed7d59fb256a65f91ff2a38dffe1f</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mass</type>
      <name>operator&quot;&quot;_Pg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga8125aed99d289a1b80e057cedd64e13b</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Angle</type>
      <name>operator&quot;&quot;_rad</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga56b7f8881f697bfc5f6c88d268e96543</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Angle</type>
      <name>operator&quot;&quot;_rad</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga7f7706f4df8f50a57e186d6cc68b02bc</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AngularVelocity</type>
      <name>operator&quot;&quot;_rpm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga9af2088bf38db720f2dca4c8db627b3f</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AngularVelocity</type>
      <name>operator&quot;&quot;_rpm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga473416136af75cf3600844ad6eb975eb</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Time</type>
      <name>operator&quot;&quot;_s</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gae7e1888c6386ab9832491aef18039e0c</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Time</type>
      <name>operator&quot;&quot;_s</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga5b793a1f4b1c3cce7996c1a55d4e0575</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mass</type>
      <name>operator&quot;&quot;_Yg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga9960d0aeddc327fa55019ebb6bb98c4a</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mass</type>
      <name>operator&quot;&quot;_Yg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga1255eade62dd2acd569300e17da4d578</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliableV&lt; T1, T2 &gt; &amp;&amp;!IsVectorV&lt; T1 &gt;, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2722bc95da32ec0b7f65c9dff9aa0dcc</anchor>
      <arglist>(const T1 &amp;s, const Vector&lt; T2, N &gt; &amp;a) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliableV&lt; T1, T2 &gt; &amp;&amp;!IsVectorV&lt; T1 &gt;, Vector&lt; OT, B &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a225cd9989faf6ae44c6bf24f84c2edf7</anchor>
      <arglist>(const Vector&lt; T1, A &gt; &amp;lhs, const Vector&lt; Vector&lt; T2, B &gt;, A &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliableV&lt; T1, T2 &gt; &amp;&amp;!IsVectorV&lt; T2 &gt;, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a17bf68739331457fd06d2ac83a971ce7</anchor>
      <arglist>(const Vector&lt; T1, N &gt; &amp;a, const T2 &amp;s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliableV&lt; T1, T2 &gt; &amp;&amp;!IsVectorV&lt; T2 &gt;, Vector&lt; OT, B &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a32931066a82b41864b61d9c0389d6712</anchor>
      <arglist>(const Vector&lt; Vector&lt; T1, A &gt;, B &gt; &amp;lhs, const Vector&lt; T2, A &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliableV&lt; T1, T2 &gt;, Vector&lt; Vector&lt; OT, C &gt;, A &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a53d7a33cd41bce2acd1d6b8292487981</anchor>
      <arglist>(const Vector&lt; Vector&lt; T1, B &gt;, A &gt; &amp;lhs, const Vector&lt; Vector&lt; T2, C &gt;, B &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; T1, decltype(T1{} *T2{})&gt;, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator*=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>af081fa6bf4de6ca0c13938151e91dbb6</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a41f0c49a750ed51bb02cef10158e8d7f</anchor>
      <arglist>(const Matrix&lt; T, M, N &gt; &amp;lhs, const Matrix&lt; T, M, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; T, decltype(T{}+T{})&gt;, Vector&lt; T, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad9320003d829a8e98e1e77bcd28adab4</anchor>
      <arglist>(Vector&lt; T, N &gt; lhs, const Vector&lt; T, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; T, decltype(+T{})&gt;, Vector&lt; T, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ae70d6dcc29a595bcc1a08b80d06f6e10</anchor>
      <arglist>(Vector&lt; T, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ArrayList&lt; T, S &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a3712e444173611decc9b129c3d806dd7</anchor>
      <arglist>(ArrayList&lt; T, S &gt; &amp;lhs, T rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>af6506e9c43bb12c5d4e29856163a81b9</anchor>
      <arglist>(ArrayList&lt; T, S &gt; &amp;lhs, U &amp;&amp;rhs) -&gt; decltype(rhs.begin(), rhs.end(), rhs.size(), lhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; T, decltype(T{}+T{})&gt;, Vector&lt; T, N &gt; &amp; &gt;</type>
      <name>operator+=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a319c9b996615a5d406c9db90f5e4578f</anchor>
      <arglist>(Vector&lt; T, N &gt; &amp;lhs, const Vector&lt; T, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a89118d71eeeffa541c76f6d566a8546d</anchor>
      <arglist>(const Matrix&lt; T, M, N &gt; &amp;lhs, const Matrix&lt; T, M, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; T, decltype(T{} - T{})&gt;, Vector&lt; T, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a1ea7b0293964b22ae57e18fc36518d75</anchor>
      <arglist>(Vector&lt; T, N &gt; lhs, const Vector&lt; T, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; T, decltype(-T{})&gt;, Vector&lt; T, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a30c1fd567af542eaca195272f717e6bd</anchor>
      <arglist>(Vector&lt; T, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; T, decltype(T{} - T{})&gt;, Vector&lt; T, N &gt; &amp; &gt;</type>
      <name>operator-=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a6fba1d15bc6902dca10efe3a579d1c0a</anchor>
      <arglist>(Vector&lt; T, N &gt; &amp;lhs, const Vector&lt; T, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsDivisableV&lt; T1, T2 &gt; &amp;&amp;!IsVectorV&lt; T2 &gt;, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a6da12fe999b8b56930c6cbd9dd4cd920</anchor>
      <arglist>(const Vector&lt; T1, N &gt; &amp;a, const T2 &amp;s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same_v&lt; T1, decltype(T1{}/T2{})&gt;, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator/=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a8af63c98286091483bcd8bc55a8072d1</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a7c40d9c4a48c2e389e97941863bdd584</anchor>
      <arglist>(const ContactKey &amp;lhs, const ContactKey &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a815e65e38974a8bb60ef0a096bea0241</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;lhs, const Interval&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4eaedfa824fd2df1b6450a875b144ed0</anchor>
      <arglist>(const Vector&lt; T0, N0 &gt; &amp;lhs, const Vector&lt; T1, N1 &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9664edec057808e7df69e801e1f9012f</anchor>
      <arglist>(const Version &amp;lhs, const Version &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad3ec58bed15fb00ea00af6a52e5a7e3e</anchor>
      <arglist>(::std::ostream &amp;os, const ContactFeature &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>acd5053c1cb8807f6296852e4a8c657d2</anchor>
      <arglist>(::std::ostream &amp;os, const Interval&lt; T &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a6bda91572806860fa512fff0f01a001b</anchor>
      <arglist>(::std::ostream &amp;os, const Vector&lt; T, N &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a82753a7f5943b1efcc8c843e547f1054</anchor>
      <arglist>(const ContactKey &amp;lhs, const ContactKey &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>adbf50e7e086182f69dc09e011aef6345</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;lhs, const Interval&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aafdb22d94f848eebd4aff498f3fba0c4</anchor>
      <arglist>(const Version &amp;lhs, const Version &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aecc8c4f87ec5b117810b27a5e5c5ed52</anchor>
      <arglist>(const ArrayList&lt; T, LhsSize &gt; &amp;lhs, const ArrayList&lt; T, RhsSize &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab5692e54289c87c156bd7455763082a9</anchor>
      <arglist>(const BlockAllocator &amp;a, const BlockAllocator &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a5b92007cb872b11ba4ab93f5095e2e48</anchor>
      <arglist>(const Contact &amp;lhs, const Contact &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a268967eee0d7a53d51224a8a1259d06f</anchor>
      <arglist>(const Contactable &amp;lhs, const Contactable &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4bcf53dc3cb0bb29ac669f5350de0008</anchor>
      <arglist>(const ContactKey &amp;lhs, const ContactKey &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9cecc5b25e8e89a47a552caf672bd69c</anchor>
      <arglist>(const Filter lhs, const Filter rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac1b97d7e2f5894048236948061068fb5</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;a, const Interval&lt; T &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a6fc572571fefb5d41ec6414843392d4a</anchor>
      <arglist>(const Span&lt; T &gt; &amp;lhs, const Span&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab0d92fceef8d7757ae713bd166391c21</anchor>
      <arglist>(const Vector&lt; T, N &gt; &amp;lhs, const Vector&lt; T, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a1a26000facbed802f63693ad132ea5e4</anchor>
      <arglist>(const Version &amp;lhs, const Version &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac19a825ed22691eab1981a616b6bf539</anchor>
      <arglist>(ContactFeature lhs, ContactFeature rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a66c974144631e169b23411d95a01f6d5</anchor>
      <arglist>(const ContactKey &amp;lhs, const ContactKey &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>acc58a55aab3f8bdd7ea411a6b2a4ddfb</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;lhs, const Interval&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab826df98026c84dcfa3cf694d6f8e63e</anchor>
      <arglist>(const Version &amp;lhs, const Version &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aacd3782f12938e0148922e6ab546c354</anchor>
      <arglist>(const ContactKey &amp;lhs, const ContactKey &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>acca7f35c089808652f6c5d6c06a85ae7</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;lhs, const Interval&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a30424693f3f723867383b08f1735bdd3</anchor>
      <arglist>(const Version &amp;lhs, const Version &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>Realloc</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>adb651f620aefb4ee65ec0cc8c10b27b0</anchor>
      <arglist>(void *ptr, std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>ReallocArray</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a197482cbffdd702c8926a00f42a76e62</anchor>
      <arglist>(T *ptr, std::size_t count)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reserve</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a64d8dfd5b476a5ec95500dbb121f27c7</anchor>
      <arglist>(Island &amp;island, BodyCounter bodies, ContactCounter contacts, JointCounter joints)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; IsReverseIterableV&lt; T &gt;, ReversionWrapper&lt; T &gt; &gt;</type>
      <name>Reverse</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a1de374e7d6af7b68b654b657d756468a</anchor>
      <arglist>(T &amp;&amp;iterable)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>RoundOff</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga1502fbf5063c1f5dbedafe215895ad29</anchor>
      <arglist>(const T &amp;value, unsigned precision=DefaultRoundOffPrecission) -&gt; decltype(round(value *static_cast&lt; T &gt;(precision))/static_cast&lt; T &gt;(precision))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>RoundOff</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga1ceb2daa8b41c4834408662c43e5abda</anchor>
      <arglist>(const Vec2 &amp;value, std::uint32_t precision=DefaultRoundOffPrecission) -&gt; Vec2</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Secant</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga30837f12d652c4e51406db0f1cd11a3a</anchor>
      <arglist>(const T &amp;target, const U &amp;a1, const T &amp;s1, const U &amp;a2, const T &amp;s2) -&gt; decltype(a1+(target - s1) *(a2 - a1)/(s2 - s1))</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetEnabled</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a23ce44af5f5ba3deb7e1eafe1acf5198</anchor>
      <arglist>(Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetFriction</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>acaf284b9eea3b4ad78ba5b673e67b00b</anchor>
      <arglist>(Contact &amp;contact, NonNegative&lt; Real &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetImpenetrable</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a146755eafb1ed7d0ea52af68ea4874cd</anchor>
      <arglist>(Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetIsActive</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a6dc7dc1c568e7e1cbe70afe67c51b14a</anchor>
      <arglist>(Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetRestitution</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ae72b11c11801f8189dbd1d61dd917f77</anchor>
      <arglist>(Contact &amp;contact, Real value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetSensor</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>af8595ac215de486ea15aaa0c9c608b3e</anchor>
      <arglist>(Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetTangentSpeed</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a16493a4bdae1683c07b4b116516716f0</anchor>
      <arglist>(Contact &amp;contact, LinearVelocity value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetToi</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>af93e3743c48882f44ef7936cbad68ae1</anchor>
      <arglist>(Contact &amp;contact, const std::optional&lt; UnitIntervalFF&lt; Real &gt;&gt; &amp;toi) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetToiCount</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aabf79c789863cc4aea6b9e6bc976267c</anchor>
      <arglist>(Contact &amp;contact, Contact::substep_type value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ShouldCollide</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a223329721a8138f316898ed9a4877250</anchor>
      <arglist>(const Filter filterA, const Filter filterB) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>size</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>af33cf35b33c93168aedcbf5a986a3472</anchor>
      <arglist>(IndexPair3 pairs) -&gt; decltype(GetNumValidIndices(pairs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Solve</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga1dfb22979400417701de8582bb6d76ad</anchor>
      <arglist>(const Matrix22&lt; U &gt; &amp;mat, const Vector2&lt; T &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Solve22</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga844e39448ab76470e60db668b1815ee0</anchor>
      <arglist>(const Mat33 &amp;mat, const Vector2&lt; T &gt; &amp;b) noexcept -&gt; Vector2&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Solve33</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gab5eb451a3aff0db8ef5bcbb3d67a18df</anchor>
      <arglist>(const Mat33 &amp;mat, const Vector3&lt; T &gt; &amp;b) noexcept -&gt; Vector3&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Sort</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ae889e4744cedfd0684d20ef3b7f48652</anchor>
      <arglist>(Island &amp;island) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Square</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga4000cee8b1fc5a9ab6a5cfe29eb645b6</anchor>
      <arglist>(T t) noexcept(noexcept(t *t)) -&gt; decltype(t *t)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>StripUnit</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab48e50a80b0fd16dfd70ee70307ad296</anchor>
      <arglist>(const T &amp;value) -&gt; std::enable_if_t&lt; IsArithmeticV&lt; T &gt; &amp;&amp;!detail::is_detected_v&lt; detail::get_member_type, T &gt;, T &gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>to_underlying</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4b3ffaf4d26f2f410c72befd4f9b0ec6</anchor>
      <arglist>(T value) noexcept -&gt; detail::underlying_type_t&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>ToSigned</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga3410f58d0023e2a0d6ae6ad85da9508c</anchor>
      <arglist>(const T &amp;value) -&gt; decltype(static_cast&lt; std::make_signed_t&lt; T &gt;&gt;(value))</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ToString</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ae1cc0c131aa223cdb66e6eab1511d410</anchor>
      <arglist>(LimitState val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vec2</type>
      <name>Transform</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gaa8489f7d571594e36194a437ea93898a</anchor>
      <arglist>(const Vec2 &amp;v, const Mat33 &amp;A) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Transform</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga17fa159bf4195bff228c3fda9252a5b1</anchor>
      <arglist>(const Vector&lt; T1, M &gt; &amp;v, const Matrix&lt; T2, M, N &gt; &amp;m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>UnflagForFiltering</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aaf49104158a7aea199f9531f9ab5b7d0</anchor>
      <arglist>(Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>UnflagForUpdating</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad0be851da5e90da82388aaddaa1d8f6d</anchor>
      <arglist>(Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>UnsetEnabled</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4e555a7d486dd3e1c1f7788c7d5edc0f</anchor>
      <arglist>(Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>UnsetImpenetrable</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a205494b248da96a02b57be9d9ad9a27b</anchor>
      <arglist>(Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>UnsetIsActive</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a1ae66cec17d17f003982ee50908d0d25</anchor>
      <arglist>(Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>UnsetIsSensor</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad488916b3a4198e323011d0a3f417c90</anchor>
      <arglist>(Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RegStepStats &amp;</type>
      <name>Update</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9b942aee8449be45b89aea3b870ad76b</anchor>
      <arglist>(RegStepStats &amp;lhs, const IslandStats &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ObjectPool&lt; T &gt;::size_type</type>
      <name>used</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a70ce59a4d103ae2a050ea60a2f767d1c</anchor>
      <arglist>(const ObjectPool&lt; T &gt; &amp;array) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>BigG</name>
      <anchorfile>group__UnitConstants.html</anchorfile>
      <anchor>ga4435a07d3cb65258172c132b134c02fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Centi</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>ga0367ca8edd23b32c868e3fe5f79082ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>CubicMeter</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga0107011ec7329a9ac267119f7ff941bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Deci</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>ga5a49a7e54c1b478f5b1cc882aa55f2d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultAabbExtension</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a3dd06178e859667c8f65b26c4e91972e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultAngularSleepTolerance</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a31907e80be5889667f03ef86ee3bbf0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultAngularSlop</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>adfccbc3cd8cc0bb78701f62e041acdba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultCirclesRatio</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac12a28e4c1a2b9138c79d895d3ccb3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultDistanceMultiplier</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab2898b34e4bf5fe5af48939ec34e48f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultLinearSleepTolerance</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a490b0d336b7a74ae18cf57632eeb7aa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultLinearSlop</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad91e53ba44755653e34147d39695a0a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultMaxAngularCorrection</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac8fea4a93f741aa800e943957fd23656</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultMaxDistanceIters</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>adea893c840466088049edc292dcc9dcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultMaxLinearCorrection</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aa7d2cfbedb9200e2ed973eb18cc3b23b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultMaxRotation</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a36c3a1adc34421b07e930a06ce905db1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultMaxSubSteps</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aa678e38c906502e06a90f31e2acc952a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultMaxToiIters</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab6c87be197db81dde7d9f64ddd888bae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultMaxToiRootIters</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad369e106022da8a461ed8a515014ee17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultMaxTranslation</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a6b71ffce08877ce941d29616eb907114</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultMaxVertexRadius</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a7beadf6067bdf66f48ee9b94c337d252</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultMinStillTimeToSleep</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a0e76508577c61a5bc9cc3107d60f3c1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultMinVertexRadius</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a174cfa632eb92c15bc2e48e7d09d216a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultRegMinMomentum</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab8eb622479d2ffb28ce1a4e88e8a211f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultRoundOffPrecission</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga2e94545b5052523414ec03d0e95e2297</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultStepFrequency</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a65202bedf970d0db4ad0d3e22ab3a0dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultStepTime</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a51e5b3bf0a53f853c75244a15b08caee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultToiMinMomentum</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a88e51d5b5ce397624e803df05ff1c013</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultVelocityThreshold</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a6497dbff92f4140c03fb29f7dc80093d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Degree</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gaf0840a4c6fcfa4ed0f1e25820fea0ca3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DegreePerSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga987ba57899c87b7d6734d046d1c854b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DegreePerSquareSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga7a7cdea552b0f98a011b3287850433a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>EarthlyLinearAcceleration</name>
      <anchorfile>group__UnitConstants.html</anchorfile>
      <anchor>ga770e7e3c14510e96d5115b36988e5dde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Giga</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>ga66ca2124fd143e2433bb2f409dc83f92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Hertz</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gadef54036b9480e0cf730100688e20570</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Invalid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ae4c4c9f92abc8bb90f494053a8e04375</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>InvalidBodyID</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a38fa6c4a45ec8fd218dc962396685c3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>InvalidContactID</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a1a7a2c4f0ce447813c94060e1ea4c0f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>InvalidContactIndex</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4ecc8cc059a2a3fa056888a1d405e4bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>InvalidIndexPair</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a6fb9d11a6fadb62b0e68aee9797059ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>InvalidJointID</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a67d10419efd6effdd41617992a76cbcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>InvalidLength2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2525da093ca5647aa7493b07eed63520</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>InvalidShapeID</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a7cf47dd833aad177ac33142cfc5e6bc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>InvalidVertex</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a49c511e18a6b72260126cf763c1cd8df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>IsAddableV</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a41ba382902aedb57e9c98fc250ec2bf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>IsArithmeticV</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aa9c55e27192da826391d895835f02b17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>IsDivisableV</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>abdcd4932a27b9347d3afbae550fa57d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>IsEqualityComparableV</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a7e66a2bc90bba3e9b065c20da1f5d468</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>IsInequalityComparableV</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a137a2dd0c34c1efb94ea6f5b89dba530</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>IsIterableV</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ae2f251f126cac1015f8636e99ac0f4db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>IsMatrixV</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a83567b7faf3c7de0399b0b88fe1cc9f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>IsMultipliableV</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a3c2c0d8136a2aabd56742fbedf6c00ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>IsReverseIterableV</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>adaec996c65bbbcac537113d83ee753c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>IsSquareMatrixV</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a14b74d27a9f43c1f37aca5ee84aa6f97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>IsVectorV</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a168449a74e78ad00c9d22f1017de05f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Kilo</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>gae537180a6f4ceb3a3192ee623fc2c8bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Kilogram</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gad4ca745853415c1b3df906848978df9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>KilogramPerSquareMeter</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga64416f646855741c31802eb689760ba8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>MaxBodies</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a7b821c4b23566defba0fd2917d95f0ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>MaxChildCount</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>af33623a59b7c701aead6d06e88dc2cc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>MaxContacts</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a5ac18ab5fe22782c56d7ab92b397468e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>MaxFloat</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a527c4658d275e6c04ba4b4c9f28d688b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>MaxJoints</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a69cde8c9e938d138a9a4ae8355501684</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>MaxManifoldPoints</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aae670387c8f37f8812082b1838e18863</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>MaxShapes</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2e673e5e335bf14ece1382b582f2163b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>MaxShapeVertices</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a0774f630ff2e5b9ed9e5f322700d44e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>MaxSimplexEdges</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a95591102a273a4d301f3f795d463b9ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Mega</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>gad7b2132b6101f0d7f6b3658147025168</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Meter</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gab5d1d9c70d11cff5fb552e939de39b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>MeterPerSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga9d80fc94ec9d5990d2fa6b9e4b67267d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>MeterPerSquareSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga0bc87db1f0fbc1b5f1ae9b44c66b6e82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Newton</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gac88db74a1ddb390655f0837d9c970f76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>NewtonMeter</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gab920bd1046410474258f9e8630e557a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>NewtonMeterSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gae55524173aec32daa74def2b8dddc0bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>NewtonSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga64db6556e1824d11178c3d68301c2adc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Peta</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>ga590efc6f9c2013056da85de7ab4e84ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Pi</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a3fe0bdbb0ea9c449b7504f7c75840993</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Radian</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gaebbe3f5282db32af8292500e505e21e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>RadianPerSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga446e46852ff69dee446aadc44635865c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>RadianPerSquareSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga0da7c45fe3ebc86d397e684154033742</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>RevolutionsPerMinute</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga46b97afc56560699033e7c3fb480a4f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Second</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga6dacec03532687e9bac4ac6a882b35ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>SquareMeter</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga1fb0acbda4409a1a132baf7df83b9870</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>SquareRadian</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga941b3913fd0dd86a33e695cd9b73318f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>SquareRootTwo</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aae1bd392cbafcb91d60633c893ff0742</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>SquareSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga64467fca61de8c359a4e019f977ff320</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Tera</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>gaf30f732f080ece0b4e695da15e9da2a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Yotta</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>ga57179cfbd588c3d24609ad449a94bb0a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>playrho::d2</name>
    <filename>namespaceplayrho_1_1d2.html</filename>
    <namespace>playrho::d2::detail</namespace>
    <namespace>playrho::d2::part</namespace>
    <class kind="class">playrho::d2::AabbTreeWorld</class>
    <class kind="struct">playrho::d2::Acceleration</class>
    <class kind="struct">playrho::d2::BaseShapeConf</class>
    <class kind="class">playrho::d2::Body</class>
    <class kind="struct">playrho::d2::BodyConf</class>
    <class kind="class">playrho::d2::BodyConstraint</class>
    <class kind="struct">playrho::d2::ChainShapeConf</class>
    <class kind="struct">playrho::d2::ClipVertex</class>
    <class kind="class">playrho::d2::ContactImpulsesList</class>
    <class kind="class">playrho::d2::ConvexHull</class>
    <class kind="struct">playrho::d2::DiskShapeConf</class>
    <class kind="struct">playrho::d2::DistanceConf</class>
    <class kind="struct">playrho::d2::DistanceJointConf</class>
    <class kind="struct">playrho::d2::DistanceOutput</class>
    <class kind="class">playrho::d2::DistanceProxy</class>
    <class kind="class">playrho::d2::DynamicTree</class>
    <class kind="struct">playrho::d2::EdgeShapeConf</class>
    <class kind="struct">playrho::d2::FrictionJointConf</class>
    <class kind="struct">playrho::d2::GearJointConf</class>
    <class kind="class">playrho::d2::Joint</class>
    <class kind="struct">playrho::d2::JointBuilder</class>
    <class kind="struct">playrho::d2::JointConf</class>
    <class kind="class">playrho::d2::Manifold</class>
    <class kind="struct">playrho::d2::MotorJointConf</class>
    <class kind="struct">playrho::d2::MultiShapeConf</class>
    <class kind="class">playrho::d2::NgonWithFwdNormals</class>
    <class kind="class">playrho::d2::NgonWithFwdNormals&lt; static_cast&lt; std::size_t &gt;(-1)&gt;</class>
    <class kind="struct">playrho::d2::PointStates</class>
    <class kind="struct">playrho::d2::PolygonShapeConf</class>
    <class kind="struct">playrho::d2::Position</class>
    <class kind="struct">playrho::d2::PositionConstraint</class>
    <class kind="struct">playrho::d2::PositionSolution</class>
    <class kind="struct">playrho::d2::PositionSolverManifold</class>
    <class kind="struct">playrho::d2::PrismaticJointConf</class>
    <class kind="struct">playrho::d2::PulleyJointConf</class>
    <class kind="struct">playrho::d2::RayCastHit</class>
    <class kind="struct">playrho::d2::RevoluteJointConf</class>
    <class kind="struct">playrho::d2::RopeJointConf</class>
    <class kind="struct">playrho::d2::SeparationScenarioFaceA</class>
    <class kind="struct">playrho::d2::SeparationScenarioFaceB</class>
    <class kind="struct">playrho::d2::SeparationScenarioPoints</class>
    <class kind="class">playrho::d2::Shape</class>
    <class kind="struct">playrho::d2::ShapeBuilder</class>
    <class kind="struct">playrho::d2::ShapeConf</class>
    <class kind="class">playrho::d2::Simplex</class>
    <class kind="class">playrho::d2::SimplexEdge</class>
    <class kind="struct">playrho::d2::Sweep</class>
    <class kind="struct">playrho::d2::TargetJointConf</class>
    <class kind="struct">playrho::d2::Transformation</class>
    <class kind="class">playrho::d2::UnitVec</class>
    <class kind="struct">playrho::d2::Velocity</class>
    <class kind="class">playrho::d2::VelocityConstraint</class>
    <class kind="class">playrho::d2::VertexSet</class>
    <class kind="struct">playrho::d2::WeldJointConf</class>
    <class kind="struct">playrho::d2::WheelJointConf</class>
    <class kind="class">playrho::d2::World</class>
    <class kind="struct">playrho::d2::WorldConf</class>
    <class kind="class">playrho::d2::WorldManifold</class>
    <member kind="typedef">
      <type>::playrho::detail::AABB&lt; 2 &gt;</type>
      <name>AABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abfb3031d97cbdac7eb72cccf26e3c694</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; BodyConstraint, pmr::polymorphic_allocator&lt; BodyConstraint &gt; &gt;</type>
      <name>BodyConstraints</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7ceb910ca912d4865665281486009284</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::tuple&lt; ContactKey, ContactID &gt; &gt;</type>
      <name>BodyContactIDs</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a44a03b52bdd73ab4fb1bc9e522708da3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; BodyID &gt;</type>
      <name>BodyIDs</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aeee94a0ca7f0d3069e197bec5902c7a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::pair&lt; BodyID, JointID &gt; &gt;</type>
      <name>BodyJointIDs</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab725a0099ae40f88067b8c1104c7ffac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::pair&lt; BodyID, ShapeID &gt; &gt;</type>
      <name>BodyShapeIDs</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a430e1d6d6a2310f75ec7e181b37d90dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArrayList&lt; ClipVertex, MaxManifoldPoints &gt;</type>
      <name>ClipList</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab02c685f9b6933b73418fb3223e2e433</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(ContactID, const ContactImpulsesList &amp;, unsigned)&gt;</type>
      <name>ContactImpulsesFunction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab0945eb1db3efaa574b6b8403a11b853</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(ContactID, const Manifold &amp;)&gt;</type>
      <name>ContactManifoldFunction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae8f4e3ce8b18d8ddf7c2e34572c3a8f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; Real(BodyID body, ShapeID shape, ChildCounter child, const RayCastInput &amp;input)&gt;</type>
      <name>DynamicTreeRayCastCB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a62151a56febad3c36f515717f3e2340c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; DynamicTreeOpcode(DynamicTree::Size)&gt;</type>
      <name>DynamicTreeSizeCB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a50dec3f5f2b2d5add65db48633593967</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; JointID &gt;</type>
      <name>JointIDs</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a442773c8570c44bfd40f5ed08ab1240c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; KeyedContactID &gt;</type>
      <name>KeyedContactIDs</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abd7dca1f774f4159c942850575286f73</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>::playrho::detail::LengthIndices&lt; 2 &gt;</type>
      <name>LengthIndices</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a71fc9bb2c15145fe17188b4bc918cf2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>::playrho::detail::MassData&lt; 2 &gt;</type>
      <name>MassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1afff43f96a91b8c26b8f0de7b9a71da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; PositionConstraint, pmr::polymorphic_allocator&lt; PositionConstraint &gt; &gt;</type>
      <name>PositionConstraints</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abc7e24f5a0bf3d24c77456bc25dfac30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; DynamicTree::Size &gt;</type>
      <name>ProxyIDs</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2b03aa4cdf4968f8dc10d9016cb0552d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; bool(BodyID body, ShapeID shape, ChildCounter child)&gt;</type>
      <name>QueryShapeCallback</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a42e1647eb14290436bb570dd04d02215</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>playrho::detail::RayCastInput&lt; 2 &gt;</type>
      <name>RayCastInput</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adf053dc4cae3fabb24f6e3c8b8697ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::optional&lt; RayCastHit &gt;</type>
      <name>RayCastOutput</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a44ee8d7d4fd7ea935b7d952f7834027f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>::playrho::detail::SeparationInfo&lt; 2 &gt;</type>
      <name>SeparationInfo</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a92b6287401a1537b2a61ccf00ef46fc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::variant&lt; SeparationScenarioPoints, SeparationScenarioFaceA, SeparationScenarioFaceB &gt;</type>
      <name>SeparationScenario</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa5ceebbe3e7f0f4d4eb6017757d0f8bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; RayCastOpcode(BodyID body, ShapeID shape, ChildCounter child, const Length2 &amp;point, UnitVec normal)&gt;</type>
      <name>ShapeRayCastCB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a717d1df22f7ce6211e7d2019459714f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArrayList&lt; SimplexEdge, MaxSimplexEdges, std::remove_const_t&lt; decltype(MaxSimplexEdges)&gt; &gt;</type>
      <name>SimplexEdges</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a26b81a15ce5270a9e255ab52602964f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; VelocityConstraint, pmr::polymorphic_allocator&lt; VelocityConstraint &gt; &gt;</type>
      <name>VelocityConstraints</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1f8ad0e826333ba94dd20ca43eef5cd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; Velocity, Velocity &gt;</type>
      <name>VelocityPair</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa577189e0996ba8d7897fa12b80726c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DynamicTreeOpcode</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a04c475376564975c7ff4c357e88bdf16</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceplayrho_1_1d2.html" anchor="a04c475376564975c7ff4c357e88bdf16a87557f11575c0ad78e4e28abedc13b6e">End</enumvalue>
      <enumvalue file="namespaceplayrho_1_1d2.html" anchor="a04c475376564975c7ff4c357e88bdf16aa0bfb8e59e6c13fc8d990781f77694fe">Continue</enumvalue>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Advance</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa5385b2dbb547f7dcf7cb4d8bd67d6a0</anchor>
      <arglist>(Body &amp;body, ZeroToUnderOneFF&lt; Real &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Advance0</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3025c6db501979297b7b7c27547111c4</anchor>
      <arglist>(Body &amp;body, ZeroToUnderOneFF&lt; Real &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Sweep</type>
      <name>Advance0</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9f1f1a039d714b800386dea3f97f3ed3</anchor>
      <arglist>(const Sweep &amp;sweep, ZeroToUnderOneFF&lt; Real &gt; alpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyAngularImpulse</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a01828005de015a2660fb08cb6fd10e0a</anchor>
      <arglist>(Body &amp;body, AngularMomentum impulse) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyAngularImpulse</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac1fdf2a580376eb10458b1025b9fea7d</anchor>
      <arglist>(World &amp;world, BodyID id, AngularMomentum impulse)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a210cc8d0a8072f34ce6875605c8309ec</anchor>
      <arglist>(World &amp;world, BodyID id, const Force2 &amp;force, const Length2 &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyForceToCenter</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac7a5e9073194a89035ad2f060435542b</anchor>
      <arglist>(World &amp;world, BodyID id, const Force2 &amp;force)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyLinearImpulse</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aee7a0c13c47b5e71839b4bcf66ce1a63</anchor>
      <arglist>(Body &amp;body, const Momentum2 &amp;impulse, const Length2 &amp;point) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyLinearImpulse</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa9baf89bccc6de73ac64876157520a0b</anchor>
      <arglist>(World &amp;world, BodyID id, const Momentum2 &amp;impulse, const Length2 &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a970e0811c7166057450106756442a9b7</anchor>
      <arglist>(World &amp;world, BodyID id, Torque torque)</arglist>
    </member>
    <member kind="function">
      <type>BodyConstraint &amp;</type>
      <name>At</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af6a301104182688b53bfdfb4c9df309f</anchor>
      <arglist>(const Span&lt; BodyConstraint &gt; &amp;container, BodyID key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Attach</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a71e1178c67501e9f3cecd3bc40cc04a1</anchor>
      <arglist>(AabbTreeWorld &amp;world, BodyID id, ShapeID shapeID)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Attach</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a34a65c18db1c7daa25bb41c5c43671da</anchor>
      <arglist>(World &amp;world, BodyID id, const Shape &amp;shape, bool resetMassData=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Attach</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4957e6f46a121ed3a8556301baa68d84</anchor>
      <arglist>(World &amp;world, BodyID id, ShapeID shapeID, bool resetMassData=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Awaken</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4834708af29bcc9ae39ebfc2b9f580f6</anchor>
      <arglist>(Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>Awaken</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7d6dc1cf5798915c8782b55a9c190a95</anchor>
      <arglist>(World &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Awaken</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4968cdffa51be385b42f978f3226901d</anchor>
      <arglist>(World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>Acceleration</type>
      <name>CalcGravitationalAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8be54a280b6e7d4af783fb33ce00ede4</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>CalcSearchDirection</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8eafa8c052954d863e81d00251d51194</anchor>
      <arglist>(const SimplexEdges &amp;simplexEdges) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>Cap</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5e5d2c48721690652f6ac4c7ec0b04de</anchor>
      <arglist>(Position pos, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>Velocity</type>
      <name>Cap</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a92a5c879d39bc3aadbf6d19ae5104b07</anchor>
      <arglist>(Velocity velocity, Time h, const MovementConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae87aedd0a1a4a5077df893173042fc4c</anchor>
      <arglist>(World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearForces</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1af6a33d54c562234a4ba6f70f03cc62</anchor>
      <arglist>(World &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>ClipList</type>
      <name>ClipSegmentToLine</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a073a93c54a20aa68f2c56e759b7976ab</anchor>
      <arglist>(const ClipList &amp;vIn, const UnitVec &amp;normal, Length offset, ContactFeature::Index indexA)</arglist>
    </member>
    <member kind="function">
      <type>Manifold</type>
      <name>CollideShapes</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9fc228e00bb7a378f64d9382226e5900</anchor>
      <arglist>(const DistanceProxy &amp;shapeA, const Transformation &amp;xfA, const DistanceProxy &amp;shapeB, const Transformation &amp;xfB, const Manifold::Conf &amp;conf=GetDefaultManifoldConf())</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a48a5c3ca651b9b1a16314b65124c415e</anchor>
      <arglist>(const DistanceProxy &amp;proxy, const Transformation &amp;xf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1d220483edb635672bde217ecd5f4d86</anchor>
      <arglist>(const DistanceProxy &amp;proxy, const Transformation &amp;xfm0, const Transformation &amp;xfm1) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0e052f006832cbde0a453b284572c2ed</anchor>
      <arglist>(const Shape &amp;shape, const Transformation &amp;xf)</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0248c8d2589a0f53e14d80c91359e6d1</anchor>
      <arglist>(const World &amp;world, BodyID bodyID, ShapeID shapeID)</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acf9132ff11de52902cbb44070fb944c6</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>DynamicTree::Height</type>
      <name>ComputeHeight</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9130244ba8964592f654cf473e4979ed</anchor>
      <arglist>(const DynamicTree &amp;tree) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DynamicTree::Height</type>
      <name>ComputeHeight</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af0e796616b3e92f4b7b34ffdc73e4942</anchor>
      <arglist>(const DynamicTree &amp;tree, DynamicTree::Size index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeIntersectingAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2a637f309919743439018f2fb100bd30</anchor>
      <arglist>(const World &amp;world, BodyID bA, ShapeID sA, ChildCounter iA, BodyID bB, ShapeID sB, ChildCounter iB)</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeIntersectingAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac78eaf998b8cc105a6123019c4f5d3d7</anchor>
      <arglist>(const World &amp;world, const Contact &amp;contact)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>ComputeMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9737040be9601c29cd9a3e3ee5a0b7ce</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>ComputeMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a282b579e1b618ce55e558363e7a26756</anchor>
      <arglist>(const World &amp;world, const Span&lt; const ShapeID &gt; &amp;ids)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>ComputePerimeterRatio</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7daf9650f36f8d172678d1398034a516</anchor>
      <arglist>(const DynamicTree &amp;tree) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>ComputeTotalPerimeter</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aaab37fd533a1ec17e12c6798e42a21b3</anchor>
      <arglist>(const DynamicTree &amp;tree) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>CreateBody</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aac5c2b6c5fc9a39971942baf99fcee2b</anchor>
      <arglist>(AabbTreeWorld &amp;world, const BodyConf &amp;def)</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>CreateBody</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9d451d642b4be1c355a908b7c67df344</anchor>
      <arglist>(World &amp;world, const Body &amp;body=Body{}, bool resetMassData=true)</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>CreateBody</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6f804d53e422e2acbc45443c26c3e20e</anchor>
      <arglist>(World &amp;world, const BodyConf &amp;def, bool resetMassData=true)</arglist>
    </member>
    <member kind="function">
      <type>JointID</type>
      <name>CreateJoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab62165739ca2e022cf67ce1f5d21b748</anchor>
      <arglist>(World &amp;world, const Joint &amp;def)</arglist>
    </member>
    <member kind="function">
      <type>JointID</type>
      <name>CreateJoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae2daf9b23558da46e3662b2405f97156</anchor>
      <arglist>(World &amp;world, const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>ShapeID</type>
      <name>CreateShape</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4ce8ced3a725faadab6912a877e83e84</anchor>
      <arglist>(World &amp;world, const Shape &amp;def)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>CreateShape</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a305401791bf73ad8008d2640a827c840</anchor>
      <arglist>(World &amp;world, const T &amp;shapeConf) -&gt; decltype(CreateShape(world, Shape{shapeConf}))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Destroy</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a38d693783590ad4f2376b40c76d72421</anchor>
      <arglist>(World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Destroy</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a503b6e581e06acddba228870c9b02ecc</anchor>
      <arglist>(World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Destroy</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af671bead11c1d96c2678aa5514e47980</anchor>
      <arglist>(World &amp;world, ShapeID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Detach</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa96788ab361740a16d316b821154ea9e</anchor>
      <arglist>(AabbTreeWorld &amp;world, BodyID id, ShapeID shapeID)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Detach</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4dcf1092640934b376e09bb8ba6679f5</anchor>
      <arglist>(World &amp;world, BodyID id, bool resetMassData=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Detach</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a360a1facb140358f7df6160beded7918</anchor>
      <arglist>(World &amp;world, BodyID id, ShapeID shapeID, bool resetMassData=true)</arglist>
    </member>
    <member kind="function">
      <type>DistanceOutput</type>
      <name>Distance</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5366c3c3339ca7ccef9de23f2e42f2f5</anchor>
      <arglist>(const DistanceProxy &amp;proxyA, const Transformation &amp;transformA, const DistanceProxy &amp;proxyB, const Transformation &amp;transformB, DistanceConf conf=DistanceConf{})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnableLimit</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae6d08550931a4a4ef3f009ca9419ea76</anchor>
      <arglist>(Joint &amp;object, bool value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>EnableLimit</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa3863e6b3d94dcc69b7265dbd20ac074</anchor>
      <arglist>(T &amp;conf, bool v) noexcept -&gt; decltype(std::declval&lt; T &gt;().UseEnableLimit(bool{}))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnableLimit</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0d57dd5ce4216de4314346eb4ea1305c</anchor>
      <arglist>(World &amp;world, JointID id, bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnableMotor</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adcfe849a5fc2d93b1d7dec254daef3ad</anchor>
      <arglist>(Joint &amp;object, bool value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>EnableMotor</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7d2bb2408814597cad0ada96cb799b01</anchor>
      <arglist>(T &amp;conf, bool v) noexcept -&gt; decltype(std::declval&lt; T &gt;().UseEnableMotor(bool{}))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnableMotor</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2a704ef43cd271708ab9f08355a1a20f</anchor>
      <arglist>(World &amp;world, JointID id, bool value)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>Evaluate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2d0e8d05ed82078a0870de6729cd08cd</anchor>
      <arglist>(const SeparationScenario &amp;scenario, const DistanceProxy &amp;proxyA, const Transformation &amp;xfA, const DistanceProxy &amp;proxyB, const Transformation &amp;xfB, IndexPair indexPair)</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>FindClosestBody</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a79b87dd5723bbca53647199735376788</anchor>
      <arglist>(const World &amp;world, const Length2 &amp;location)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>FindLowestRightMostVertex</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac8845b24d9baa83d95859a1ec749fdff</anchor>
      <arglist>(Span&lt; const Length2 &gt; vertices) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LengthIndexPair</type>
      <name>FindMinSeparation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a71ca6716d6d06ef7626703382df26d52</anchor>
      <arglist>(const SeparationScenario &amp;scenario, const DistanceProxy &amp;proxyA, const Transformation &amp;xfA, const DistanceProxy &amp;proxyB, const Transformation &amp;xfB)</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec::value_type</type>
      <name>get</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a885021be21642c4a65d5729a0f0cb8b3</anchor>
      <arglist>(const UnitVec &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec::value_type</type>
      <name>get&lt; 0 &gt;</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a449f8d62d52b980177ca57f8766a2159</anchor>
      <arglist>(const UnitVec &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec::value_type</type>
      <name>get&lt; 1 &gt;</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a93e4609be8116731e3d32f6e4206bd49</anchor>
      <arglist>(const UnitVec &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>GetAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adebb4dfdc038631f8b24ee19a0b29713</anchor>
      <arglist>(const DynamicTree &amp;tree) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB</type>
      <name>GetAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab6f093bc8ffe077f0d5895bfc5b672a7</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>GetAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>add2ef460cb524b34a3ad4feea71dc41f</anchor>
      <arglist>(const playrho::detail::RayCastInput&lt; 2 &gt; &amp;input) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Acceleration</type>
      <name>GetAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acafaac4ef15f7416f464dff9b19780fa</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Acceleration</type>
      <name>GetAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a349255e3e102807d3271788b753ec4a1</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetAnchorA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad181805be2366d99ffb13155baf40065</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetAnchorB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac23fd0777ed5a5310a2374d1f93c572d</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngle</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2ecdf15e8b628491940dd2e568afc427</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetAngle</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6e36744b63f83418fefcdc1642acbbf8</anchor>
      <arglist>(const BodyConf &amp;conf) noexcept -&gt; Angle</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngle</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a01ec0848cea0c5b1730736cd1b75b156</anchor>
      <arglist>(const Transformation &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngle</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3b7f2988103c1593f346d2d58e9b4c6c</anchor>
      <arglist>(const UnitVec &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngle</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a960d46a2aebfa5fdd2c84deaecf72d97</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngle</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a39d784bea582d1df91f3eeeb42b50597</anchor>
      <arglist>(const World &amp;world, const RevoluteJointConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngle</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4ce296061c68b9afd61afa015d526596</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>AngularAcceleration</type>
      <name>GetAngularAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a986b11edba421b23879fa363c557f1e5</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AngularAcceleration</type>
      <name>GetAngularAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a82d0d7b3fee1fa94eebf775f5a733c3a</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Frequency &gt;</type>
      <name>GetAngularDamping</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7543270614333c0aa69df56877a3a1bd</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Frequency</type>
      <name>GetAngularDamping</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4431c1a715e8bf4bccf785ba28bcad2a</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetAngularError</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac3f517e88d5b384e337d3322881c5886</anchor>
      <arglist>(const MotorJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngularLowerLimit</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3f73c71e61f2b25d3c44d6b2ef16de63</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Angle</type>
      <name>GetAngularLowerLimit</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afd8850ec299f0679c41ca58081408de8</anchor>
      <arglist>(const RevoluteJointConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngularLowerLimit</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a07d97bfe3c88aea660bc327b3b8bc7f2</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>RotInertia</type>
      <name>GetAngularMass</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac7901ff48ce34588757a8afdbed661dc</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetAngularMass</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac10aff235975c8e469ef2f569d1cf8d3</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().angularMass)</arglist>
    </member>
    <member kind="function">
      <type>RotInertia</type>
      <name>GetAngularMass</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abfa7ba64b9136c5b05d0e1c72cf008e9</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>AngularMomentum</type>
      <name>GetAngularMotorImpulse</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afc80a8adf52d40020d359f515a9bb75b</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetAngularMotorImpulse</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1be2a175968f4f26710ae25ac786e41e</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().angularMotorImpulse)</arglist>
    </member>
    <member kind="function">
      <type>AngularMomentum</type>
      <name>GetAngularMotorImpulse</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a40396a921cdcbdfcdd69d60f65115f40</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngularOffset</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a20ffca8f4b379016205db895aa714f6e</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetAngularOffset</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a75db6ad844d4be5361364e49907b24f8</anchor>
      <arglist>(const MotorJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetAngularOffset</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a12f6b8a80dfe9b80745b16612801b4bd</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().angularOffset)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngularOffset</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a542fc5366b9f67894c79c6dd714c211c</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>constexpr AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af7938377c565a183168613b640e651e8</anchor>
      <arglist>(const DistanceJointConf &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ade895bb6a4e1b45bc803784534f2ffb2</anchor>
      <arglist>(const FrictionJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af2ce467ab8d8f56bd0cf232fd554e58b</anchor>
      <arglist>(const GearJointConf &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3a1ba7e61266e608fc3b5cf4eff142be</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a609cdefd3186585f2718bd19ba81c950</anchor>
      <arglist>(const PrismaticJointConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad042f7000a43ec5b29154a07465005f6</anchor>
      <arglist>(const PulleyJointConf &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4ee40ca4a9dbe09390f0ff493f276dac</anchor>
      <arglist>(const RevoluteJointConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af3c61329399916ae2b063e6ba94ffb6e</anchor>
      <arglist>(const RopeJointConf &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetAngularReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a351709375948378e06b028ba49b19c1e</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().angularImpulse)</arglist>
    </member>
    <member kind="function">
      <type>constexpr AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afa5cbad1175b924fab7ca3259d3ba8a9</anchor>
      <arglist>(const TargetJointConf &amp;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3739f4255fc019f68cd74d5c21867845</anchor>
      <arglist>(const WeldJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7bb53ab723d5ccfbd11f4bd4479c3e45</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngularUpperLimit</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7006c4b738236b79502497c69d11ae70</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Angle</type>
      <name>GetAngularUpperLimit</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0f475e87122dc3f396a975f55b1c70d0</anchor>
      <arglist>(const RevoluteJointConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngularUpperLimit</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a774d95df3b7b44c06cd8f4b1f8cd2ace</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetAngularVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a306635dbd11f92ad1020a386fce7b7c2</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetAngularVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a116c82c48643c1ef6199d27e9b9dd882</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetAngularVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa5a936f0f945fdc524637bf1ae532e4f</anchor>
      <arglist>(const World &amp;world, const RevoluteJointConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetAngularVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a26cbba51ee6306bed9808c6490e1d7e6</anchor>
      <arglist>(const World &amp;world, const WheelJointConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetAngularVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af5b790fffd5fdb045193b191c62045df</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>ShapeCounter</type>
      <name>GetAssociationCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a14fe4bcfe6eb37fc67d9f435879797c2</anchor>
      <arglist>(const World &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>GetAwakeCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab2ab9325a9628489049f16f50f1004b8</anchor>
      <arglist>(const World &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; BodyID &gt;</type>
      <name>GetBodies</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a78a12867ea3d68d3821a07763190f37f</anchor>
      <arglist>(const World &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; BodyID &gt;</type>
      <name>GetBodiesForProxies</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6be81e1e32495bd3e6de237765831ad4</anchor>
      <arglist>(const World &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>Body</type>
      <name>GetBody</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6eddac09719eac9ed2b5568aa501a5ad</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>GetBodyA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a700fc1baf4e0165912da41dae27dfc78</anchor>
      <arglist>(const Joint &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyID</type>
      <name>GetBodyA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3e3bb4a7dc061ae0e86c29e287b9dd3b</anchor>
      <arglist>(const JointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>GetBodyA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9f73171f71b2dd994f143384f09c9b27</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>GetBodyA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0300037821d009ead20907713390c4ac</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>GetBodyB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a37729f6494a066607deb10ea5a57c449</anchor>
      <arglist>(const Joint &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyID</type>
      <name>GetBodyB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad93f572c35fb47bafd90668d4be3a9fd</anchor>
      <arglist>(const JointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>GetBodyB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afecd2b398a06faf9d320f05ff00a5e1a</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>GetBodyB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aed37686447579052f3f82d3c0d97e513</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>BodyConf</type>
      <name>GetBodyConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adce9b45f685c4bace08d09e412d3b8f2</anchor>
      <arglist>(const Body &amp;body)</arglist>
    </member>
    <member kind="function">
      <type>BodyConstraint</type>
      <name>GetBodyConstraint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a973134610257ca826a0a4e81743eda3c</anchor>
      <arglist>(const Body &amp;body, Time time, const MovementConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>GetBodyCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a171edc74ab3a2a7f742cb84fc9f5179b</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>GetBodyRange</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a30bdf2cbfb38cda5adb13d4392d58db8</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Force2</type>
      <name>GetCentripetalForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a73e45567d84fa1cee2c5b44ac90d48df</anchor>
      <arglist>(const World &amp;world, BodyID id, const Length2 &amp;axis)</arglist>
    </member>
    <member kind="function">
      <type>ChainShapeConf</type>
      <name>GetChainShapeConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab25320e8b45be5e1730e39c9fc26a103</anchor>
      <arglist>(const AABB &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>ChainShapeConf</type>
      <name>GetChainShapeConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1506cafaf0782493d23348b88fc79053</anchor>
      <arglist>(const Length2 &amp;dimensions)</arglist>
    </member>
    <member kind="function">
      <type>ChainShapeConf</type>
      <name>GetChainShapeConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ade70545e6c2bf848f87657114a111d11</anchor>
      <arglist>(Length dimension)</arglist>
    </member>
    <member kind="function">
      <type>DistanceProxy</type>
      <name>GetChild</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8cdbec96d1a3f30b8c5705b602aeb8df</anchor>
      <arglist>(const ChainShapeConf &amp;arg, ChildCounter index)</arglist>
    </member>
    <member kind="function">
      <type>DistanceProxy</type>
      <name>GetChild</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab2edb0ada2177d0b9f078f49069f4810</anchor>
      <arglist>(const DiskShapeConf &amp;arg, ChildCounter index)</arglist>
    </member>
    <member kind="function">
      <type>DistanceProxy</type>
      <name>GetChild</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a65056ce7e0d413a4beeb818ad0ab9f4b</anchor>
      <arglist>(const EdgeShapeConf &amp;arg, ChildCounter index)</arglist>
    </member>
    <member kind="function">
      <type>DistanceProxy</type>
      <name>GetChild</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a20acfdc5ce307d90cfef42908be8720b</anchor>
      <arglist>(const MultiShapeConf &amp;arg, ChildCounter index)</arglist>
    </member>
    <member kind="function">
      <type>DistanceProxy</type>
      <name>GetChild</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a13041b2a9f585bc57cd2daad5afe69a3</anchor>
      <arglist>(const PolygonShapeConf &amp;arg, ChildCounter index)</arglist>
    </member>
    <member kind="function">
      <type>DistanceProxy</type>
      <name>GetChild</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af3e0b1a42f4c103d313a46942536b2ba</anchor>
      <arglist>(const Shape &amp;shape, ChildCounter index)</arglist>
    </member>
    <member kind="function">
      <type>DistanceProxy</type>
      <name>GetChild</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0025ba197461f8876cda9c97b5ca0364</anchor>
      <arglist>(Shape &amp;&amp;shape, ChildCounter index)=delete</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetChildCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afeeb64f8bbd439af0e350288e16da2e7</anchor>
      <arglist>(const ChainShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ChildCounter</type>
      <name>GetChildCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acfcf513079d544b6e0e64dc79b6e3381</anchor>
      <arglist>(const DiskShapeConf &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ChildCounter</type>
      <name>GetChildCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5821b2f4d9cef13bc998b92a02687663</anchor>
      <arglist>(const EdgeShapeConf &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetChildCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6da28327ee2857e706b89789d56a3598</anchor>
      <arglist>(const MultiShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ChildCounter</type>
      <name>GetChildCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aecd3d6d3ce6bf86f6b0c9684c05d63bc</anchor>
      <arglist>(const PolygonShapeConf &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetChildCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a84eab47d880f50ed7b191c2bce198d00</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetChildIndexA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aede095c028bcc203dca6946899a60734</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetChildIndexB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab674d51ad97e1f1d1f84c4fe9529643c</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length2</type>
      <name>GetClosestPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af47d53841069d289b59d6de41551f45c</anchor>
      <arglist>(const Simplex &amp;simplex)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetCollideConnected</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad982ed0433982ac18703569f42f4037c</anchor>
      <arglist>(const Joint &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>GetCollideConnected</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae4acb95cd2fdc94eb04c04ed03a6dd77</anchor>
      <arglist>(const JointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetCollideConnected</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8dcb8b5dfef16109fe874fa2b13667ea</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetConstant</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac71c6757a2460462d539185069dd9c4c</anchor>
      <arglist>(const GearJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Contact</type>
      <name>GetContact</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae7500112dec144247372bb0d8144da01</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>ContactCounter</type>
      <name>GetContactCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac7b6c00fbd4fc40a4957bd082c9437b4</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ContactImpulsesList</type>
      <name>GetContactImpulses</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3952e6392470f39a6236a5d144df88fe</anchor>
      <arglist>(const VelocityConstraint &amp;vc)</arglist>
    </member>
    <member kind="function">
      <type>ContactCounter</type>
      <name>GetContactRange</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0e521b2fb4712f8439c4a10db445319f</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity2</type>
      <name>GetContactRelVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a21ae34e564b20057e6ed0f80e4485868</anchor>
      <arglist>(const Velocity &amp;velA, const Length2 &amp;relA, const Velocity &amp;velB, const Length2 &amp;relB) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; KeyedContactID &gt;</type>
      <name>GetContacts</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa159007c7db3aef168555f6f31c1339f</anchor>
      <arglist>(const World &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::tuple&lt; ContactKey, ContactID &gt; &gt;</type>
      <name>GetContacts</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a63dd046df182bd4b8664bcb0ee0f50e5</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Length2 &gt;</type>
      <name>GetConvexHullAsVector</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae1538594ce2f0d86da70bf832c0327bb</anchor>
      <arglist>(Span&lt; const Length2 &gt; vertices)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetCorrectionFactor</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa5e4489f264227f6c20010c1838248db</anchor>
      <arglist>(const MotorJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetCurrentLengthA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8b3c1e78795081eebc7b567769e16a2b</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetCurrentLengthB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a94983125c58f61c88da00e54dda0ef16</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetDampingRatio</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6169172fbdb742ca0e37dd36271756fc</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetDampingRatio</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad67a47fda75f3da5fa0a2a5c0c4357e9</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().dampingRatio)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetDampingRatio</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afe631daac24a87eceec2c430ea8a7752</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>GetData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9d716987feab31bac7d07bb19cb89599</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyConf</type>
      <name>GetDefaultBodyConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af6c1034a2366e6ef466253aea8a13829</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegativeFF&lt; Real &gt;</type>
      <name>GetDefaultFriction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9a52dff01e38af18a66d4e57113dbfd2</anchor>
      <arglist>(const Shape &amp;a, const Shape &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetDefaultFriction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab39473e22885808ad7ffe6fab3b935ac</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Manifold::Conf</type>
      <name>GetDefaultManifoldConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acaf37db0f0fc4d474c6a447b1032d73f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetDefaultRestitution</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9f95d5dcbd922f118fc591dc9efcaddd</anchor>
      <arglist>(const Shape &amp;a, const Shape &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetDefaultRestitution</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abe36e56eae83f3d2c57890a113095a99</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length2</type>
      <name>GetDelta</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abd82b1e34a0b75b0f1a1da6eb741f741</anchor>
      <arglist>(PairLength2 arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr NonNegative&lt; AreaDensity &gt;</type>
      <name>GetDensity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adb24a76e3c29dd4f1f5bc283cfef1ef1</anchor>
      <arglist>(const BaseShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; AreaDensity &gt;</type>
      <name>GetDensity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1e3ed738b9082f9bfd3358a19d9aa97d</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; AreaDensity &gt;</type>
      <name>GetDensity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a08ec208608b8af0963d07cfbe67e9b05</anchor>
      <arglist>(const World &amp;world, ShapeID id)</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec</type>
      <name>GetDirection</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a850723b278d7e003b0be5f2c0f7435f1</anchor>
      <arglist>(const Transformation &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DistanceConf</type>
      <name>GetDistanceConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a761066151582811dfe44b76a0bd29389</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DistanceConf</type>
      <name>GetDistanceConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a39c11c9e373870e29e2f5cf69f817b5e</anchor>
      <arglist>(const ToiConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DistanceJointConf</type>
      <name>GetDistanceJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab375b99ce3245ea19955018f6d6a6532</anchor>
      <arglist>(const Joint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>DistanceJointConf</type>
      <name>GetDistanceJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a833296e5ec165dbed8c0b76064e75732</anchor>
      <arglist>(const World &amp;world, BodyID bodyA, BodyID bodyB, const Length2 &amp;anchorA=Length2{}, const Length2 &amp;anchorB=Length2{})</arglist>
    </member>
    <member kind="function">
      <type>InvMass</type>
      <name>GetEffectiveInvMass</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab0e7f6b99f8d46a62c739d0df5ba8c1d</anchor>
      <arglist>(const InvRotInertia &amp;invRotI, const Length2 &amp;p, const UnitVec &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>Mass22</type>
      <name>GetEffectiveMassMatrix</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1bc864f4ad3d6622d4c9444cfcb90680</anchor>
      <arglist>(const TargetJointConf &amp;object, const BodyConstraint &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Filter</type>
      <name>GetFilter</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0b7acd1eb614ad8608479fc442dcfbc8</anchor>
      <arglist>(const BaseShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Filter</type>
      <name>GetFilter</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2af48effcd34bfea6f2622ad0b525c31</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Filter</type>
      <name>GetFilterData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa0a2c5e5746924e329cdf96e36fe56c0</anchor>
      <arglist>(const World &amp;world, ShapeID id)</arglist>
    </member>
    <member kind="function">
      <type>Body::FlagsType</type>
      <name>GetFlags</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a21071397aafb9df4a10e1abde2d11421</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Force2</type>
      <name>GetForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a82eaa61b6bddf682fe315f09830e2bfc</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Frequency</type>
      <name>GetFrequency</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a339442beaa60f275f89aa1eba7034afd</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetFrequency</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5f80b9a578caed67f0fe63fc0001cb60</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().frequency)</arglist>
    </member>
    <member kind="function">
      <type>Frequency</type>
      <name>GetFrequency</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3c773e75400526e2b287b78e93685b9d</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>constexpr NonNegativeFF&lt; Real &gt;</type>
      <name>GetFriction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6a4bdfe31fb64399135f589df7f27e35</anchor>
      <arglist>(const BaseShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegativeFF&lt; Real &gt;</type>
      <name>GetFriction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1e78385069dd9f0bb162bf17051a0706</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegativeFF&lt; Real &gt;</type>
      <name>GetFriction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7a6ff8e497fd3f3dbd3d31d043628b6c</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>NonNegativeFF&lt; Real &gt;</type>
      <name>GetFriction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abc8bdbee3ee5263518f3d08cf99c9316</anchor>
      <arglist>(const World &amp;world, ShapeID id)</arglist>
    </member>
    <member kind="function">
      <type>FrictionJointConf</type>
      <name>GetFrictionJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adb48ff4223599c7af13fe487370e9933</anchor>
      <arglist>(const Joint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>FrictionJointConf</type>
      <name>GetFrictionJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae208174e24b40f42ba8c5926dd2598a5</anchor>
      <arglist>(const World &amp;world, BodyID bodyA, BodyID bodyB, const Length2 &amp;anchor)</arglist>
    </member>
    <member kind="function">
      <type>std::array&lt; UnitVec, N &gt;</type>
      <name>GetFwdNormalsArray</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a03e5b2dc2081cc8e0fc608ff79e78a89</anchor>
      <arglist>(const std::array&lt; Length2, N &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function">
      <type>std::array&lt; UnitVec, sizeof...(ints)&gt;</type>
      <name>GetFwdNormalsArray</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a642d004cc56b550c7fc6ff0fc6cb3311</anchor>
      <arglist>(const std::array&lt; Length2, sizeof...(ints)&gt; &amp;vertices, std::integer_sequence&lt; T, ints... &gt; int_seq)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; UnitVec &gt;</type>
      <name>GetFwdNormalsVector</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac32cdb280579f9cc50ec0831c9d8c690</anchor>
      <arglist>(const std::vector&lt; Length2 &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec</type>
      <name>GetFwdPerpendicular</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afea67a580dfedfa9a2a5efd40a636f18</anchor>
      <arglist>(const UnitVec &amp;vector) noexcept</arglist>
    </member>
    <member kind="function">
      <type>GearJointConf</type>
      <name>GetGearJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a36b5ef1495440a134a304321d2e85e3d</anchor>
      <arglist>(const Joint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>GearJointConf</type>
      <name>GetGearJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae1ef79a7cfe5d55553679336eb54990b</anchor>
      <arglist>(const World &amp;world, JointID id1, JointID id2, Real ratio=Real{1})</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetGroundAnchorA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8abe578d751e8b6a47fc6420f5e54d88</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetGroundAnchorA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa40326009ae501f30b26103fefa6c3f7</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().groundAnchorA)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetGroundAnchorA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acb29d9229831d8cdb59085a3e3356489</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetGroundAnchorB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a287bd75941373137dcdb235ec42250c5</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetGroundAnchorB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a178863a997aeef26e3a1d2f66f31fa60</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().groundAnchorB)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetGroundAnchorB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1987d685729c33479c3e46e94a6c189d</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>DynamicTree::Height</type>
      <name>GetHeight</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a72265a3c2d4511e74df6ab4d13112f6d</anchor>
      <arglist>(const DynamicTree &amp;tree) noexcept</arglist>
    </member>
    <member kind="function">
      <type>IndexPair3</type>
      <name>GetIndexPairs</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a70613779e152f647af4f80dce352d83c</anchor>
      <arglist>(const SimplexEdges &amp;collection) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Frequency</type>
      <name>GetInvDeltaTime</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6f42cba222329b61fa640780dff9d65f</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegativeFF&lt; InvMass &gt;</type>
      <name>GetInvMass</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7d74493ba9108b54a9900eb8319ede92</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>InvMass</type>
      <name>GetInvMass</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a387f5afc43f72963dfed787d73d6f710</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>NonNegativeFF&lt; InvRotInertia &gt;</type>
      <name>GetInvRotInertia</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4c2a6d79f4824a9d3d9971b60a865e47</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>InvRotInertia</type>
      <name>GetInvRotInertia</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac4273178a15531c968b0f0523f934c02</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>Joint</type>
      <name>GetJoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2fe778a54a4821fbc2272e4a1709108c</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>JointCounter</type>
      <name>GetJointCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7484e45a19ce38178de17a2f0bfdb519</anchor>
      <arglist>(const World &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>JointCounter</type>
      <name>GetJointRange</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0994cdd14b2f67fe7a014969af6d7a7e</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; JointID &gt;</type>
      <name>GetJoints</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a02359170455e95f3876ce76a1f019cc9</anchor>
      <arglist>(const World &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::pair&lt; BodyID, JointID &gt; &gt;</type>
      <name>GetJoints</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a46d383e6e9a6c7473fdfb4199fa56915</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetJointTranslation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9148649a69f324b0f355a52e7cad8896</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLength</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9d8e5d2ecc10f965faa16f74ade58628</anchor>
      <arglist>(const DistanceJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetLength</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6064a1e393886b961056b48031b81c13</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLength</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa318f56579b7038e0e194545dffb5257</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().length)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetLength</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a49225b519382602123b1745c7a32c517</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLengthA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a94c0bc2a8291d96ff45e0d157a9d5bf3</anchor>
      <arglist>(const PulleyJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLengthB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aac6b715e0df3e5be4be5ccae4ac4fa36</anchor>
      <arglist>(const PulleyJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LimitState</type>
      <name>GetLimitState</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab848993fd700dcb158d52f66e51cdf5f</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLimitState</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3d2a1ce1f457886cc0b8d2e2ee85860c</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().limitState)</arglist>
    </member>
    <member kind="function">
      <type>LimitState</type>
      <name>GetLimitState</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0c2f573475b5472494e2154c2f58829e</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>LinearAcceleration2</type>
      <name>GetLinearAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aef76fc5d7813af886e28e8033e9d019d</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearAcceleration2</type>
      <name>GetLinearAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5d3238160010427c10aabe15d0f7e5c8</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Frequency &gt;</type>
      <name>GetLinearDamping</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a19b401f474facc647922e54a7aa60aa8</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Frequency</type>
      <name>GetLinearDamping</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6fcd3073d408b707765b005046171c38</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLinearError</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab1e80b7fb2a127c7bef5388890d3ee0e</anchor>
      <arglist>(const MotorJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetLinearLowerLimit</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6f3aa5cd9a7405fbb0f6649d25be37d7</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLinearLowerLimit</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2972598e6c903720d93d1aba138ec7b3</anchor>
      <arglist>(const PrismaticJointConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Momentum</type>
      <name>GetLinearMotorImpulse</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3bf45989df5425c62d0dde5b5aad0874</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLinearMotorImpulse</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7927fe2d7e321e8824cc5d541ad984c2</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().motorImpulse)</arglist>
    </member>
    <member kind="function">
      <type>Momentum</type>
      <name>GetLinearMotorImpulse</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a420b9120142421be0e3cec7ccef61c0e</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLinearOffset</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa4f8817e88c579e5c6cc61d25a501201</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLinearOffset</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a53e7afd4eb1bc197703f3d68c4ffd934</anchor>
      <arglist>(const MotorJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLinearOffset</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae6d33c1f65f4909dd4b0dabe1550d8ce</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().linearOffset)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLinearOffset</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a208fd111e05f9fe8b0e29013bc7c5a89</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a262919449fdc976d24c1b57d5f764610</anchor>
      <arglist>(const DistanceJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a91ac3d07e13f9277632001e8f02de54f</anchor>
      <arglist>(const FrictionJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aef9ee799e4e668610deb9199d0848153</anchor>
      <arglist>(const GearJointConf &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afb5492868f81a0c2e0a104139d0c22e2</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a975ab609242a9cc7d13298e4e4bd1d46</anchor>
      <arglist>(const PrismaticJointConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a587b3fc0018a0aba1d156dcd26147d1d</anchor>
      <arglist>(const PulleyJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2cae96cc4b8f16e7a9ce6abd543f09c1</anchor>
      <arglist>(const RevoluteJointConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac7acc7a694d7729620e48300eb157d7b</anchor>
      <arglist>(const RopeJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLinearReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa94b2d64f846a51cf42d1cd426039e7c</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().linearImpulse)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7ec73e83dfde52a4e59c7ef6099e5073</anchor>
      <arglist>(const TargetJointConf &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2c609024f0b536db041b19c8f8869479</anchor>
      <arglist>(const WeldJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aef25b1a360e19b38a39af5a4b776eceb</anchor>
      <arglist>(const WheelJointConf &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a07b4f8e28195af1a6d2f6f417934896e</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetLinearUpperLimit</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae61f0e65d81b6ee4b71442eaba01e557</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLinearUpperLimit</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a239db9ab5446fbb27eb532c45965cbe4</anchor>
      <arglist>(const PrismaticJointConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity2</type>
      <name>GetLinearVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3802163b90f631b001eaa0201be419c9</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity2</type>
      <name>GetLinearVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afb257e46e441021d64884e95c400fa0f</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity</type>
      <name>GetLinearVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afb637a0308bb0036946100bfa08059d8</anchor>
      <arglist>(const World &amp;world, const PrismaticJointConf &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity2</type>
      <name>GetLinearVelocityFromLocalPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a35436f653d3b5cad6584a34e530e825e</anchor>
      <arglist>(const Body &amp;body, const Length2 &amp;localPoint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity2</type>
      <name>GetLinearVelocityFromWorldPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9139b405ca94083b92bb773c43cf5abe</anchor>
      <arglist>(const Body &amp;body, const Length2 &amp;worldPoint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalAnchorA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad53a1e79d6e949a948293990837ba83f</anchor>
      <arglist>(const GearJointConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalAnchorA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a347b0e5fce1dfb74e71e3f0d57144ac1</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLocalAnchorA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6bff2eef6c3ab00e21a7a497dfa69b02</anchor>
      <arglist>(const MotorJointConf &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLocalAnchorA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a866f13c49c824e4bad68f5c53f0c6bb7</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().localAnchorA)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLocalAnchorA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a742f3193b44e8038c6e21455f2cc3630</anchor>
      <arglist>(const TargetJointConf &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalAnchorA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aeab676a9e447ebb4320d98c1f77f8c83</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalAnchorB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a27a8b26e2499ae4abb787373114ecd43</anchor>
      <arglist>(const GearJointConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalAnchorB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0fd920a1103fb1a35d48f199dbb0c5c3</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLocalAnchorB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aff7518dbaba68503c8534f3aa1bc1baf</anchor>
      <arglist>(const MotorJointConf &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLocalAnchorB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a54a673f7a1db17e977ab57a355cebab5</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().localAnchorB)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalAnchorB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aecacf3a817fd4e067aa8f0be9410f26d</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalCenter</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8d99adba0a8c68b083bb765ef9f1c1f0</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalCenter</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aea0ce2fd155103bc574acd4721711b60</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac687607740e4b5d123eba7d7c3b8a3f3</anchor>
      <arglist>(const Body &amp;body, const Length2 &amp;worldPoint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac93113a8f2585e325504a6b56b85329e</anchor>
      <arglist>(const World &amp;world, BodyID id, const Length2 &amp;worldPoint)</arglist>
    </member>
    <member kind="function">
      <type>RotInertia</type>
      <name>GetLocalRotInertia</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>accc0736257251f381353661320af972e</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RotInertia</type>
      <name>GetLocalRotInertia</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad374df7cc8d1a5a9a186e0ae8a7c8cb3</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetLocalVector</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad524fa0b4ae0f8847070328bdee06572</anchor>
      <arglist>(const Body &amp;body, const UnitVec &amp;uv) noexcept</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetLocalVector</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae06bc4d6dc0dd90c8be5bb0227710c33</anchor>
      <arglist>(const World &amp;world, BodyID body, const UnitVec &amp;uv)</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetLocalXAxisA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9ef8b96db20a6be16038d614fa71cc8d</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLocalXAxisA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2f428192ffefe712d096f535c4c4e825</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().localXAxisA)</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetLocalXAxisA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae355c113ee44c5caa94fbcd0730caed4</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetLocalYAxisA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a94b7da0e22d5fa2780f91d64bc54f24d</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLocalYAxisA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a09041a146b572b6200045fa80dd3cd57</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().localYAxisA)</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetLocalYAxisA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac5cfbd895c67ce6e9a30a04ed066f542</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8a6f694cab71d0db91049dc0908de63f</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLocation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af305801683ef38d8ef1fbd65a5f8fa55</anchor>
      <arglist>(const BodyConf &amp;conf) noexcept -&gt; Length2</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length2</type>
      <name>GetLocation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad3978702132a5caf87ad3cbec808b116</anchor>
      <arglist>(const Transformation &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aabf27f5cfd9092be041a781d24cfa9a1</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>Manifold</type>
      <name>GetManifold</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac457cb117f43c867a553087e91608ce7</anchor>
      <arglist>(bool flipped, const DistanceProxy &amp;shape0, const Transformation &amp;xf0, VertexCounter idx0, const DistanceProxy &amp;shape1, const Transformation &amp;xf1, VertexCounter2 indices1, const Manifold::Conf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>Manifold</type>
      <name>GetManifold</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac8fe6ad97a28e83fe2e667e03865bc6e</anchor>
      <arglist>(bool flipped, Length totalRadius, const DistanceProxy &amp;shape, const Transformation &amp;sxf, const Length2 &amp;point, const Transformation &amp;xfm)</arglist>
    </member>
    <member kind="function">
      <type>Manifold</type>
      <name>GetManifold</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af9c6bf3946b74280a56587fb4859a624</anchor>
      <arglist>(const Length2 &amp;locationA, const Transformation &amp;xfA, const Length2 &amp;locationB, const Transformation &amp;xfB, Length totalRadius) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Manifold</type>
      <name>GetManifold</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a191eed2d8b3f745e46af7c6696f68a5c</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>Manifold::Conf</type>
      <name>GetManifoldConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a095c59023434207efeda09c32649d24b</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Mass</type>
      <name>GetMass</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3c355eb58981b97e5901fa7d04052507</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Mass</type>
      <name>GetMass</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad51a22660fa68bff534e3ae5bbcaba38</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae2464e71b10f122808be6b06d1d8071a</anchor>
      <arglist>(const ChainShapeConf &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1a3dff7ec484efe761eb24b7d1a13790</anchor>
      <arglist>(const DiskShapeConf &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1ed2ce9d811c5f30fe273af513dcfb99</anchor>
      <arglist>(const EdgeShapeConf &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac6f6f3f87b9fe23f90e740351c4513e5</anchor>
      <arglist>(const MultiShapeConf &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a69182cba2886716e95849f5a3a71fd8b</anchor>
      <arglist>(const PolygonShapeConf &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a00465050cc83944a3873c9bfe48a7392</anchor>
      <arglist>(const Shape &amp;shape)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a873904ef02cab072a393ef4554c17ea3</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a391db3e534902745c2717862b0a46a21</anchor>
      <arglist>(const World &amp;world, ShapeID id)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad7dc3397566d3b0447d318e67761bbc2</anchor>
      <arglist>(Length r, NonNegative&lt; AreaDensity &gt; density, const Length2 &amp;location)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a32e1a0772998ac59c02ff4b1a7981343</anchor>
      <arglist>(Length r, NonNegative&lt; AreaDensity &gt; density, const Length2 &amp;v0, const Length2 &amp;v1)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7304da106cfaa394b4d0179ded468aa6</anchor>
      <arglist>(Length vertexRadius, NonNegative&lt; AreaDensity &gt; density, Span&lt; const Length2 &gt; vertices)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetMaxForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aba8162d50c28927d87bdf7e29aa8afe0</anchor>
      <arglist>(const FrictionJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Force</type>
      <name>GetMaxForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a27b1c23ab0395c2910137ed55e9e3c9a</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetMaxForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2316866330d122410cad54477dea24c9</anchor>
      <arglist>(const MotorJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetMaxForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a421363e986b87aeb7108fd0b5bca86da</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().maxForce)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetMaxForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5433a140e014287406113e1ce6508dae</anchor>
      <arglist>(const TargetJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DynamicTree::Height</type>
      <name>GetMaxImbalance</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab2389e08997d0d0e0ba03697eec17936</anchor>
      <arglist>(const DynamicTree &amp;tree) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetMaxLength</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad5cf9d398d3e370e806a070fdbb8d685</anchor>
      <arglist>(const RopeJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Force</type>
      <name>GetMaxMotorForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae22198b24d05e7e01620376e409ba207</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetMaxMotorForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad4c6c5934b5a650803d3c9e96f689876</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().maxMotorForce)</arglist>
    </member>
    <member kind="function">
      <type>Torque</type>
      <name>GetMaxMotorTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abf153df98daca101d74e4ee0d4999b65</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetMaxMotorTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a58caf5daa56d1399dfc2006db67dda03</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().maxMotorTorque)</arglist>
    </member>
    <member kind="function">
      <type>Torque</type>
      <name>GetMaxMotorTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a02ad4a3b9d6a550e5c89bd4f524b3035</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Momentum</type>
      <name>GetMaxNormalImpulse</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a07f0d8f5fce9556590d8e7e40289ae33</anchor>
      <arglist>(const ContactImpulsesList &amp;impulses) noexcept</arglist>
    </member>
    <member kind="function">
      <type>SeparationInfo</type>
      <name>GetMaxSeparation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a34f0c915ede8384f426009fe246d2db4</anchor>
      <arglist>(const DistanceProxy &amp;proxy1, const DistanceProxy &amp;proxy2, Length stop=MaxFloat *Meter)</arglist>
    </member>
    <member kind="function">
      <type>SeparationInfo</type>
      <name>GetMaxSeparation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac811729d97305110121c8cc39fd1fe3b</anchor>
      <arglist>(const DistanceProxy &amp;proxy1, const Transformation &amp;xf1, const DistanceProxy &amp;proxy2, const Transformation &amp;xf2)</arglist>
    </member>
    <member kind="function">
      <type>SeparationInfo</type>
      <name>GetMaxSeparation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0326e10522d6ae98b662b2dde03b0720</anchor>
      <arglist>(const DistanceProxy &amp;proxy1, const Transformation &amp;xf1, const DistanceProxy &amp;proxy2, const Transformation &amp;xf2, Length stop)</arglist>
    </member>
    <member kind="function">
      <type>SeparationInfo</type>
      <name>GetMaxSeparation4x4</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8fdfb9e4e2d031acb866ebf0612b6eee</anchor>
      <arglist>(const DistanceProxy &amp;proxy1, const Transformation &amp;xf1, const DistanceProxy &amp;proxy2, const Transformation &amp;xf2)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetMaxTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a00b4cc40afea7be207a08ad7c018f3c1</anchor>
      <arglist>(const FrictionJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Torque</type>
      <name>GetMaxTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a854ade782141a1e4839aabf82962b793</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetMaxTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>addea3c1c41374755038085922785f96d</anchor>
      <arglist>(const MotorJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetMaxTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7e8e865660723c1618ff7ff57bf41a2c</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().maxTorque)</arglist>
    </member>
    <member kind="function">
      <type>Force</type>
      <name>GetMotorForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3e6c752f15d341da441a3b7541bf8791</anchor>
      <arglist>(const World &amp;world, JointID id, Frequency inv_dt)</arglist>
    </member>
    <member kind="function">
      <type>MotorJointConf</type>
      <name>GetMotorJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9030301cdd51e2084c30689dc8ddb6f5</anchor>
      <arglist>(const Joint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>MotorJointConf</type>
      <name>GetMotorJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a46260d9a957fe6cc073f2e484d2f5b9c</anchor>
      <arglist>(const World &amp;world, BodyID bA, BodyID bB)</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetMotorSpeed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afcaf52b432d8610fe7c8059c9f6237a6</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetMotorSpeed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad0b16ddfe432a028cfad31b11cf01e2c</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().motorSpeed)</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetMotorSpeed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a24212189ddc5e89f33e4dd824f6ba2cd</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Torque</type>
      <name>GetMotorTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5771e47bcd401f72f04f8c24c482270b</anchor>
      <arglist>(const Joint &amp;joint, Frequency inv_dt)</arglist>
    </member>
    <member kind="function">
      <type>Torque</type>
      <name>GetMotorTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2eb6880ff8f81a8555c092138e0c6759</anchor>
      <arglist>(const World &amp;world, JointID id, Frequency inv_dt)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetName</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afe0be704277b108db26e28108c610174</anchor>
      <arglist>(Manifold::Type type) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr DynamicTree::Size</type>
      <name>GetNext</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acd3a93c79eb73866acfe12518491c2cd</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetNextIndex</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac7d699f052c62efd80ce28f0190d70af</anchor>
      <arglist>(const ChainShapeConf &amp;shape, ChildCounter index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetNormal</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a505e0ba1aa4e4cdef90f4726d8f8c866</anchor>
      <arglist>(const VelocityConstraint &amp;vc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Momentum</type>
      <name>GetNormalImpulseAtPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a238cff049e361d27dcb889d50ea67613</anchor>
      <arglist>(const VelocityConstraint &amp;vc, VelocityConstraint::size_type index)</arglist>
    </member>
    <member kind="function">
      <type>Momentum2</type>
      <name>GetNormalImpulses</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4145b0ae4d099402770893bffc3ed4aa</anchor>
      <arglist>(const VelocityConstraint &amp;vc)</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>GetNormalized</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5955bf7b1c0cdfa36d11adea236d9af4</anchor>
      <arglist>(const Position &amp;val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Sweep</type>
      <name>GetNormalized</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a09b21383c1a73afea37f11e0ba906a76</anchor>
      <arglist>(Sweep sweep) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Mass</type>
      <name>GetNormalMassAtPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aaf5dd1d8868baa0e0cea2cf19b39cb95</anchor>
      <arglist>(const VelocityConstraint &amp;vc, VelocityConstraint::size_type index)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>GetPerimeter</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ace87984d1541a40a6c850825acb43742</anchor>
      <arglist>(const AABB &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length2</type>
      <name>GetPointDelta</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aec59914613f2974127f04b9eca11ae27</anchor>
      <arglist>(const SimplexEdge &amp;sv) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetPointRelPosA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a68cc03f13897094111403a1ac4a049c8</anchor>
      <arglist>(const VelocityConstraint &amp;vc, VelocityConstraint::size_type index)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetPointRelPosB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6ee37ce310f1b1c648d9839a484c029a</anchor>
      <arglist>(const VelocityConstraint &amp;vc, VelocityConstraint::size_type index)</arglist>
    </member>
    <member kind="function">
      <type>PointStates</type>
      <name>GetPointStates</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae48de2e5ef109c667912e5db7b170d94</anchor>
      <arglist>(const Manifold &amp;manifold1, const Manifold &amp;manifold2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>GetPosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1ee2be09f607ec37050c91dc3a5d0f92</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>GetPosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6b5dbaa10626a6248fa5b6d12c226906</anchor>
      <arglist>(const Position &amp;pos0, const Position &amp;pos1, Real beta) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>GetPosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9fe7fe17864539ef49018ae954c9e8b8</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>GetPosition0</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a295726fcb0ed9f3bd0a8cc3288f5f552</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>GetPosition1</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a77de45b3fab735d0f87a0978a622a9c0</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PrismaticJointConf</type>
      <name>GetPrismaticJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a60b9a9ec9672825ae4fc6a33ff268cbe</anchor>
      <arglist>(const Joint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>PrismaticJointConf</type>
      <name>GetPrismaticJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afff6ba4fcb7fcb7917f12d741ad42452</anchor>
      <arglist>(const World &amp;world, BodyID bA, BodyID bB, const Length2 &amp;anchor, const UnitVec &amp;axis)</arglist>
    </member>
    <member kind="function">
      <type>PositionSolverManifold</type>
      <name>GetPSM</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa9987f7f8471dbe26d486e2602661e78</anchor>
      <arglist>(const Manifold &amp;manifold, Manifold::size_type index, const Transformation &amp;xfA, const Transformation &amp;xfB)</arglist>
    </member>
    <member kind="function">
      <type>PulleyJointConf</type>
      <name>GetPulleyJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4ee7b170b4d490f78974c11f781b4778</anchor>
      <arglist>(const Joint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>PulleyJointConf</type>
      <name>GetPulleyJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4d0694f5aabe00ea59f92e2d0fc0cc7b</anchor>
      <arglist>(const World &amp;world, BodyID bA, BodyID bB, const Length2 &amp;groundA, const Length2 &amp;groundB, const Length2 &amp;anchorA, const Length2 &amp;anchorB)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetRatio</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad6bb4ee45a731f7095f5c052f16e15c0</anchor>
      <arglist>(const GearJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetRatio</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7533e4cb7ceff376ce89ff41eea97265</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetRatio</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a853b627c976acbbe4655600c3701df5d</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().ratio)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetRatio</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3cd8188130775b777b8c23406d7f831a</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetReferenceAngle</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a398794c59f86e6203d67c504e576808e</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetReferenceAngle</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a433bb57f8a2f5ff4048d2c768e3b1bda</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().referenceAngle)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetReferenceAngle</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a044ce59887833c716436be7f7266cc72</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetReflectionMatrix</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8f838d67cae62210ba00d7214a8c5715</anchor>
      <arglist>(const UnitVec &amp;axis)</arglist>
    </member>
    <member kind="function">
      <type>VelocityConstraint::Conf</type>
      <name>GetRegVelocityConstraintConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3be2a456143f7f1db48944c54ece5f7d</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; pmr::StatsResource::Stats &gt;</type>
      <name>GetResourceStats</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae42faf85c15ca7fd83c575ccb30554f4</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Finite&lt; Real &gt;</type>
      <name>GetRestitution</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6727ddfbceb514f2dc7bfe7bebf3fd48</anchor>
      <arglist>(const BaseShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetRestitution</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a73fdd9b13d08d04db4ad170afac115b7</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetRestitution</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acb30a1979153e86f38fea289f09a739a</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetRestitution</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a856b5d93bb4315e256ab0027b15974ce</anchor>
      <arglist>(const World &amp;world, ShapeID id)</arglist>
    </member>
    <member kind="function">
      <type>RevoluteJointConf</type>
      <name>GetRevoluteJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6f970888f175e45d5b45dcf0af24f5ef</anchor>
      <arglist>(const Joint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>RevoluteJointConf</type>
      <name>GetRevoluteJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa558eda7b5c2906a3ff15c486174dd03</anchor>
      <arglist>(const World &amp;world, BodyID bodyA, BodyID bodyB, const Length2 &amp;anchor)</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec</type>
      <name>GetRevPerpendicular</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2e109190d59d6d1a154094fb566547b3</anchor>
      <arglist>(const UnitVec &amp;vector) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RopeJointConf</type>
      <name>GetRopeJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4bcb4898327bdb354f620110c116558e</anchor>
      <arglist>(const Joint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>RotInertia</type>
      <name>GetRotInertia</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4c4c855f042444d0122919f8c1559ccb</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RotInertia</type>
      <name>GetRotInertia</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8cc24a20ec1f33d8e51baf8bc435406a</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetScaledDelta</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9695b1513472b0c245d4f98b97090efd</anchor>
      <arglist>(const Simplex &amp;simplex, Simplex::size_type index)</arglist>
    </member>
    <member kind="function">
      <type>SeparationScenario</type>
      <name>GetSeparationScenario</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0ae59f7bcf03f75dd6aa405683e455b9</anchor>
      <arglist>(IndexPair3 indices, const DistanceProxy &amp;proxyA, const Transformation &amp;xfA, const DistanceProxy &amp;proxyB, const Transformation &amp;xfB)</arglist>
    </member>
    <member kind="function">
      <type>Shape</type>
      <name>GetShape</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acd71793915ccc5c37d3c118ff5745e9e</anchor>
      <arglist>(const World &amp;world, ShapeID id)</arglist>
    </member>
    <member kind="function">
      <type>ShapeID</type>
      <name>GetShapeA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a94a1320811507b6601ff8224e1469c23</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>ShapeID</type>
      <name>GetShapeB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae5df527a800c51b570b382547d06dda4</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>ShapeCounter</type>
      <name>GetShapeCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7fccfcf3a3ce2a40c9b419dc842405e6</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>ShapeCounter</type>
      <name>GetShapeRange</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a917c505a2bf7a77aab1b098e5be801f6</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; ShapeID &gt; &amp;</type>
      <name>GetShapes</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afe762c434a20aa39abb7f121b9d89c03</anchor>
      <arglist>(const AabbTreeWorld &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; ShapeID &gt; &amp;</type>
      <name>GetShapes</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a63b209948a3e0c8c4904f7ff662abfd5</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ShapeID &gt;</type>
      <name>GetShapes</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7feade3e47e5048e8eab9eef13e66fc4</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>ContactID</type>
      <name>GetSoonestContact</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7e8932936bd2f281984a4afacc40e7a1</anchor>
      <arglist>(const Span&lt; const KeyedContactID &gt; &amp;ids, const Span&lt; const Contact &gt; &amp;contacts) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetSubStepping</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aefd48d7d94be6707b5915991eeb10bd4</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>VertexCounter</type>
      <name>GetSupportIndex</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6cfc27f1644f9c4d6da229b5eba07e51</anchor>
      <arglist>(const DistanceProxy &amp;proxy, T dir) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Sweep &amp;</type>
      <name>GetSweep</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a83c03ab97ee5e1a0cdb1a41a62050ccc</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetTangent</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a12eb87f33057fe3f442b0ec676377957</anchor>
      <arglist>(const VelocityConstraint &amp;vc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Momentum</type>
      <name>GetTangentImpulseAtPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0b3e102432766123da35ec35f806d6f8</anchor>
      <arglist>(const VelocityConstraint &amp;vc, VelocityConstraint::size_type index)</arglist>
    </member>
    <member kind="function">
      <type>Momentum2</type>
      <name>GetTangentImpulses</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a998e3c3312725cd900878cf71f2cf6e5</anchor>
      <arglist>(const VelocityConstraint &amp;vc)</arglist>
    </member>
    <member kind="function">
      <type>Mass</type>
      <name>GetTangentMassAtPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4e72bcca6e5c6a3f0386f9fa2127f41d</anchor>
      <arglist>(const VelocityConstraint &amp;vc, VelocityConstraint::size_type index)</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity</type>
      <name>GetTangentSpeed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab468e8fb931cb9871644d49625ab5f8e</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetTarget</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a44e13140e7670e778d7a18229aabcadf</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetTarget</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a643e49fe049c3befd1f928e4d732493c</anchor>
      <arglist>(const TargetJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetTarget</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac6924974a0f657a5a7ef921dfb5b9942</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>TargetJointConf</type>
      <name>GetTargetJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a881239528e40fd0f59f8ef0b6c08994f</anchor>
      <arglist>(const Joint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; UnitIntervalFF&lt; Real &gt; &gt;</type>
      <name>GetToi</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a00955d16b773879aeb7f58194c2401b3</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>TimestepIters</type>
      <name>GetToiCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aeef0047d9c45e36b6db6bbdd0ead0569</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>VelocityConstraint::Conf</type>
      <name>GetToiVelocityConstraintConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad85899bcfb7e549fe5739759da490fad</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ToiOutput</type>
      <name>GetToiViaSat</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1e911fb2a22a14e8bb967551b2084c36</anchor>
      <arglist>(const DistanceProxy &amp;proxyA, const Sweep &amp;sweepA, const DistanceProxy &amp;proxyB, const Sweep &amp;sweepB, const ToiConf &amp;conf=GetDefaultToiConf())</arglist>
    </member>
    <member kind="function">
      <type>Torque</type>
      <name>GetTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a18e2ece8e057b22c240cf681aca400b5</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ContactCounter</type>
      <name>GetTouchingCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a85a86553103a715dd904a4962d4f4403</anchor>
      <arglist>(const World &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>Transformation</type>
      <name>GetTransform0</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8128f59808ffb8ab56cc4d9528422b16</anchor>
      <arglist>(const Sweep &amp;sweep) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Transformation</type>
      <name>GetTransform1</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3047f53ab4e594f414832db427f03d6c</anchor>
      <arglist>(const Sweep &amp;sweep) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Transformation &amp;</type>
      <name>GetTransformation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a798bf0d73d9cdbbaad16af6fd13cfed0</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Transformation</type>
      <name>GetTransformation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4eb1f96a1c7cb27d7e9b07696eaf7413</anchor>
      <arglist>(const BodyConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Transformation</type>
      <name>GetTransformation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1c8db589cd3a6e20401aeeecb6cccf66</anchor>
      <arglist>(const Length2 &amp;ctr, const UnitVec &amp;rot, const Length2 &amp;localCtr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Transformation</type>
      <name>GetTransformation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad4e88b3ed13792435ff7f7fe7bfe087a</anchor>
      <arglist>(const Position &amp;pos, const Length2 &amp;local_ctr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Transformation</type>
      <name>GetTransformation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a07e3239745b17cc4dfac4f26b7f179ba</anchor>
      <arglist>(const Sweep &amp;sweep, const UnitIntervalFF&lt; Real &gt; beta) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Transformation</type>
      <name>GetTransformation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a119217120ee832be062e644e69f81f3f</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>const DynamicTree &amp;</type>
      <name>GetTree</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0ae8db40f173456ea951e5a3425456aa</anchor>
      <arglist>(const World &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>BodyType</type>
      <name>GetType</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a421d2110404320428fd02b2d0b70a062</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TypeID</type>
      <name>GetType</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a14ed64f17ea64f51257b1adca6e385a7</anchor>
      <arglist>(const Joint &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TypeID</type>
      <name>GetType</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a175816624556bf32f41f1c3b248495de</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TypeID</type>
      <name>GetType</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a702a1c0c8e91f2563cac325a9220334d</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyType</type>
      <name>GetType</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a07b6032c68b1c5dee9a154bce7ada73b</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>TypeID</type>
      <name>GetType</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae6ab0847fbe19102000cc9ae17903e9b</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>TypeID</type>
      <name>GetType</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a615141263d66d791ee852f4bca85b21f</anchor>
      <arglist>(const World &amp;world, ShapeID id)</arglist>
    </member>
    <member kind="function">
      <type>TypeID</type>
      <name>GetTypeAC</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8a2849276bed6c543c9bf97fb64b1e8e</anchor>
      <arglist>(const GearJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TypeID</type>
      <name>GetTypeBD</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a143f9f615a7da516c00f7767717d6bb6</anchor>
      <arglist>(const GearJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Time</type>
      <name>GetUnderActiveTime</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1192c89bb1512e70b1fb878c1b29a452</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetUnitVector</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6bd25518f48c10a51a89b63e4d5103bb</anchor>
      <arglist>(const Vector2&lt; T &gt; &amp;value, const UnitVec &amp;fallback=UnitVec::GetDefaultFallback()) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ShapeCounter</type>
      <name>GetUsedShapesCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a60f56df55fce1755d74eb063f79cac2a</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vec2</type>
      <name>GetVec2</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5341790c7d8beeb73ac576c1af2c4189</anchor>
      <arglist>(const UnitVec &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Velocity</type>
      <name>GetVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a13ee26a73a0987dbb7c825539590719d</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Velocity</type>
      <name>GetVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4949a38cc04a59f2d32d5d3e1347d21f</anchor>
      <arglist>(const Body &amp;body, Time h) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Velocity</type>
      <name>GetVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a145ecfa14ac3d146d7f442bf2d539663</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity</type>
      <name>GetVelocityBiasAtPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad29f5f0f1292fa56396d8ed8cbbd1817</anchor>
      <arglist>(const VelocityConstraint &amp;vc, VelocityConstraint::size_type index)</arglist>
    </member>
    <member kind="function">
      <type>VertexCounter</type>
      <name>GetVertexCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad164dccb6b5dcf68fbcd9e7918f17eec</anchor>
      <arglist>(const Shape &amp;shape, ChildCounter index)</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a066d3e1ae90fa58624f7f07f62eecaf3</anchor>
      <arglist>(const ChainShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7ad00f041fe71267d7454ac6d8434078</anchor>
      <arglist>(const ChainShapeConf &amp;arg, ChildCounter) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aea6cd8aa55bd2f15a1e04e6ac08f46fe</anchor>
      <arglist>(const DiskShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a94a41528ae369c2a77c31e7280b9cb22</anchor>
      <arglist>(const DiskShapeConf &amp;arg, ChildCounter) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab855c314cdb69e2906ed3474f127f332</anchor>
      <arglist>(const DistanceProxy &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a179e4a68b183074106cc54a88b46a68f</anchor>
      <arglist>(const EdgeShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a04c3bbe42dd7c5fd9e5c758ed67ddab2</anchor>
      <arglist>(const EdgeShapeConf &amp;arg, ChildCounter) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a520079de7cf100a20a169fc57b77b5c0</anchor>
      <arglist>(const MultiShapeConf &amp;arg, ChildCounter index)</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a17a8a83f5b2b14e4615b24934ef3642f</anchor>
      <arglist>(const PolygonShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a559385a58b96c078031f5d7c0b29330f</anchor>
      <arglist>(const PolygonShapeConf &amp;arg, ChildCounter) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2b940ecf05bfbf8ae3910cacbc7e2264</anchor>
      <arglist>(const Shape &amp;shape, ChildCounter idx)</arglist>
    </member>
    <member kind="function">
      <type>Interval&lt; Positive&lt; Length &gt; &gt;</type>
      <name>GetVertexRadiusInterval</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af51eca4a1cbd1b9b0d6024218f52db0f</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>WeldJointConf</type>
      <name>GetWeldJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8617e3ffbdfb19c9387220bd54ab2816</anchor>
      <arglist>(const Joint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>WeldJointConf</type>
      <name>GetWeldJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ada0462adccf3be8ff8fd1a5912515cce</anchor>
      <arglist>(const World &amp;world, BodyID bodyA, BodyID bodyB, const Length2 &amp;anchor=Length2{})</arglist>
    </member>
    <member kind="function">
      <type>WheelJointConf</type>
      <name>GetWheelJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a09bee9b2ea071b0d56b092a3c59f08f7</anchor>
      <arglist>(const Joint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>WheelJointConf</type>
      <name>GetWheelJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a794344cb9f0c8c53b362170279bbc505</anchor>
      <arglist>(const World &amp;world, BodyID bodyA, BodyID bodyB, const Length2 &amp;anchor, const UnitVec &amp;axis=UnitVec::GetRight())</arglist>
    </member>
    <member kind="function">
      <type>PairLength2</type>
      <name>GetWitnessPoints</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af23dfb97190555d582956bfe1b7624fb</anchor>
      <arglist>(const Simplex &amp;simplex) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetWorldCenter</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1d38f917cdf715b50222fe39fe1a22c3</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetWorldCenter</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a512537a11ee3092c6e4b92b75775d791</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>GetWorldIndex</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a996363f01d1e5541587e6fb1548a946e</anchor>
      <arglist>(const World &amp;, BodyID id) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JointCounter</type>
      <name>GetWorldIndex</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae1afa531bb6d75a36ba55b80b695b300</anchor>
      <arglist>(const World &amp;, JointID id) noexcept</arglist>
    </member>
    <member kind="function">
      <type>WorldManifold</type>
      <name>GetWorldManifold</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0b45ff683dc29efc7eab1ada41caba66</anchor>
      <arglist>(const Manifold &amp;manifold, const Transformation &amp;xfA, Length radiusA, const Transformation &amp;xfB, Length radiusB)</arglist>
    </member>
    <member kind="function">
      <type>WorldManifold</type>
      <name>GetWorldManifold</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8dade39cd10c24856a8ee7b6e7265d18</anchor>
      <arglist>(const World &amp;world, const Contact &amp;contact, const Manifold &amp;manifold)</arglist>
    </member>
    <member kind="function">
      <type>WorldManifold</type>
      <name>GetWorldManifold</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a070b99ac8d041f13a9db2c18adbf5dc5</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetWorldPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5eba7c0bd135eb4e0445063929639961</anchor>
      <arglist>(const Body &amp;body, const Length2 &amp;localPoint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetWorldPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2c7b440f52475ea8487d8f14898f232a</anchor>
      <arglist>(const World &amp;world, BodyID id, const Length2 &amp;localPoint)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetWorldVector</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4bf32a6c0d4ac08ef187ac68d14886dc</anchor>
      <arglist>(const Body &amp;body, const Length2 &amp;localVector) noexcept</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetWorldVector</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abd3a5456b15768fa846cb40d6b32a259</anchor>
      <arglist>(const Body &amp;body, const UnitVec &amp;localVector) noexcept</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetWorldVector</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>accaf3b08287d4bc8e5e5849d5b7278a8</anchor>
      <arglist>(const World &amp;world, BodyID id, const UnitVec &amp;localVector)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetX</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adab7becf1945a89fa8459e8c2853478a</anchor>
      <arglist>(const UnitVec &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec</type>
      <name>GetXAxis</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a60d775fd7f677ce835dc086bf372bd95</anchor>
      <arglist>(const UnitVec &amp;rot) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetY</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a23717005f46c309d31dfbb9f0e1b9daf</anchor>
      <arglist>(const UnitVec &amp;value) -&gt; decltype(get&lt; 1 &gt;(value))</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec</type>
      <name>GetYAxis</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a88ce203fb25392d44f80d66a588ff3a0</anchor>
      <arglist>(const UnitVec &amp;rot) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasValidToi</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7b93e5c7f12212cbd45e9cb755e11461</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afdd19d3dd63a8ae8f391d9229f1bcb89</anchor>
      <arglist>(DistanceJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad1b04b7a4e640bfbdaffe5612a3dc3fe</anchor>
      <arglist>(FrictionJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5df864a583d38b96f8a13c9015f64e8e</anchor>
      <arglist>(GearJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abdb7b4eba61112b4be50f70532793303</anchor>
      <arglist>(Joint &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a06f9133e78c1d318a5a4ecca1b5c5dad</anchor>
      <arglist>(MotorJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acae3917a1b537360c522418d93203b26</anchor>
      <arglist>(PrismaticJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab29fb30c103527ebbe3f2a945dc3edee</anchor>
      <arglist>(PulleyJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aeeaeb2eb144e3351d62abf4ecf4d0644</anchor>
      <arglist>(RevoluteJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac30996c0f0d0484ca8c69728ec22a73f</anchor>
      <arglist>(RopeJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a99ba8add0250f7782622a97b1a2ee209</anchor>
      <arglist>(TargetJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3beba31fb3519b89d540849dbaf91150</anchor>
      <arglist>(WeldJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3af85da0bf2e50418b415a24e9fcde17</anchor>
      <arglist>(WheelJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec</type>
      <name>InverseRotate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0aaf238b97bd4c64a0be19bc2c4a98b1</anchor>
      <arglist>(const UnitVec &amp;vector, const UnitVec &amp;angle) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>InverseRotate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af6d5a93cce69057cdeffc538005fa4d4</anchor>
      <arglist>(const Vector2&lt; T &gt; &amp;vector, const UnitVec &amp;angle) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length2</type>
      <name>InverseTransform</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1fe3bd742eb5fc09e94e8a49084f144e</anchor>
      <arglist>(const Length2 &amp;v, const Transformation &amp;xfm) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAccelerable</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad1f05a05c6dd9eb2a1564cc10032f16c</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAccelerable</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aad7fe73cb5cb6fa0d4751b75321c74a4</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAwake</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a139df81757401545db36e6fc6f030d75</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAwake</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abed580c38bd00b1d1fd4630a6ced6455</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAwake</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8b61e7ea48b0c07aa9bfa9417087c78e</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsBranch</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7d5284fb35640d9a05b6b5346933c82a</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab930c47cedb9dc4fe0d6e178e7651d54</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af9d96732535ab2bf54f893a5f303aa1f</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a17fc8450e2c49bba0f07be62c7cefbc0</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab67913b4948e1dcee7cba4f1014d8920</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsFixedRotation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a91940e85abf08596f625348315452e3d</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsFixedRotation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a093a89e483a95856f09ffc708c01da40</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsImpenetrable</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8c4170f49badbf1881f371cfb5f466a7</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsImpenetrable</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1feac67043e5c5bc7b03346152b54a18</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsLeaf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aae0b95c4e9a195b7c6c5d64c8664ab35</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLimitEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac76a4085860445c97e2f43f36cf11d3e</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>IsLimitEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7a5f74579fa335b23d637780808b59c2</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().enableLimit)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLimitEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af1ad82bc9fdafe702099906752c6d0a1</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLocked</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a33795886ef465e14b67184086d935eca</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLooped</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a435d2dc5439f69826450d3bac84b35c5</anchor>
      <arglist>(const ChainShapeConf &amp;shape) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMassDataDirty</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af3540987384e881f23e28f5a9c710ae1</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMassDataDirty</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a165e32c9934fc211bf795177e6d4a1b8</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMotorEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a18da863a4c6a0440fd8a634268dc8c8a</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>IsMotorEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8552180d0e15cf5c5c6046faf683035e</anchor>
      <arglist>(const T &amp;conf) noexcept -&gt; decltype(std::declval&lt; T &gt;().enableMotor)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMotorEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afa3bc1d0e5bdc859c162ea16f2430a1f</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsSensor</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4705f71d8ddb1ceae9eb2a23b9874fd6</anchor>
      <arglist>(const BaseShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSensor</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a758f0ba36affe9a3aba066285cf710d7</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSensor</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a665355c07d233360cb9193c3c2784c40</anchor>
      <arglist>(const World &amp;world, ShapeID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSleepingAllowed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1cde4db895479e9ddd34c70425811699</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSleepingAllowed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a010d3e8e537c49f185c1d7596c4f5d95</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSpeedable</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a81c7a4d7696e9cb367f241afdbbe2727</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSpeedable</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6a717b9d04c75204f920ffdd2a328b65</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsStepComplete</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6b939d4c41803a36fb4e725c725be6ec</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsTouching</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a50f925cd4a62e0bdad087cba2561efba</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsUnderActive</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9af102f967f219132acef68f51888f5c</anchor>
      <arglist>(const Velocity &amp;velocity, const LinearVelocity &amp;linSleepTol, const AngularVelocity &amp;angSleepTol) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsUnused</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3ad7a716e1b2bc2677ebf9ec441401f4</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Transformation</type>
      <name>Mul</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2ee12b6e0f384806e2dbb27a90a6cd7f</anchor>
      <arglist>(const Transformation &amp;A, const Transformation &amp;B) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Transformation</type>
      <name>MulT</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad9854545199d1abb2a6521895bf63831</anchor>
      <arglist>(const Transformation &amp;A, const Transformation &amp;B) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>NeedsFiltering</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a06bdf092ec9098a9c0277832ba0ddbc2</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>NeedsUpdating</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a09cc9e0e457c86495cee4d26e3370bc5</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4442cd95fcdc4e62463d3e294fc7a303</anchor>
      <arglist>(const Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad57faa5642b6526d57f2f066cb74c3a9</anchor>
      <arglist>(const Body &amp;lhs, const Body &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a50e186f203ad0d5f7c851058802978fd</anchor>
      <arglist>(const BodyConf &amp;lhs, const BodyConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae54dffb8788232936ee10689ab0296cd</anchor>
      <arglist>(const DiskShapeConf &amp;lhs, const DiskShapeConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae758c3a2894c69fe0dc10e62d6b50c16</anchor>
      <arglist>(const DistanceJointConf &amp;lhs, const DistanceJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1c65d94d98dea8f68c3dd32e90b888bb</anchor>
      <arglist>(const DistanceProxy &amp;lhs, const DistanceProxy &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6db183fd84981136da63e62d3a767d9c</anchor>
      <arglist>(const EdgeShapeConf &amp;lhs, const EdgeShapeConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a45ea8b96cd57e4d21f2191d6a832f814</anchor>
      <arglist>(const FrictionJointConf &amp;lhs, const FrictionJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae908913a1c7e55a8431fa73b79c03ff5</anchor>
      <arglist>(const GearJointConf &amp;lhs, const GearJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8ad81220811f446279361ecc24a27be8</anchor>
      <arglist>(const GearJointConf::PrismaticData &amp;lhs, const GearJointConf::PrismaticData &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a24b0f175ed2d20f9b7282990b2f30333</anchor>
      <arglist>(const GearJointConf::RevoluteData &amp;lhs, const GearJointConf::RevoluteData &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a195b40b377eb99929c3033c990c43d00</anchor>
      <arglist>(const Joint &amp;lhs, const Joint &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5f506fbf9ce307b2322e83b0b547f599</anchor>
      <arglist>(const Manifold &amp;lhs, const Manifold &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a32ec204c7b30df76f2c52667740c6b87</anchor>
      <arglist>(const Manifold::Point &amp;lhs, const Manifold::Point &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adb73921dd33efab19ea30f62abca8839</anchor>
      <arglist>(const MotorJointConf &amp;lhs, const MotorJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abad1906bf9f008e1519d6e2ce95c792b</anchor>
      <arglist>(const MultiShapeConf &amp;lhs, const MultiShapeConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a920e4ebf45a599f01060d56b280adc74</anchor>
      <arglist>(const Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adeb8e9c029b86567348620b30e693bc7</anchor>
      <arglist>(const PrismaticJointConf &amp;lhs, const PrismaticJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3ae2ced4c2ea4e92078eb0f6277007e9</anchor>
      <arglist>(const PulleyJointConf &amp;lhs, const PulleyJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1f1939c47dfdcf306663d56d87a9afd2</anchor>
      <arglist>(const RevoluteJointConf &amp;lhs, const RevoluteJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af88a635d83573cbd0ec11f17f4526778</anchor>
      <arglist>(const RopeJointConf &amp;lhs, const RopeJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a531eec1b236203c64a6618a44c94eb59</anchor>
      <arglist>(const Shape &amp;lhs, const Shape &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af4e2940f5d62d022276ae74c8b8eab7c</anchor>
      <arglist>(const SimplexEdge &amp;lhs, const SimplexEdge &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af0f08a3cbef074f5f78272c205967888</anchor>
      <arglist>(const Sweep &amp;lhs, const Sweep &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2264176e0da3eefdb8e592dd1f931355</anchor>
      <arglist>(const TargetJointConf &amp;lhs, const TargetJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac100cc2e77031bd058367006ddd2ebe1</anchor>
      <arglist>(const Transformation &amp;lhs, const Transformation &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a42c4215f528a7440dd54829e0ade57d8</anchor>
      <arglist>(const UnitVec &amp;a, const UnitVec &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a50aa6c2021393ced745d056c34b3bc07</anchor>
      <arglist>(const Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3c84131d3c779d955813d70eface1bd9</anchor>
      <arglist>(const WeldJointConf &amp;lhs, const WeldJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a378a180b24295fc6b58fa5385792b26b</anchor>
      <arglist>(const WheelJointConf &amp;lhs, const WheelJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a47e9c59a6cb338c3efe5596b516acb6e</anchor>
      <arglist>(const World &amp;lhs, const World &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a69bd254b1dac7999ffb0d0a8cb73f64e</anchor>
      <arglist>(const Acceleration &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector2&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a82ae08d9c525e8510b8d7261fcf0d1c2</anchor>
      <arglist>(const playrho::detail::Checked&lt; T, U, NoExcept &gt; &amp;s, const UnitVec &amp;u) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Position</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af31710833f717897050fa1e9981ebb95</anchor>
      <arglist>(const Position &amp;pos, const Real scalar)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a19e063d352181298469b751c99cad684</anchor>
      <arglist>(const Real lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a285d8d7bdef58a4c7210516b1060beef</anchor>
      <arglist>(const Real lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Position</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab6cbd956958f8a1cd6726ad4e0cf2e43</anchor>
      <arglist>(const Real scalar, const Position &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector2&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abbaeb9fbb737e31245d2496c0828a90c</anchor>
      <arglist>(const T &amp;s, const UnitVec &amp;u) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector2&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5beaf709e090543a768ca7b40713e1b2</anchor>
      <arglist>(const UnitVec &amp;u, const playrho::detail::Checked&lt; T, U, NoExcept &gt; &amp;s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector2&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a34807856e636bd697d186de1071be30b</anchor>
      <arglist>(const UnitVec &amp;u, const T &amp;s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5d52ed09352bfd1dd80dc6b138a19f55</anchor>
      <arglist>(const Velocity &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration &amp;</type>
      <name>operator*=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a381123f80f2c54ad37576e703eeb68a4</anchor>
      <arglist>(Acceleration &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity &amp;</type>
      <name>operator*=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7083f8551c8713a94d38f614a7ebc3b5</anchor>
      <arglist>(Velocity &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af1ae3bcd38f85eedaab9cfb290de1ba2</anchor>
      <arglist>(const Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a33f1fdc4c279009a88f064ca1dd3ff59</anchor>
      <arglist>(const Acceleration &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Position</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adc427276624c31301f4d2c3c202497d8</anchor>
      <arglist>(const Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Position</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8e75f2489f1991855f31108826613c6f</anchor>
      <arglist>(const Position &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>PositionSolution</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7f07199b005b40c692586f0a11602a81</anchor>
      <arglist>(const PositionSolution &amp;lhs, const PositionSolution &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7608d9d4b5ffcc571a17bacf9faa411e</anchor>
      <arglist>(const Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acf1a262569fd1d300ef359200d514d6a</anchor>
      <arglist>(const Velocity &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration &amp;</type>
      <name>operator+=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aae7afb9157770b54dde00ee05cc3f586</anchor>
      <arglist>(Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Position &amp;</type>
      <name>operator+=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adad2c25d2579c31f2091a842e17fa2c3</anchor>
      <arglist>(Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity &amp;</type>
      <name>operator+=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3be07a7714bf76d380af60fa8ef623d3</anchor>
      <arglist>(Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af4082a55e3d2a0600855a5b626f19f41</anchor>
      <arglist>(const Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af2f8aaffda4163a6733ef5aff24414e0</anchor>
      <arglist>(const Acceleration &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Position</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab4a62d780748e8a22c6fe64234f6d121</anchor>
      <arglist>(const Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Position</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acf4c47e7d8cba3a76dcdc9fa4b79d242</anchor>
      <arglist>(const Position &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>PositionSolution</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afd7544c1dace2373fc283a0a64c29068</anchor>
      <arglist>(const PositionSolution &amp;lhs, const PositionSolution &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab2f3370383aaf9a8443cacef7841c5a0</anchor>
      <arglist>(const Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab9cbc07fb71929600cae9ef2f69e35ac</anchor>
      <arglist>(const Velocity &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration &amp;</type>
      <name>operator-=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a66e903f6e66753963a1bd82295759ddb</anchor>
      <arglist>(Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Position &amp;</type>
      <name>operator-=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3f8a057d7496ce6e5c72debd2361de5c</anchor>
      <arglist>(Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity &amp;</type>
      <name>operator-=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad2577d7502ee2442b81d0e6570c00d6f</anchor>
      <arglist>(Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration</type>
      <name>operator/</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9b895b5b826bc5349fbd007bd6e9683b</anchor>
      <arglist>(const Acceleration &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vec2</type>
      <name>operator/</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4986f4a662d45c82d02992bcea6334d6</anchor>
      <arglist>(const UnitVec &amp;u, const UnitVec::value_type s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity</type>
      <name>operator/</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aec5f4967a3c7e58ccf6c9fb4aafa90a1</anchor>
      <arglist>(const Velocity &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration &amp;</type>
      <name>operator/=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a80f242d8a02779e3c73ebb380a7476c1</anchor>
      <arglist>(Acceleration &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity &amp;</type>
      <name>operator/=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afafe86dc357999a8933a71f73dcce818</anchor>
      <arglist>(Velocity &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4f49bd881fdc6418565529a072b91d54</anchor>
      <arglist>(::std::ostream &amp;os, const UnitVec &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4e08ccbbdba321adad44c940d95c52fb</anchor>
      <arglist>(const Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a015695f69f7b80674591cc605b8a1a76</anchor>
      <arglist>(const Body &amp;lhs, const Body &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0106f5ff990330d8e8afcd906cefa75a</anchor>
      <arglist>(const BodyConf &amp;lhs, const BodyConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a85d3074f854445b9ec458b0d6ba6aa80</anchor>
      <arglist>(const DiskShapeConf &amp;lhs, const DiskShapeConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a35315499cf67026c7d8d7613477023cd</anchor>
      <arglist>(const DistanceJointConf &amp;lhs, const DistanceJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a00facc6af4e8bc7a365979d757be7315</anchor>
      <arglist>(const DistanceProxy &amp;lhs, const DistanceProxy &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af86100a70f9250d51c3c76a103edb8e4</anchor>
      <arglist>(const EdgeShapeConf &amp;lhs, const EdgeShapeConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a194fd21d14647aedddc772f5871295ae</anchor>
      <arglist>(const FrictionJointConf &amp;lhs, const FrictionJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abf8d004c9a5fca4f9d757e31164db5f0</anchor>
      <arglist>(const GearJointConf &amp;lhs, const GearJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa482162774c71ee7192c4844799def17</anchor>
      <arglist>(const GearJointConf::PrismaticData &amp;lhs, const GearJointConf::PrismaticData &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab7f36c40b8f0777a2f745dc5078300d3</anchor>
      <arglist>(const GearJointConf::RevoluteData &amp;lhs, const GearJointConf::RevoluteData &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa22000a029fd294dace37815f6141a83</anchor>
      <arglist>(const Joint &amp;lhs, const Joint &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6fc49d51f874cf1b745f4c2a9ccb8a38</anchor>
      <arglist>(const Manifold &amp;lhs, const Manifold &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a42b73256bfc88f351e0c3a9490aeb1ab</anchor>
      <arglist>(const Manifold::Point &amp;lhs, const Manifold::Point &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1b19f08799b5719ae26c054a7d6f2da5</anchor>
      <arglist>(const MotorJointConf &amp;lhs, const MotorJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ada69d48759a92fa8273e98b7e0bb69c5</anchor>
      <arglist>(const MultiShapeConf &amp;lhs, const MultiShapeConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5e0589100dc43e1301d6b8b945ccb37c</anchor>
      <arglist>(const Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af90207a13837614365ee1b1f331ccb34</anchor>
      <arglist>(const PrismaticJointConf &amp;lhs, const PrismaticJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4085412245af82c9b4fec44a41132496</anchor>
      <arglist>(const PulleyJointConf &amp;lhs, const PulleyJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a79d7e1a69ae37d6ab92378ebac7fb2c7</anchor>
      <arglist>(const RevoluteJointConf &amp;lhs, const RevoluteJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0d485fc6df03e3052d96da519f35585d</anchor>
      <arglist>(const RopeJointConf &amp;lhs, const RopeJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a511146553469b7cac8c01113002718e6</anchor>
      <arglist>(const Shape &amp;lhs, const Shape &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa893e8793d5802697a38d73e4939834d</anchor>
      <arglist>(const SimplexEdge &amp;lhs, const SimplexEdge &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af317b3462727e3832e11d157b7e0b7b4</anchor>
      <arglist>(const Sweep &amp;lhs, const Sweep &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a29e3173ac86b6e5186a733708f38a42d</anchor>
      <arglist>(const TargetJointConf &amp;lhs, const TargetJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9f366fc4f9a298d3dded719b628a9933</anchor>
      <arglist>(const Transformation &amp;lhs, const Transformation &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adfa134c88da67d566b3881a9792afd5d</anchor>
      <arglist>(const UnitVec &amp;a, const UnitVec &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afe4f2bcd98877c4562293dfe2dbcfa8b</anchor>
      <arglist>(const Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ade363e29ce1af1766680bde06e5a8d5c</anchor>
      <arglist>(const WeldJointConf &amp;lhs, const WeldJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a749db75cd678bd280e02f2d382bbce2a</anchor>
      <arglist>(const WheelJointConf &amp;lhs, const WheelJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa6dff1837844ca0252c35b5c5b47b0b8</anchor>
      <arglist>(const World &amp;lhs, const World &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Query</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a52ca8acb99e3c3591d13ca912282470e</anchor>
      <arglist>(const DynamicTree &amp;tree, const AABB &amp;aabb, const DynamicTreeSizeCB &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Query</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac6aa2ced68dfade6cf384f097fe8f55b</anchor>
      <arglist>(const DynamicTree &amp;tree, const AABB &amp;aabb, QueryShapeCallback callback)</arglist>
    </member>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>ga425e9dc1c0e263bf7484ef6ef2cde86b</anchor>
      <arglist>(const ::playrho::detail::AABB&lt; 2 &gt; &amp;aabb, const RayCastInput &amp;input) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>ga3dad3478ded2886d14ed536a6c97cfb1</anchor>
      <arglist>(const DistanceProxy &amp;proxy, const RayCastInput &amp;input, const Transformation &amp;transform) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gadf0ec62e1852e3bc9b017eae4a5616b4</anchor>
      <arglist>(const DynamicTree &amp;tree, RayCastInput input, const DynamicTreeRayCastCB &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>ga6ed6eafc72f707833ee7079bf62487ad</anchor>
      <arglist>(const Shape &amp;shape, ChildCounter childIndex, const RayCastInput &amp;input, const Transformation &amp;transform) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gaf241136582e7ccf95db82be1184c9f16</anchor>
      <arglist>(const World &amp;world, const RayCastInput &amp;input, const ShapeRayCastCB &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gaa2b257514c434e44a5ea5839c959bea9</anchor>
      <arglist>(Length radius, const Length2 &amp;location, const RayCastInput &amp;input) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr DynamicTreeBranchData</type>
      <name>ReplaceChild</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0d01bb024654763423607eb506ec1575</anchor>
      <arglist>(DynamicTreeBranchData bd, DynamicTree::Size oldChild, DynamicTree::Size newChild)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetFriction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a74979affb98f9307f121fd8f4f63910d</anchor>
      <arglist>(World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abcc0106fc9f817be879a12eacf51d7c4</anchor>
      <arglist>(World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetRestitution</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af23360c9130e209a06ae0c111f274876</anchor>
      <arglist>(World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Rotate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0a415ca6071bd581ccda6627333c917b</anchor>
      <arglist>(ChainShapeConf &amp;arg, const UnitVec &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec</type>
      <name>Rotate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a91765420d707cd5cadc2feac5a8d6c03</anchor>
      <arglist>(const UnitVec &amp;vector, const UnitVec &amp;angle) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Rotate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1f1ba31bf2edbc4d39df42026c472e03</anchor>
      <arglist>(const Vector2&lt; T &gt; &amp;vector, const UnitVec &amp;angle) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Rotate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab55d49ec6abe0409adbd4845ec5f822a</anchor>
      <arglist>(DiskShapeConf &amp;arg, const UnitVec &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Rotate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a97a691c0265c0aced8cbc9c2082bc4f8</anchor>
      <arglist>(EdgeShapeConf &amp;arg, const UnitVec &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Rotate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae2eca4703501e9eb91cc3abc40cf2ee8</anchor>
      <arglist>(MultiShapeConf &amp;arg, const UnitVec &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Rotate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acd56c5552483657111ca8422eaf2eb1a</anchor>
      <arglist>(PolygonShapeConf &amp;arg, const UnitVec &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Rotate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab0b1aceac8f4dcb138ebc97c17ea3e88</anchor>
      <arglist>(Shape &amp;shape, const UnitVec &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Rotate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a072fb192e919d06301143d085a9659c9</anchor>
      <arglist>(World &amp;world, ShapeID id, const UnitVec &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RotateAboutLocalPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab025fcf3b6ec8d854b6733553ab761eb</anchor>
      <arglist>(World &amp;world, BodyID id, Angle amount, const Length2 &amp;localPoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RotateAboutWorldPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a864d5a471e5f374e2c64597d4f365905</anchor>
      <arglist>(World &amp;world, BodyID id, Angle amount, const Length2 &amp;worldPoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Scale</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2a9f6506a87ab7964f3ae2a98618ac2d</anchor>
      <arglist>(ChainShapeConf &amp;arg, const Vec2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Scale</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab6e1a39dabfd7b259e0dadb20d2e7157</anchor>
      <arglist>(DiskShapeConf &amp;arg, const Vec2 &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Scale</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab0f760b347a80523244f147a3b484f33</anchor>
      <arglist>(EdgeShapeConf &amp;arg, const Vec2 &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Scale</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a77b65c2f92a455f0dc39eb260125586b</anchor>
      <arglist>(MultiShapeConf &amp;arg, const Vec2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Scale</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5f04cbafbf3303265bee6b767c688f49</anchor>
      <arglist>(PolygonShapeConf &amp;arg, const Vec2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Scale</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac37a9ab36e66240e0a2af9ce84848b13</anchor>
      <arglist>(Shape &amp;shape, const Vec2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Scale</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a11fd8847943d6b15a493828bc6431484</anchor>
      <arglist>(World &amp;world, ShapeID id, const Vec2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9f3ae0c3965083b637c95a58b20bb340</anchor>
      <arglist>(JointConf &amp;def, const Joint &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5907db10db49a1e6d7f8b8bc59dfa8e8</anchor>
      <arglist>(Body &amp;body, AngularAcceleration value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a005d180107a41f007d4c495abdebd06f</anchor>
      <arglist>(Body &amp;body, const Acceleration &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aaab26b27ef305db5fd455a7bfb3206f0</anchor>
      <arglist>(Body &amp;body, const LinearAcceleration2 &amp;linear, AngularAcceleration angular) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9455cc8ec4240be80b646f9430abe1e4</anchor>
      <arglist>(Body &amp;body, const LinearAcceleration2 &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa54209d9914dc6b28199d6a5b61ec65d</anchor>
      <arglist>(World &amp;world, BodyID id, AngularAcceleration value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a90c725278eed08fcbd5be9b3c84fccda</anchor>
      <arglist>(World &amp;world, BodyID id, const Acceleration &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4081d3673c39c222a55160ebdc927e70</anchor>
      <arglist>(World &amp;world, BodyID id, const LinearAcceleration2 &amp;linear, AngularAcceleration angular)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9cd44a40a868bd6d0310d2d3c2dc459a</anchor>
      <arglist>(World &amp;world, BodyID id, const LinearAcceleration2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAccelerations</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1edccefc8d2c0098aba63be3b3867bd8</anchor>
      <arglist>(World &amp;world, const Acceleration &amp;acceleration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAccelerations</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8d9b3c878827b84738f2f11fa0c63382</anchor>
      <arglist>(World &amp;world, const LinearAcceleration2 &amp;acceleration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAccelerations</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae23446b68b07e35cff2b642c5573acfe</anchor>
      <arglist>(World &amp;world, F fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngle</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a804f65cef5ba33970fabd8af9d40cb93</anchor>
      <arglist>(Body &amp;body, Angle value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngle</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3c4cbd32001fd7d3f41a355e826c0943</anchor>
      <arglist>(World &amp;world, BodyID id, Angle value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngularDamping</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a344a9753e8cd6fb046a57e82d2206d60</anchor>
      <arglist>(Body &amp;body, NonNegative&lt; Frequency &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngularDamping</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad49fab241f156095a3f67bec13b77e13</anchor>
      <arglist>(World &amp;world, BodyID id, NonNegative&lt; Frequency &gt; angularDamping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngularLimits</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad34b889b15ded07a92afbe8791d4db88</anchor>
      <arglist>(Joint &amp;object, Angle lower, Angle upper)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetAngularLimits</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae5635ff98f64bcbf6a31cba670913afc</anchor>
      <arglist>(RevoluteJointConf &amp;object, Angle lower, Angle upper) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngularLimits</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0f759f40426050ec965e5bfc4a124f0a</anchor>
      <arglist>(World &amp;world, JointID id, Angle lower, Angle upper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngularOffset</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac5846586fb9cfc8bd797bb53df9834dc</anchor>
      <arglist>(Joint &amp;object, Angle value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetAngularOffset</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab185fa3719432e9026a44e602279f8d1</anchor>
      <arglist>(MotorJointConf &amp;object, Angle value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngularOffset</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aefa369cb629e680306047672c26caf70</anchor>
      <arglist>(World &amp;world, JointID id, Angle value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAwake</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a60201ffd45e0d810ff5d4fb90fd0bc4b</anchor>
      <arglist>(Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAwake</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a518c4ace07672ab660d3b06d19119e9b</anchor>
      <arglist>(World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAwake</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2abab9a7a8ac13206bd48bd50b5deea9</anchor>
      <arglist>(World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAwake</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2673279eda44acaa8a7c66c24d7c2a3b</anchor>
      <arglist>(World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBeginContactListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a880cac829986da4266dc3dfc494087b3</anchor>
      <arglist>(World &amp;world, ContactFunction listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBody</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aed0353c7d828c09741e9cef5afcdac27</anchor>
      <arglist>(World &amp;world, BodyID id, const Body &amp;body)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetContact</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a41e7dc075e9d5c06758a13220a9770aa</anchor>
      <arglist>(World &amp;world, ContactID id, const Contact &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetCorrectionFactor</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5f373e05ffdf359e2f995aec4e5489c0</anchor>
      <arglist>(MotorJointConf &amp;object, Real value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetDampingRatio</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1f9a4e32b7ca3e69527dca3e2793e1ba</anchor>
      <arglist>(DistanceJointConf &amp;object, Real value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetDampingRatio</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a93ccadc0666446729427c72fbdac4ad4</anchor>
      <arglist>(TargetJointConf &amp;object, Real value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetDampingRatio</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a58977ddd709fa03560c34fcb92949f42</anchor>
      <arglist>(WeldJointConf &amp;object, Real value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetDampingRatio</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae7f1530d1c2de2df859dfae6eb23d141</anchor>
      <arglist>(WheelJointConf &amp;object, Real value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDensity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a568348f551f30b873f93160146ff8640</anchor>
      <arglist>(BaseShapeConf &amp;arg, NonNegative&lt; AreaDensity &gt; value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDensity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7dd9e271fe95b29479d8c848a752e617</anchor>
      <arglist>(Shape &amp;shape, NonNegative&lt; AreaDensity &gt; value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDensity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0c0e7d5ddd3b96d71e388bda5249aa5f</anchor>
      <arglist>(World &amp;world, ShapeID id, NonNegative&lt; AreaDensity &gt; value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDetachListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab2f27f6d0cf885a8aeedff93c7a89e74</anchor>
      <arglist>(World &amp;world, BodyShapeFunction listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abfae76ec0240c61e85bed996119d130e</anchor>
      <arglist>(Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a88826de33b9ad1fe847120458fe3a836</anchor>
      <arglist>(Body &amp;body, bool value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2931ac0be705378c3756ae6bace58719</anchor>
      <arglist>(World &amp;world, BodyID id, bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6697fe2c98475f859b797a8a2532d8f1</anchor>
      <arglist>(World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae6e78139be823080998e2cf046601977</anchor>
      <arglist>(World &amp;world, ContactID id, bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEndContactListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acc2df0eb14c5759fff8c99dcfc2f724c</anchor>
      <arglist>(World &amp;world, ContactFunction listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFilter</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a92586c39f279062c63dd0a9ff0a00c3c</anchor>
      <arglist>(BaseShapeConf &amp;arg, Filter value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFilter</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac3ffdf7e6c840eb894becc90325bf147</anchor>
      <arglist>(Shape &amp;shape, Filter value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFilterData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af219909208e61cf0efe0317d56c34b8c</anchor>
      <arglist>(World &amp;world, ShapeID id, const Filter &amp;filter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFixedRotation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a546de4c838854e1d2bee174a4cf264e5</anchor>
      <arglist>(Body &amp;body, bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFixedRotation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6547268e83b5a3997d4a0547a0d666a4</anchor>
      <arglist>(World &amp;world, BodyID id, bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a39b7e0d452a14fb2845064c471f90e95</anchor>
      <arglist>(World &amp;world, BodyID id, const Force2 &amp;force, const Length2 &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetFrequency</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae0cc3578e6f724a74d45e9cfc02d412d</anchor>
      <arglist>(DistanceJointConf &amp;object, NonNegative&lt; Frequency &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFrequency</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a368baf65b3d36a4b2a7f29299b0d6982</anchor>
      <arglist>(Joint &amp;object, Frequency value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetFrequency</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac9971494480e00e4c3fa99cba906339e</anchor>
      <arglist>(TargetJointConf &amp;object, NonNegative&lt; Frequency &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetFrequency</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acafa97d5359a1791ded4ccbc48a0cfaa</anchor>
      <arglist>(WeldJointConf &amp;object, NonNegative&lt; Frequency &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetFrequency</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adcd79908a087d2c25629aa14895bf49c</anchor>
      <arglist>(WheelJointConf &amp;object, NonNegative&lt; Frequency &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFrequency</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a678331653d08b6fd5ccc921bfc67889a</anchor>
      <arglist>(World &amp;world, JointID id, Frequency value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFriction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa6aced677219438736a3a79c4470b87c</anchor>
      <arglist>(BaseShapeConf &amp;arg, NonNegative&lt; Real &gt; value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFriction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a66a134067ed894aa7c399662d92a0726</anchor>
      <arglist>(Shape &amp;shape, NonNegative&lt; Real &gt; value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFriction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9079208b96f79157ed5bb706c6fc670b</anchor>
      <arglist>(World &amp;world, ContactID id, NonNegative&lt; Real &gt; friction)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFriction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9d128e6893b3c795aa7f60da0b44ad29</anchor>
      <arglist>(World &amp;world, ShapeID id, NonNegative&lt; Real &gt; value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetImpenetrable</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aaf57ca63655e6eaeac4d9e65a8e7be4a</anchor>
      <arglist>(Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetImpenetrable</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a029210d59bda7ebb8bdf23aab8c51097</anchor>
      <arglist>(World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetImpenetrable</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adb8a3d49c66601ec5953d19714aa9759</anchor>
      <arglist>(World &amp;world, BodyID id, bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetJoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afbfa66410905c15a49d7bb2994ce0485</anchor>
      <arglist>(World &amp;world, JointID id, const Joint &amp;def)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetJoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac07ce291e8ce59c988ee4bafca890059</anchor>
      <arglist>(World &amp;world, JointID id, const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetJointDestructionListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a182e738c16bf84f7579af7be2cd26628</anchor>
      <arglist>(World &amp;world, JointFunction listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetLength</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abf156111fddecc740c68f7dbcdaf7ba0</anchor>
      <arglist>(DistanceJointConf &amp;object, Length value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLinearDamping</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9901b5b3ddb898a60f216007adace0de</anchor>
      <arglist>(Body &amp;body, NonNegative&lt; Frequency &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLinearDamping</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a903d8c1171dcef65e4d1577feba1d94d</anchor>
      <arglist>(World &amp;world, BodyID id, NonNegative&lt; Frequency &gt; linearDamping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLinearLimits</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1ad9f455de397189e1747350e4796bfe</anchor>
      <arglist>(Joint &amp;object, Length lower, Length upper)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetLinearLimits</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab3e9cb2455b78052970feaabe8cf3b1b</anchor>
      <arglist>(PrismaticJointConf &amp;conf, Length lower, Length upper) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLinearOffset</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a61dc8df8fff81c55b461bcb2b7fd4c15</anchor>
      <arglist>(Joint &amp;object, const Length2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetLinearOffset</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4ad5fe5276577c9a253a776fd803a2c2</anchor>
      <arglist>(MotorJointConf &amp;object, const Length2 &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLinearOffset</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a622b1c82bfde56c1f78cc63f91d74471</anchor>
      <arglist>(World &amp;world, JointID id, const Length2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLocalCenter</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac4ef7260bbcab43966bde5b1e8b8a284</anchor>
      <arglist>(Sweep &amp;sweep, const Length2 &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLocation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5e7d71d5a95963adfa0be724685f0c72</anchor>
      <arglist>(Body &amp;body, const Length2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLocation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4e28d0cd6793d71a03ec47ded844e29c</anchor>
      <arglist>(World &amp;world, BodyID id, const Length2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMass</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af26ae548ac842dfc9c1da2230b224870</anchor>
      <arglist>(Body &amp;body, Mass mass)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af8092e3e0fa0591f0941aca0829f2c60</anchor>
      <arglist>(World &amp;world, BodyID id, const MassData &amp;massData)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetMaxForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afa6324a364b2b89057a749a5032ff720</anchor>
      <arglist>(FrictionJointConf &amp;object, NonNegative&lt; Force &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetMaxForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a309119086874940563a7e3a4b91c9cc2</anchor>
      <arglist>(MotorJointConf &amp;object, NonNegative&lt; Force &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetMaxForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a26488bda71d5ddb9df78975b2f37cb03</anchor>
      <arglist>(TargetJointConf &amp;object, NonNegative&lt; Force &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetMaxLength</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aeeffd09d05131a961e0d3bd87f94c889</anchor>
      <arglist>(RopeJointConf &amp;object, Length value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMaxMotorForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8dbcfd41105f2beefde7afc17ca5ab17</anchor>
      <arglist>(Joint &amp;object, Force value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetMaxMotorForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a354d65b6b0cac0916b4788e0ce1a5470</anchor>
      <arglist>(PrismaticJointConf &amp;object, Force value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMaxMotorTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8a8d8821c7f1a5c1f675e0491db02af3</anchor>
      <arglist>(Joint &amp;object, Torque value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetMaxMotorTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac5613ecd1ba9cd47dcfa45191c137dbd</anchor>
      <arglist>(RevoluteJointConf &amp;object, Torque value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetMaxMotorTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7f82a394a8c0f5a020f8647ce0a34d39</anchor>
      <arglist>(WheelJointConf &amp;object, Torque value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMaxMotorTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a97d4ebbad7ada4326fa315f5b1a6862b</anchor>
      <arglist>(World &amp;world, JointID id, Torque value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetMaxTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acfc7a47e907d3aaf399a7919896f3571</anchor>
      <arglist>(FrictionJointConf &amp;object, NonNegative&lt; Torque &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetMaxTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a740454a9bdb11a84bfc34bad37908030</anchor>
      <arglist>(MotorJointConf &amp;object, NonNegative&lt; Torque &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMotorSpeed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8e04b8a0612ba4699c19ce24e6c88ba1</anchor>
      <arglist>(Joint &amp;object, AngularVelocity value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetMotorSpeed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a191b26d3b6bdd1d6419350d33c9d77b0</anchor>
      <arglist>(T &amp;conf, AngularVelocity v) noexcept -&gt; decltype(std::declval&lt; T &gt;().UseMotorSpeed(AngularVelocity{}))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMotorSpeed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a80007981c3345c9dba4b22d67a1c8c18</anchor>
      <arglist>(World &amp;world, JointID id, AngularVelocity value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNormalImpulseAtPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae7f7d7dbe5e33cfbb08cdb9190ea8f8b</anchor>
      <arglist>(VelocityConstraint &amp;vc, VelocityConstraint::size_type index, Momentum value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNormalImpulses</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a68f6d6cfb548c58e6fa86f9efb4013d9</anchor>
      <arglist>(VelocityConstraint &amp;vc, const Momentum2 &amp;impulses)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPosition0</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acedc779293d6c9cacd1cb15ae0fe9600</anchor>
      <arglist>(Body &amp;body, const Position &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPosition1</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aaefd53390bb21fa5e3b17f59ad320c4e</anchor>
      <arglist>(Body &amp;body, const Position &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPostSolveContactListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a18585a140d9ad815d0127e90308218ff</anchor>
      <arglist>(World &amp;world, ContactImpulsesFunction listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPreSolveContactListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aee2466f745bdaf3aa6ce438864d8742b</anchor>
      <arglist>(World &amp;world, ContactManifoldFunction listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetRatio</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0561c70cfa90284d65bba0a3f59cb62a</anchor>
      <arglist>(GearJointConf &amp;object, Real value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetRatio</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abe7de7c24d8d14d4dd2a34e2ecc386b3</anchor>
      <arglist>(PulleyJointConf &amp;object, Real value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRestitution</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0a2e260faa2ee0dd76e3a1bd013870e5</anchor>
      <arglist>(BaseShapeConf &amp;arg, Real value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRestitution</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a50475f29c614ca0678d3d6d8e67f2ef8</anchor>
      <arglist>(Shape &amp;shape, Real value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRestitution</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aecff580894139a75b0d1d9ffe7370414</anchor>
      <arglist>(World &amp;world, ContactID id, Real restitution)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRestitution</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2124c9985cb2f7f9d3f1604f7cfd3c32</anchor>
      <arglist>(World &amp;world, ShapeID id, Real value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRotInertia</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6c126330f4880228831cbacb1fb81df6</anchor>
      <arglist>(Body &amp;body, RotInertia value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSensor</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4aa17670b395d1f9fab126570a2d4f6e</anchor>
      <arglist>(BaseShapeConf &amp;arg, bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSensor</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae3786c04d20cbf2f9b06d2a1d07032d8</anchor>
      <arglist>(Shape &amp;shape, bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSensor</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab4709c553f0899dc0734f212d3ef9e18</anchor>
      <arglist>(World &amp;world, ShapeID id, bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetShape</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae1860c7a7f4a5f1fb3095412d25fd12b</anchor>
      <arglist>(World &amp;world, ShapeID, const Shape &amp;def)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetShapeDestructionListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2dc5e1d5b3122d2c37959573eda21c30</anchor>
      <arglist>(World &amp;world, ShapeFunction listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSleepingAllowed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a54802d32ec837cdf5669744c20dca3df</anchor>
      <arglist>(Body &amp;body, bool value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSleepingAllowed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a551a2c1a64dc294bb29e73a5ec08eedf</anchor>
      <arglist>(World &amp;world, BodyID, bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSubStepping</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af9f3ac5da2b016acb04d3e73419b08d9</anchor>
      <arglist>(World &amp;world, bool flag) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSweep</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1f30cb6266cb2f950ea5fdb5aae58d1b</anchor>
      <arglist>(Body &amp;body, const Sweep &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTangentImpulseAtPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3736992d15f28f25f8e02fc17e5e3e27</anchor>
      <arglist>(VelocityConstraint &amp;vc, VelocityConstraint::size_type index, Momentum value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTangentImpulses</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab1312ca66a29887b4c3cc4b2a3f2dc8b</anchor>
      <arglist>(VelocityConstraint &amp;vc, const Momentum2 &amp;impulses)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTangentSpeed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae06d14b7ecfae56d31f305e3a96c9c99</anchor>
      <arglist>(World &amp;world, ContactID id, LinearVelocity value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTarget</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a76c03d6b21297cb6e1249df1624bfe93</anchor>
      <arglist>(Joint &amp;object, const Length2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetTarget</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af3c4565c108e29e4d157795b643ba1b6</anchor>
      <arglist>(TargetJointConf &amp;object, const Length2 &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTarget</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a00ca74c362e50abf92c9bf3f2e05ae83</anchor>
      <arglist>(World &amp;world, JointID id, const Length2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a15fe0eff376d7e62b9bb5247e066a5b8</anchor>
      <arglist>(World &amp;world, BodyID id, Torque torque)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTransform</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a46058bb93704b80b5e41bab8c0b5e66a</anchor>
      <arglist>(World &amp;world, BodyID id, const Length2 &amp;location, Angle angle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTransformation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afb699dee312da633427a8adc403cd88b</anchor>
      <arglist>(Body &amp;body, const Transformation &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTransformation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5e7c46bb395656fb280d69e75fccfd64</anchor>
      <arglist>(World &amp;world, BodyID id, const Transformation &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetType</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2a12afea1828cb69ef94cbfa86018069</anchor>
      <arglist>(Body &amp;body, BodyType value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetType</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6f7e900839bdbf4d1092e58c9d85c8a0</anchor>
      <arglist>(World &amp;world, BodyID id, BodyType value, bool resetMassData=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adc771e5dfb30f44b8b71f15cd9e5f950</anchor>
      <arglist>(Body &amp;body, AngularVelocity value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6a3b4ab8ab7e96a8cac1cb64a9c401c6</anchor>
      <arglist>(Body &amp;body, const LinearVelocity2 &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adddd763be5890fad18f5a3dd9d2b4d38</anchor>
      <arglist>(Body &amp;body, const Velocity &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa46b52291d03b0e117252dff120f1f05</anchor>
      <arglist>(World &amp;world, BodyID id, AngularVelocity value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a958659c4d6119f29fb735f45a91b58bc</anchor>
      <arglist>(World &amp;world, BodyID id, const LinearVelocity2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4a9fbc9171174e9e5e38bc1a6d59cacc</anchor>
      <arglist>(World &amp;world, BodyID id, const Velocity &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afcd643dc7d76848a7bed68d4bc7e2d61</anchor>
      <arglist>(ChainShapeConf &amp;arg, ChildCounter, NonNegative&lt; Length &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a42d5595b353659b2a4d22a91071195d7</anchor>
      <arglist>(ChainShapeConf &amp;arg, NonNegative&lt; Length &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6d0915a211ce1e854caedf3492270a43</anchor>
      <arglist>(DiskShapeConf &amp;arg, ChildCounter, NonNegative&lt; Length &gt; value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae5a9c3b8927fc259f587ebb97b038f87</anchor>
      <arglist>(EdgeShapeConf &amp;arg, ChildCounter, NonNegative&lt; Length &gt; value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aeea9cafe29765dde4bc7e6510dfc79ac</anchor>
      <arglist>(EdgeShapeConf &amp;arg, NonNegative&lt; Length &gt; value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2db7d1b9465c7f6180c42183d2ec4d5e</anchor>
      <arglist>(MultiShapeConf &amp;arg, ChildCounter index, NonNegative&lt; Length &gt; value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7d0ce0b3d57d4aa443a9f0486f38fdc7</anchor>
      <arglist>(PolygonShapeConf &amp;arg, ChildCounter, NonNegative&lt; Length &gt; value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a40ed160d5f82a8186d96914e4139781f</anchor>
      <arglist>(PolygonShapeConf &amp;arg, NonNegative&lt; Length &gt; value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aee078d02eba554f515d90f765673ce21</anchor>
      <arglist>(Shape &amp;shape, ChildCounter idx, NonNegative&lt; Length &gt; value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1086ac024e4e129259c3c1b4f7c5a6c4</anchor>
      <arglist>(DistanceJointConf &amp;, Length2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a110d0d6a089b3b8883e1f319984774fb</anchor>
      <arglist>(FrictionJointConf &amp;, Length2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aef5af6f1b7a6ac1842df096a201e17d4</anchor>
      <arglist>(GearJointConf &amp;, const Length2 &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7c9990d4de6d53c687778acaf5504f37</anchor>
      <arglist>(Joint &amp;object, const Length2 &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7b1aabf4a880937e88e2e3af6386e77f</anchor>
      <arglist>(MotorJointConf &amp;, const Length2 &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afd69a0ec99e9a354fff052aeb7deefc9</anchor>
      <arglist>(PrismaticJointConf &amp;, const Length2 &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6491ae989f42c8614f9ce5211621ad36</anchor>
      <arglist>(PulleyJointConf &amp;object, const Length2 &amp;newOrigin) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af7ebe3d8362ba3517d73e536888ca270</anchor>
      <arglist>(RevoluteJointConf &amp;, const Length2 &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad7f4d500e1470889c5896aefbbc2f2b2</anchor>
      <arglist>(RopeJointConf &amp;, const Length2 &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9d14d5505620acfa85582ea26fa733eb</anchor>
      <arglist>(TargetJointConf &amp;object, const Length2 &amp;newOrigin)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aeda6621d8761f8343b4b1ed7046d7387</anchor>
      <arglist>(WeldJointConf &amp;, const Length2 &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af9f2e8564393a81a357767951bf5a80b</anchor>
      <arglist>(WheelJointConf &amp;, const Length2 &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a00500c9a4303825cdcbaa80fa78000f6</anchor>
      <arglist>(World &amp;world, const Length2 &amp;newOrigin)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a984dd54058bf81e66883369711224eef</anchor>
      <arglist>(World &amp;world, JointID id, const Length2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ShouldCollide</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a252601c955ff120821c067c7fd9ebf6c</anchor>
      <arglist>(const Shape &amp;a, const Shape &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0f207924edd9511c1d56c03933928fa8</anchor>
      <arglist>(const DynamicTree &amp;tree) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a46c211c4530a6a472eddfb02840dd87a</anchor>
      <arglist>(const DistanceJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a810edf8bc34e06730ecfb35ec58d1eb7</anchor>
      <arglist>(const FrictionJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af7494f501244609b3b9e0deeee80e28d</anchor>
      <arglist>(const GearJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adc5da0c25548d4f2090b44a16ca55dee</anchor>
      <arglist>(const Joint &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3f7c5115b8ff1c2d24d6e9fd771b08d0</anchor>
      <arglist>(const MotorJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a12567507e75af75aaffa3e83bffcd7a1</anchor>
      <arglist>(const PrismaticJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a94f2c321061e7e2fc469ca131f53667e</anchor>
      <arglist>(const PulleyJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6585c2b02389656769b96ed15380c8b2</anchor>
      <arglist>(const RevoluteJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aae101ea7dfa846ac20307fcd44877614</anchor>
      <arglist>(const RopeJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac6a35a91f26dd7abc9fa09dd1792f677</anchor>
      <arglist>(const TargetJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3d4a5b24405938d56f73ad48a3acd8ad</anchor>
      <arglist>(const WeldJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5c228c1e8031955681fbdac786112a40</anchor>
      <arglist>(const WheelJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0f2ad4417adb6c9f316a0debd1c7785a</anchor>
      <arglist>(DistanceJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa4c803913d2f6a3ee31e06060f65883f</anchor>
      <arglist>(FrictionJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a06642a41105d91e429c8a6c52311713c</anchor>
      <arglist>(GearJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aaf4bab6b065375066bdef90be8384af0</anchor>
      <arglist>(Joint &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3145c7419ce09acb3cc104fa76aa7815</anchor>
      <arglist>(MotorJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7a180e50dd8e1ddb37389794a8ebcaa8</anchor>
      <arglist>(PrismaticJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a76aae4606d9668f08836bbd9072ecb7f</anchor>
      <arglist>(PulleyJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab7a0db9aab1e9070a17a8e664f277bf4</anchor>
      <arglist>(RevoluteJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3c4430c9f2c7e3a8a05652fb51c04898</anchor>
      <arglist>(RopeJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4427e1dc0fa606538d154d1eaadc3791</anchor>
      <arglist>(TargetJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a19fb7bbc791d835cf7d611d8e736dc46</anchor>
      <arglist>(WeldJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6b64392b83cc7874dd884cf6f8bd6375</anchor>
      <arglist>(WheelJointConf &amp;object, const Span&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
    <member kind="function">
      <type>StepStats</type>
      <name>Step</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a360c1123ecc81b089d4f5b1a579e3501</anchor>
      <arglist>(World &amp;world, const StepConf &amp;conf=StepConf{})</arglist>
    </member>
    <member kind="function">
      <type>StepStats</type>
      <name>Step</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1cd60871c106267bad097bca5e4a069f</anchor>
      <arglist>(World &amp;world, Time delta, TimestepIters velocityIterations=StepConf::DefaultRegVelocityIters, TimestepIters positionIterations=StepConf::DefaultRegPositionIters)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a69bff32e0251d31f1ab3613f2f8f4459</anchor>
      <arglist>(DynamicTree &amp;lhs, DynamicTree &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Area</type>
      <name>TestOverlap</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad5a1ff6589dc30ed3f9f7ee881f17bb2</anchor>
      <arglist>(const DistanceProxy &amp;proxyA, const Transformation &amp;xfA, const DistanceProxy &amp;proxyB, const Transformation &amp;xfB, DistanceConf conf=DistanceConf{})</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestOverlap</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a905424c61ac9933179b91eb12ac0d537</anchor>
      <arglist>(const DynamicTree &amp;tree, DynamicTree::Size leafIdA, DynamicTree::Size leafIdB) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestPoint</name>
      <anchorfile>group__TestPointGroup.html</anchorfile>
      <anchor>ga6307be53a55224b578a3122d40d6e0f1</anchor>
      <arglist>(const DistanceProxy &amp;proxy, const Length2 &amp;point) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestPoint</name>
      <anchorfile>group__TestPointGroup.html</anchorfile>
      <anchor>ga1e3631fa4bdf10ca60c8f52e8d49762e</anchor>
      <arglist>(const Shape &amp;shape, const Length2 &amp;point) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestPoint</name>
      <anchorfile>group__TestPointGroup.html</anchorfile>
      <anchor>ga01b5749ce9597dbf099b3aa15259c9b9</anchor>
      <arglist>(const World &amp;world, BodyID bodyId, ShapeID shapeId, const Length2 &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length2</type>
      <name>Transform</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a707ad4b4a0259ae05a5b3d722fafc74c</anchor>
      <arglist>(const Length2 &amp;v, const Transformation &amp;xfm) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transform</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8a6138547e9f6220a96e67364432f43a</anchor>
      <arglist>(PolygonShapeConf &amp;arg, const Mat22 &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Translate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6c6b074765640b44214ed1ac90ee4970</anchor>
      <arglist>(ChainShapeConf &amp;arg, const Length2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Translate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adb20d2f87c3b175ff5b6267d30a4b4d8</anchor>
      <arglist>(DiskShapeConf &amp;arg, const Length2 &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Translate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6bc49b3c1070721b695448e85bb8de52</anchor>
      <arglist>(EdgeShapeConf &amp;arg, const Length2 &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Translate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a82e629d0f812ce569968cf20183e0c06</anchor>
      <arglist>(MultiShapeConf &amp;arg, const Length2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Translate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae5deab5b9989a6f467a44720d2bf4000</anchor>
      <arglist>(PolygonShapeConf &amp;arg, const Length2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Translate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abc9efda4c138189178045d93806cbfbc</anchor>
      <arglist>(Shape &amp;shape, const Length2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Translate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a64472e1b31d714f95510a56e134e1c84</anchor>
      <arglist>(World &amp;world, ShapeID id, const Length2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>TypeCast</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af04a40472f1b7576171f3132305ce7a2</anchor>
      <arglist>(const Joint &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>std::add_pointer_t&lt; std::add_const_t&lt; T &gt; &gt;</type>
      <name>TypeCast</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a697bc4e18553f5207dd96db40817a664</anchor>
      <arglist>(const Joint *value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>TypeCast</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2552f9d7b9b8d2c5cf4b5ef71140b709</anchor>
      <arglist>(const Shape &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>std::add_pointer_t&lt; std::add_const_t&lt; T &gt; &gt;</type>
      <name>TypeCast</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a732fa5d1da2c5d3292bdbcfaab4f971d</anchor>
      <arglist>(const Shape *value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>TypeCast</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7493a5895010c14c51c60b3a0a62b0c4</anchor>
      <arglist>(const World &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>std::add_pointer_t&lt; std::add_const_t&lt; T &gt; &gt;</type>
      <name>TypeCast</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a243e8f538484555fb01e735363bd1c3f</anchor>
      <arglist>(const World *value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>TypeCast</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3a5b4ab06d5e078ef5aa2e67b56c5dcc</anchor>
      <arglist>(Joint &amp;&amp;value)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>TypeCast</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac91cb4dc6cbce2a3d54364794b1f1887</anchor>
      <arglist>(Joint &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>std::add_pointer_t&lt; T &gt;</type>
      <name>TypeCast</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa592a3a7994d2f355a6d2a2235f24c60</anchor>
      <arglist>(Joint *value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>TypeCast</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a144d9b00180e9b914d070c7a8fc0a186</anchor>
      <arglist>(World &amp;&amp;value)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>TypeCast</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a188e9f5b3bcd077a6e2ee611cc0b5693</anchor>
      <arglist>(World &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>std::add_pointer_t&lt; T &gt;</type>
      <name>TypeCast</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a41f03a4347ea33b9f5cb8469155e2f93</anchor>
      <arglist>(World *value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Unawaken</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abdfbff06306e4ecb71f6d4b2136eea7c</anchor>
      <arglist>(Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetAwake</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afce7db62d828a84a94e8c6222d9111a6</anchor>
      <arglist>(Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetAwake</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aad1b782ca7b1ff3909ed10de206a2b67</anchor>
      <arglist>(World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5f8f4bd2d2daa7bbd38dbe9b0919f08e</anchor>
      <arglist>(Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6102d5afed1fb068ed3e46ef6f8cc1e9</anchor>
      <arglist>(World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetImpenetrable</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2ba4e5cbd12444be971a3ef0a09e9931</anchor>
      <arglist>(Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetImpenetrable</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afc1e2d3de61b7fd4f3f458df7d70ffcf</anchor>
      <arglist>(World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Validate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0254e96c6b1df87a80cf44dc29fc2017</anchor>
      <arglist>(const Span&lt; const Length2 &gt; &amp;verts)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ValidateMetrics</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a22c9cd17bd9080414ab77b1d3e433dca</anchor>
      <arglist>(const DynamicTree &amp;tree, DynamicTree::Size index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ValidateStructure</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ababba0a1b926e9aa793afe44044f204b</anchor>
      <arglist>(const DynamicTree &amp;tree, DynamicTree::Size index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetShapeDestructionListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a59900969bcf9d8419fa8f122118844aa</anchor>
      <arglist>(AabbTreeWorld &amp;world, ShapeFunction listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDetachListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a54e878b6146c7c2bb50e7bd73a95c217</anchor>
      <arglist>(AabbTreeWorld &amp;world, BodyShapeFunction listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetJointDestructionListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7c1863dc243955e1955e519c01a0c59a</anchor>
      <arglist>(AabbTreeWorld &amp;world, JointFunction listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBeginContactListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af91536aa88e244f3956b70736dfbbc12</anchor>
      <arglist>(AabbTreeWorld &amp;world, ContactFunction listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEndContactListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2ef32850c1173ac570c8eaa586a6653c</anchor>
      <arglist>(AabbTreeWorld &amp;world, ContactFunction listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPreSolveContactListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af7733aac4d120107b96ef887303e4fbf</anchor>
      <arglist>(AabbTreeWorld &amp;world, ContactManifoldFunction listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPostSolveContactListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a64227632d49eb8e331902edb22999b58</anchor>
      <arglist>(AabbTreeWorld &amp;world, ContactImpulsesFunction listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abf71b232c9e1851d6149bc0ba4e5867b</anchor>
      <arglist>(const AabbTreeWorld &amp;lhs, const AabbTreeWorld &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3b4f6e28eb03d5efe900c149745a275c</anchor>
      <arglist>(const AabbTreeWorld &amp;lhs, const AabbTreeWorld &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; pmr::StatsResource::Stats &gt;</type>
      <name>GetResourceStats</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aff84d6881d841e255e77330984080008</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a652406794226e2ebe8a0a9c7cf2d98ea</anchor>
      <arglist>(AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>StepStats</type>
      <name>Step</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af03fb141f6d983e01e4799b62c9e3b07</anchor>
      <arglist>(AabbTreeWorld &amp;world, const StepConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsStepComplete</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aac86950fdee2a34e82718966246905a3</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetSubStepping</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af8856e4e147c88bcacefa6b63aa750cd</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSubStepping</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7b8d4d16ed5f043b13407de3cd8f11f4</anchor>
      <arglist>(AabbTreeWorld &amp;world, bool flag) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const DynamicTree &amp;</type>
      <name>GetTree</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a906e04c52b759610040707fef9ad58b0</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLocked</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af876b6037e657c9123c89cc057dae338</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4602fbbc1af40386700118e5ddda8b6a</anchor>
      <arglist>(AabbTreeWorld &amp;world, const Length2 &amp;newOrigin)</arglist>
    </member>
    <member kind="function">
      <type>Interval&lt; Positive&lt; Length &gt; &gt;</type>
      <name>GetVertexRadiusInterval</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa5bd2b2d4ff4f88eef1db5f754dfa7c2</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Frequency</type>
      <name>GetInvDeltaTime</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a32f875c95aaec6c2e7a5737e00738e0f</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const ProxyIDs &amp;</type>
      <name>GetProxies</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa688d6514c8709849281db9d93448a93</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const BodyShapeIDs &amp;</type>
      <name>GetFixturesForProxies</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af5a39fd26cc21a25452046df1c4c1b08</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>GetBodyRange</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae97a6f878c88ff1c0609582303945bd2</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const BodyIDs &amp;</type>
      <name>GetBodies</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4c12d1fb1dda1f84e19d43cb9abfbdd6</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const BodyIDs &amp;</type>
      <name>GetBodiesForProxies</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a02732814de45bab260fe1a91e1fb05c0</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>CreateBody</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a352ef727632169c252a59d648808822f</anchor>
      <arglist>(AabbTreeWorld &amp;world, Body body=Body{})</arglist>
    </member>
    <member kind="function">
      <type>const Body &amp;</type>
      <name>GetBody</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aaa29799a42054beffb9328eb8c651ed1</anchor>
      <arglist>(const AabbTreeWorld &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBody</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a20cdd89db66f857c4799c090880bd5b4</anchor>
      <arglist>(AabbTreeWorld &amp;world, BodyID id, Body value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Destroy</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7df9661feac023ea0e4cbe6369943352</anchor>
      <arglist>(AabbTreeWorld &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsDestroyed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a420fd33ad8ad006f01422746b89cc507</anchor>
      <arglist>(const AabbTreeWorld &amp;world, BodyID id) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const ProxyIDs &amp;</type>
      <name>GetProxies</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3694df2092406746a5e71113ee6487f1</anchor>
      <arglist>(const AabbTreeWorld &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>const BodyContactIDs &amp;</type>
      <name>GetContacts</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7b9fd7f3e9d7a0f8ff73d5818cf0d1f4</anchor>
      <arglist>(const AabbTreeWorld &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>const BodyJointIDs &amp;</type>
      <name>GetJoints</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abaaa273bdf2585781176266c6be413a6</anchor>
      <arglist>(const AabbTreeWorld &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>JointCounter</type>
      <name>GetJointRange</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adfede6c462c7ebd2f3d75ec2878bbb73</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const JointIDs &amp;</type>
      <name>GetJoints</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a04675e3f7536245a0ca7fad3f4bb0b27</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JointID</type>
      <name>CreateJoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad08795abe5eee5183189ff9901ab410a</anchor>
      <arglist>(AabbTreeWorld &amp;world, Joint def)</arglist>
    </member>
    <member kind="function">
      <type>const Joint &amp;</type>
      <name>GetJoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6372e003c4984f0c0319884f812f2dd7</anchor>
      <arglist>(const AabbTreeWorld &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetJoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae2bf839e74417fc9845d648c90f5b1cc</anchor>
      <arglist>(AabbTreeWorld &amp;world, JointID id, Joint def)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Destroy</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acc9f0d8549658a5f76cc03ac8a78df14</anchor>
      <arglist>(AabbTreeWorld &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsDestroyed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a24478dcc8d764767fae7067be9dcc6d4</anchor>
      <arglist>(const AabbTreeWorld &amp;world, JointID id) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ShapeCounter</type>
      <name>GetShapeRange</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a61d7f65f10afdad013c11d866292ad12</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ShapeID</type>
      <name>CreateShape</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5063d35172bec75d73944cc1c52009ed</anchor>
      <arglist>(AabbTreeWorld &amp;world, Shape def)</arglist>
    </member>
    <member kind="function">
      <type>const Shape &amp;</type>
      <name>GetShape</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9e29376addbe168c363097e82eb796f0</anchor>
      <arglist>(const AabbTreeWorld &amp;world, ShapeID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetShape</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a089e703b548a6b5f8b02ceb661a40a1d</anchor>
      <arglist>(AabbTreeWorld &amp;world, ShapeID id, Shape def)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Destroy</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7896b447c00a9a33828fead594cb9df4</anchor>
      <arglist>(AabbTreeWorld &amp;world, ShapeID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsDestroyed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae36d58fc98aeafd62c67ef3106e0e4a3</anchor>
      <arglist>(const AabbTreeWorld &amp;world, ShapeID id) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ContactCounter</type>
      <name>GetContactRange</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1e9f16b0b9ca81d3852d99bd3bf7ba94</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>KeyedContactIDs</type>
      <name>GetContacts</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab42cd5eaac7f55f5fc952be4188a1fc5</anchor>
      <arglist>(const AabbTreeWorld &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>const Contact &amp;</type>
      <name>GetContact</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab77e4986f15b40a9e31429c3f6be3b27</anchor>
      <arglist>(const AabbTreeWorld &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetContact</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a986132f0e473e4da3dfcd1b5ec1eb608</anchor>
      <arglist>(AabbTreeWorld &amp;world, ContactID id, Contact value)</arglist>
    </member>
    <member kind="function">
      <type>const Manifold &amp;</type>
      <name>GetManifold</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4744f578a96c67e8929c84c7b32e27e7</anchor>
      <arglist>(const AabbTreeWorld &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsDestroyed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a410fda5a1c75561497f4184d9e6d0d15</anchor>
      <arglist>(const AabbTreeWorld &amp;world, ContactID id) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>EarthlyGravity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ababb5cdb48a1960a30aed40859075dee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>InvalidAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1fd86bad0e3f157fe6f76cb9ba093f2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>IsValidJointTypeV</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa4fa3329c284acdaec3757e7b96f25ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Transform_identity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac330e66ae1b4cbbfd851406256b18972</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetShapeDestructionListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a59900969bcf9d8419fa8f122118844aa</anchor>
      <arglist>(AabbTreeWorld &amp;world, ShapeFunction listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDetachListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a54e878b6146c7c2bb50e7bd73a95c217</anchor>
      <arglist>(AabbTreeWorld &amp;world, BodyShapeFunction listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetJointDestructionListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7c1863dc243955e1955e519c01a0c59a</anchor>
      <arglist>(AabbTreeWorld &amp;world, JointFunction listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBeginContactListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af91536aa88e244f3956b70736dfbbc12</anchor>
      <arglist>(AabbTreeWorld &amp;world, ContactFunction listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEndContactListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2ef32850c1173ac570c8eaa586a6653c</anchor>
      <arglist>(AabbTreeWorld &amp;world, ContactFunction listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPreSolveContactListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af7733aac4d120107b96ef887303e4fbf</anchor>
      <arglist>(AabbTreeWorld &amp;world, ContactManifoldFunction listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPostSolveContactListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a64227632d49eb8e331902edb22999b58</anchor>
      <arglist>(AabbTreeWorld &amp;world, ContactImpulsesFunction listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abf71b232c9e1851d6149bc0ba4e5867b</anchor>
      <arglist>(const AabbTreeWorld &amp;lhs, const AabbTreeWorld &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3b4f6e28eb03d5efe900c149745a275c</anchor>
      <arglist>(const AabbTreeWorld &amp;lhs, const AabbTreeWorld &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; pmr::StatsResource::Stats &gt;</type>
      <name>GetResourceStats</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aff84d6881d841e255e77330984080008</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a652406794226e2ebe8a0a9c7cf2d98ea</anchor>
      <arglist>(AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>StepStats</type>
      <name>Step</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af03fb141f6d983e01e4799b62c9e3b07</anchor>
      <arglist>(AabbTreeWorld &amp;world, const StepConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsStepComplete</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aac86950fdee2a34e82718966246905a3</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetSubStepping</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af8856e4e147c88bcacefa6b63aa750cd</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSubStepping</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7b8d4d16ed5f043b13407de3cd8f11f4</anchor>
      <arglist>(AabbTreeWorld &amp;world, bool flag) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const DynamicTree &amp;</type>
      <name>GetTree</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a906e04c52b759610040707fef9ad58b0</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLocked</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af876b6037e657c9123c89cc057dae338</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4602fbbc1af40386700118e5ddda8b6a</anchor>
      <arglist>(AabbTreeWorld &amp;world, const Length2 &amp;newOrigin)</arglist>
    </member>
    <member kind="function">
      <type>Interval&lt; Positive&lt; Length &gt; &gt;</type>
      <name>GetVertexRadiusInterval</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa5bd2b2d4ff4f88eef1db5f754dfa7c2</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Frequency</type>
      <name>GetInvDeltaTime</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a32f875c95aaec6c2e7a5737e00738e0f</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const ProxyIDs &amp;</type>
      <name>GetProxies</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa688d6514c8709849281db9d93448a93</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const BodyShapeIDs &amp;</type>
      <name>GetFixturesForProxies</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af5a39fd26cc21a25452046df1c4c1b08</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>GetBodyRange</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae97a6f878c88ff1c0609582303945bd2</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const BodyIDs &amp;</type>
      <name>GetBodies</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4c12d1fb1dda1f84e19d43cb9abfbdd6</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const BodyIDs &amp;</type>
      <name>GetBodiesForProxies</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a02732814de45bab260fe1a91e1fb05c0</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>CreateBody</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a352ef727632169c252a59d648808822f</anchor>
      <arglist>(AabbTreeWorld &amp;world, Body body=Body{})</arglist>
    </member>
    <member kind="function">
      <type>const Body &amp;</type>
      <name>GetBody</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aaa29799a42054beffb9328eb8c651ed1</anchor>
      <arglist>(const AabbTreeWorld &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBody</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a20cdd89db66f857c4799c090880bd5b4</anchor>
      <arglist>(AabbTreeWorld &amp;world, BodyID id, Body value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Destroy</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7df9661feac023ea0e4cbe6369943352</anchor>
      <arglist>(AabbTreeWorld &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsDestroyed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a420fd33ad8ad006f01422746b89cc507</anchor>
      <arglist>(const AabbTreeWorld &amp;world, BodyID id) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const ProxyIDs &amp;</type>
      <name>GetProxies</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3694df2092406746a5e71113ee6487f1</anchor>
      <arglist>(const AabbTreeWorld &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>const BodyContactIDs &amp;</type>
      <name>GetContacts</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7b9fd7f3e9d7a0f8ff73d5818cf0d1f4</anchor>
      <arglist>(const AabbTreeWorld &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>const BodyJointIDs &amp;</type>
      <name>GetJoints</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abaaa273bdf2585781176266c6be413a6</anchor>
      <arglist>(const AabbTreeWorld &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>JointCounter</type>
      <name>GetJointRange</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adfede6c462c7ebd2f3d75ec2878bbb73</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const JointIDs &amp;</type>
      <name>GetJoints</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a04675e3f7536245a0ca7fad3f4bb0b27</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JointID</type>
      <name>CreateJoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad08795abe5eee5183189ff9901ab410a</anchor>
      <arglist>(AabbTreeWorld &amp;world, Joint def)</arglist>
    </member>
    <member kind="function">
      <type>const Joint &amp;</type>
      <name>GetJoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6372e003c4984f0c0319884f812f2dd7</anchor>
      <arglist>(const AabbTreeWorld &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetJoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae2bf839e74417fc9845d648c90f5b1cc</anchor>
      <arglist>(AabbTreeWorld &amp;world, JointID id, Joint def)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Destroy</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acc9f0d8549658a5f76cc03ac8a78df14</anchor>
      <arglist>(AabbTreeWorld &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsDestroyed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a24478dcc8d764767fae7067be9dcc6d4</anchor>
      <arglist>(const AabbTreeWorld &amp;world, JointID id) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ShapeCounter</type>
      <name>GetShapeRange</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a61d7f65f10afdad013c11d866292ad12</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ShapeID</type>
      <name>CreateShape</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5063d35172bec75d73944cc1c52009ed</anchor>
      <arglist>(AabbTreeWorld &amp;world, Shape def)</arglist>
    </member>
    <member kind="function">
      <type>const Shape &amp;</type>
      <name>GetShape</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9e29376addbe168c363097e82eb796f0</anchor>
      <arglist>(const AabbTreeWorld &amp;world, ShapeID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetShape</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a089e703b548a6b5f8b02ceb661a40a1d</anchor>
      <arglist>(AabbTreeWorld &amp;world, ShapeID id, Shape def)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Destroy</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7896b447c00a9a33828fead594cb9df4</anchor>
      <arglist>(AabbTreeWorld &amp;world, ShapeID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsDestroyed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae36d58fc98aeafd62c67ef3106e0e4a3</anchor>
      <arglist>(const AabbTreeWorld &amp;world, ShapeID id) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ContactCounter</type>
      <name>GetContactRange</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1e9f16b0b9ca81d3852d99bd3bf7ba94</anchor>
      <arglist>(const AabbTreeWorld &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>KeyedContactIDs</type>
      <name>GetContacts</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab42cd5eaac7f55f5fc952be4188a1fc5</anchor>
      <arglist>(const AabbTreeWorld &amp;world)</arglist>
    </member>
    <member kind="function">
      <type>const Contact &amp;</type>
      <name>GetContact</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab77e4986f15b40a9e31429c3f6be3b27</anchor>
      <arglist>(const AabbTreeWorld &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetContact</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a986132f0e473e4da3dfcd1b5ec1eb608</anchor>
      <arglist>(AabbTreeWorld &amp;world, ContactID id, Contact value)</arglist>
    </member>
    <member kind="function">
      <type>const Manifold &amp;</type>
      <name>GetManifold</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4744f578a96c67e8929c84c7b32e27e7</anchor>
      <arglist>(const AabbTreeWorld &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsDestroyed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a410fda5a1c75561497f4184d9e6d0d15</anchor>
      <arglist>(const AabbTreeWorld &amp;world, ContactID id) noexcept</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>playrho::d2::detail</name>
    <filename>namespaceplayrho_1_1d2_1_1detail.html</filename>
    <class kind="struct">playrho::d2::detail::IsValidJointType</class>
    <class kind="struct">playrho::d2::detail::IsValidJointType&lt; T, std::void_t&lt; decltype(GetBodyA(std::declval&lt; T &gt;())), decltype(GetBodyB(std::declval&lt; T &gt;())), decltype(GetCollideConnected(std::declval&lt; T &gt;())), decltype(ShiftOrigin(std::declval&lt; T &amp; &gt;(), std::declval&lt; Length2 &gt;())), decltype(InitVelocity(std::declval&lt; T &amp; &gt;(), std::declval&lt; const Span&lt; BodyConstraint &gt; &amp; &gt;(), std::declval&lt; StepConf &gt;(), std::declval&lt; ConstraintSolverConf &gt;())), decltype(SolveVelocity(std::declval&lt; T &amp; &gt;(), std::declval&lt; const Span&lt; BodyConstraint &gt; &amp; &gt;(), std::declval&lt; StepConf &gt;())), decltype(SolvePosition(std::declval&lt; T &gt;(), std::declval&lt; const Span&lt; BodyConstraint &gt; &amp; &gt;(), std::declval&lt; ConstraintSolverConf &gt;())), decltype(std::declval&lt; T &gt;()==std::declval&lt; T &gt;()), decltype(Joint{std::declval&lt; T &gt;()})&gt; &gt;</class>
    <class kind="struct">playrho::d2::detail::IsValidShapeType</class>
    <class kind="struct">playrho::d2::detail::IsValidShapeType&lt; T, std::void_t&lt; decltype(GetChildCount(std::declval&lt; T &gt;())), decltype(GetChild(std::declval&lt; T &gt;(), std::declval&lt; ChildCounter &gt;())), decltype(GetMassData(std::declval&lt; T &gt;())), decltype(GetVertexRadius(std::declval&lt; T &gt;(), std::declval&lt; ChildCounter &gt;())), decltype(GetDensity(std::declval&lt; T &gt;())), decltype(GetFriction(std::declval&lt; T &gt;())), decltype(GetRestitution(std::declval&lt; T &gt;())), decltype(std::declval&lt; T &gt;()==std::declval&lt; T &gt;()), decltype(std::declval&lt; DecayedTypeIfNotSame&lt; T, Shape &gt;&gt;()), decltype(std::is_constructible_v&lt; DecayedTypeIfNotSame&lt; T, Shape &gt;, T &gt;)&gt; &gt;</class>
    <class kind="struct">playrho::d2::detail::JointConcept</class>
    <class kind="struct">playrho::d2::detail::JointModel</class>
    <class kind="struct">playrho::d2::detail::ShapeConcept</class>
    <class kind="struct">playrho::d2::detail::ShapeModel</class>
    <class kind="struct">playrho::d2::detail::WorldConcept</class>
    <class kind="struct">playrho::d2::detail::WorldModel</class>
    <member kind="typedef">
      <type>decltype(Rotate(std::declval&lt; T &amp; &gt;(), std::declval&lt; Angle &gt;()))</type>
      <name>RotateReturnType</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>ac69c0f6a231372c71b1450233e3c19f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(Scale(std::declval&lt; T &amp; &gt;(), std::declval&lt; Vec2 &gt;()))</type>
      <name>ScaleReturnType</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>a930128f3824518b4949d79b17bdbfedf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(SetDensity(std::declval&lt; T &amp; &gt;(), std::declval&lt; NonNegative&lt; AreaDensity &gt; &gt;()))</type>
      <name>SetDensityReturnType</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>adf775b067a6a92cbc004c8099575d421</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(SetFilter(std::declval&lt; T &amp; &gt;(), std::declval&lt; Filter &gt;()))</type>
      <name>SetFilterReturnType</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>ad5f894cb72b909bb22b023b28a49ab62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(SetFriction(std::declval&lt; T &amp; &gt;(), std::declval&lt; Real &gt;()))</type>
      <name>SetFrictionReturnType</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>ad3b1703a4316deeb771ca4aa51786b4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(SetRestitution(std::declval&lt; T &amp; &gt;(), std::declval&lt; Real &gt;()))</type>
      <name>SetRestitutionReturnType</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>a87d54b57854b9796a6c377e2532b6b6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(SetSensor(std::declval&lt; T &amp; &gt;(), std::declval&lt; bool &gt;()))</type>
      <name>SetSensorReturnType</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>a497d8b12db027af729dbd6d06a2ad7c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(Translate(std::declval&lt; T &amp; &gt;(), std::declval&lt; Length2 &gt;()))</type>
      <name>TranslateReturnType</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>af16f4da2426a4615570ce10404350a1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>Rotate</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>adb80827350fb79ee9e770d46e035fad6</anchor>
      <arglist>(T &amp;, const UnitVec &amp;value) -&gt; std::enable_if_t&lt; IsValidShapeTypeV&lt; T &gt; &amp;&amp;!HasRotateV&lt; T &gt;, void &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>Scale</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>a16e9f2dee6601112685b1c64138790a4</anchor>
      <arglist>(T &amp;, const Vec2 &amp;value) -&gt; std::enable_if_t&lt; IsValidShapeTypeV&lt; T &gt; &amp;&amp;!HasScaleV&lt; T &gt;, void &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>SetDensity</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>a0fde38de41407f2cb4d94864b53f3a6f</anchor>
      <arglist>(T &amp;o, NonNegative&lt; AreaDensity &gt; value) -&gt; std::enable_if_t&lt; IsValidShapeTypeV&lt; T &gt; &amp;&amp;!HasSetDensityV&lt; T &gt;, void &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>SetFilter</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>a1e2fdda165c83d909e826ca3d8e350fa</anchor>
      <arglist>(T &amp;o, Filter value) -&gt; std::enable_if_t&lt; IsValidShapeTypeV&lt; T &gt; &amp;&amp;!HasSetFilterV&lt; T &gt;, void &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>SetFriction</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>a453ec591eac3f6a4c2468be943dd82f7</anchor>
      <arglist>(T &amp;o, NonNegative&lt; Real &gt; value) -&gt; std::enable_if_t&lt; IsValidShapeTypeV&lt; T &gt; &amp;&amp;!HasSetFrictionV&lt; T &gt;, void &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>SetRestitution</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>a9863b9d7c75dfb681e66b0b1733346c8</anchor>
      <arglist>(T &amp;o, Real value) -&gt; std::enable_if_t&lt; IsValidShapeTypeV&lt; T &gt; &amp;&amp;!HasSetRestitutionV&lt; T &gt;, void &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>SetSensor</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>ae257d5ce00315511f38471a1da468eee</anchor>
      <arglist>(T &amp;o, bool value) -&gt; std::enable_if_t&lt; IsValidShapeTypeV&lt; T &gt; &amp;&amp;!HasSetSensorV&lt; T &gt;, void &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>Translate</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>a0a50f2a135461ddf9ee6f56537f0d02f</anchor>
      <arglist>(T &amp;, const Length2 &amp;value) -&gt; std::enable_if_t&lt; IsValidShapeTypeV&lt; T &gt; &amp;&amp;!HasTranslateV&lt; T &gt;, void &gt;</arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>HasRotateV</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>a25bbe957cc15f8fd98a52dc3fda0395d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>HasScaleV</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>af809b7b33fa9ac0c0a983b07510a8db9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>HasSetDensityV</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>adb61b65e134bd2243330b2c55986c588</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>HasSetFilterV</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>a138f8181e4d5016acd8b5b5a3c0038fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>HasSetFrictionV</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>aa4fdba3a4ce28df4548f0e8e36b43b7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>HasSetRestitutionV</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>a2670f07bf95a7e2416cbb9cc177cde6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>HasSetSensorV</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>a587d6642d2dd21b03e3443199aec9616</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>HasTranslateV</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>aba3766778604fa1f8d6046261b32303a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>IsValidShapeTypeV</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1detail.html</anchorfile>
      <anchor>a292fde9a0fe65df5ef97448e1b293294</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>playrho::d2::part</name>
    <filename>namespaceplayrho_1_1d2_1_1part.html</filename>
    <class kind="class">playrho::d2::part::Compositor</class>
    <class kind="struct">playrho::d2::part::DefaultPolicies</class>
    <class kind="struct">playrho::d2::part::DefaultPolicyArgs</class>
    <class kind="struct">playrho::d2::part::DensityIs</class>
    <class kind="struct">playrho::d2::part::Discriminator</class>
    <class kind="struct">playrho::d2::part::DynamicAreaDensity</class>
    <class kind="struct">playrho::d2::part::DynamicFilter</class>
    <class kind="struct">playrho::d2::part::DynamicFriction</class>
    <class kind="class">playrho::d2::part::DynamicRectangle</class>
    <class kind="struct">playrho::d2::part::DynamicRestitution</class>
    <class kind="struct">playrho::d2::part::DynamicSensor</class>
    <class kind="struct">playrho::d2::part::FilterIs</class>
    <class kind="struct">playrho::d2::part::FrictionIs</class>
    <class kind="struct">playrho::d2::part::GeometryIs</class>
    <class kind="struct">playrho::d2::part::PolicySelector</class>
    <class kind="struct">playrho::d2::part::RestitutionIs</class>
    <class kind="struct">playrho::d2::part::SensorIs</class>
    <class kind="struct">playrho::d2::part::StaticAreaDensity</class>
    <class kind="struct">playrho::d2::part::StaticFilter</class>
    <class kind="struct">playrho::d2::part::StaticFriction</class>
    <class kind="class">playrho::d2::part::StaticRectangle</class>
    <class kind="struct">playrho::d2::part::StaticRestitution</class>
    <class kind="struct">playrho::d2::part::StaticSensor</class>
    <class kind="struct">playrho::d2::part::StaticTenthsFriction</class>
    <member kind="function">
      <type>auto</type>
      <name>GetChild</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1part.html</anchorfile>
      <anchor>a14ee1417a36f3128ff1eb2eefaa9e70f</anchor>
      <arglist>(const Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg, ChildCounter index) noexcept(noexcept(arg.GetChild(index))) -&gt; decltype(arg.GetChild(index))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetChildCount</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1part.html</anchorfile>
      <anchor>a20c8a91b6e0263149ca376334f87373c</anchor>
      <arglist>(const Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg) noexcept -&gt; decltype(arg.GetChildCount())</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetDensity</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1part.html</anchorfile>
      <anchor>ab10cd53d5d760d00bcf2c751e60927f0</anchor>
      <arglist>(const Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg) noexcept -&gt; decltype(arg.density)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetDimensions</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1part.html</anchorfile>
      <anchor>ad2ba5af7d41b160bb4c0a215b562c9f8</anchor>
      <arglist>(const Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg) noexcept -&gt; decltype(arg.GetDimensions())</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetFilter</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1part.html</anchorfile>
      <anchor>aadd6f0f1301d226c88bda0a255443012</anchor>
      <arglist>(const Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg) noexcept -&gt; decltype(arg.filter)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetFriction</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1part.html</anchorfile>
      <anchor>a70759191c4163016dd62554f528b7595</anchor>
      <arglist>(const Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg) noexcept -&gt; decltype(arg.friction)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1part.html</anchorfile>
      <anchor>aa4f02037d00c66d1489f8ddc0a2a5887</anchor>
      <arglist>(const Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg) noexcept -&gt; decltype(arg.GetMassData(GetDensity(arg)))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetOffset</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1part.html</anchorfile>
      <anchor>aa2308e6e2a8e40e46f5ce5282f33e7d8</anchor>
      <arglist>(const Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg) noexcept -&gt; decltype(arg.GetOffset())</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetRestitution</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1part.html</anchorfile>
      <anchor>adb6fc0390f20176b18275ba626e87cb9</anchor>
      <arglist>(const Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg) noexcept -&gt; decltype(arg.restitution)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1part.html</anchorfile>
      <anchor>ae0a7e6e072d706510de072f6c9a0d079</anchor>
      <arglist>(const Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg) noexcept(noexcept(arg.GetVertexRadius())) -&gt; decltype(arg.GetVertexRadius())</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1part.html</anchorfile>
      <anchor>ad0a6615b217840ceda5e7b6e03be467b</anchor>
      <arglist>(const Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg, ChildCounter index) noexcept(noexcept(GetChild(arg, index))) -&gt; decltype(GetVertexRadius(GetChild(arg, index)))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>IsSensor</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1part.html</anchorfile>
      <anchor>a09d7d95575e84168a7c82a415169dbe8</anchor>
      <arglist>(const Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg) noexcept -&gt; decltype(arg.sensor)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1part.html</anchorfile>
      <anchor>a060e63c62f47ebe00d181e65d169abd3</anchor>
      <arglist>(const Compositor&lt; P11, P12, P13, P14, P15, P16 &gt; &amp;lhs, const Compositor&lt; P21, P22, P23, P24, P25, P26 &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1part.html</anchorfile>
      <anchor>ac3103858eab61eaa83b37d420a71ae40</anchor>
      <arglist>(const Compositor&lt; P11, P12, P13, P14, P15, P16 &gt; &amp;lhs, const Compositor&lt; P21, P22, P23, P24, P25, P26 &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>Rotate</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1part.html</anchorfile>
      <anchor>a6406cfb1211acdb60785de6b82906f46</anchor>
      <arglist>(Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg, ::playrho::d2::UnitVec value) -&gt; std::enable_if_t&lt; detail::HasMemberRotateV&lt; decltype(arg)&gt;, void &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>Scale</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1part.html</anchorfile>
      <anchor>a8e7a002a381cad9eb15c7e6ba1ab2e00</anchor>
      <arglist>(Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg, const Vec2 &amp;value) -&gt; std::enable_if_t&lt; detail::HasMemberScaleV&lt; decltype(arg)&gt;, void &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>SetDensity</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1part.html</anchorfile>
      <anchor>ac3474dff07f98ed9fa68cfa612ef529b</anchor>
      <arglist>(Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg, NonNegative&lt; AreaDensity &gt; value) -&gt; std::enable_if_t&lt;!std::is_const_v&lt; decltype(arg.density)&gt;, void &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>SetDimensions</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1part.html</anchorfile>
      <anchor>a0350621543765f7b3ef9645e7a4aead1</anchor>
      <arglist>(Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg, decltype(arg.GetDimensions()) value) -&gt; decltype(arg.SetDimensions(value))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>SetFilter</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1part.html</anchorfile>
      <anchor>ae95d9ee6e7af9b236d77dc88ecdda0ff</anchor>
      <arglist>(Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg, Filter value) -&gt; std::enable_if_t&lt;!std::is_const_v&lt; decltype(arg.filter)&gt;, void &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>SetFriction</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1part.html</anchorfile>
      <anchor>a09f290e872984197b9c7bb8b11268e0f</anchor>
      <arglist>(Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg, NonNegative&lt; Real &gt; value) -&gt; std::enable_if_t&lt;!std::is_const_v&lt; decltype(arg.friction)&gt;, void &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>SetOffset</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1part.html</anchorfile>
      <anchor>a42df945f58a0fae6ee1762a10f052a1d</anchor>
      <arglist>(Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg, decltype(arg.GetOffset()) value) -&gt; decltype(arg.SetOffset(value))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>SetRestitution</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1part.html</anchorfile>
      <anchor>acae907e2173e3c211c5fe7784f011e41</anchor>
      <arglist>(Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg, Real value) -&gt; std::enable_if_t&lt;!std::is_const_v&lt; decltype(arg.restitution)&gt;, void &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>SetSensor</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1part.html</anchorfile>
      <anchor>ad07854cfbdaaa13c43e8e683b8806d4a</anchor>
      <arglist>(Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg, bool value) -&gt; std::enable_if_t&lt;!std::is_const_v&lt; decltype(arg.sensor)&gt;, void &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>SetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1part.html</anchorfile>
      <anchor>aa6bd61aad326db6c0cfdea867f5f83e2</anchor>
      <arglist>(Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg, ChildCounter index, decltype(arg.GetVertexRadius()) value) -&gt; decltype(arg.SetVertexRadius(index, value))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>Translate</name>
      <anchorfile>namespaceplayrho_1_1d2_1_1part.html</anchorfile>
      <anchor>aab6da22689fae9331ca99b5f85bf01cd</anchor>
      <arglist>(Compositor&lt; P1, P2, P3, P4, P5, P6 &gt; &amp;arg, const Length2 &amp;value) -&gt; std::enable_if_t&lt; detail::HasMemberTranslateV&lt; decltype(arg)&gt;, void &gt;</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>playrho::detail</name>
    <filename>namespaceplayrho_1_1detail.html</filename>
    <class kind="struct">playrho::detail::AABB</class>
    <class kind="class">playrho::detail::Checked</class>
    <class kind="struct">playrho::detail::detector</class>
    <class kind="struct">playrho::detail::detector&lt; Default, std::void_t&lt; Op&lt; Args... &gt; &gt;, Op, Args... &gt;</class>
    <class kind="struct">playrho::detail::FiniteChecker</class>
    <class kind="struct">playrho::detail::has_underlying_type_member</class>
    <class kind="struct">playrho::detail::has_underlying_type_member&lt; T, std::void_t&lt; typename T::underlying_type &gt; &gt;</class>
    <class kind="struct">playrho::detail::HasFunctor</class>
    <class kind="struct">playrho::detail::HasFunctor&lt; Type, Return(Args...)&gt;</class>
    <class kind="class">playrho::detail::IndexingNamedType</class>
    <class kind="struct">playrho::detail::is_narrowing_conversion</class>
    <class kind="struct">playrho::detail::is_narrowing_conversion_impl</class>
    <class kind="struct">playrho::detail::is_narrowing_conversion_impl&lt; From, To, std::void_t&lt; decltype(To{std::declval&lt; From &gt;()})&gt; &gt;</class>
    <class kind="struct">playrho::detail::IsAddable</class>
    <class kind="struct">playrho::detail::IsAddable&lt; T1, T2, std::void_t&lt; decltype(T1{}+T2{})&gt; &gt;</class>
    <class kind="struct">playrho::detail::IsArithmetic</class>
    <class kind="struct">playrho::detail::IsArithmetic&lt; T, std::void_t&lt; decltype(T{}+T{}), decltype(T{} - T{}), decltype(T{} *T{}), decltype(T{}/T{})&gt; &gt;</class>
    <class kind="struct">playrho::detail::IsDivisable</class>
    <class kind="struct">playrho::detail::IsDivisable&lt; T1, T2, std::void_t&lt; decltype(T1{}/T2{})&gt; &gt;</class>
    <class kind="struct">playrho::detail::IsEqualityComparable</class>
    <class kind="struct">playrho::detail::IsEqualityComparable&lt; T1, T2, std::void_t&lt; decltype(T1{}==T2{})&gt; &gt;</class>
    <class kind="struct">playrho::detail::IsInequalityComparable</class>
    <class kind="struct">playrho::detail::IsInequalityComparable&lt; T1, T2, std::void_t&lt; decltype(T1{} !=T2{})&gt; &gt;</class>
    <class kind="struct">playrho::detail::IsIterable</class>
    <class kind="struct">playrho::detail::IsIterable&lt; T, std::void_t&lt; decltype(begin(std::declval&lt; T &gt;())), decltype(end(std::declval&lt; T &gt;())), decltype(++std::declval&lt; decltype(begin(std::declval&lt; T &amp; &gt;()))&amp; &gt;()), decltype(*begin(std::declval&lt; T &gt;()))&gt; &gt;</class>
    <class kind="struct">playrho::detail::IsMatrix</class>
    <class kind="struct">playrho::detail::IsMatrix&lt; Vector&lt; Vector&lt; T, N &gt;, M &gt; &gt;</class>
    <class kind="struct">playrho::detail::IsMultipliable</class>
    <class kind="struct">playrho::detail::IsMultipliable&lt; T1, T2, std::void_t&lt; decltype(T1{} *T2{})&gt; &gt;</class>
    <class kind="struct">playrho::detail::IsReverseIterable</class>
    <class kind="struct">playrho::detail::IsReverseIterable&lt; T, std::void_t&lt; decltype(rbegin(std::declval&lt; T &gt;())), decltype(rend(std::declval&lt; T &gt;())), decltype(++std::declval&lt; decltype(rbegin(std::declval&lt; T &amp; &gt;()))&amp; &gt;()), decltype(*rbegin(std::declval&lt; T &gt;()))&gt; &gt;</class>
    <class kind="struct">playrho::detail::IsSquareMatrix</class>
    <class kind="struct">playrho::detail::IsSquareMatrix&lt; Vector&lt; Vector&lt; T, M &gt;, M &gt; &gt;</class>
    <class kind="struct">playrho::detail::IsVector</class>
    <class kind="struct">playrho::detail::IsVector&lt; Vector&lt; T, N &gt; &gt;</class>
    <class kind="struct">playrho::detail::LengthIndices</class>
    <class kind="struct">playrho::detail::MassData</class>
    <class kind="struct">playrho::detail::NegativeChecker</class>
    <class kind="struct">playrho::detail::nonesuch</class>
    <class kind="struct">playrho::detail::NonNegativeChecker</class>
    <class kind="struct">playrho::detail::NonPositiveChecker</class>
    <class kind="struct">playrho::detail::NonZeroChecker</class>
    <class kind="struct">playrho::detail::NoOpChecker</class>
    <class kind="struct">playrho::detail::PositiveChecker</class>
    <class kind="struct">playrho::detail::RayCastInput</class>
    <class kind="struct">playrho::detail::SeparationInfo</class>
    <class kind="struct">playrho::detail::TypeInfo</class>
    <class kind="struct">playrho::detail::TypeInfo&lt; playrho::d2::ChainShapeConf &gt;</class>
    <class kind="struct">playrho::detail::TypeInfo&lt; playrho::d2::DiskShapeConf &gt;</class>
    <class kind="struct">playrho::detail::TypeInfo&lt; playrho::d2::DistanceJointConf &gt;</class>
    <class kind="struct">playrho::detail::TypeInfo&lt; playrho::d2::EdgeShapeConf &gt;</class>
    <class kind="struct">playrho::detail::TypeInfo&lt; playrho::d2::FrictionJointConf &gt;</class>
    <class kind="struct">playrho::detail::TypeInfo&lt; playrho::d2::GearJointConf &gt;</class>
    <class kind="struct">playrho::detail::TypeInfo&lt; playrho::d2::MotorJointConf &gt;</class>
    <class kind="struct">playrho::detail::TypeInfo&lt; playrho::d2::MultiShapeConf &gt;</class>
    <class kind="struct">playrho::detail::TypeInfo&lt; playrho::d2::PolygonShapeConf &gt;</class>
    <class kind="struct">playrho::detail::TypeInfo&lt; playrho::d2::PrismaticJointConf &gt;</class>
    <class kind="struct">playrho::detail::TypeInfo&lt; playrho::d2::PulleyJointConf &gt;</class>
    <class kind="struct">playrho::detail::TypeInfo&lt; playrho::d2::RevoluteJointConf &gt;</class>
    <class kind="struct">playrho::detail::TypeInfo&lt; playrho::d2::RopeJointConf &gt;</class>
    <class kind="struct">playrho::detail::TypeInfo&lt; playrho::d2::TargetJointConf &gt;</class>
    <class kind="struct">playrho::detail::TypeInfo&lt; playrho::d2::WeldJointConf &gt;</class>
    <class kind="struct">playrho::detail::TypeInfo&lt; playrho::d2::WheelJointConf &gt;</class>
    <class kind="struct">playrho::detail::underlying_type</class>
    <class kind="struct">playrho::detail::underlying_type&lt; T, std::enable_if_t&lt; has_underlying_type_member&lt; T &gt;::value &gt; &gt;</class>
    <class kind="struct">playrho::detail::underlying_type&lt; T, std::enable_if_t&lt; std::is_enum_v&lt; T &gt; &gt; &gt;</class>
    <class kind="struct">playrho::detail::UnitIntervalChecker</class>
    <class kind="struct">playrho::detail::Wider</class>
    <class kind="struct">playrho::detail::Wider&lt; double &gt;</class>
    <class kind="struct">playrho::detail::Wider&lt; float &gt;</class>
    <class kind="struct">playrho::detail::Wider&lt; std::int16_t &gt;</class>
    <class kind="struct">playrho::detail::Wider&lt; std::int32_t &gt;</class>
    <class kind="struct">playrho::detail::Wider&lt; std::int8_t &gt;</class>
    <class kind="struct">playrho::detail::Wider&lt; std::uint16_t &gt;</class>
    <class kind="struct">playrho::detail::Wider&lt; std::uint32_t &gt;</class>
    <class kind="struct">playrho::detail::Wider&lt; std::uint8_t &gt;</class>
    <class kind="struct">playrho::detail::ZeroToUnderOneChecker</class>
    <member kind="typedef">
      <type>Real</type>
      <name>acceleration</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>aefbb6a898514981d80d8a599a6faed34</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Real</type>
      <name>angular_acceleration</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a097ed777e057559e1843beed7f261053</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Real</type>
      <name>angular_momentum</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a368271e29c9ca2fa4a81619932918883</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Real</type>
      <name>angular_velocity</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a57bc0b9cfe8671823ac510034a03cc0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Real</type>
      <name>area</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a9eb7643b1171765729a3cd3129e8ec71</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Checked&lt; T &gt;</type>
      <name>DefaultCheckedValue</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga11cabdc538bf7282d5da49a1f85186d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Real</type>
      <name>force</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a9245466a701c0ace6d5c9ee85826a254</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Real</type>
      <name>frequency</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a1281aab63b535f7dd4cbcce87f7d6706</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(std::declval&lt; T &amp; &gt;().get())</type>
      <name>get_member_type</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a03090ab2b73fa40dbf842caf9cf4f19f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Real</type>
      <name>inverse_mass</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a4e0fe544dc91c5df25ce8858ee1dda8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Real</type>
      <name>inverse_moment_of_inertia</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a7057f55e349ca3586994f4a94bb3a5c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename detector&lt; nonesuch, void, Op, Args... &gt;::value_t</type>
      <name>is_detected</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>ae939b4363f647e9faea094982a311cb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Real</type>
      <name>length</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a89abc2eb85f9ce5226d4cd969ab4cdce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Real</type>
      <name>mass</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a38a46160145a84da9c500ffd0df5e1bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Real</type>
      <name>moment_of_inertia</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>ad1d3c743f682c8b2631e7d77b82d6498</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Real</type>
      <name>momentum</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>ac761581120ca23f745cf4f362c975bd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Real</type>
      <name>plane_angle</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a4d1bc56caf9abb64fdb8d1dd180d7394</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Real</type>
      <name>second_moment_of_area</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a658b54e98a49b6b4719d84643981de3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Real</type>
      <name>surface_density</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a5d70a4f74cac574d76e8dfcfee292895</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Real</type>
      <name>time</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>aec06718803b60f89a200ed9207508f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Real</type>
      <name>torque</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>af3257d2b875169550aa6628cbd523356</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename underlying_type&lt; T &gt;::type</type>
      <name>underlying_type_t</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a2ddc4b148d5e38a5a59954a1f503e901</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Real</type>
      <name>velocity</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a07bf078d023635979d9fd9bda324a16e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>abs</name>
      <anchorfile>group__CheckedMath.html</anchorfile>
      <anchor>ga00fab6b331741e415a52e5155467a0bf</anchor>
      <arglist>(const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;arg) -&gt; decltype(Checked&lt; ValueType, Checker, false &gt;(abs(arg.get())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>Contains</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>aeccc4adba69c5f7bbf4c0c3724ae1fcc</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;a, const AABB&lt; N &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt; &amp;</type>
      <name>Fatten</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a3b93a03d7da33af6899f8997a3b254ce</anchor>
      <arglist>(AABB&lt; N &gt; &amp;var, const NonNegative&lt; Length &gt; amount) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; Length, N &gt;</type>
      <name>GetCenter</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>aa5c9f951c0b82a2cdecdc7d559ca34d4</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; Length, N &gt;</type>
      <name>GetDimensions</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a3f0de4fdd4cecf5567090bf345c42ead</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt;</type>
      <name>GetDisplacedAABB</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a1d14a66e8a7cca9d84a04736e498e1a2</anchor>
      <arglist>(AABB&lt; N &gt; aabb, const Vector&lt; Length, N &gt; displacement)</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt;</type>
      <name>GetEnclosingAABB</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>af0034e680404f80e04d94699d42ed07d</anchor>
      <arglist>(AABB&lt; N &gt; a, const AABB&lt; N &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; Length, N &gt;</type>
      <name>GetExtents</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a869cd35cc1b8a53bfdedd47f2b6b9000</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt;</type>
      <name>GetFattenedAABB</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a3f169758eb050baf511b152fb5177735</anchor>
      <arglist>(AABB&lt; N &gt; aabb, const Length amount)</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt;</type>
      <name>GetIntersectingAABB</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a91d15c57e8504dca29a922fb382a0eec</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;a, const AABB&lt; N &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; Length, N &gt;</type>
      <name>GetLowerBound</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>aad63477b5cea2c8275ecedff1f3f9530</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt;</type>
      <name>GetMovedAABB</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a74557026c35a580c45dfc12f0c2bc6c0</anchor>
      <arglist>(AABB&lt; N &gt; aabb, const Vector&lt; Length, N &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetNameForTypeInfo</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a087b4a408ef8d082849973a442a24208</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; Length, N &gt;</type>
      <name>GetUpperBound</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a98a4a10ae8cc38664e56b99a5ef40ba6</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt; &amp;</type>
      <name>Include</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a5daa9c97e0b9a5dcf45681bf596639c3</anchor>
      <arglist>(AABB&lt; N &gt; &amp;var, const AABB&lt; N &gt; &amp;val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt; &amp;</type>
      <name>Include</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>aa5638faaf78557603c3e60b945f0c415</anchor>
      <arglist>(AABB&lt; N &gt; &amp;var, const Vector&lt; Length, N &gt; &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>IsFull</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a9c6ef61517707043fb5fd0891647687f</anchor>
      <arglist>(const T &amp;arg) -&gt; decltype(size(arg)==max_size(arg))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>max_size</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>aaa616ce7863431ef4a242233299ac2e3</anchor>
      <arglist>(const T &amp;arg) -&gt; decltype(arg.max_size())</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt; &amp;</type>
      <name>Move</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a5f59177e89e8d24dfee72915a0ebe649</anchor>
      <arglist>(AABB&lt; N &gt; &amp;var, const Vector&lt; Length, N &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>nextafter</name>
      <anchorfile>group__CheckedMath.html</anchorfile>
      <anchor>gab11ee26fa0cd543fd5f2eebf9c0c30b3</anchor>
      <arglist>(const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;from, const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;to) -&gt; decltype(Checked&lt; ValueType, Checker, false &gt;(nextafter(from.get(), to.get())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>abe2471568df9b5635f92209b8d25be38</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a32383015bf171dea637b7a959b7421fa</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;() !=std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs) !=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a4994d33050437f2bd04ce28f82c6cfa9</anchor>
      <arglist>(const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(ValueType(lhs) !=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a1710820c42a3d0fa04fdd7b03ccda485</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;rhs) -&gt; decltype(lhs !=ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a64050b6fc27058d98f7e504d4a3eacab</anchor>
      <arglist>(MassData&lt; N &gt; lhs, MassData&lt; N &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a62ccb41874a11ae208e4d2a1840aa898</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) *RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a0daf3badd07c3d8a8f75e372aeb10620</anchor>
      <arglist>(const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;lhs, const Other &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliableV&lt; Checked&lt; ValueType, Checker, NoExcept &gt;, Other &gt;, decltype(ValueType() *Other())&gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a0c81bd1815fccef0be17df1909886ee3</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliableV&lt; Other, Checked&lt; ValueType, Checker, NoExcept &gt;&gt;, decltype(Other() *ValueType())&gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>ad61c4c34236f778ed47268224850b24e</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)+RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>ab36ff5f373eaf2d495dce40c42e6c792</anchor>
      <arglist>(const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(ValueType(lhs)+rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>ac9cf08de554c2029b6bbb90d1890d1d2</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;rhs) -&gt; decltype(lhs+ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a66f17c27ae07bb4d3402817a6f8d52f1</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) - RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>ab093280c9b756a1aa417ff530bae5072</anchor>
      <arglist>(const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(ValueType(lhs) - rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>ae42c345584e1f5fc449daf5e1bfe1b74</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;rhs) -&gt; decltype(lhs - ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>aa6546914bb51e238fe23f2da6de2d4eb</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)/RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a7afdc583a043ed1144ffd3a8bc254221</anchor>
      <arglist>(const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(ValueType(lhs)/rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a6df49c6b71fae2abdb05858e444b94d2</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;rhs) -&gt; decltype(lhs/ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>ac7738d0953158fb06eada28384bde27b</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a00e22b3d70171c770fe2fe13afdff11c</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a8b5a8d7ecc5a2fd34c979a4ed7ee67b8</anchor>
      <arglist>(const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(ValueType(lhs)&lt; ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>ab1151c88c9fdcd11cb39197aad9e2f9a</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;rhs) -&gt; decltype(ValueType(lhs)&lt; ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>aeedbbe27963b9396e1e566a97a03097a</anchor>
      <arglist>(::std::ostream &amp;os, const AABB&lt; N &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a7f06e1143875dde6f350188cd20b307b</anchor>
      <arglist>(::std::ostream &amp;os, const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;value) -&gt; decltype(os&lt;&lt; ValueType(value))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>aa3edeccc850d69e6165e5a5523e5b406</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a92f80c500536c9ace9c266ca095d4ce2</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>aeff78aa037fbc86ce1958b1658ed2510</anchor>
      <arglist>(const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(ValueType(lhs)&lt;=ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>adeb25d8b74e7403ebd78bf324b8101dc</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;rhs) -&gt; decltype(ValueType(lhs)&lt;=ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>ae9459aea2a9cd94f8089837a09f41003</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a8f2e536c4b87e31dd0d088bb64712b70</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;()==std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs)==RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a50beca9c94a84b533dda16d5612c99c1</anchor>
      <arglist>(const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(ValueType(lhs)==rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a3122c1c3be1d11d9e824e227cf58e4f3</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;rhs) -&gt; decltype(lhs==ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>af4a0970bf5a0f7b37eeb21d6301a75e2</anchor>
      <arglist>(MassData&lt; N &gt; lhs, MassData&lt; N &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a76b557d909c21ff5256aeb1a9d3b8c05</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a65ffa1dc8fdac606f09d7f1258d76697</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a7db684b2001572866a76004dc188482b</anchor>
      <arglist>(const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(ValueType(lhs) &gt; ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>ae925670316f198c098c65a2d9fb2e68d</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;rhs) -&gt; decltype(ValueType(lhs) &gt; ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a48d06003e414f652104fd195b308d296</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a0d2b20e9a7652cad0cb713a9b466268d</anchor>
      <arglist>(const Checked&lt; LhsValueType, LhsChecker, LhsNoExcept &gt; &amp;lhs, const Checked&lt; RhsValueType, RhsChecker, RhsNoExcept &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a79e613ff5f9b13c13408daab2deae491</anchor>
      <arglist>(const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(ValueType(lhs) &gt;=ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>ab9994a039bbf093c9b0e0faddd272dab</anchor>
      <arglist>(const Other &amp;lhs, const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;rhs) -&gt; decltype(ValueType(lhs) &gt;=ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>TestOverlap</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a9ad73cec0b99cb943f354a290c7f9bfc</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;a, const AABB&lt; N &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>TypeNameAsString</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a228b07f06592b994f9692fd50d071220</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr const T &amp;</type>
      <name>UnderlyingValue</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a9fd3da1620a73e1af4ee63e6f51fb99f</anchor>
      <arglist>(const IndexingNamedType&lt; T, Tag &gt; &amp;o) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T &amp;</type>
      <name>UnderlyingValue</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a1d0098650ef88d80a47b40dea3c234e2</anchor>
      <arglist>(IndexingNamedType&lt; T, Tag &gt; &amp;o) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>hertz</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>af1e0c512dc16bc8796eaffc38727193d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>HoursPerDay</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a7228ae83382d96e5316a2da46d61b5e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_detected_v</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>af266549017154893e0ba701cfe4af898</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>kilogram</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a90daaeb1a99f74ec5f8c859c293e798d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>kilogram_per_square_meter</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a0496d072cedb43873f5558c5e5a4c0e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>meter</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a573a42126bffa5d938fac528d015eaa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>meter_per_second</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a4e352c62d4a20f166b0eb0d529404943</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>meter_per_second_squared</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a9306a61d0f8717e859093dd09277ae92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>MinutesPerHour</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a02d0486631c08763de5623dddac4931d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>newton</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a39a63c7fa9f3a8a7d2aa3ed6c375861d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>newton_meter</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a60bc3b612446a1b018a7bdffa78a47c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>radian</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>afd99f222426ee977eb5660bbd03b05a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>radian_per_second</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a4b05a88d44049ecb87ed2945a30b78f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>second</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a7e50c73b42174eea9c09e8fec3805919</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>SecondsPerMinute</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>ada8f7d778a105c363715baf196d71bfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>square_meter</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a8098710bf36c4d3d9fc8f47614f3238a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>playrho::pmr</name>
    <filename>namespaceplayrho_1_1pmr.html</filename>
    <class kind="class">playrho::pmr::memory_resource</class>
    <class kind="class">playrho::pmr::polymorphic_allocator</class>
    <class kind="struct">playrho::pmr::pool_options</class>
    <class kind="struct">playrho::pmr::PoolMemoryOptions</class>
    <class kind="class">playrho::pmr::PoolMemoryResource</class>
    <class kind="class">playrho::pmr::StatsResource</class>
    <member kind="typedef">
      <type>std::make_signed_t&lt; std::size_t &gt;</type>
      <name>ssize_t</name>
      <anchorfile>namespaceplayrho_1_1pmr.html</anchorfile>
      <anchor>a8df93a195b17ebad584308c58bcddee2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>memory_resource *</type>
      <name>get_default_resource</name>
      <anchorfile>namespaceplayrho_1_1pmr.html</anchorfile>
      <anchor>aebfb5574868c34755a5bbea933a32142</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>memory_resource *</type>
      <name>new_delete_resource</name>
      <anchorfile>namespaceplayrho_1_1pmr.html</anchorfile>
      <anchor>a1740984d2c490197208cc9ee6bb74c98</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>memory_resource *</type>
      <name>null_memory_resource</name>
      <anchorfile>namespaceplayrho_1_1pmr.html</anchorfile>
      <anchor>ab681941e22d7a6f545464c9587785d2c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1pmr.html</anchorfile>
      <anchor>aaf18fd28f42968db7755634824b74460</anchor>
      <arglist>(const memory_resource &amp;a, const memory_resource &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1pmr.html</anchorfile>
      <anchor>a80701bd5dbc1e5b600b15182c9b7a945</anchor>
      <arglist>(const pmr::polymorphic_allocator&lt; T1 &gt; &amp;lhs, const pmr::polymorphic_allocator&lt; T2 &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1pmr.html</anchorfile>
      <anchor>a4fd9a60d7b5ce4562f342408f0bc5e48</anchor>
      <arglist>(const PoolMemoryOptions &amp;lhs, const PoolMemoryOptions &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceplayrho_1_1pmr.html</anchorfile>
      <anchor>abef17f606c315585f06c7692dbf324db</anchor>
      <arglist>(std::ostream &amp;os, const PoolMemoryResource::Stats &amp;stats)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1pmr.html</anchorfile>
      <anchor>a45c913acbe242f3e4e97f6d28f10ae8d</anchor>
      <arglist>(const memory_resource &amp;a, const memory_resource &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1pmr.html</anchorfile>
      <anchor>ae567841c24e0caa1084bc0567b08fcac</anchor>
      <arglist>(const pmr::polymorphic_allocator&lt; T1 &gt; &amp;lhs, const pmr::polymorphic_allocator&lt; T2 &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1pmr.html</anchorfile>
      <anchor>a539433b1ab8b0ea73ac531dd97411b7a</anchor>
      <arglist>(const PoolMemoryOptions &amp;lhs, const PoolMemoryOptions &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>memory_resource *</type>
      <name>set_default_resource</name>
      <anchorfile>namespaceplayrho_1_1pmr.html</anchorfile>
      <anchor>aa593fe7c274337dd47a6e8ca367875ad</anchor>
      <arglist>(memory_resource *r) noexcept</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>std</name>
    <filename>namespacestd.html</filename>
    <class kind="struct">std::hash&lt; playrho::ContactKey &gt;</class>
    <class kind="struct">std::hash&lt;::playrho::detail::IndexingNamedType&lt; T, Tag &gt; &gt;</class>
    <class kind="class">std::numeric_limits&lt;::playrho::Positive&lt; T &gt; &gt;</class>
    <class kind="class">std::tuple_element&lt; I, playrho::d2::UnitVec &gt;</class>
    <class kind="class">std::tuple_element&lt; I, playrho::Vector&lt; T, N &gt; &gt;</class>
    <class kind="class">std::tuple_size&lt; playrho::ArrayList&lt; T, N, SIZE_TYPE &gt; &gt;</class>
    <class kind="class">std::tuple_size&lt; playrho::d2::UnitVec &gt;</class>
    <class kind="class">std::tuple_size&lt; playrho::Vector&lt; T, N &gt; &gt;</class>
  </compound>
  <compound kind="group">
    <name>JointsGroup</name>
    <title>Joint Classes</title>
    <filename>group__JointsGroup.html</filename>
    <class kind="struct">playrho::d2::DistanceJointConf</class>
    <class kind="struct">playrho::d2::FrictionJointConf</class>
    <class kind="struct">playrho::d2::GearJointConf</class>
    <class kind="class">playrho::d2::Joint</class>
    <class kind="struct">playrho::d2::MotorJointConf</class>
    <class kind="struct">playrho::d2::PrismaticJointConf</class>
    <class kind="struct">playrho::d2::PulleyJointConf</class>
    <class kind="struct">playrho::d2::RevoluteJointConf</class>
    <class kind="struct">playrho::d2::RopeJointConf</class>
    <class kind="struct">playrho::d2::TargetJointConf</class>
    <class kind="struct">playrho::d2::WeldJointConf</class>
    <class kind="struct">playrho::d2::WheelJointConf</class>
  </compound>
  <compound kind="group">
    <name>RayCastGroup</name>
    <title>Ray Casting Functions</title>
    <filename>group__RayCastGroup.html</filename>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>ga425e9dc1c0e263bf7484ef6ef2cde86b</anchor>
      <arglist>(const ::playrho::detail::AABB&lt; 2 &gt; &amp;aabb, const RayCastInput &amp;input) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gabc2e992343e201f48c1956753a530247</anchor>
      <arglist>(const DistanceProxy &amp;proxy, const RayCastInput &amp;input, const Transformation &amp;transform) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>ga3dad3478ded2886d14ed536a6c97cfb1</anchor>
      <arglist>(const DistanceProxy &amp;proxy, const RayCastInput &amp;input, const Transformation &amp;transform) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gadf0ec62e1852e3bc9b017eae4a5616b4</anchor>
      <arglist>(const DynamicTree &amp;tree, RayCastInput input, const DynamicTreeRayCastCB &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gaada5f6c5635166baaf1bc81636d8b93a</anchor>
      <arglist>(const Shape &amp;shape, ChildCounter childIndex, const RayCastInput &amp;input, const Transformation &amp;transform) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>ga6ed6eafc72f707833ee7079bf62487ad</anchor>
      <arglist>(const Shape &amp;shape, ChildCounter childIndex, const RayCastInput &amp;input, const Transformation &amp;transform) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>ga694dc50f9191401bc87ab1abae2b05e9</anchor>
      <arglist>(const World &amp;world, const RayCastInput &amp;input, const ShapeRayCastCB &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gaf241136582e7ccf95db82be1184c9f16</anchor>
      <arglist>(const World &amp;world, const RayCastInput &amp;input, const ShapeRayCastCB &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gaa2b257514c434e44a5ea5839c959bea9</anchor>
      <arglist>(Length radius, const Length2 &amp;location, const RayCastInput &amp;input) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>PartsGroup</name>
    <title>Shape Classes</title>
    <filename>group__PartsGroup.html</filename>
    <class kind="struct">playrho::d2::ChainShapeConf</class>
    <class kind="class">playrho::d2::part::Compositor</class>
    <class kind="struct">playrho::d2::DiskShapeConf</class>
    <class kind="struct">playrho::d2::EdgeShapeConf</class>
    <class kind="struct">playrho::d2::MultiShapeConf</class>
    <class kind="struct">playrho::d2::PolygonShapeConf</class>
    <class kind="class">playrho::d2::Shape</class>
  </compound>
  <compound kind="group">
    <name>PhysicalEntities</name>
    <title>Physical Entities</title>
    <filename>group__PhysicalEntities.html</filename>
    <class kind="class">playrho::d2::Body</class>
    <class kind="class">playrho::Contact</class>
    <class kind="class">playrho::d2::Joint</class>
  </compound>
  <compound kind="group">
    <name>Checkers</name>
    <title>Checker Types</title>
    <filename>group__Checkers.html</filename>
    <class kind="struct">playrho::detail::FiniteChecker</class>
    <class kind="struct">playrho::detail::NegativeChecker</class>
    <class kind="struct">playrho::detail::NonNegativeChecker</class>
    <class kind="struct">playrho::detail::NonPositiveChecker</class>
    <class kind="struct">playrho::detail::NonZeroChecker</class>
    <class kind="struct">playrho::detail::NoOpChecker</class>
    <class kind="struct">playrho::detail::PositiveChecker</class>
    <class kind="struct">playrho::detail::UnitIntervalChecker</class>
    <class kind="struct">playrho::detail::ZeroToUnderOneChecker</class>
  </compound>
  <compound kind="group">
    <name>CheckedTypes</name>
    <title>Checked Value Types</title>
    <filename>group__CheckedTypes.html</filename>
    <member kind="typedef">
      <type>Checked&lt; T &gt;</type>
      <name>DefaultCheckedValue</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga11cabdc538bf7282d5da49a1f85186d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::Checked&lt; T, detail::FiniteChecker&lt; T &gt; &gt;</type>
      <name>Finite</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga60e4df9fe0eb8c6732b0316face647ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::Checked&lt; T, detail::FiniteChecker&lt; T &gt;, true &gt;</type>
      <name>FiniteFF</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga5c4898ce94c2c3bd2059864e7466ed12</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::Checked&lt; T, detail::NegativeChecker&lt; T &gt; &gt;</type>
      <name>Negative</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>gae249aaac842934d7f33e0f90012c409a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::Checked&lt; T, detail::NegativeChecker&lt; T &gt;, true &gt;</type>
      <name>NegativeFF</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga9d1fdcdd87aa834539d3b58cdee6db3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::Checked&lt; T, detail::NonNegativeChecker&lt; T &gt; &gt;</type>
      <name>NonNegative</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga7ab2310a74db36363887ad368d5c3118</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::Checked&lt; T, detail::NonNegativeChecker&lt; T &gt;, true &gt;</type>
      <name>NonNegativeFF</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>gafcee23e546ebf8053221fa14741f0dc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::enable_if_t&lt; std::is_pointer_v&lt; T &gt;, detail::Checked&lt; T, detail::NonZeroChecker&lt; T &gt; &gt;&gt;</type>
      <name>NonNull</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga9a1e056867aa49f7ac5d12a557fef88c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::enable_if_t&lt; std::is_pointer_v&lt; T &gt;, detail::Checked&lt; T, detail::NonZeroChecker&lt; T &gt;, true &gt; &gt;</type>
      <name>NonNullFF</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga11e09f5578ccdd32e48595e68bad4cea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::Checked&lt; T, detail::NonPositiveChecker&lt; T &gt; &gt;</type>
      <name>NonPositive</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga631ddc4411751edeb5acbbeeb3ea622b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::Checked&lt; T, detail::NonPositiveChecker&lt; T &gt;, true &gt;</type>
      <name>NonPositiveFF</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>gabcc3093225e2a92cd20e21719cddc120</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::enable_if_t&lt;!std::is_pointer_v&lt; T &gt;, detail::Checked&lt; T, detail::NonZeroChecker&lt; T &gt; &gt;&gt;</type>
      <name>NonZero</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga02f02efffaeefcfeb7bd228ef7da12a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::enable_if_t&lt;!std::is_pointer_v&lt; T &gt;, detail::Checked&lt; T, detail::NonZeroChecker&lt; T &gt;, true &gt; &gt;</type>
      <name>NonZeroFF</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga7b3ab69bdace3bd39222135fc9646225</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::Checked&lt; T, detail::PositiveChecker&lt; T &gt; &gt;</type>
      <name>Positive</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga1fce58e6740bd8d9f025e08472071a9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::Checked&lt; T, detail::PositiveChecker&lt; T &gt;, true &gt;</type>
      <name>PositiveFF</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga521f0650a33330a43eafb31ecb6d4ae5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::Checked&lt; T, detail::UnitIntervalChecker&lt; T &gt; &gt;</type>
      <name>UnitInterval</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga4a5a66199e77439cdac1b5a16831484e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::Checked&lt; T, detail::UnitIntervalChecker&lt; T &gt;, true &gt;</type>
      <name>UnitIntervalFF</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga309960da94ba655d5101c19da5c55c1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::Checked&lt; T, detail::ZeroToUnderOneChecker&lt; T &gt; &gt;</type>
      <name>ZeroToUnderOne</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga6d33fe002089badc48d22d99ec924ee4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::Checked&lt; T, detail::ZeroToUnderOneChecker&lt; T &gt;, true &gt;</type>
      <name>ZeroToUnderOneFF</name>
      <anchorfile>group__CheckedTypes.html</anchorfile>
      <anchor>ga82f43e0e8a9fa443bc746a5f865effef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>CheckedMath</name>
    <title>Math Functions For Checked Types</title>
    <filename>group__CheckedMath.html</filename>
    <member kind="function">
      <type>auto</type>
      <name>abs</name>
      <anchorfile>group__CheckedMath.html</anchorfile>
      <anchor>ga00fab6b331741e415a52e5155467a0bf</anchor>
      <arglist>(const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;arg) -&gt; decltype(Checked&lt; ValueType, Checker, false &gt;(abs(arg.get())))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>nextafter</name>
      <anchorfile>group__CheckedMath.html</anchorfile>
      <anchor>gab11ee26fa0cd543fd5f2eebf9c0c30b3</anchor>
      <arglist>(const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;from, const Checked&lt; ValueType, Checker, NoExcept &gt; &amp;to) -&gt; decltype(Checked&lt; ValueType, Checker, false &gt;(nextafter(from.get(), to.get())))</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>TestPointGroup</name>
    <title>Point Containment Test Functions</title>
    <filename>group__TestPointGroup.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>TestPoint</name>
      <anchorfile>group__TestPointGroup.html</anchorfile>
      <anchor>gab8505b0b58d03f1d6f7c702d9db632c9</anchor>
      <arglist>(const DistanceProxy &amp;proxy, const Length2 &amp;point) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestPoint</name>
      <anchorfile>group__TestPointGroup.html</anchorfile>
      <anchor>ga6307be53a55224b578a3122d40d6e0f1</anchor>
      <arglist>(const DistanceProxy &amp;proxy, const Length2 &amp;point) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestPoint</name>
      <anchorfile>group__TestPointGroup.html</anchorfile>
      <anchor>ga76680b0ead06bcd405828dc4ac179641</anchor>
      <arglist>(const Shape &amp;shape, const Length2 &amp;point) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestPoint</name>
      <anchorfile>group__TestPointGroup.html</anchorfile>
      <anchor>ga1e3631fa4bdf10ca60c8f52e8d49762e</anchor>
      <arglist>(const Shape &amp;shape, const Length2 &amp;point) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestPoint</name>
      <anchorfile>group__TestPointGroup.html</anchorfile>
      <anchor>gae87b356a8656d30d3b7b3a3251906f21</anchor>
      <arglist>(const World &amp;world, BodyID bodyId, ShapeID shapeId, const Length2 &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestPoint</name>
      <anchorfile>group__TestPointGroup.html</anchorfile>
      <anchor>ga01b5749ce9597dbf099b3aa15259c9b9</anchor>
      <arglist>(const World &amp;world, BodyID bodyId, ShapeID shapeId, const Length2 &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>ExceptionsGroup</name>
    <title>Library Defined Exceptions</title>
    <filename>group__ExceptionsGroup.html</filename>
    <class kind="class">playrho::InvalidArgument</class>
    <class kind="class">playrho::LengthError</class>
    <class kind="class">playrho::WrongState</class>
  </compound>
  <compound kind="group">
    <name>ConstraintsGroup</name>
    <title>Library Defined Constraints</title>
    <filename>group__ConstraintsGroup.html</filename>
    <subgroup>JointsGroup</subgroup>
    <class kind="class">playrho::Contact</class>
  </compound>
  <compound kind="group">
    <name>Math</name>
    <title>Additional Math Functions</title>
    <filename>group__Math.html</filename>
    <member kind="function">
      <type>constexpr auto</type>
      <name>AlmostEqual</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga8b872c5026531f33636758bb11b167e6</anchor>
      <arglist>(T a, T b, int ulp=4) -&gt; std::enable_if_t&lt; IsArithmeticV&lt; T &gt;, bool &gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>AlmostZero</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga994ed50293b78dff53a5c7bce78602bf</anchor>
      <arglist>(const T &amp;value) -&gt; decltype(abs(value)&lt; std::numeric_limits&lt; T &gt;::min())</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>Atan2</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gab870a9188fcc77c905807fa718a8268d</anchor>
      <arglist>(T y, T x)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>Average</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga5928e1bb2ea4a8d60673314ff46a83cf</anchor>
      <arglist>(const T &amp;span)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Bisect</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gad9807960f6f6e39b0449aec22d646669</anchor>
      <arglist>(const T &amp;a1, const T &amp;a2) -&gt; decltype((a1+a2)/2)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>cfloor</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga3f6e8b69eaeee408d3894b59629cffe9</anchor>
      <arglist>(T v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>ComputeCentroid</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gae769785f0540a4b8960b282f6b105c14</anchor>
      <arglist>(const Span&lt; const Length2 &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Cross</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gab5164277624274fde39d33fd4f0f5dd5</anchor>
      <arglist>(const T1 &amp;a, const T2 &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>ctrunc</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gaff0508a648e02202d025b83e46973e45</anchor>
      <arglist>(T v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Dot</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga08e3eae87277d85db13cce6b12facf1e</anchor>
      <arglist>(const T1 &amp;a, const T2 &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngle</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga941d2e26e203e19b567a018570417be3</anchor>
      <arglist>(const Vector2&lt; T &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>NonNegativeFF&lt; Area &gt;</type>
      <name>GetAreaOfCircle</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga007d43d0fd5ce900118dd41e3197d887</anchor>
      <arglist>(Length radius)</arglist>
    </member>
    <member kind="function">
      <type>NonNegativeFF&lt; Area &gt;</type>
      <name>GetAreaOfPolygon</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga760effc058042418453697e733937b2f</anchor>
      <arglist>(const Span&lt; const Length2 &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Length2 &gt;</type>
      <name>GetCircleVertices</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga338c586cf1a29f27ee334d061fa59b5d</anchor>
      <arglist>(Length radius, std::size_t slices, Angle start=0_deg, Real turns=Real(1))</arglist>
    </member>
    <member kind="function">
      <type>constexpr Angle</type>
      <name>GetFwdRotationalAngle</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga5d41854b91fcfb6b8ea05e7b8c92e304</anchor>
      <arglist>(const Angle &amp;a1, const Angle &amp;a2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetInverse22</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga0a9354b34edeb8433cd3062aecb78143</anchor>
      <arglist>(const Mat33 &amp;value) noexcept -&gt; Mat33</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetMagnitude</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gafe323c1c5ab88d30d18413a3c1f10abb</anchor>
      <arglist>(const T &amp;value) noexcept(noexcept(sqrt(GetMagnitudeSquared(value)))) -&gt; decltype(sqrt(GetMagnitudeSquared(value)))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetMagnitudeSquared</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga36866f7061dfa4d056405aa5da0daf84</anchor>
      <arglist>(const T &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetModuloNext</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga81dbf936e69c8d2ecc9ca3600c6be3a1</anchor>
      <arglist>(T value, const T count) noexcept -&gt; decltype(++value,(value&lt; count)? value:static_cast&lt; T &gt;(0), T())</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetModuloPrev</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga6434759234bd5e94759bf10cc4eb5ac5</anchor>
      <arglist>(const T value, const T count) noexcept -&gt; decltype((value ? value :count) - static_cast&lt; T &gt;(1), T())</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetNormalized</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga156a2abff11f978a8df25efbf0c10147</anchor>
      <arglist>(Angle value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>SecondMomentOfArea</type>
      <name>GetPolarMoment</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gaee743e28b24b01d9101b8a2e7bd72284</anchor>
      <arglist>(const Span&lt; const Length2 &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Angle</type>
      <name>GetRevRotationalAngle</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga1413e02cc41bf9943071baa2ae242c27</anchor>
      <arglist>(const Angle &amp;a1, const Angle &amp;a2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetShortestDelta</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gac9b72aa4a587e552a586a42494d614c1</anchor>
      <arglist>(Angle a0, Angle a1) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetSymInverse33</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga39333b6fc4de2a8f365b74194e42ceef</anchor>
      <arglist>(const Mat33 &amp;value) noexcept -&gt; Mat33</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vec2</type>
      <name>InverseTransform</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga68c69326c22bafb811d6e00b9e6966cc</anchor>
      <arglist>(const Vec2 &amp;v, const Mat22 &amp;A) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Invert</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga01639d99c5401d526aeb5c6df075e153</anchor>
      <arglist>(const Matrix22&lt; IN_TYPE &gt; &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>IsOdd</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga96fac7df522251c1cc54aeafbfe3b737</anchor>
      <arglist>(const T &amp;val) -&gt; decltype((val % 2) !=T{})</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>IsPowerOfTwo</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga08b9672d78dbe1aa5275a9c514b422f5</anchor>
      <arglist>(const T &amp;n) -&gt; decltype(n &amp;&amp;!(n &amp;(n - 1)))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>ModuloViaFmod</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gab53c16bcb68dd36d3b18027a2ac6b1b2</anchor>
      <arglist>(T dividend, T divisor)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>ModuloViaTrunc</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga84e7cb2a415fcb956202c8d7e1b1d200</anchor>
      <arglist>(T dividend, T divisor) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mat22</type>
      <name>MulT</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gab471bae6413067374ab8d8262533e402</anchor>
      <arglist>(const Mat22 &amp;A, const Mat22 &amp;B) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>NextPowerOfTwo</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gac9c45595993e763f220e4018c3780058</anchor>
      <arglist>(T x) -&gt; decltype((x|(x &gt;&gt; 1u)), T(++x))</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>Normalize</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga0c7d2525a406c1f83c0574e46a2cee32</anchor>
      <arglist>(Vec2 &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>RoundOff</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga1502fbf5063c1f5dbedafe215895ad29</anchor>
      <arglist>(const T &amp;value, unsigned precision=DefaultRoundOffPrecission) -&gt; decltype(round(value *static_cast&lt; T &gt;(precision))/static_cast&lt; T &gt;(precision))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>RoundOff</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga1ceb2daa8b41c4834408662c43e5abda</anchor>
      <arglist>(const Vec2 &amp;value, std::uint32_t precision=DefaultRoundOffPrecission) -&gt; Vec2</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Secant</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga30837f12d652c4e51406db0f1cd11a3a</anchor>
      <arglist>(const T &amp;target, const U &amp;a1, const T &amp;s1, const U &amp;a2, const T &amp;s2) -&gt; decltype(a1+(target - s1) *(a2 - a1)/(s2 - s1))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Solve</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga1dfb22979400417701de8582bb6d76ad</anchor>
      <arglist>(const Matrix22&lt; U &gt; &amp;mat, const Vector2&lt; T &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Solve22</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga844e39448ab76470e60db668b1815ee0</anchor>
      <arglist>(const Mat33 &amp;mat, const Vector2&lt; T &gt; &amp;b) noexcept -&gt; Vector2&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Solve33</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gab5eb451a3aff0db8ef5bcbb3d67a18df</anchor>
      <arglist>(const Mat33 &amp;mat, const Vector3&lt; T &gt; &amp;b) noexcept -&gt; Vector3&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Square</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga4000cee8b1fc5a9ab6a5cfe29eb645b6</anchor>
      <arglist>(T t) noexcept(noexcept(t *t)) -&gt; decltype(t *t)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>ToSigned</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga3410f58d0023e2a0d6ae6ad85da9508c</anchor>
      <arglist>(const T &amp;value) -&gt; decltype(static_cast&lt; std::make_signed_t&lt; T &gt;&gt;(value))</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vec2</type>
      <name>Transform</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gaa8489f7d571594e36194a437ea93898a</anchor>
      <arglist>(const Vec2 &amp;v, const Mat33 &amp;A) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Transform</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga17fa159bf4195bff228c3fda9252a5b1</anchor>
      <arglist>(const Vector&lt; T1, M &gt; &amp;v, const Matrix&lt; T2, M, N &gt; &amp;m) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultRoundOffPrecission</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga2e94545b5052523414ec03d0e95e2297</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>MatrixTraitsGroup</name>
    <title>Matrix Traits</title>
    <filename>group__MatrixTraitsGroup.html</filename>
    <class kind="struct">playrho::detail::IsMatrix</class>
    <class kind="struct">playrho::detail::IsMatrix&lt; Vector&lt; Vector&lt; T, N &gt;, M &gt; &gt;</class>
    <class kind="struct">playrho::detail::IsSquareMatrix</class>
    <class kind="struct">playrho::detail::IsSquareMatrix&lt; Vector&lt; Vector&lt; T, M &gt;, M &gt; &gt;</class>
  </compound>
  <compound kind="group">
    <name>DecimalUnitPrefices</name>
    <title>Decimal Unit Prefices</title>
    <filename>group__DecimalUnitPrefices.html</filename>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Centi</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>ga0367ca8edd23b32c868e3fe5f79082ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Deci</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>ga5a49a7e54c1b478f5b1cc882aa55f2d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Giga</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>ga66ca2124fd143e2433bb2f409dc83f92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Kilo</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>gae537180a6f4ceb3a3192ee623fc2c8bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Mega</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>gad7b2132b6101f0d7f6b3658147025168</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Peta</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>ga590efc6f9c2013056da85de7ab4e84ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Tera</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>gaf30f732f080ece0b4e695da15e9da2a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Yotta</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>ga57179cfbd588c3d24609ad449a94bb0a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>PhysicalQuantities</name>
    <title>Physical Quantity Types</title>
    <filename>group__PhysicalQuantities.html</filename>
    <member kind="typedef">
      <type>detail::plane_angle</type>
      <name>Angle</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gabb35ed422281bfdf3c41a276958898fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::angular_acceleration</type>
      <name>AngularAcceleration</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga240f19679aa74a8999d4093089351f22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::angular_momentum</type>
      <name>AngularMomentum</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga747a451cf2286bc935336043c212b74d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::angular_velocity</type>
      <name>AngularVelocity</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga8b4603a98e526262c2e4adfe99510672</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::area</type>
      <name>Area</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga708ceb55bdc6043d445776d1886802eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::surface_density</type>
      <name>AreaDensity</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga6bcf1d1de9ef60a9833c222efe7ffd57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::force</type>
      <name>Force</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gad51dd88ec6a5b3bf384dc89a63019d9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::frequency</type>
      <name>Frequency</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga526d114a9d34d7237ed3e41829ab3eff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::inverse_mass</type>
      <name>InvMass</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gab878660e71529c9163185103d206f9f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::inverse_moment_of_inertia</type>
      <name>InvRotInertia</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga8ec7c3082c9a05e095b45f6b1c7caaaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::length</type>
      <name>Length</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga8705f1923f7cff39bf09f6d01989770d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::acceleration</type>
      <name>LinearAcceleration</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gaea2069744ddc1c5068705b00f957451a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::velocity</type>
      <name>LinearVelocity</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gaf4434fe902be456f845c8e478bd48f97</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::mass</type>
      <name>Mass</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gaaf74540633aeb472114381118842149e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::momentum</type>
      <name>Momentum</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gad36b742307f9f19c2c8c95e9372a3613</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::moment_of_inertia</type>
      <name>RotInertia</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga81349200b6a963bf87885ab7e89e981d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::second_moment_of_area</type>
      <name>SecondMomentOfArea</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga687546b31c191aeeacf223bdbebe6747</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::time</type>
      <name>Time</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gaa4842e1cf025b86cafb4b09c0f51bc18</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::torque</type>
      <name>Torque</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga1acd0787ea4caa9725577e0aa2fdc9b7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>PhysicalUnits</name>
    <title>Units For Physical Quantities</title>
    <filename>group__PhysicalUnits.html</filename>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>CubicMeter</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga0107011ec7329a9ac267119f7ff941bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Degree</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gaf0840a4c6fcfa4ed0f1e25820fea0ca3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DegreePerSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga987ba57899c87b7d6734d046d1c854b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DegreePerSquareSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga7a7cdea552b0f98a011b3287850433a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Hertz</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gadef54036b9480e0cf730100688e20570</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Kilogram</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gad4ca745853415c1b3df906848978df9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>KilogramPerSquareMeter</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga64416f646855741c31802eb689760ba8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Meter</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gab5d1d9c70d11cff5fb552e939de39b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>MeterPerSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga9d80fc94ec9d5990d2fa6b9e4b67267d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>MeterPerSquareSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga0bc87db1f0fbc1b5f1ae9b44c66b6e82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Newton</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gac88db74a1ddb390655f0837d9c970f76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>NewtonMeter</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gab920bd1046410474258f9e8630e557a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>NewtonMeterSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gae55524173aec32daa74def2b8dddc0bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>NewtonSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga64db6556e1824d11178c3d68301c2adc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Radian</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gaebbe3f5282db32af8292500e505e21e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>RadianPerSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga446e46852ff69dee446aadc44635865c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>RadianPerSquareSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga0da7c45fe3ebc86d397e684154033742</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>RevolutionsPerMinute</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga46b97afc56560699033e7c3fb480a4f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Second</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga6dacec03532687e9bac4ac6a882b35ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>SquareMeter</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga1fb0acbda4409a1a132baf7df83b9870</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>SquareRadian</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga941b3913fd0dd86a33e695cd9b73318f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>SquareSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga64467fca61de8c359a4e019f977ff320</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Unitsymbols</name>
    <title>Literals For Unit Symbols</title>
    <filename>group__Unitsymbols.html</filename>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_cm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga8265c747e9b00e05f54f0aee1a4fdbf7</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_cm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga9a1d9f65f4ef9fdc77b5393cced60d0e</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Time</type>
      <name>operator&quot;&quot;_d</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga4699929ce883b631701b929a3a4a1511</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Time</type>
      <name>operator&quot;&quot;_d</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga1124541f25e0b4e9024f3da77b60ce29</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Angle</type>
      <name>operator&quot;&quot;_deg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gad590043c44d46c43cf3e38bbb231ec8d</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Angle</type>
      <name>operator&quot;&quot;_deg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga1a68411c9bee133e430474fecd57df06</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_dm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga58b222eced4c7ed60fd64bb6c3ba48e9</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_dm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga9beacde5d50cff177d145f33530e0ced</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mass</type>
      <name>operator&quot;&quot;_g</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gac348f2b6f845962edbc4fc12b326abbc</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mass</type>
      <name>operator&quot;&quot;_g</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga41c7f5697708c39baa2004b88bd4040c</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_Gm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gad6a94286306b5fc6540f06c33c4c6f5b</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_Gm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga05ef5a19b234b013f397d727a647898a</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Time</type>
      <name>operator&quot;&quot;_h</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga0f4ecfc991b77fa7038f6d26ae391f10</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Time</type>
      <name>operator&quot;&quot;_h</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga70c986f4d0ec946de664094ab57d467f</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Frequency</type>
      <name>operator&quot;&quot;_Hz</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gada3861ed51714dec5584f5ac2eccb351</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Frequency</type>
      <name>operator&quot;&quot;_Hz</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gabc754da89d9edea817c08ec30248f51e</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mass</type>
      <name>operator&quot;&quot;_kg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gab37a1df675967bc0408835763b38eb9b</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mass</type>
      <name>operator&quot;&quot;_kg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga1ec30bdee6208ced65e61642dc51a57a</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AreaDensity</type>
      <name>operator&quot;&quot;_kgpm2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga35d81e0c97d9e681cde91485230c0b11</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AreaDensity</type>
      <name>operator&quot;&quot;_kgpm2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga3102ca198b5559fcd97d9a847ddafdf9</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_km</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gae0d611695e995c22b52ba406e3d938af</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_km</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gafeb3f293ac0ab46917302e403bd41be8</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr LinearVelocity</type>
      <name>operator&quot;&quot;_kps</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga0f62968533e8cd267de90c1afa366d29</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr LinearVelocity</type>
      <name>operator&quot;&quot;_kps</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gae2a535f5043fab4f1d085061b85c2a8c</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_m</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gaab1d37a1ac19ffdb90d209251c9be0af</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_m</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga8a14e71e7bcc58c55976face61eed135</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Area</type>
      <name>operator&quot;&quot;_m2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga61eb3c1eb2284bb30dcb127c0ca730db</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Area</type>
      <name>operator&quot;&quot;_m2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga20a403f71b8175cfb90bc4d970909301</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Time</type>
      <name>operator&quot;&quot;_min</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga0b1a7f4abf19d284ab6db1da9b47de8b</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Time</type>
      <name>operator&quot;&quot;_min</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga212e5deefc8ccc59e0d81d1b1a76f01d</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_Mm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gafdb01dc5edc19a0616bae6f98bcd4b25</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_Mm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gade5160c838dead45f9d2f43297642923</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr LinearVelocity</type>
      <name>operator&quot;&quot;_mps</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gafff79dc3f94f4e1ee0f38eaf65b7e475</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr LinearVelocity</type>
      <name>operator&quot;&quot;_mps</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga29c9f5a17cc4033b8fd3e9486eec80e6</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr LinearAcceleration</type>
      <name>operator&quot;&quot;_mps2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gad1433e48714ffae291e3122d6ae60686</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr LinearAcceleration</type>
      <name>operator&quot;&quot;_mps2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga93977e9c554959304f2d4212d373a3c6</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Force</type>
      <name>operator&quot;&quot;_N</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gab0c745951bdfb935ce193ce74add4f7f</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Force</type>
      <name>operator&quot;&quot;_N</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga50e6a3c896dea20d70bfd5d7664e2830</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Torque</type>
      <name>operator&quot;&quot;_Nm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gaf9b52e6dd8edf9b4342075e88be348ed</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Torque</type>
      <name>operator&quot;&quot;_Nm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gaf5c1a86e9698626ca29c2ea17f3eee1d</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum</type>
      <name>operator&quot;&quot;_Ns</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gaf456e41b17a6b04735df20d018dfe914</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum</type>
      <name>operator&quot;&quot;_Ns</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gafa460cc2672c862e9b7834bfa49440fc</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mass</type>
      <name>operator&quot;&quot;_Pg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga829ed7d59fb256a65f91ff2a38dffe1f</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mass</type>
      <name>operator&quot;&quot;_Pg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga8125aed99d289a1b80e057cedd64e13b</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Angle</type>
      <name>operator&quot;&quot;_rad</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga56b7f8881f697bfc5f6c88d268e96543</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Angle</type>
      <name>operator&quot;&quot;_rad</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga7f7706f4df8f50a57e186d6cc68b02bc</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AngularVelocity</type>
      <name>operator&quot;&quot;_rpm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga9af2088bf38db720f2dca4c8db627b3f</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AngularVelocity</type>
      <name>operator&quot;&quot;_rpm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga473416136af75cf3600844ad6eb975eb</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Time</type>
      <name>operator&quot;&quot;_s</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gae7e1888c6386ab9832491aef18039e0c</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Time</type>
      <name>operator&quot;&quot;_s</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga5b793a1f4b1c3cce7996c1a55d4e0575</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mass</type>
      <name>operator&quot;&quot;_Yg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga9960d0aeddc327fa55019ebb6bb98c4a</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mass</type>
      <name>operator&quot;&quot;_Yg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga1255eade62dd2acd569300e17da4d578</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>UnitConstants</name>
    <title>Physical Constants</title>
    <filename>group__UnitConstants.html</filename>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>BigG</name>
      <anchorfile>group__UnitConstants.html</anchorfile>
      <anchor>ga4435a07d3cb65258172c132b134c02fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>EarthlyLinearAcceleration</name>
      <anchorfile>group__UnitConstants.html</anchorfile>
      <anchor>ga770e7e3c14510e96d5115b36988e5dde</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>VectorTraitsGroup</name>
    <title>Vector Traits</title>
    <filename>group__VectorTraitsGroup.html</filename>
    <class kind="struct">playrho::detail::IsVector</class>
    <class kind="struct">playrho::detail::IsVector&lt; Vector&lt; T, N &gt; &gt;</class>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>PlayRho API Documentation</title>
    <filename>index.html</filename>
    <docanchor file="index.html" title="Overview">intro_sec</docanchor>
    <docanchor file="index.html" title="Getting Started">coding_sec</docanchor>
    <docanchor file="index.html" title="An Entire Application">helloworld_sec</docanchor>
  </compound>
</tagfile>
