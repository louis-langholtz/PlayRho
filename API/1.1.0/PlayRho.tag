<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile doxygen_version="1.8.20">
  <compound kind="struct">
    <name>playrho::detail::AABB</name>
    <filename>structplayrho_1_1detail_1_1AABB.html</filename>
    <templarg>N</templarg>
    <member kind="typedef">
      <type>Vector&lt; Length, N &gt;</type>
      <name>Location</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a426297e1ee24415f28a18264c827a590</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>AABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a29c582acce4e7411bfabb2c95a907794</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>AABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>abded54cf0fe4192b2163e5aac76eafbb</anchor>
      <arglist>(std::enable_if_t&lt; sizeof...(Tail)+1==N, LengthInterval &gt; head, Tail... tail) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>AABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a8d711b996ba48c40f238a636a0c8b0dd</anchor>
      <arglist>(const Location p) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>AABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a12f5cd4be9c11169b2a3f9766e9f1341</anchor>
      <arglist>(const Location a, const Location b) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>LengthInterval</type>
      <name>ranges</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a5a73ebcc0bfb844da97b93f9b9d85b6f</anchor>
      <arglist>[N]</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>ae9459aea2a9cd94f8089837a09f41003</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>abe2471568df9b5635f92209b8d25be38</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>ac7738d0953158fb06eada28384bde27b</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>aa3edeccc850d69e6165e5a5523e5b406</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a76b557d909c21ff5256aeb1a9d3b8c05</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a48d06003e414f652104fd195b308d296</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>TestOverlap</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a9ad73cec0b99cb943f354a290c7f9bfc</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;a, const AABB&lt; N &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; Length, N &gt;</type>
      <name>GetCenter</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>aa5c9f951c0b82a2cdecdc7d559ca34d4</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; Length, N &gt;</type>
      <name>GetDimensions</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a3f0de4fdd4cecf5567090bf345c42ead</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; Length, N &gt;</type>
      <name>GetExtents</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a869cd35cc1b8a53bfdedd47f2b6b9000</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>Contains</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>aeccc4adba69c5f7bbf4c0c3724ae1fcc</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;a, const AABB&lt; N &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt; &amp;</type>
      <name>Include</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>aa5638faaf78557603c3e60b945f0c415</anchor>
      <arglist>(AABB&lt; N &gt; &amp;var, const Vector&lt; Length, N &gt; &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt; &amp;</type>
      <name>Include</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a5daa9c97e0b9a5dcf45681bf596639c3</anchor>
      <arglist>(AABB&lt; N &gt; &amp;var, const AABB&lt; N &gt; &amp;val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt; &amp;</type>
      <name>Fatten</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a3b93a03d7da33af6899f8997a3b254ce</anchor>
      <arglist>(AABB&lt; N &gt; &amp;var, const NonNegative&lt; Length &gt; amount) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt;</type>
      <name>GetDisplacedAABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a1d14a66e8a7cca9d84a04736e498e1a2</anchor>
      <arglist>(AABB&lt; N &gt; aabb, const Vector&lt; Length, N &gt; displacement)</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt;</type>
      <name>GetFattenedAABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a3f169758eb050baf511b152fb5177735</anchor>
      <arglist>(AABB&lt; N &gt; aabb, const Length amount)</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt;</type>
      <name>GetMovedAABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a74557026c35a580c45dfc12f0c2bc6c0</anchor>
      <arglist>(AABB&lt; N &gt; aabb, const Vector&lt; Length, N &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt;</type>
      <name>GetEnclosingAABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>af0034e680404f80e04d94699d42ed07d</anchor>
      <arglist>(AABB&lt; N &gt; a, const AABB&lt; N &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; Length, N &gt;</type>
      <name>GetLowerBound</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>aad63477b5cea2c8275ecedff1f3f9530</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; Length, N &gt;</type>
      <name>GetUpperBound</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a98a4a10ae8cc38664e56b99a5ef40ba6</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>GetPerimeter</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a8f7f7fdc94ace092c3c65acbe6522752</anchor>
      <arglist>(const AABB &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr d2::AABB</type>
      <name>GetInvalid</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a2a108ba35319c75ca3d68dd165ea7209</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AABB&lt; 2 &gt;</name>
    <filename>structplayrho_1_1detail_1_1AABB.html</filename>
    <member kind="typedef">
      <type>Vector&lt; Length, N &gt;</type>
      <name>Location</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a426297e1ee24415f28a18264c827a590</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>AABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a29c582acce4e7411bfabb2c95a907794</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>AABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>abded54cf0fe4192b2163e5aac76eafbb</anchor>
      <arglist>(std::enable_if_t&lt; sizeof...(Tail)+1==N, LengthInterval &gt; head, Tail... tail) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>AABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a8d711b996ba48c40f238a636a0c8b0dd</anchor>
      <arglist>(const Location p) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>AABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a12f5cd4be9c11169b2a3f9766e9f1341</anchor>
      <arglist>(const Location a, const Location b) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>LengthInterval</type>
      <name>ranges</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a5a73ebcc0bfb844da97b93f9b9d85b6f</anchor>
      <arglist>[N]</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>ae9459aea2a9cd94f8089837a09f41003</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>abe2471568df9b5635f92209b8d25be38</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>ac7738d0953158fb06eada28384bde27b</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>aa3edeccc850d69e6165e5a5523e5b406</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a76b557d909c21ff5256aeb1a9d3b8c05</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a48d06003e414f652104fd195b308d296</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>TestOverlap</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a9ad73cec0b99cb943f354a290c7f9bfc</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;a, const AABB&lt; N &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; Length, N &gt;</type>
      <name>GetCenter</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>aa5c9f951c0b82a2cdecdc7d559ca34d4</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; Length, N &gt;</type>
      <name>GetDimensions</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a3f0de4fdd4cecf5567090bf345c42ead</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; Length, N &gt;</type>
      <name>GetExtents</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a869cd35cc1b8a53bfdedd47f2b6b9000</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>Contains</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>aeccc4adba69c5f7bbf4c0c3724ae1fcc</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;a, const AABB&lt; N &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt; &amp;</type>
      <name>Include</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>aa5638faaf78557603c3e60b945f0c415</anchor>
      <arglist>(AABB&lt; N &gt; &amp;var, const Vector&lt; Length, N &gt; &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt; &amp;</type>
      <name>Include</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a5daa9c97e0b9a5dcf45681bf596639c3</anchor>
      <arglist>(AABB&lt; N &gt; &amp;var, const AABB&lt; N &gt; &amp;val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt; &amp;</type>
      <name>Fatten</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a3b93a03d7da33af6899f8997a3b254ce</anchor>
      <arglist>(AABB&lt; N &gt; &amp;var, const NonNegative&lt; Length &gt; amount) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt;</type>
      <name>GetDisplacedAABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a1d14a66e8a7cca9d84a04736e498e1a2</anchor>
      <arglist>(AABB&lt; N &gt; aabb, const Vector&lt; Length, N &gt; displacement)</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt;</type>
      <name>GetFattenedAABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a3f169758eb050baf511b152fb5177735</anchor>
      <arglist>(AABB&lt; N &gt; aabb, const Length amount)</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt;</type>
      <name>GetMovedAABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a74557026c35a580c45dfc12f0c2bc6c0</anchor>
      <arglist>(AABB&lt; N &gt; aabb, const Vector&lt; Length, N &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt;</type>
      <name>GetEnclosingAABB</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>af0034e680404f80e04d94699d42ed07d</anchor>
      <arglist>(AABB&lt; N &gt; a, const AABB&lt; N &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; Length, N &gt;</type>
      <name>GetLowerBound</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>aad63477b5cea2c8275ecedff1f3f9530</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; Length, N &gt;</type>
      <name>GetUpperBound</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a98a4a10ae8cc38664e56b99a5ef40ba6</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>GetPerimeter</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a8f7f7fdc94ace092c3c65acbe6522752</anchor>
      <arglist>(const AABB &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr d2::AABB</type>
      <name>GetInvalid</name>
      <anchorfile>structplayrho_1_1detail_1_1AABB.html</anchorfile>
      <anchor>a2a108ba35319c75ca3d68dd165ea7209</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::Acceleration</name>
    <filename>structplayrho_1_1d2_1_1Acceleration.html</filename>
    <member kind="variable">
      <type>LinearAcceleration2</type>
      <name>linear</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>aede18b49c56f6f4612c1bbb601ab5e00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AngularAcceleration</type>
      <name>angular</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>ac9389483ab188239f61e5d0d5a8b672c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>a4e08ccbbdba321adad44c940d95c52fb</anchor>
      <arglist>(const Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>a4442cd95fcdc4e62463d3e294fc7a303</anchor>
      <arglist>(const Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration &amp;</type>
      <name>operator*=</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>a381123f80f2c54ad37576e703eeb68a4</anchor>
      <arglist>(Acceleration &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration &amp;</type>
      <name>operator/=</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>a80f242d8a02779e3c73ebb380a7476c1</anchor>
      <arglist>(Acceleration &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration &amp;</type>
      <name>operator+=</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>aae7afb9157770b54dde00ee05cc3f586</anchor>
      <arglist>(Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>af1ae3bcd38f85eedaab9cfb290de1ba2</anchor>
      <arglist>(const Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration &amp;</type>
      <name>operator-=</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>a66e903f6e66753963a1bd82295759ddb</anchor>
      <arglist>(Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>af4082a55e3d2a0600855a5b626f19f41</anchor>
      <arglist>(const Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>af2f8aaffda4163a6733ef5aff24414e0</anchor>
      <arglist>(const Acceleration &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>a33f1fdc4c279009a88f064ca1dd3ff59</anchor>
      <arglist>(const Acceleration &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>a69bd254b1dac7999ffb0d0a8cb73f64e</anchor>
      <arglist>(const Acceleration &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>a19e063d352181298469b751c99cad684</anchor>
      <arglist>(const Real lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration</type>
      <name>operator/</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>a9b895b5b826bc5349fbd007bd6e9683b</anchor>
      <arglist>(const Acceleration &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>structplayrho_1_1d2_1_1Acceleration.html</anchorfile>
      <anchor>a81b1dd82c9c8f3ec7c80b0c53e818239</anchor>
      <arglist>(const d2::Acceleration &amp;value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::AllocatedArray</name>
    <filename>classplayrho_1_1AllocatedArray.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a7922ea8fb80a306a86b003008cb8207c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a11096c45083484b7923b5fb582417971</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type</type>
      <name>const_value_type</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>ad4c58287e44fbe5dff42c43459328138</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a06b33c73b0f980ad278fddc8edfff64f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a90eb0a613e6be348e7b92e4954bdcf6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a4f1b6fe5692521af167ac8997d0a246d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_pointer</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>ac4dab897d5062562e2d03403320834ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a944940dc6eba07407c8ec39063583353</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Deleter</type>
      <name>deleter_type</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>ae45cc668488dda80f86798ece5177709</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointer</type>
      <name>iterator</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>ae8a5566374fda92f6339f092a811c4cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const_pointer</type>
      <name>const_iterator</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a64ad63e8c7cab9f9a9bd5beb0becfea9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>AllocatedArray</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a8c067677db7335c43d3427e51e94ce98</anchor>
      <arglist>(size_type max_size, pointer data, deleter_type deleter=noop_deleter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AllocatedArray</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a341342cabbb7a14b8dc39d0f7024cbfa</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AllocatedArray</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a18c9e023064af41df0f2382562687ed5</anchor>
      <arglist>(AllocatedArray &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>ad0542a9abb019b0e5559c68b3769afb6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>max_size</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a47b89d9d164f7a220926f56a09807863</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a7d5d907e2e36be1e522c6727ee8c8556</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>data</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a8123646afc5f61bbe8f6133ecbdaabd8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a9491c00891d7a2346bcbb49098914963</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a940509a1b53558588529abcf8e625ce9</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>af9e21faf6a718b406e479284f3c0ad24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a92f280d6d8022a3c1e5b0c36a9c87101</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a1ff45f28211a17d0d04f8e40aec2a69d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a77dc8701693c182a1207a08f4c7deedf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a8a74fa0e4e9f8a64f51e82c037239a11</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a8063bbfbafc1cc43e9a7d2ca1fcd1ae5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>back</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a3540320bd294a745acc8e09858b82d06</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>back</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>ac086330d25d5b7b1ae2f9259a03717f9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a0adb98ab62d2f4f8723b6aa064015b7f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a31fd406ef91b7ede96757ed17836abf3</anchor>
      <arglist>(const_reference value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_back</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a80b6f4c914d29d14715e9fef516ffdea</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>noop_deleter</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a7b547ae235e5aa49772d79245c217a83</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_type</type>
      <name>m_max_size</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a5729a539c73a7278b94df47f0889ebb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_type</type>
      <name>m_size</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>ae344f059bf8527fe9d3a396c93c087a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>pointer</type>
      <name>m_data</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a9e5c2b65511635deb824688d0851cf3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>deleter_type</type>
      <name>m_deleter</name>
      <anchorfile>classplayrho_1_1AllocatedArray.html</anchorfile>
      <anchor>a0d57a133d2b3b2c62fb88ea7648173dc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::StackAllocator::AllocationRecord</name>
    <filename>structplayrho_1_1StackAllocator_1_1AllocationRecord.html</filename>
    <member kind="variable">
      <type>void *</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1StackAllocator_1_1AllocationRecord.html</anchorfile>
      <anchor>a3852baf545ea9c93c693470ac454bdd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>structplayrho_1_1StackAllocator_1_1AllocationRecord.html</anchorfile>
      <anchor>ab3a33d7f77cb7a86961e605f9e2e86c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>usedMalloc</name>
      <anchorfile>structplayrho_1_1StackAllocator_1_1AllocationRecord.html</anchorfile>
      <anchor>a213b548aa0710b81f1773580c8cb2e0f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::ArrayAllocator</name>
    <filename>classplayrho_1_1ArrayAllocator.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>aafb7e2bccd27d04b9343ee24f3d2efea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::size_type</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a2c4ace224e62d268f9e3eaadb271d7e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::reference</type>
      <name>reference</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a570a34c38dbc6d8bdbee5f7d77896b5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::const_reference</type>
      <name>const_reference</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>aa142bea2a88c97d0f110f875fa65afc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>GetIndex</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a30ff72d7af44bb4de84131c61489a0e3</anchor>
      <arglist>(value_type *ptr) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>Allocate</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a6869cae97cf27cd19be7d3ed2bf59c82</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>Allocate</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a4539af5eb1befad525109d0b0b9ed6ff</anchor>
      <arglist>(const value_type &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Free</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>ab4740267ab2704193a2b9119f2609930</anchor>
      <arglist>(size_type index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FindFree</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a96d8f8c0e2b6430b15811f4220621fe3</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a9ce8cdcd73206b4b15a694c24b63e1a3</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a0fc60bca9b6364ee93c79ae4b89d29f1</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>at</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a7aa3b21232ec33268be6c081cd5942cc</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>at</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>ad4a338beaa951d1c78b2f078d46d4d6d</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a8bfd5e4aa22b0b3438fcb61e4ad5caba</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>max_size</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>adb078a3065db937ff344ccddf8059c16</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>free_size</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a5818cc1c42df03e4130104e90717a9b2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>aa92b37ec34b36460cf79bbdfbca13512</anchor>
      <arglist>(size_type value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a02ad4e764dddd5e7311f69de9939b84a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; value_type &gt;</type>
      <name>m_data</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a9464007a8e0743172290208c64abff94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; size_type &gt;</type>
      <name>m_free</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a326254ccc6621b73957924d5af2ae67f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArrayAllocator&lt; BodyJoints &gt;</name>
    <filename>classplayrho_1_1ArrayAllocator.html</filename>
    <member kind="typedef">
      <type>BodyJoints</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>aafb7e2bccd27d04b9343ee24f3d2efea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::size_type</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a2c4ace224e62d268f9e3eaadb271d7e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::reference</type>
      <name>reference</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a570a34c38dbc6d8bdbee5f7d77896b5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::const_reference</type>
      <name>const_reference</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>aa142bea2a88c97d0f110f875fa65afc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>GetIndex</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a30ff72d7af44bb4de84131c61489a0e3</anchor>
      <arglist>(value_type *ptr) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>Allocate</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a6869cae97cf27cd19be7d3ed2bf59c82</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>Allocate</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a4539af5eb1befad525109d0b0b9ed6ff</anchor>
      <arglist>(const value_type &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Free</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>ab4740267ab2704193a2b9119f2609930</anchor>
      <arglist>(size_type index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FindFree</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a96d8f8c0e2b6430b15811f4220621fe3</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a9ce8cdcd73206b4b15a694c24b63e1a3</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a0fc60bca9b6364ee93c79ae4b89d29f1</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>at</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a7aa3b21232ec33268be6c081cd5942cc</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>at</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>ad4a338beaa951d1c78b2f078d46d4d6d</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a8bfd5e4aa22b0b3438fcb61e4ad5caba</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>max_size</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>adb078a3065db937ff344ccddf8059c16</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>free_size</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a5818cc1c42df03e4130104e90717a9b2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>aa92b37ec34b36460cf79bbdfbca13512</anchor>
      <arglist>(size_type value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a02ad4e764dddd5e7311f69de9939b84a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; value_type &gt;</type>
      <name>m_data</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a9464007a8e0743172290208c64abff94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; size_type &gt;</type>
      <name>m_free</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a326254ccc6621b73957924d5af2ae67f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArrayAllocator&lt; Contacts &gt;</name>
    <filename>classplayrho_1_1ArrayAllocator.html</filename>
    <member kind="typedef">
      <type>Contacts</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>aafb7e2bccd27d04b9343ee24f3d2efea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::size_type</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a2c4ace224e62d268f9e3eaadb271d7e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::reference</type>
      <name>reference</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a570a34c38dbc6d8bdbee5f7d77896b5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::const_reference</type>
      <name>const_reference</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>aa142bea2a88c97d0f110f875fa65afc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>GetIndex</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a30ff72d7af44bb4de84131c61489a0e3</anchor>
      <arglist>(value_type *ptr) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>Allocate</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a6869cae97cf27cd19be7d3ed2bf59c82</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>Allocate</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a4539af5eb1befad525109d0b0b9ed6ff</anchor>
      <arglist>(const value_type &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Free</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>ab4740267ab2704193a2b9119f2609930</anchor>
      <arglist>(size_type index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FindFree</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a96d8f8c0e2b6430b15811f4220621fe3</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a9ce8cdcd73206b4b15a694c24b63e1a3</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a0fc60bca9b6364ee93c79ae4b89d29f1</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>at</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a7aa3b21232ec33268be6c081cd5942cc</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>at</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>ad4a338beaa951d1c78b2f078d46d4d6d</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a8bfd5e4aa22b0b3438fcb61e4ad5caba</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>max_size</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>adb078a3065db937ff344ccddf8059c16</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>free_size</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a5818cc1c42df03e4130104e90717a9b2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>aa92b37ec34b36460cf79bbdfbca13512</anchor>
      <arglist>(size_type value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a02ad4e764dddd5e7311f69de9939b84a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; value_type &gt;</type>
      <name>m_data</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a9464007a8e0743172290208c64abff94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; size_type &gt;</type>
      <name>m_free</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a326254ccc6621b73957924d5af2ae67f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArrayAllocator&lt; Fixtures &gt;</name>
    <filename>classplayrho_1_1ArrayAllocator.html</filename>
    <member kind="typedef">
      <type>Fixtures</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>aafb7e2bccd27d04b9343ee24f3d2efea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::size_type</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a2c4ace224e62d268f9e3eaadb271d7e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::reference</type>
      <name>reference</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a570a34c38dbc6d8bdbee5f7d77896b5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::const_reference</type>
      <name>const_reference</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>aa142bea2a88c97d0f110f875fa65afc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>GetIndex</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a30ff72d7af44bb4de84131c61489a0e3</anchor>
      <arglist>(value_type *ptr) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>Allocate</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a6869cae97cf27cd19be7d3ed2bf59c82</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>Allocate</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a4539af5eb1befad525109d0b0b9ed6ff</anchor>
      <arglist>(const value_type &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Free</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>ab4740267ab2704193a2b9119f2609930</anchor>
      <arglist>(size_type index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FindFree</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a96d8f8c0e2b6430b15811f4220621fe3</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a9ce8cdcd73206b4b15a694c24b63e1a3</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a0fc60bca9b6364ee93c79ae4b89d29f1</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>at</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a7aa3b21232ec33268be6c081cd5942cc</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>at</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>ad4a338beaa951d1c78b2f078d46d4d6d</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a8bfd5e4aa22b0b3438fcb61e4ad5caba</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>max_size</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>adb078a3065db937ff344ccddf8059c16</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>free_size</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a5818cc1c42df03e4130104e90717a9b2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>aa92b37ec34b36460cf79bbdfbca13512</anchor>
      <arglist>(size_type value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a02ad4e764dddd5e7311f69de9939b84a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; value_type &gt;</type>
      <name>m_data</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a9464007a8e0743172290208c64abff94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; size_type &gt;</type>
      <name>m_free</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a326254ccc6621b73957924d5af2ae67f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArrayAllocator&lt; playrho::d2::Body &gt;</name>
    <filename>classplayrho_1_1ArrayAllocator.html</filename>
    <member kind="typedef">
      <type>playrho::d2::Body</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>aafb7e2bccd27d04b9343ee24f3d2efea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::size_type</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a2c4ace224e62d268f9e3eaadb271d7e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::reference</type>
      <name>reference</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a570a34c38dbc6d8bdbee5f7d77896b5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::const_reference</type>
      <name>const_reference</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>aa142bea2a88c97d0f110f875fa65afc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>GetIndex</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a30ff72d7af44bb4de84131c61489a0e3</anchor>
      <arglist>(value_type *ptr) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>Allocate</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a6869cae97cf27cd19be7d3ed2bf59c82</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>Allocate</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a4539af5eb1befad525109d0b0b9ed6ff</anchor>
      <arglist>(const value_type &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Free</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>ab4740267ab2704193a2b9119f2609930</anchor>
      <arglist>(size_type index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FindFree</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a96d8f8c0e2b6430b15811f4220621fe3</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a9ce8cdcd73206b4b15a694c24b63e1a3</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a0fc60bca9b6364ee93c79ae4b89d29f1</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>at</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a7aa3b21232ec33268be6c081cd5942cc</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>at</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>ad4a338beaa951d1c78b2f078d46d4d6d</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a8bfd5e4aa22b0b3438fcb61e4ad5caba</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>max_size</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>adb078a3065db937ff344ccddf8059c16</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>free_size</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a5818cc1c42df03e4130104e90717a9b2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>aa92b37ec34b36460cf79bbdfbca13512</anchor>
      <arglist>(size_type value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a02ad4e764dddd5e7311f69de9939b84a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; value_type &gt;</type>
      <name>m_data</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a9464007a8e0743172290208c64abff94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; size_type &gt;</type>
      <name>m_free</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a326254ccc6621b73957924d5af2ae67f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArrayAllocator&lt; playrho::d2::Contact &gt;</name>
    <filename>classplayrho_1_1ArrayAllocator.html</filename>
    <member kind="typedef">
      <type>playrho::d2::Contact</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>aafb7e2bccd27d04b9343ee24f3d2efea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::size_type</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a2c4ace224e62d268f9e3eaadb271d7e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::reference</type>
      <name>reference</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a570a34c38dbc6d8bdbee5f7d77896b5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::const_reference</type>
      <name>const_reference</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>aa142bea2a88c97d0f110f875fa65afc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>GetIndex</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a30ff72d7af44bb4de84131c61489a0e3</anchor>
      <arglist>(value_type *ptr) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>Allocate</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a6869cae97cf27cd19be7d3ed2bf59c82</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>Allocate</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a4539af5eb1befad525109d0b0b9ed6ff</anchor>
      <arglist>(const value_type &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Free</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>ab4740267ab2704193a2b9119f2609930</anchor>
      <arglist>(size_type index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FindFree</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a96d8f8c0e2b6430b15811f4220621fe3</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a9ce8cdcd73206b4b15a694c24b63e1a3</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a0fc60bca9b6364ee93c79ae4b89d29f1</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>at</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a7aa3b21232ec33268be6c081cd5942cc</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>at</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>ad4a338beaa951d1c78b2f078d46d4d6d</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a8bfd5e4aa22b0b3438fcb61e4ad5caba</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>max_size</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>adb078a3065db937ff344ccddf8059c16</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>free_size</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a5818cc1c42df03e4130104e90717a9b2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>aa92b37ec34b36460cf79bbdfbca13512</anchor>
      <arglist>(size_type value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a02ad4e764dddd5e7311f69de9939b84a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; value_type &gt;</type>
      <name>m_data</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a9464007a8e0743172290208c64abff94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; size_type &gt;</type>
      <name>m_free</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a326254ccc6621b73957924d5af2ae67f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArrayAllocator&lt; playrho::d2::FixtureConf &gt;</name>
    <filename>classplayrho_1_1ArrayAllocator.html</filename>
    <member kind="typedef">
      <type>playrho::d2::FixtureConf</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>aafb7e2bccd27d04b9343ee24f3d2efea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::size_type</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a2c4ace224e62d268f9e3eaadb271d7e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::reference</type>
      <name>reference</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a570a34c38dbc6d8bdbee5f7d77896b5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::const_reference</type>
      <name>const_reference</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>aa142bea2a88c97d0f110f875fa65afc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>GetIndex</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a30ff72d7af44bb4de84131c61489a0e3</anchor>
      <arglist>(value_type *ptr) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>Allocate</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a6869cae97cf27cd19be7d3ed2bf59c82</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>Allocate</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a4539af5eb1befad525109d0b0b9ed6ff</anchor>
      <arglist>(const value_type &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Free</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>ab4740267ab2704193a2b9119f2609930</anchor>
      <arglist>(size_type index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FindFree</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a96d8f8c0e2b6430b15811f4220621fe3</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a9ce8cdcd73206b4b15a694c24b63e1a3</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a0fc60bca9b6364ee93c79ae4b89d29f1</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>at</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a7aa3b21232ec33268be6c081cd5942cc</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>at</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>ad4a338beaa951d1c78b2f078d46d4d6d</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a8bfd5e4aa22b0b3438fcb61e4ad5caba</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>max_size</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>adb078a3065db937ff344ccddf8059c16</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>free_size</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a5818cc1c42df03e4130104e90717a9b2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>aa92b37ec34b36460cf79bbdfbca13512</anchor>
      <arglist>(size_type value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a02ad4e764dddd5e7311f69de9939b84a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; value_type &gt;</type>
      <name>m_data</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a9464007a8e0743172290208c64abff94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; size_type &gt;</type>
      <name>m_free</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a326254ccc6621b73957924d5af2ae67f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArrayAllocator&lt; playrho::d2::Joint &gt;</name>
    <filename>classplayrho_1_1ArrayAllocator.html</filename>
    <member kind="typedef">
      <type>playrho::d2::Joint</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>aafb7e2bccd27d04b9343ee24f3d2efea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::size_type</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a2c4ace224e62d268f9e3eaadb271d7e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::reference</type>
      <name>reference</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a570a34c38dbc6d8bdbee5f7d77896b5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::const_reference</type>
      <name>const_reference</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>aa142bea2a88c97d0f110f875fa65afc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>GetIndex</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a30ff72d7af44bb4de84131c61489a0e3</anchor>
      <arglist>(value_type *ptr) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>Allocate</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a6869cae97cf27cd19be7d3ed2bf59c82</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>Allocate</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a4539af5eb1befad525109d0b0b9ed6ff</anchor>
      <arglist>(const value_type &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Free</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>ab4740267ab2704193a2b9119f2609930</anchor>
      <arglist>(size_type index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FindFree</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a96d8f8c0e2b6430b15811f4220621fe3</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a9ce8cdcd73206b4b15a694c24b63e1a3</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a0fc60bca9b6364ee93c79ae4b89d29f1</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>at</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a7aa3b21232ec33268be6c081cd5942cc</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>at</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>ad4a338beaa951d1c78b2f078d46d4d6d</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a8bfd5e4aa22b0b3438fcb61e4ad5caba</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>max_size</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>adb078a3065db937ff344ccddf8059c16</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>free_size</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a5818cc1c42df03e4130104e90717a9b2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>aa92b37ec34b36460cf79bbdfbca13512</anchor>
      <arglist>(size_type value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a02ad4e764dddd5e7311f69de9939b84a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; value_type &gt;</type>
      <name>m_data</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a9464007a8e0743172290208c64abff94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; size_type &gt;</type>
      <name>m_free</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a326254ccc6621b73957924d5af2ae67f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArrayAllocator&lt; playrho::d2::Manifold &gt;</name>
    <filename>classplayrho_1_1ArrayAllocator.html</filename>
    <member kind="typedef">
      <type>playrho::d2::Manifold</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>aafb7e2bccd27d04b9343ee24f3d2efea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::size_type</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a2c4ace224e62d268f9e3eaadb271d7e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::reference</type>
      <name>reference</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a570a34c38dbc6d8bdbee5f7d77896b5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::const_reference</type>
      <name>const_reference</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>aa142bea2a88c97d0f110f875fa65afc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>GetIndex</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a30ff72d7af44bb4de84131c61489a0e3</anchor>
      <arglist>(value_type *ptr) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>Allocate</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a6869cae97cf27cd19be7d3ed2bf59c82</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>Allocate</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a4539af5eb1befad525109d0b0b9ed6ff</anchor>
      <arglist>(const value_type &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Free</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>ab4740267ab2704193a2b9119f2609930</anchor>
      <arglist>(size_type index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FindFree</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a96d8f8c0e2b6430b15811f4220621fe3</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a9ce8cdcd73206b4b15a694c24b63e1a3</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a0fc60bca9b6364ee93c79ae4b89d29f1</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>at</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a7aa3b21232ec33268be6c081cd5942cc</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>at</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>ad4a338beaa951d1c78b2f078d46d4d6d</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a8bfd5e4aa22b0b3438fcb61e4ad5caba</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>max_size</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>adb078a3065db937ff344ccddf8059c16</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>free_size</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a5818cc1c42df03e4130104e90717a9b2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>aa92b37ec34b36460cf79bbdfbca13512</anchor>
      <arglist>(size_type value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a02ad4e764dddd5e7311f69de9939b84a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; value_type &gt;</type>
      <name>m_data</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a9464007a8e0743172290208c64abff94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; size_type &gt;</type>
      <name>m_free</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a326254ccc6621b73957924d5af2ae67f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArrayAllocator&lt; Proxies &gt;</name>
    <filename>classplayrho_1_1ArrayAllocator.html</filename>
    <member kind="typedef">
      <type>Proxies</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>aafb7e2bccd27d04b9343ee24f3d2efea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::size_type</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a2c4ace224e62d268f9e3eaadb271d7e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::reference</type>
      <name>reference</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a570a34c38dbc6d8bdbee5f7d77896b5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; value_type &gt;::const_reference</type>
      <name>const_reference</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>aa142bea2a88c97d0f110f875fa65afc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>GetIndex</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a30ff72d7af44bb4de84131c61489a0e3</anchor>
      <arglist>(value_type *ptr) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>Allocate</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a6869cae97cf27cd19be7d3ed2bf59c82</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>Allocate</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a4539af5eb1befad525109d0b0b9ed6ff</anchor>
      <arglist>(const value_type &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Free</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>ab4740267ab2704193a2b9119f2609930</anchor>
      <arglist>(size_type index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>FindFree</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a96d8f8c0e2b6430b15811f4220621fe3</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a9ce8cdcd73206b4b15a694c24b63e1a3</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a0fc60bca9b6364ee93c79ae4b89d29f1</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>at</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a7aa3b21232ec33268be6c081cd5942cc</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>at</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>ad4a338beaa951d1c78b2f078d46d4d6d</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a8bfd5e4aa22b0b3438fcb61e4ad5caba</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>max_size</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>adb078a3065db937ff344ccddf8059c16</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>free_size</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a5818cc1c42df03e4130104e90717a9b2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>aa92b37ec34b36460cf79bbdfbca13512</anchor>
      <arglist>(size_type value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a02ad4e764dddd5e7311f69de9939b84a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; value_type &gt;</type>
      <name>m_data</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a9464007a8e0743172290208c64abff94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; size_type &gt;</type>
      <name>m_free</name>
      <anchorfile>classplayrho_1_1ArrayAllocator.html</anchorfile>
      <anchor>a326254ccc6621b73957924d5af2ae67f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::ArrayList</name>
    <filename>classplayrho_1_1ArrayList.html</filename>
    <templarg></templarg>
    <templarg>MAXSIZE</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>SIZE_TYPE</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a4a0c35a082d030d92f764690e732b37f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VALUE_TYPE</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a0276dcd7122ecfae3448abb1b559e694</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>af8df8532d007eec85164392f49348636</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a5294f5d27bbabd0ed897275d82f79cff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a73cf30a1be6070f8cb00e3bca971aafd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_pointer</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a3d78678c4d77afb2c4b69a1e4b452614</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArrayList&lt; Real, MaxSimplexEdges, std::remove_const&lt; decltype(MaxSimplexEdges)&gt;::type &gt;</name>
    <filename>classplayrho_1_1ArrayList.html</filename>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(MaxSimplexEdges)&gt;::type</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a4a0c35a082d030d92f764690e732b37f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Real</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a0276dcd7122ecfae3448abb1b559e694</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>af8df8532d007eec85164392f49348636</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a5294f5d27bbabd0ed897275d82f79cff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a73cf30a1be6070f8cb00e3bca971aafd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_pointer</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a3d78678c4d77afb2c4b69a1e4b452614</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArrayList&lt; SimplexEdge, MaxSimplexEdges, std::remove_const&lt; decltype(MaxSimplexEdges)&gt;::type &gt;</name>
    <filename>classplayrho_1_1ArrayList.html</filename>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(MaxSimplexEdges)&gt;::type</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a4a0c35a082d030d92f764690e732b37f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SimplexEdge</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a0276dcd7122ecfae3448abb1b559e694</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>af8df8532d007eec85164392f49348636</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a5294f5d27bbabd0ed897275d82f79cff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a73cf30a1be6070f8cb00e3bca971aafd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_pointer</name>
      <anchorfile>classplayrho_1_1ArrayList.html</anchorfile>
      <anchor>a3d78678c4d77afb2c4b69a1e4b452614</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::BaseShapeConf</name>
    <filename>structplayrho_1_1d2_1_1BaseShapeConf.html</filename>
    <member kind="variable">
      <type>NonNegative&lt; Real &gt;</type>
      <name>friction</name>
      <anchorfile>structplayrho_1_1d2_1_1BaseShapeConf.html</anchorfile>
      <anchor>a42d4e4d6a9e35758935d3dda2c1272e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Finite&lt; Real &gt;</type>
      <name>restitution</name>
      <anchorfile>structplayrho_1_1d2_1_1BaseShapeConf.html</anchorfile>
      <anchor>ac8ee84f3f378c7b60df0a413b14955a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; AreaDensity &gt;</type>
      <name>density</name>
      <anchorfile>structplayrho_1_1d2_1_1BaseShapeConf.html</anchorfile>
      <anchor>abe78bd0fbe69b87761bc6aa967cf4656</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::BlockAllocator::Block</name>
    <filename>structplayrho_1_1BlockAllocator_1_1Block.html</filename>
    <member kind="variable">
      <type>Block *</type>
      <name>next</name>
      <anchorfile>structplayrho_1_1BlockAllocator_1_1Block.html</anchorfile>
      <anchor>a456ace9ee2ed5e10cd918c50154d8030</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::BlockAllocator</name>
    <filename>classplayrho_1_1BlockAllocator.html</filename>
    <class kind="struct">playrho::BlockAllocator::Block</class>
    <class kind="struct">playrho::BlockAllocator::Chunk</class>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1BlockAllocator.html</anchorfile>
      <anchor>ae039f1fd9e0cdafe92d108cf5dc3d663</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>Allocate</name>
      <anchorfile>classplayrho_1_1BlockAllocator.html</anchorfile>
      <anchor>abbb25555e5d25ed67a4748136ff7b8ed</anchor>
      <arglist>(size_type n)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>AllocateArray</name>
      <anchorfile>classplayrho_1_1BlockAllocator.html</anchorfile>
      <anchor>a10c24f4502f0aedf3195da11635e241f</anchor>
      <arglist>(size_type n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Free</name>
      <anchorfile>classplayrho_1_1BlockAllocator.html</anchorfile>
      <anchor>a06536ee49cdb1a8c2f79de7522c8bd33</anchor>
      <arglist>(void *p, size_type n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classplayrho_1_1BlockAllocator.html</anchorfile>
      <anchor>a12d8426f4a31b8ed042b2a62699d04e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetChunkCount</name>
      <anchorfile>classplayrho_1_1BlockAllocator.html</anchorfile>
      <anchor>a8bec3ad25a09721b7e4ec1bac8b4325c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>GetMaxBlockSize</name>
      <anchorfile>classplayrho_1_1BlockAllocator.html</anchorfile>
      <anchor>a5aa7655c98fb927d7bc7a2fc936ec6cc</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>GetChunkArrayIncrement</name>
      <anchorfile>classplayrho_1_1BlockAllocator.html</anchorfile>
      <anchor>ab7c12c70d3cb3bc9f8a896efb4d301fd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr std::size_t</type>
      <name>AllocatorBlockSizes</name>
      <anchorfile>classplayrho_1_1BlockAllocator.html</anchorfile>
      <anchor>a30d1ffdd655947d098207ef826e44e8f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>ChunkSize</name>
      <anchorfile>classplayrho_1_1BlockAllocator.html</anchorfile>
      <anchor>a81416ab2b8d29effab799523726c9cef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_type</type>
      <name>m_chunkCount</name>
      <anchorfile>classplayrho_1_1BlockAllocator.html</anchorfile>
      <anchor>a2c3bc3655496cb673ca4ffe39ea98239</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_type</type>
      <name>m_chunkSpace</name>
      <anchorfile>classplayrho_1_1BlockAllocator.html</anchorfile>
      <anchor>a04d6e24e6afbd2be6455d120eb1e671a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Chunk *</type>
      <name>m_chunks</name>
      <anchorfile>classplayrho_1_1BlockAllocator.html</anchorfile>
      <anchor>a1d7d83a13903d6163fb3a544f1c290b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Block *</type>
      <name>m_freeLists</name>
      <anchorfile>classplayrho_1_1BlockAllocator.html</anchorfile>
      <anchor>a6206a7d536569a226006f128088af808</anchor>
      <arglist>[size(AllocatorBlockSizes)]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::BlockDeallocator</name>
    <filename>structplayrho_1_1BlockDeallocator.html</filename>
    <member kind="typedef">
      <type>BlockAllocator::size_type</type>
      <name>size_type</name>
      <anchorfile>structplayrho_1_1BlockDeallocator.html</anchorfile>
      <anchor>a605c69aa30125de98e51e6ef94df25dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>BlockDeallocator</name>
      <anchorfile>structplayrho_1_1BlockDeallocator.html</anchorfile>
      <anchor>a147dbe714e39709d7264135610f1759c</anchor>
      <arglist>(BlockAllocator *a, size_type n) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structplayrho_1_1BlockDeallocator.html</anchorfile>
      <anchor>aa73d0ec0e811cdc17fdfabf2ad90f04c</anchor>
      <arglist>(void *p) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>BlockAllocator *</type>
      <name>allocator</name>
      <anchorfile>structplayrho_1_1BlockDeallocator.html</anchorfile>
      <anchor>adc65140a048daae726102b98ef3b7191</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_type</type>
      <name>nelem</name>
      <anchorfile>structplayrho_1_1BlockDeallocator.html</anchorfile>
      <anchor>ab0c4e625ef174b6bf21fb072cde901b4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::Body</name>
    <filename>classplayrho_1_1d2_1_1Body.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Flag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_awakeFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1a2d0838d2a70832764fca9f12290e316e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_autoSleepFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1af96fd45879ce62d9185e7fdaf5da305c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_impenetrableFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1a9636c5bffb473d210e5b096dba69d13b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_fixedRotationFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1a221d6e987279b06446f29148ea305584</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_enabledFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1ab642621a09cb53da442bf6c07c735a2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_velocityFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1a1c6a6996666ee68cb63f0a5574632b25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_accelerationFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1a029de9b5dc46e0aeafb5d4a1d07de68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_massDataDirtyFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1ab2cc56a0f6625365566461c2ad259885</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::uint16_t</type>
      <name>FlagsType</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a14412adef525843359094736776c0cc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_awakeFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1a2d0838d2a70832764fca9f12290e316e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_autoSleepFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1af96fd45879ce62d9185e7fdaf5da305c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_impenetrableFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1a9636c5bffb473d210e5b096dba69d13b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_fixedRotationFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1a221d6e987279b06446f29148ea305584</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_enabledFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1ab642621a09cb53da442bf6c07c735a2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_velocityFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1a1c6a6996666ee68cb63f0a5574632b25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_accelerationFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1a029de9b5dc46e0aeafb5d4a1d07de68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_massDataDirtyFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4715bc702e6250f6c2b8a748df751b1ab2cc56a0f6625365566461c2ad259885</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Body</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ac5e27cc11b54440d88a89c02c76a554d</anchor>
      <arglist>(const BodyConf &amp;bd=GetDefaultBodyConf()) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Transformation &amp;</type>
      <name>GetTransformation</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a7987170b5f0cd8224735b960f06fcf59</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTransformation</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a08663554d88fc00b0ba6e9f974d63e52</anchor>
      <arglist>(const Transformation &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Sweep &amp;</type>
      <name>GetSweep</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a100b4822505143079cde749303494809</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Velocity</type>
      <name>GetVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a60d609b9f5c0a1d568b3fc42d169c428</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a6c21c223175b12cd68cea10484996fb1</anchor>
      <arglist>(const Velocity &amp;velocity) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>JustSetVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a00314ef442a112b29a7030087a14ee82</anchor>
      <arglist>(Velocity value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ae216d87f0c3ab4660646133f58f3fb30</anchor>
      <arglist>(LinearAcceleration2 linear, AngularAcceleration angular) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearAcceleration2</type>
      <name>GetLinearAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ad408734219c952c485b18375b26365aa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>AngularAcceleration</type>
      <name>GetAngularAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a6d1817724aad0e2655c16c4721a75d48</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>InvMass</type>
      <name>GetInvMass</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a479319dda79903324ef520ae21c7ca56</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetInvMass</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>aa406549b09f4fc750af6b7d5667ec91a</anchor>
      <arglist>(InvMass v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>InvRotInertia</type>
      <name>GetInvRotInertia</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a9b477bcd587e43f70e25099c83a5ebf1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetInvRotInertia</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a27c4a9a666012c7788c88eab983d7f1f</anchor>
      <arglist>(InvRotInertia v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Frequency</type>
      <name>GetLinearDamping</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>afeda1da50f9699c8ee07732c1f554699</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLinearDamping</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>acd5523b855b544fe285d0fa5a23c3398</anchor>
      <arglist>(NonNegative&lt; Frequency &gt; linearDamping) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Frequency</type>
      <name>GetAngularDamping</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ad47c053e25acad158bf8651815069de0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngularDamping</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a85169a6266e1ecfa2e25ecc12175218a</anchor>
      <arglist>(NonNegative&lt; Frequency &gt; angularDamping) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyType</type>
      <name>GetType</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a91f44b797b80539941b65a15c2ffee5d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetType</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a18dac43bb044e0d0f5b5dc461a7b9bea</anchor>
      <arglist>(BodyType value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSpeedable</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a7aedf6b5b4adc6f0ff0c1fc13ec49b0f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAccelerable</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a4f3ae9fb54ca3fbf1f509327781277b3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsImpenetrable</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a43a08c5977e1a5a0ebfb823dcf1615bd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetImpenetrable</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a50b9cf4b6ab620a4442cf19a4ee39923</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetImpenetrable</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ac0a4e7da62712ec6e5c10f8637b59eca</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSleepingAllowed</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a71df4118ca3b5056aa4634a70c3b220a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSleepingAllowed</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a96bfa8ab63b3246ed714573661ea3618</anchor>
      <arglist>(bool flag) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAwake</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a7abc6b8d4f50e3e3e703f53f66ecc035</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAwake</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a794c4c1b8c24aedb959c5031a5ecde69</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetAwake</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a7821d9464b36b49ddb893ef9c2c262fb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>Time</type>
      <name>GetUnderActiveTime</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>abc897bc2cda122d02fccdb3c5c11049d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetUnderActiveTime</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a0a6f3e57e6a9b132f30f3d3f85ca5802</anchor>
      <arglist>(Time value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetUnderActiveTime</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ae6c659ede45cf5fc6659d1942249221d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsFixedRotation</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ab0fdff8babc197f1a75794e4fb822343</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFixedRotation</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ad73e9bd7dbdeaaaa4618cbb06559dd34</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAwakeFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ae06b70496e35fc753fab2733824f76eb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetAwakeFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a93a71d2a1b85e02d33548c6672437599</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMassDataDirty</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ac24b9d27e4778ea7942c89ef793d9eea</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMassDataDirty</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a690931872492c253f8e09cabc5922950</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetMassDataDirty</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a5b9292b31662dc542896a8f471e82e43</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ae12e0fe1aeb00907e47aba6d4edd0746</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a2f3382a712a5573c2a476050d60513a3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a0caf1447c287fcfa4833726acd263439</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSweep</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>aff436223b960a71937476dea03117d9c</anchor>
      <arglist>(const Sweep &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPosition0</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>acfb1bae5be9d852331ba9177950c46b1</anchor>
      <arglist>(const Position value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPosition1</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ad77d221221eb0f4dc4f6fc2e42e362c8</anchor>
      <arglist>(const Position value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetAlpha0</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a5eb5335800a6e5b0b37e946f0d011fd2</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Restore</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ac6076f65771ce91e3195524342be07f6</anchor>
      <arglist>(const Sweep &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Advance0</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a928fcdf5f5573d43dc8cc354ac143aa8</anchor>
      <arglist>(Real value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Advance</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a85808c07bc6d71dcfd8188456dcf91b1</anchor>
      <arglist>(Real value) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FlagsType</type>
      <name>GetFlags</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a137e2e62f0ad8b1b21695955fd3b900e</anchor>
      <arglist>(BodyType type) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FlagsType</type>
      <name>GetFlags</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>accc993b94d08acd0603cbec51a1d30b4</anchor>
      <arglist>(const BodyConf &amp;bd) noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Transformation</type>
      <name>m_xf</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a2c701dabeb187c6ef4f6e8c5bec02d11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Sweep</type>
      <name>m_sweep</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a5c7005825289ba425a019e92557bcf70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FlagsType</type>
      <name>m_flags</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a66cc09962068902b6d5b021f9f5a7d07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LinearVelocity2</type>
      <name>m_linearVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>aaf105188a6fb386142f229fe4cde3d8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LinearAcceleration2</type>
      <name>m_linearAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a7372b89616df9a145327d387e6e694c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AngularVelocity</type>
      <name>m_angularVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ad555327f5ddabff6288ba6f01bef4118</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AngularAcceleration</type>
      <name>m_angularAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a43b756f060e77355f076da210038cb7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>InvMass</type>
      <name>m_invMass</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a234c1c2db840556ef1bdb303cf1a0003</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>InvRotInertia</type>
      <name>m_invRotI</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ae712d47531aa25674220f30e34598473</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NonNegative&lt; Frequency &gt;</type>
      <name>m_linearDamping</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af05dd93b13c1c67ca53b46566b8971ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NonNegative&lt; Frequency &gt;</type>
      <name>m_angularDamping</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a865bbb9dfb965cff6a9e22367fa0aee2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Time</type>
      <name>m_underActiveTime</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a891b2b92f7a2954df55714c9c3fbc56d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>BodyType</type>
      <name>GetType</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a421d2110404320428fd02b2d0b70a062</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetType</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a2a12afea1828cb69ef94cbfa86018069</anchor>
      <arglist>(Body &amp;body, BodyType value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSpeedable</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a81c7a4d7696e9cb367f241afdbbe2727</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAccelerable</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ad1f05a05c6dd9eb2a1564cc10032f16c</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsImpenetrable</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a8c4170f49badbf1881f371cfb5f466a7</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetImpenetrable</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>aaf57ca63655e6eaeac4d9e65a8e7be4a</anchor>
      <arglist>(Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetImpenetrable</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a2ba4e5cbd12444be971a3ef0a09e9931</anchor>
      <arglist>(Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSleepingAllowed</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a1cde4db895479e9ddd34c70425811699</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSleepingAllowed</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a54802d32ec837cdf5669744c20dca3df</anchor>
      <arglist>(Body &amp;body, bool value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ab930c47cedb9dc4fe0d6e178e7651d54</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>abfae76ec0240c61e85bed996119d130e</anchor>
      <arglist>(Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a5f8f4bd2d2daa7bbd38dbe9b0919f08e</anchor>
      <arglist>(Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a88826de33b9ad1fe847120458fe3a836</anchor>
      <arglist>(Body &amp;body, bool value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAwake</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a139df81757401545db36e6fc6f030d75</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAwake</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a60201ffd45e0d810ff5d4fb90fd0bc4b</anchor>
      <arglist>(Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetAwake</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>afce7db62d828a84a94e8c6222d9111a6</anchor>
      <arglist>(Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Transformation</type>
      <name>GetTransformation</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a6a06b90c7f93f0e33be41db39562af4d</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTransformation</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af681bc41595979454a24df12369e97a9</anchor>
      <arglist>(Body &amp;body, Transformation value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocation</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a8a6f694cab71d0db91049dc0908de63f</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Sweep &amp;</type>
      <name>GetSweep</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a83c03ab97ee5e1a0cdb1a41a62050ccc</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSweep</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a1f30cb6266cb2f950ea5fdb5aae58d1b</anchor>
      <arglist>(Body &amp;body, const Sweep &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>GetPosition1</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a77de45b3fab735d0f87a0978a622a9c0</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngle</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a93f21ae0c92245d912cb91a99e756946</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>GetPosition</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a1ee2be09f607ec37050c91dc3a5d0f92</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Time</type>
      <name>GetUnderActiveTime</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a1192c89bb1512e70b1fb878c1b29a452</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsFixedRotation</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a91940e85abf08596f625348315452e3d</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFixedRotation</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a546de4c838854e1d2bee174a4cf264e5</anchor>
      <arglist>(Body &amp;body, bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMassDataDirty</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af3540987384e881f23e28f5a9c710ae1</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>InvMass</type>
      <name>GetInvMass</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a628126b03bd99f5df5f08a047692b9da</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>InvRotInertia</type>
      <name>GetInvRotInertia</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af4fac5901e03845d72a94de4e7bb92d0</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Frequency</type>
      <name>GetLinearDamping</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>aada2f9ed5beeb4a88ec917bf1c7d70df</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLinearDamping</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a9901b5b3ddb898a60f216007adace0de</anchor>
      <arglist>(Body &amp;body, NonNegative&lt; Frequency &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Frequency</type>
      <name>GetAngularDamping</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>abf0e49b67ddcd89f15a4224e0acf10a3</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngularDamping</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a344a9753e8cd6fb046a57e82d2206d60</anchor>
      <arglist>(Body &amp;body, NonNegative&lt; Frequency &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Acceleration</type>
      <name>GetAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>acafaac4ef15f7416f464dff9b19780fa</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a438e172db303ae0ab53263bc6af419ad</anchor>
      <arglist>(Body &amp;body, Acceleration value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearAcceleration2</type>
      <name>GetLinearAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>aef76fc5d7813af886e28e8033e9d019d</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AngularAcceleration</type>
      <name>GetAngularAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a986b11edba421b23879fa363c557f1e5</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Awaken</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a4834708af29bcc9ae39ebfc2b9f580f6</anchor>
      <arglist>(Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Unawaken</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>abdfbff06306e4ecb71f6d4b2136eea7c</anchor>
      <arglist>(Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Mass</type>
      <name>GetMass</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a3c355eb58981b97e5901fa7d04052507</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMass</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>af26ae548ac842dfc9c1da2230b224870</anchor>
      <arglist>(Body &amp;body, Mass mass)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>aeb983c0ee834bdbf4f969e6bd23be27e</anchor>
      <arglist>(Body &amp;body, LinearAcceleration2 linear, AngularAcceleration angular) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a2e3e03457d4d04d1aa19e5f850caee4a</anchor>
      <arglist>(Body &amp;body, LinearAcceleration2 value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a5907db10db49a1e6d7f8b8bc59dfa8e8</anchor>
      <arglist>(Body &amp;body, AngularAcceleration value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RotInertia</type>
      <name>GetRotInertia</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a4c4c855f042444d0122919f8c1559ccb</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RotInertia</type>
      <name>GetLocalRotInertia</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>accc0736257251f381353661320af972e</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Velocity</type>
      <name>GetVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a13ee26a73a0987dbb7c825539590719d</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>adddd763be5890fad18f5a3dd9d2b4d38</anchor>
      <arglist>(Body &amp;body, const Velocity &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity2</type>
      <name>GetLinearVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a3802163b90f631b001eaa0201be419c9</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetAngularVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a306635dbd11f92ad1020a386fce7b7c2</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a0ed659e8f39ec9b4215123dc0a2b8581</anchor>
      <arglist>(Body &amp;body, LinearVelocity2 value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>adc771e5dfb30f44b8b71f15cd9e5f950</anchor>
      <arglist>(Body &amp;body, AngularVelocity value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetWorldPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>abdbcfc8a43696b1e7136db073fbe09ad</anchor>
      <arglist>(const Body &amp;body, const Length2 localPoint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetWorldVector</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a0ccc8fe53ed54beba80db7046ab8ddf0</anchor>
      <arglist>(const Body &amp;body, const Length2 localVector) noexcept</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetWorldVector</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a7544d24c890820e7f5a6d355c0ad4406</anchor>
      <arglist>(const Body &amp;body, const UnitVec localVector) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ab029ce2fdf891e9d4a5705e2c4e0564a</anchor>
      <arglist>(const Body &amp;body, const Length2 worldPoint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetLocalVector</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a560083bf40b9f3936b549e841d8338ba</anchor>
      <arglist>(const Body &amp;body, const UnitVec uv) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity2</type>
      <name>GetLinearVelocityFromWorldPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ab7217cc5275bc5d8c2f2407ee20fb958</anchor>
      <arglist>(const Body &amp;body, const Length2 worldPoint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity2</type>
      <name>GetLinearVelocityFromLocalPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a47196aab3f4386da954b565a6a0fce7c</anchor>
      <arglist>(const Body &amp;body, const Length2 localPoint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Force2</type>
      <name>GetForce</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a82eaa61b6bddf682fe315f09830e2bfc</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Torque</type>
      <name>GetTorque</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a18e2ece8e057b22c240cf681aca400b5</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Velocity</type>
      <name>GetVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ab873f18f1e540da43881e7f2dadeb7b1</anchor>
      <arglist>(const Body &amp;body, Time h) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyLinearImpulse</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a07f50b8133debf454d50f491d196dc24</anchor>
      <arglist>(Body &amp;body, Momentum2 impulse, Length2 point) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyAngularImpulse</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a5d1467095e23488ca1344a26336aae8f</anchor>
      <arglist>(Body &amp;body, AngularMomentum impulse) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a2e61d578b8ec391d98178299024b5c4f</anchor>
      <arglist>(const Body &amp;lhs, const Body &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>ad57faa5642b6526d57f2f066cb74c3a9</anchor>
      <arglist>(const Body &amp;lhs, const Body &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>BodyConf</type>
      <name>GetBodyConf</name>
      <anchorfile>classplayrho_1_1d2_1_1Body.html</anchorfile>
      <anchor>a0e940544a56fe840424f880106fcd842</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::BodyConf</name>
    <filename>structplayrho_1_1d2_1_1BodyConf.html</filename>
    <member kind="function">
      <type>constexpr BodyConf &amp;</type>
      <name>UseType</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a49ce681752862a2f5466df143cd8a0f0</anchor>
      <arglist>(BodyType t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyConf &amp;</type>
      <name>UseLocation</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a48b490e84f9bdc3158ebd1dbb4100cdb</anchor>
      <arglist>(Length2 l) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyConf &amp;</type>
      <name>UseAngle</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a1d046aac55ea235655d0866728a4d26b</anchor>
      <arglist>(Angle a) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyConf &amp;</type>
      <name>UseLinearVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a969e1e9a49976ef9e87cfa4a54b9c24f</anchor>
      <arglist>(LinearVelocity2 v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyConf &amp;</type>
      <name>UseAngularVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a6355fffffd67dd4a2078e0d1151a5c4d</anchor>
      <arglist>(AngularVelocity v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyConf &amp;</type>
      <name>Use</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>ad8882d0f19417ff4ac9f039ce31e75ce</anchor>
      <arglist>(Position v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyConf &amp;</type>
      <name>Use</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a2650d02c83d7df05c01f99a55a23fd81</anchor>
      <arglist>(Velocity v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyConf &amp;</type>
      <name>UseLinearAcceleration</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>adedb4902d8086565a22299dad65a2b1f</anchor>
      <arglist>(LinearAcceleration2 v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyConf &amp;</type>
      <name>UseAngularAcceleration</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a03e07243945428ca19b4ad753ce12e60</anchor>
      <arglist>(AngularAcceleration v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyConf &amp;</type>
      <name>UseLinearDamping</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a62abc258fbb6ae02e04a34bbee355684</anchor>
      <arglist>(NonNegative&lt; Frequency &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyConf &amp;</type>
      <name>UseAngularDamping</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a396cdc82c429d6e63c4d22bf8051bc64</anchor>
      <arglist>(NonNegative&lt; Frequency &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyConf &amp;</type>
      <name>UseUnderActiveTime</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a2b4e162e3432a14f827cfc6d492fc51a</anchor>
      <arglist>(Time v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyConf &amp;</type>
      <name>UseAllowSleep</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a3a1cd093faf3a5372ee5141fc6abf2d7</anchor>
      <arglist>(bool value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyConf &amp;</type>
      <name>UseAwake</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a72f8c52f313ac9373bedaf389c36e5f4</anchor>
      <arglist>(bool value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyConf &amp;</type>
      <name>UseFixedRotation</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>ae1537c26b15e8c24b3ce6ec3a43b40fa</anchor>
      <arglist>(bool value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyConf &amp;</type>
      <name>UseBullet</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>ae9c18c40110df721ad618d3dd0fcc6cb</anchor>
      <arglist>(bool value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyConf &amp;</type>
      <name>UseEnabled</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a480439c21d12b079cd8fc5e6dd645ba4</anchor>
      <arglist>(bool value) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>BodyType</type>
      <name>type</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a3f1a14b4e932c2e1fa3d78d8b069ec23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>location</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a96d0adc085fd3d0f0f9d37896c463e7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Angle</type>
      <name>angle</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a3a3fe86a4a6bb6e255dd0c20bd527a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinearVelocity2</type>
      <name>linearVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a505089bd57b75722c4b7c2e77738ee98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AngularVelocity</type>
      <name>angularVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a3034b706dd80b92a0f391911daba2679</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinearAcceleration2</type>
      <name>linearAcceleration</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>aca2c87d68e5476d3c1443a5360fac747</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AngularAcceleration</type>
      <name>angularAcceleration</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a79881dcf474db656032f5834391c1e32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Frequency &gt;</type>
      <name>linearDamping</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a403ac9e5010e1cf2cd831c6e14b26c10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Frequency &gt;</type>
      <name>angularDamping</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>acd247e252ae4e8a5ece40382e0b0be49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Time</type>
      <name>underActiveTime</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>af9559f3076e32dc79e9455d07c666b3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>allowSleep</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a9ff6df501796f81620a27a612c9cfa8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>awake</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a860f348c00843664f24f9bf42d0ee31c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>fixedRotation</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>aaa88fe1ed7c981bef6bafcadde8472d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>bullet</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a635dab49119a08c2ddbe1c082c502e29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enabled</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a20ba510bb1a2641244d3cdb27be45a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyConf</type>
      <name>GetDefaultBodyConf</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>af6c1034a2366e6ef466253aea8a13829</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>Transformation</type>
      <name>GetTransformation</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a178733ef87c116856614750d49785cd5</anchor>
      <arglist>(const BodyConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Angle</type>
      <name>GetAngle</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>aad6493c0704a18da5f611717a6aff844</anchor>
      <arglist>(const BodyConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a0106f5ff990330d8e8afcd906cefa75a</anchor>
      <arglist>(const BodyConf &amp;lhs, const BodyConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1d2_1_1BodyConf.html</anchorfile>
      <anchor>a50e186f203ad0d5f7c851058802978fd</anchor>
      <arglist>(const BodyConf &amp;lhs, const BodyConf &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::BodyConstraint</name>
    <filename>classplayrho_1_1d2_1_1BodyConstraint.html</filename>
    <member kind="function">
      <type>constexpr</type>
      <name>BodyConstraint</name>
      <anchorfile>classplayrho_1_1d2_1_1BodyConstraint.html</anchorfile>
      <anchor>a6127ab15ecee07d013d3c2c86f18e678</anchor>
      <arglist>(InvMass invMass, InvRotInertia invRotI, Length2 localCenter, Position position, Velocity velocity) noexcept</arglist>
    </member>
    <member kind="function">
      <type>InvMass</type>
      <name>GetInvMass</name>
      <anchorfile>classplayrho_1_1d2_1_1BodyConstraint.html</anchorfile>
      <anchor>a328ec8b7b4d3e950ac42697d7597c61a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>InvRotInertia</type>
      <name>GetInvRotInertia</name>
      <anchorfile>classplayrho_1_1d2_1_1BodyConstraint.html</anchorfile>
      <anchor>aa4794ccca1702fce9599a9a160737b4a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalCenter</name>
      <anchorfile>classplayrho_1_1d2_1_1BodyConstraint.html</anchorfile>
      <anchor>a31da1c05473e3f5dc3d03a4dee43b1ea</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>GetPosition</name>
      <anchorfile>classplayrho_1_1d2_1_1BodyConstraint.html</anchorfile>
      <anchor>aee75c449b34cc293956e72d2d4c0cc66</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Velocity</type>
      <name>GetVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1BodyConstraint.html</anchorfile>
      <anchor>ac67a11b5d917548f54bbf08935f0506c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyConstraint &amp;</type>
      <name>SetPosition</name>
      <anchorfile>classplayrho_1_1d2_1_1BodyConstraint.html</anchorfile>
      <anchor>ac2ab5427fcb2b91bc821d47275f111be</anchor>
      <arglist>(Position value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyConstraint &amp;</type>
      <name>SetVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1BodyConstraint.html</anchorfile>
      <anchor>a911b6c49a7b561071794b80a437337dd</anchor>
      <arglist>(Velocity value) noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Position</type>
      <name>m_position</name>
      <anchorfile>classplayrho_1_1d2_1_1BodyConstraint.html</anchorfile>
      <anchor>a12eec259ac541a9ec0ad95fc841a4a69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Velocity</type>
      <name>m_velocity</name>
      <anchorfile>classplayrho_1_1d2_1_1BodyConstraint.html</anchorfile>
      <anchor>a10352e3e5b2a6efcfcfaa5d7299e3982</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Length2</type>
      <name>m_localCenter</name>
      <anchorfile>classplayrho_1_1d2_1_1BodyConstraint.html</anchorfile>
      <anchor>a8038573a0d1cb008503ff5245b404a0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>InvMass</type>
      <name>m_invMass</name>
      <anchorfile>classplayrho_1_1d2_1_1BodyConstraint.html</anchorfile>
      <anchor>a9b6f1c4fe90abc627e653fb77d7ad000</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>InvRotInertia</type>
      <name>m_invRotI</name>
      <anchorfile>classplayrho_1_1d2_1_1BodyConstraint.html</anchorfile>
      <anchor>ad6a3458bfb9d2ab3968ccc82a8f9489c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::DynamicTree::BranchData</name>
    <filename>structplayrho_1_1d2_1_1DynamicTree_1_1BranchData.html</filename>
    <member kind="variable">
      <type>Size</type>
      <name>child1</name>
      <anchorfile>structplayrho_1_1d2_1_1DynamicTree_1_1BranchData.html</anchorfile>
      <anchor>a47b97e472dfc9723c25584dd0ea50dbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Size</type>
      <name>child2</name>
      <anchorfile>structplayrho_1_1d2_1_1DynamicTree_1_1BranchData.html</anchorfile>
      <anchor>a912c155ebaca55d62bcb18e720cca4d8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::Simplex::Cache</name>
    <filename>structplayrho_1_1d2_1_1Simplex_1_1Cache.html</filename>
    <member kind="variable">
      <type>Real</type>
      <name>metric</name>
      <anchorfile>structplayrho_1_1d2_1_1Simplex_1_1Cache.html</anchorfile>
      <anchor>a8b4b052c3bbcad4f0459b19da5cd69d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexPair3</type>
      <name>indices</name>
      <anchorfile>structplayrho_1_1d2_1_1Simplex_1_1Cache.html</anchorfile>
      <anchor>a1f737deec07431d60875cb33adc9d5dc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::ChainShapeConf</name>
    <filename>classplayrho_1_1d2_1_1ChainShapeConf.html</filename>
    <base>ShapeBuilder&lt; ChainShapeConf &gt;</base>
    <member kind="function">
      <type></type>
      <name>ChainShapeConf</name>
      <anchorfile>classplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>a1327c48b2af72805fb91265982d049f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ChainShapeConf &amp;</type>
      <name>Set</name>
      <anchorfile>classplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>a497e4a481a8c4a310376c67b446bc40a</anchor>
      <arglist>(std::vector&lt; Length2 &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>ChainShapeConf &amp;</type>
      <name>Add</name>
      <anchorfile>classplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>a1439b53e9be383d17e914b5924e73bc8</anchor>
      <arglist>(Length2 vertex)</arglist>
    </member>
    <member kind="function">
      <type>ChainShapeConf &amp;</type>
      <name>Transform</name>
      <anchorfile>classplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>a1a5366856f9ea7551ce1e9cc8fd1ae02</anchor>
      <arglist>(const Mat22 &amp;m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetChildCount</name>
      <anchorfile>classplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>a93f5443670a216ba6ec1f91503196d87</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>DistanceProxy</type>
      <name>GetChild</name>
      <anchorfile>classplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>aad58b3ff7b02274deaac614b0799aa3a</anchor>
      <arglist>(ChildCounter index) const</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>classplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>a212282d094f3bb26c9182f72eac6319d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ChainShapeConf &amp;</type>
      <name>UseVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>a9decae5ce2d539ef3c2cf60618147f36</anchor>
      <arglist>(NonNegative&lt; Length &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetVertexCount</name>
      <anchorfile>classplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>a5e70b4b91eee211bfd66f4f8c35f4694</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetVertex</name>
      <anchorfile>classplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>af93574aab3c319909a163bf47b9c5f3f</anchor>
      <arglist>(ChildCounter index) const</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetNormal</name>
      <anchorfile>classplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>ad9fc03054ddd0ad4e6b7ef87bb90296b</anchor>
      <arglist>(ChildCounter index) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr NonNegative&lt; Length &gt;</type>
      <name>GetDefaultVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>abbd9e21a6b8f40b76a2d9efa021126d1</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Length &gt;</type>
      <name>vertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>ae913f960a60acc99531e36bb04a47819</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Length2 &gt;</type>
      <name>m_vertices</name>
      <anchorfile>classplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>a57e66136bc13d603f6f045d5552dfabb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; UnitVec &gt;</type>
      <name>m_normals</name>
      <anchorfile>classplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>a1f8383fc24bc8942a67145eb4d4663ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>a0beaec4204c1bbce524ed5d27cff04fc</anchor>
      <arglist>(const ChainShapeConf &amp;lhs, const ChainShapeConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1d2_1_1ChainShapeConf.html</anchorfile>
      <anchor>ad44c87454b3202c77105e5859f1ee276</anchor>
      <arglist>(const ChainShapeConf &amp;lhs, const ChainShapeConf &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::CheckedValue</name>
    <filename>classplayrho_1_1CheckedValue.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ValueType</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a17d253593c24e29ef16cec75c1878c83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::remove_pointer&lt; ValueType &gt;::type</type>
      <name>remove_pointer_type</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a7ae70764b405f77fbe3f370170258a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CheckerType</type>
      <name>checker_type</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a7cd95d354fce04be2399ae2af61709b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>CheckedValue</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a47e37f1a6b29daa6c38d99a9d322dc94</anchor>
      <arglist>() noexcept(noexcept(CheckerType{}()))</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>CheckedValue</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ae90f335daecd90e9c249b4811a0807dc</anchor>
      <arglist>(value_type value) noexcept(noexcept(checker_type{}(value)))</arglist>
    </member>
    <member kind="function">
      <type>constexpr value_type</type>
      <name>get</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a314230081e7cddd89466ae1a4dffcaf2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator value_type</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a8dfc68564f17eae760e416e7b45b81b1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_pointer&lt; U &gt;::value, U &gt;</type>
      <name>operator-&gt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ab9afc76618f8a3a8ce25c3fed1678eda</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_pointer&lt; U &gt;::value, remove_pointer_type &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a20c2e8c6d96f9e23e3a5b7fb228e768e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>value_type</type>
      <name>m_value</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a7977db83cfc36f9abe4dbb78779ffd53</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>acc045bd4bbb560077978ce21cd20c49f</anchor>
      <arglist>(::std::ostream &amp;os, const CheckedValue&lt; ValueType, CheckerType &gt; &amp;value) -&gt; decltype(os&lt;&lt; ValueType(value))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ab21e9430d6c13f5645a8a5af6a64a23a</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;()==std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs)==RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a0878dcd8f25150f77ebea43e908e3023</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;() !=std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs) !=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a17f5c3cf62f38463edf89ddc5bf05b80</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a5c18729fd53f4bb5275874c8cd1eb644</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a4e50b7f361b27adaf57e0b275b849cb2</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>aab6a70eaafe3d414d9ebb561150a5ae0</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ab695c5da4298cd1267ccb84710dc5dc4</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) *RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a5a5b28003deb87e06a3c9e51f44fb096</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)/RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ace19087d3c9f0e9cf7b83eb131626bee</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)+RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>aa918349e3179ab2f97d04b41085d0a48</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) - RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>adafba64613de79315803f30e1c800aad</anchor>
      <arglist>(const CheckedValue&lt; ValueType, CheckerType &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(ValueType(lhs)==rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>aa8fc70d9f3c91ab4c9afb7730f920243</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; ValueType, CheckerType &gt; &amp;rhs) -&gt; decltype(lhs==ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>af25888243d04857183fbff9a515bcbfd</anchor>
      <arglist>(const CheckedValue&lt; ValueType, CheckerType &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(ValueType(lhs) !=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a2a6bef32507b31e3d1ae0935a6719e71</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; ValueType, CheckerType &gt; &amp;rhs) -&gt; decltype(lhs !=ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a3e696d4bb8a0294762be3428301ebbec</anchor>
      <arglist>(const CheckedValue&lt; ValueType, CheckerType &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(ValueType(lhs)&lt;=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a55fa5e47ada221e269711dbbf90eedd7</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; ValueType, CheckerType &gt; &amp;rhs) -&gt; decltype(lhs&lt;=ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>abcb14439b5fd9f3daf2b518c786865b7</anchor>
      <arglist>(const CheckedValue&lt; ValueType, CheckerType &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(ValueType(lhs) &gt;=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a092ab700ddc3c1dba9a60a49ce75cf6e</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; ValueType, CheckerType &gt; &amp;rhs) -&gt; decltype(lhs &gt;=ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ab9f2a8be4da1677e412b8eabc2146873</anchor>
      <arglist>(const CheckedValue&lt; ValueType, CheckerType &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(ValueType(lhs)&lt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a6f64d5e0d888eb6813af5fa103a16b16</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; ValueType, CheckerType &gt; &amp;rhs) -&gt; decltype(lhs&lt; ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a3b2ff344394e8157985fe636a85f18d9</anchor>
      <arglist>(const CheckedValue&lt; ValueType, CheckerType &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(ValueType(lhs) &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a6ea68ce25d18cda2a9a333fa224f0558</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; ValueType, CheckerType &gt; &amp;rhs) -&gt; decltype(lhs &gt; ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a344c62fec7ff32c28d2a98fb3eff0cee</anchor>
      <arglist>(const CheckedValue&lt; ValueType, CheckerType &gt; &amp;lhs, const Other &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliable&lt; CheckedValue&lt; ValueType, CheckerType &gt;, Other &gt;::value, decltype(ValueType() *Other())&gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a14860a28f9b31d3c16987c19762c227a</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; ValueType, CheckerType &gt; &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliable&lt; Other, CheckedValue&lt; ValueType, CheckerType &gt;&gt;::value, decltype(Other() *ValueType())&gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a21a68e7bc007582c16847ed8615d8c26</anchor>
      <arglist>(const CheckedValue&lt; ValueType, CheckerType &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(ValueType(lhs)/rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a740ddde1b6038fc20e0e763e0eabac6a</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; ValueType, CheckerType &gt; &amp;rhs) -&gt; decltype(lhs/ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a687d59516f156855de42eea778eccc49</anchor>
      <arglist>(const CheckedValue&lt; ValueType, CheckerType &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(ValueType(lhs)+rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a75202d7d29b1ce5418c1ae4e32c95a08</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; ValueType, CheckerType &gt; &amp;rhs) -&gt; decltype(lhs+ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>acf1adc96b8c69fa7bb0ce08582f93de7</anchor>
      <arglist>(const CheckedValue&lt; ValueType, CheckerType &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(ValueType(lhs) - rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a5783466a0028f61a1e70076f410ac4ee</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; ValueType, CheckerType &gt; &amp;rhs) -&gt; decltype(lhs - ValueType(rhs))</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CheckedValue&lt; Angle &gt;</name>
    <filename>classplayrho_1_1CheckedValue.html</filename>
    <member kind="typedef">
      <type>Angle</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a17d253593c24e29ef16cec75c1878c83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::remove_pointer&lt; Angle &gt;::type</type>
      <name>remove_pointer_type</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a7ae70764b405f77fbe3f370170258a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NoOpChecker&lt; Angle &gt;</type>
      <name>checker_type</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a7cd95d354fce04be2399ae2af61709b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>CheckedValue</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a47e37f1a6b29daa6c38d99a9d322dc94</anchor>
      <arglist>() noexcept(noexcept(NoOpChecker&lt; Angle &gt; {}()))</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>CheckedValue</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ae90f335daecd90e9c249b4811a0807dc</anchor>
      <arglist>(value_type value) noexcept(noexcept(checker_type{}(value)))</arglist>
    </member>
    <member kind="function">
      <type>constexpr value_type</type>
      <name>get</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a314230081e7cddd89466ae1a4dffcaf2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator value_type</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a8dfc68564f17eae760e416e7b45b81b1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_pointer&lt; U &gt;::value, U &gt;</type>
      <name>operator-&gt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ab9afc76618f8a3a8ce25c3fed1678eda</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_pointer&lt; U &gt;::value, remove_pointer_type &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a20c2e8c6d96f9e23e3a5b7fb228e768e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>value_type</type>
      <name>m_value</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a7977db83cfc36f9abe4dbb78779ffd53</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ab695c5da4298cd1267ccb84710dc5dc4</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) *RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a344c62fec7ff32c28d2a98fb3eff0cee</anchor>
      <arglist>(const CheckedValue&lt; Angle, NoOpChecker&lt; Angle &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliable&lt; CheckedValue&lt; Angle, NoOpChecker&lt; Angle &gt; &gt;, Other &gt;::value, decltype(Angle() *Other())&gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a14860a28f9b31d3c16987c19762c227a</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Angle, NoOpChecker&lt; Angle &gt; &gt; &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliable&lt; Other, CheckedValue&lt; Angle, NoOpChecker&lt; Angle &gt; &gt;&gt;::value, decltype(Other() *Angle())&gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>acc045bd4bbb560077978ce21cd20c49f</anchor>
      <arglist>(::std::ostream &amp;os, const CheckedValue&lt; Angle, NoOpChecker&lt; Angle &gt; &gt; &amp;value) -&gt; decltype(os&lt;&lt; Angle(value))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ab21e9430d6c13f5645a8a5af6a64a23a</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;()==std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs)==RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>adafba64613de79315803f30e1c800aad</anchor>
      <arglist>(const CheckedValue&lt; Angle, NoOpChecker&lt; Angle &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Angle(lhs)==rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>aa8fc70d9f3c91ab4c9afb7730f920243</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Angle, NoOpChecker&lt; Angle &gt; &gt; &amp;rhs) -&gt; decltype(lhs==Angle(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a0878dcd8f25150f77ebea43e908e3023</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;() !=std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs) !=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>af25888243d04857183fbff9a515bcbfd</anchor>
      <arglist>(const CheckedValue&lt; Angle, NoOpChecker&lt; Angle &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Angle(lhs) !=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a2a6bef32507b31e3d1ae0935a6719e71</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Angle, NoOpChecker&lt; Angle &gt; &gt; &amp;rhs) -&gt; decltype(lhs !=Angle(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a17f5c3cf62f38463edf89ddc5bf05b80</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a3e696d4bb8a0294762be3428301ebbec</anchor>
      <arglist>(const CheckedValue&lt; Angle, NoOpChecker&lt; Angle &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Angle(lhs)&lt;=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a55fa5e47ada221e269711dbbf90eedd7</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Angle, NoOpChecker&lt; Angle &gt; &gt; &amp;rhs) -&gt; decltype(lhs&lt;=Angle(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a5c18729fd53f4bb5275874c8cd1eb644</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>abcb14439b5fd9f3daf2b518c786865b7</anchor>
      <arglist>(const CheckedValue&lt; Angle, NoOpChecker&lt; Angle &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Angle(lhs) &gt;=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a092ab700ddc3c1dba9a60a49ce75cf6e</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Angle, NoOpChecker&lt; Angle &gt; &gt; &amp;rhs) -&gt; decltype(lhs &gt;=Angle(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a4e50b7f361b27adaf57e0b275b849cb2</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ab9f2a8be4da1677e412b8eabc2146873</anchor>
      <arglist>(const CheckedValue&lt; Angle, NoOpChecker&lt; Angle &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Angle(lhs)&lt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a6f64d5e0d888eb6813af5fa103a16b16</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Angle, NoOpChecker&lt; Angle &gt; &gt; &amp;rhs) -&gt; decltype(lhs&lt; Angle(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>aab6a70eaafe3d414d9ebb561150a5ae0</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a3b2ff344394e8157985fe636a85f18d9</anchor>
      <arglist>(const CheckedValue&lt; Angle, NoOpChecker&lt; Angle &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Angle(lhs) &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a6ea68ce25d18cda2a9a333fa224f0558</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Angle, NoOpChecker&lt; Angle &gt; &gt; &amp;rhs) -&gt; decltype(lhs &gt; Angle(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a5a5b28003deb87e06a3c9e51f44fb096</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)/RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a21a68e7bc007582c16847ed8615d8c26</anchor>
      <arglist>(const CheckedValue&lt; Angle, NoOpChecker&lt; Angle &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Angle(lhs)/rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a740ddde1b6038fc20e0e763e0eabac6a</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Angle, NoOpChecker&lt; Angle &gt; &gt; &amp;rhs) -&gt; decltype(lhs/Angle(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ace19087d3c9f0e9cf7b83eb131626bee</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)+RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a687d59516f156855de42eea778eccc49</anchor>
      <arglist>(const CheckedValue&lt; Angle, NoOpChecker&lt; Angle &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Angle(lhs)+rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a75202d7d29b1ce5418c1ae4e32c95a08</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Angle, NoOpChecker&lt; Angle &gt; &gt; &amp;rhs) -&gt; decltype(lhs+Angle(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>aa918349e3179ab2f97d04b41085d0a48</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) - RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>acf1adc96b8c69fa7bb0ce08582f93de7</anchor>
      <arglist>(const CheckedValue&lt; Angle, NoOpChecker&lt; Angle &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Angle(lhs) - rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a5783466a0028f61a1e70076f410ac4ee</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Angle, NoOpChecker&lt; Angle &gt; &gt; &amp;rhs) -&gt; decltype(lhs - Angle(rhs))</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CheckedValue&lt; AreaDensity &gt;</name>
    <filename>classplayrho_1_1CheckedValue.html</filename>
    <member kind="typedef">
      <type>AreaDensity</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a17d253593c24e29ef16cec75c1878c83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::remove_pointer&lt; AreaDensity &gt;::type</type>
      <name>remove_pointer_type</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a7ae70764b405f77fbe3f370170258a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NoOpChecker&lt; AreaDensity &gt;</type>
      <name>checker_type</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a7cd95d354fce04be2399ae2af61709b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>CheckedValue</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a47e37f1a6b29daa6c38d99a9d322dc94</anchor>
      <arglist>() noexcept(noexcept(NoOpChecker&lt; AreaDensity &gt; {}()))</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>CheckedValue</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ae90f335daecd90e9c249b4811a0807dc</anchor>
      <arglist>(value_type value) noexcept(noexcept(checker_type{}(value)))</arglist>
    </member>
    <member kind="function">
      <type>constexpr value_type</type>
      <name>get</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a314230081e7cddd89466ae1a4dffcaf2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator value_type</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a8dfc68564f17eae760e416e7b45b81b1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_pointer&lt; U &gt;::value, U &gt;</type>
      <name>operator-&gt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ab9afc76618f8a3a8ce25c3fed1678eda</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_pointer&lt; U &gt;::value, remove_pointer_type &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a20c2e8c6d96f9e23e3a5b7fb228e768e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>value_type</type>
      <name>m_value</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a7977db83cfc36f9abe4dbb78779ffd53</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ab695c5da4298cd1267ccb84710dc5dc4</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) *RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a344c62fec7ff32c28d2a98fb3eff0cee</anchor>
      <arglist>(const CheckedValue&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliable&lt; CheckedValue&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt; &gt;, Other &gt;::value, decltype(AreaDensity() *Other())&gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a14860a28f9b31d3c16987c19762c227a</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt; &gt; &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliable&lt; Other, CheckedValue&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt; &gt;&gt;::value, decltype(Other() *AreaDensity())&gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>acc045bd4bbb560077978ce21cd20c49f</anchor>
      <arglist>(::std::ostream &amp;os, const CheckedValue&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt; &gt; &amp;value) -&gt; decltype(os&lt;&lt; AreaDensity(value))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ab21e9430d6c13f5645a8a5af6a64a23a</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;()==std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs)==RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>adafba64613de79315803f30e1c800aad</anchor>
      <arglist>(const CheckedValue&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(AreaDensity(lhs)==rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>aa8fc70d9f3c91ab4c9afb7730f920243</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt; &gt; &amp;rhs) -&gt; decltype(lhs==AreaDensity(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a0878dcd8f25150f77ebea43e908e3023</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;() !=std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs) !=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>af25888243d04857183fbff9a515bcbfd</anchor>
      <arglist>(const CheckedValue&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(AreaDensity(lhs) !=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a2a6bef32507b31e3d1ae0935a6719e71</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt; &gt; &amp;rhs) -&gt; decltype(lhs !=AreaDensity(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a17f5c3cf62f38463edf89ddc5bf05b80</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a3e696d4bb8a0294762be3428301ebbec</anchor>
      <arglist>(const CheckedValue&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(AreaDensity(lhs)&lt;=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a55fa5e47ada221e269711dbbf90eedd7</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt; &gt; &amp;rhs) -&gt; decltype(lhs&lt;=AreaDensity(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a5c18729fd53f4bb5275874c8cd1eb644</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>abcb14439b5fd9f3daf2b518c786865b7</anchor>
      <arglist>(const CheckedValue&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(AreaDensity(lhs) &gt;=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a092ab700ddc3c1dba9a60a49ce75cf6e</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt; &gt; &amp;rhs) -&gt; decltype(lhs &gt;=AreaDensity(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a4e50b7f361b27adaf57e0b275b849cb2</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ab9f2a8be4da1677e412b8eabc2146873</anchor>
      <arglist>(const CheckedValue&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(AreaDensity(lhs)&lt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a6f64d5e0d888eb6813af5fa103a16b16</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt; &gt; &amp;rhs) -&gt; decltype(lhs&lt; AreaDensity(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>aab6a70eaafe3d414d9ebb561150a5ae0</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a3b2ff344394e8157985fe636a85f18d9</anchor>
      <arglist>(const CheckedValue&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(AreaDensity(lhs) &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a6ea68ce25d18cda2a9a333fa224f0558</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt; &gt; &amp;rhs) -&gt; decltype(lhs &gt; AreaDensity(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a5a5b28003deb87e06a3c9e51f44fb096</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)/RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a21a68e7bc007582c16847ed8615d8c26</anchor>
      <arglist>(const CheckedValue&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(AreaDensity(lhs)/rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a740ddde1b6038fc20e0e763e0eabac6a</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt; &gt; &amp;rhs) -&gt; decltype(lhs/AreaDensity(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ace19087d3c9f0e9cf7b83eb131626bee</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)+RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a687d59516f156855de42eea778eccc49</anchor>
      <arglist>(const CheckedValue&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(AreaDensity(lhs)+rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a75202d7d29b1ce5418c1ae4e32c95a08</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt; &gt; &amp;rhs) -&gt; decltype(lhs+AreaDensity(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>aa918349e3179ab2f97d04b41085d0a48</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) - RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>acf1adc96b8c69fa7bb0ce08582f93de7</anchor>
      <arglist>(const CheckedValue&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(AreaDensity(lhs) - rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a5783466a0028f61a1e70076f410ac4ee</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; AreaDensity, NoOpChecker&lt; AreaDensity &gt; &gt; &amp;rhs) -&gt; decltype(lhs - AreaDensity(rhs))</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CheckedValue&lt; Force &gt;</name>
    <filename>classplayrho_1_1CheckedValue.html</filename>
    <member kind="typedef">
      <type>Force</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a17d253593c24e29ef16cec75c1878c83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::remove_pointer&lt; Force &gt;::type</type>
      <name>remove_pointer_type</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a7ae70764b405f77fbe3f370170258a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NoOpChecker&lt; Force &gt;</type>
      <name>checker_type</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a7cd95d354fce04be2399ae2af61709b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>CheckedValue</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a47e37f1a6b29daa6c38d99a9d322dc94</anchor>
      <arglist>() noexcept(noexcept(NoOpChecker&lt; Force &gt; {}()))</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>CheckedValue</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ae90f335daecd90e9c249b4811a0807dc</anchor>
      <arglist>(value_type value) noexcept(noexcept(checker_type{}(value)))</arglist>
    </member>
    <member kind="function">
      <type>constexpr value_type</type>
      <name>get</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a314230081e7cddd89466ae1a4dffcaf2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator value_type</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a8dfc68564f17eae760e416e7b45b81b1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_pointer&lt; U &gt;::value, U &gt;</type>
      <name>operator-&gt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ab9afc76618f8a3a8ce25c3fed1678eda</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_pointer&lt; U &gt;::value, remove_pointer_type &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a20c2e8c6d96f9e23e3a5b7fb228e768e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>value_type</type>
      <name>m_value</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a7977db83cfc36f9abe4dbb78779ffd53</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ab695c5da4298cd1267ccb84710dc5dc4</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) *RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a344c62fec7ff32c28d2a98fb3eff0cee</anchor>
      <arglist>(const CheckedValue&lt; Force, NoOpChecker&lt; Force &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliable&lt; CheckedValue&lt; Force, NoOpChecker&lt; Force &gt; &gt;, Other &gt;::value, decltype(Force() *Other())&gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a14860a28f9b31d3c16987c19762c227a</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Force, NoOpChecker&lt; Force &gt; &gt; &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliable&lt; Other, CheckedValue&lt; Force, NoOpChecker&lt; Force &gt; &gt;&gt;::value, decltype(Other() *Force())&gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>acc045bd4bbb560077978ce21cd20c49f</anchor>
      <arglist>(::std::ostream &amp;os, const CheckedValue&lt; Force, NoOpChecker&lt; Force &gt; &gt; &amp;value) -&gt; decltype(os&lt;&lt; Force(value))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ab21e9430d6c13f5645a8a5af6a64a23a</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;()==std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs)==RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>adafba64613de79315803f30e1c800aad</anchor>
      <arglist>(const CheckedValue&lt; Force, NoOpChecker&lt; Force &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Force(lhs)==rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>aa8fc70d9f3c91ab4c9afb7730f920243</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Force, NoOpChecker&lt; Force &gt; &gt; &amp;rhs) -&gt; decltype(lhs==Force(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a0878dcd8f25150f77ebea43e908e3023</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;() !=std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs) !=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>af25888243d04857183fbff9a515bcbfd</anchor>
      <arglist>(const CheckedValue&lt; Force, NoOpChecker&lt; Force &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Force(lhs) !=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a2a6bef32507b31e3d1ae0935a6719e71</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Force, NoOpChecker&lt; Force &gt; &gt; &amp;rhs) -&gt; decltype(lhs !=Force(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a17f5c3cf62f38463edf89ddc5bf05b80</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a3e696d4bb8a0294762be3428301ebbec</anchor>
      <arglist>(const CheckedValue&lt; Force, NoOpChecker&lt; Force &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Force(lhs)&lt;=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a55fa5e47ada221e269711dbbf90eedd7</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Force, NoOpChecker&lt; Force &gt; &gt; &amp;rhs) -&gt; decltype(lhs&lt;=Force(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a5c18729fd53f4bb5275874c8cd1eb644</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>abcb14439b5fd9f3daf2b518c786865b7</anchor>
      <arglist>(const CheckedValue&lt; Force, NoOpChecker&lt; Force &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Force(lhs) &gt;=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a092ab700ddc3c1dba9a60a49ce75cf6e</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Force, NoOpChecker&lt; Force &gt; &gt; &amp;rhs) -&gt; decltype(lhs &gt;=Force(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a4e50b7f361b27adaf57e0b275b849cb2</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ab9f2a8be4da1677e412b8eabc2146873</anchor>
      <arglist>(const CheckedValue&lt; Force, NoOpChecker&lt; Force &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Force(lhs)&lt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a6f64d5e0d888eb6813af5fa103a16b16</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Force, NoOpChecker&lt; Force &gt; &gt; &amp;rhs) -&gt; decltype(lhs&lt; Force(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>aab6a70eaafe3d414d9ebb561150a5ae0</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a3b2ff344394e8157985fe636a85f18d9</anchor>
      <arglist>(const CheckedValue&lt; Force, NoOpChecker&lt; Force &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Force(lhs) &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a6ea68ce25d18cda2a9a333fa224f0558</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Force, NoOpChecker&lt; Force &gt; &gt; &amp;rhs) -&gt; decltype(lhs &gt; Force(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a5a5b28003deb87e06a3c9e51f44fb096</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)/RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a21a68e7bc007582c16847ed8615d8c26</anchor>
      <arglist>(const CheckedValue&lt; Force, NoOpChecker&lt; Force &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Force(lhs)/rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a740ddde1b6038fc20e0e763e0eabac6a</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Force, NoOpChecker&lt; Force &gt; &gt; &amp;rhs) -&gt; decltype(lhs/Force(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ace19087d3c9f0e9cf7b83eb131626bee</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)+RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a687d59516f156855de42eea778eccc49</anchor>
      <arglist>(const CheckedValue&lt; Force, NoOpChecker&lt; Force &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Force(lhs)+rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a75202d7d29b1ce5418c1ae4e32c95a08</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Force, NoOpChecker&lt; Force &gt; &gt; &amp;rhs) -&gt; decltype(lhs+Force(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>aa918349e3179ab2f97d04b41085d0a48</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) - RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>acf1adc96b8c69fa7bb0ce08582f93de7</anchor>
      <arglist>(const CheckedValue&lt; Force, NoOpChecker&lt; Force &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Force(lhs) - rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a5783466a0028f61a1e70076f410ac4ee</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Force, NoOpChecker&lt; Force &gt; &gt; &amp;rhs) -&gt; decltype(lhs - Force(rhs))</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CheckedValue&lt; Frequency &gt;</name>
    <filename>classplayrho_1_1CheckedValue.html</filename>
    <member kind="typedef">
      <type>Frequency</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a17d253593c24e29ef16cec75c1878c83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::remove_pointer&lt; Frequency &gt;::type</type>
      <name>remove_pointer_type</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a7ae70764b405f77fbe3f370170258a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NoOpChecker&lt; Frequency &gt;</type>
      <name>checker_type</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a7cd95d354fce04be2399ae2af61709b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>CheckedValue</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a47e37f1a6b29daa6c38d99a9d322dc94</anchor>
      <arglist>() noexcept(noexcept(NoOpChecker&lt; Frequency &gt; {}()))</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>CheckedValue</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ae90f335daecd90e9c249b4811a0807dc</anchor>
      <arglist>(value_type value) noexcept(noexcept(checker_type{}(value)))</arglist>
    </member>
    <member kind="function">
      <type>constexpr value_type</type>
      <name>get</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a314230081e7cddd89466ae1a4dffcaf2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator value_type</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a8dfc68564f17eae760e416e7b45b81b1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_pointer&lt; U &gt;::value, U &gt;</type>
      <name>operator-&gt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ab9afc76618f8a3a8ce25c3fed1678eda</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_pointer&lt; U &gt;::value, remove_pointer_type &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a20c2e8c6d96f9e23e3a5b7fb228e768e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>value_type</type>
      <name>m_value</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a7977db83cfc36f9abe4dbb78779ffd53</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ab695c5da4298cd1267ccb84710dc5dc4</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) *RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a344c62fec7ff32c28d2a98fb3eff0cee</anchor>
      <arglist>(const CheckedValue&lt; Frequency, NoOpChecker&lt; Frequency &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliable&lt; CheckedValue&lt; Frequency, NoOpChecker&lt; Frequency &gt; &gt;, Other &gt;::value, decltype(Frequency() *Other())&gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a14860a28f9b31d3c16987c19762c227a</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Frequency, NoOpChecker&lt; Frequency &gt; &gt; &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliable&lt; Other, CheckedValue&lt; Frequency, NoOpChecker&lt; Frequency &gt; &gt;&gt;::value, decltype(Other() *Frequency())&gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>acc045bd4bbb560077978ce21cd20c49f</anchor>
      <arglist>(::std::ostream &amp;os, const CheckedValue&lt; Frequency, NoOpChecker&lt; Frequency &gt; &gt; &amp;value) -&gt; decltype(os&lt;&lt; Frequency(value))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ab21e9430d6c13f5645a8a5af6a64a23a</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;()==std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs)==RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>adafba64613de79315803f30e1c800aad</anchor>
      <arglist>(const CheckedValue&lt; Frequency, NoOpChecker&lt; Frequency &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Frequency(lhs)==rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>aa8fc70d9f3c91ab4c9afb7730f920243</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Frequency, NoOpChecker&lt; Frequency &gt; &gt; &amp;rhs) -&gt; decltype(lhs==Frequency(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a0878dcd8f25150f77ebea43e908e3023</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;() !=std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs) !=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>af25888243d04857183fbff9a515bcbfd</anchor>
      <arglist>(const CheckedValue&lt; Frequency, NoOpChecker&lt; Frequency &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Frequency(lhs) !=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a2a6bef32507b31e3d1ae0935a6719e71</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Frequency, NoOpChecker&lt; Frequency &gt; &gt; &amp;rhs) -&gt; decltype(lhs !=Frequency(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a17f5c3cf62f38463edf89ddc5bf05b80</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a3e696d4bb8a0294762be3428301ebbec</anchor>
      <arglist>(const CheckedValue&lt; Frequency, NoOpChecker&lt; Frequency &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Frequency(lhs)&lt;=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a55fa5e47ada221e269711dbbf90eedd7</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Frequency, NoOpChecker&lt; Frequency &gt; &gt; &amp;rhs) -&gt; decltype(lhs&lt;=Frequency(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a5c18729fd53f4bb5275874c8cd1eb644</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>abcb14439b5fd9f3daf2b518c786865b7</anchor>
      <arglist>(const CheckedValue&lt; Frequency, NoOpChecker&lt; Frequency &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Frequency(lhs) &gt;=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a092ab700ddc3c1dba9a60a49ce75cf6e</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Frequency, NoOpChecker&lt; Frequency &gt; &gt; &amp;rhs) -&gt; decltype(lhs &gt;=Frequency(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a4e50b7f361b27adaf57e0b275b849cb2</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ab9f2a8be4da1677e412b8eabc2146873</anchor>
      <arglist>(const CheckedValue&lt; Frequency, NoOpChecker&lt; Frequency &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Frequency(lhs)&lt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a6f64d5e0d888eb6813af5fa103a16b16</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Frequency, NoOpChecker&lt; Frequency &gt; &gt; &amp;rhs) -&gt; decltype(lhs&lt; Frequency(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>aab6a70eaafe3d414d9ebb561150a5ae0</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a3b2ff344394e8157985fe636a85f18d9</anchor>
      <arglist>(const CheckedValue&lt; Frequency, NoOpChecker&lt; Frequency &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Frequency(lhs) &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a6ea68ce25d18cda2a9a333fa224f0558</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Frequency, NoOpChecker&lt; Frequency &gt; &gt; &amp;rhs) -&gt; decltype(lhs &gt; Frequency(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a5a5b28003deb87e06a3c9e51f44fb096</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)/RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a21a68e7bc007582c16847ed8615d8c26</anchor>
      <arglist>(const CheckedValue&lt; Frequency, NoOpChecker&lt; Frequency &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Frequency(lhs)/rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a740ddde1b6038fc20e0e763e0eabac6a</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Frequency, NoOpChecker&lt; Frequency &gt; &gt; &amp;rhs) -&gt; decltype(lhs/Frequency(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ace19087d3c9f0e9cf7b83eb131626bee</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)+RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a687d59516f156855de42eea778eccc49</anchor>
      <arglist>(const CheckedValue&lt; Frequency, NoOpChecker&lt; Frequency &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Frequency(lhs)+rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a75202d7d29b1ce5418c1ae4e32c95a08</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Frequency, NoOpChecker&lt; Frequency &gt; &gt; &amp;rhs) -&gt; decltype(lhs+Frequency(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>aa918349e3179ab2f97d04b41085d0a48</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) - RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>acf1adc96b8c69fa7bb0ce08582f93de7</anchor>
      <arglist>(const CheckedValue&lt; Frequency, NoOpChecker&lt; Frequency &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Frequency(lhs) - rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a5783466a0028f61a1e70076f410ac4ee</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Frequency, NoOpChecker&lt; Frequency &gt; &gt; &amp;rhs) -&gt; decltype(lhs - Frequency(rhs))</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CheckedValue&lt; Length &gt;</name>
    <filename>classplayrho_1_1CheckedValue.html</filename>
    <member kind="typedef">
      <type>Length</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a17d253593c24e29ef16cec75c1878c83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::remove_pointer&lt; Length &gt;::type</type>
      <name>remove_pointer_type</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a7ae70764b405f77fbe3f370170258a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NoOpChecker&lt; Length &gt;</type>
      <name>checker_type</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a7cd95d354fce04be2399ae2af61709b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>CheckedValue</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a47e37f1a6b29daa6c38d99a9d322dc94</anchor>
      <arglist>() noexcept(noexcept(NoOpChecker&lt; Length &gt; {}()))</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>CheckedValue</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ae90f335daecd90e9c249b4811a0807dc</anchor>
      <arglist>(value_type value) noexcept(noexcept(checker_type{}(value)))</arglist>
    </member>
    <member kind="function">
      <type>constexpr value_type</type>
      <name>get</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a314230081e7cddd89466ae1a4dffcaf2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator value_type</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a8dfc68564f17eae760e416e7b45b81b1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_pointer&lt; U &gt;::value, U &gt;</type>
      <name>operator-&gt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ab9afc76618f8a3a8ce25c3fed1678eda</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_pointer&lt; U &gt;::value, remove_pointer_type &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a20c2e8c6d96f9e23e3a5b7fb228e768e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>value_type</type>
      <name>m_value</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a7977db83cfc36f9abe4dbb78779ffd53</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ab695c5da4298cd1267ccb84710dc5dc4</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) *RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a344c62fec7ff32c28d2a98fb3eff0cee</anchor>
      <arglist>(const CheckedValue&lt; Length, NoOpChecker&lt; Length &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliable&lt; CheckedValue&lt; Length, NoOpChecker&lt; Length &gt; &gt;, Other &gt;::value, decltype(Length() *Other())&gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a14860a28f9b31d3c16987c19762c227a</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Length, NoOpChecker&lt; Length &gt; &gt; &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliable&lt; Other, CheckedValue&lt; Length, NoOpChecker&lt; Length &gt; &gt;&gt;::value, decltype(Other() *Length())&gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>acc045bd4bbb560077978ce21cd20c49f</anchor>
      <arglist>(::std::ostream &amp;os, const CheckedValue&lt; Length, NoOpChecker&lt; Length &gt; &gt; &amp;value) -&gt; decltype(os&lt;&lt; Length(value))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ab21e9430d6c13f5645a8a5af6a64a23a</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;()==std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs)==RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>adafba64613de79315803f30e1c800aad</anchor>
      <arglist>(const CheckedValue&lt; Length, NoOpChecker&lt; Length &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Length(lhs)==rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>aa8fc70d9f3c91ab4c9afb7730f920243</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Length, NoOpChecker&lt; Length &gt; &gt; &amp;rhs) -&gt; decltype(lhs==Length(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a0878dcd8f25150f77ebea43e908e3023</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;() !=std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs) !=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>af25888243d04857183fbff9a515bcbfd</anchor>
      <arglist>(const CheckedValue&lt; Length, NoOpChecker&lt; Length &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Length(lhs) !=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a2a6bef32507b31e3d1ae0935a6719e71</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Length, NoOpChecker&lt; Length &gt; &gt; &amp;rhs) -&gt; decltype(lhs !=Length(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a17f5c3cf62f38463edf89ddc5bf05b80</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a3e696d4bb8a0294762be3428301ebbec</anchor>
      <arglist>(const CheckedValue&lt; Length, NoOpChecker&lt; Length &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Length(lhs)&lt;=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a55fa5e47ada221e269711dbbf90eedd7</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Length, NoOpChecker&lt; Length &gt; &gt; &amp;rhs) -&gt; decltype(lhs&lt;=Length(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a5c18729fd53f4bb5275874c8cd1eb644</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>abcb14439b5fd9f3daf2b518c786865b7</anchor>
      <arglist>(const CheckedValue&lt; Length, NoOpChecker&lt; Length &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Length(lhs) &gt;=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a092ab700ddc3c1dba9a60a49ce75cf6e</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Length, NoOpChecker&lt; Length &gt; &gt; &amp;rhs) -&gt; decltype(lhs &gt;=Length(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a4e50b7f361b27adaf57e0b275b849cb2</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ab9f2a8be4da1677e412b8eabc2146873</anchor>
      <arglist>(const CheckedValue&lt; Length, NoOpChecker&lt; Length &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Length(lhs)&lt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a6f64d5e0d888eb6813af5fa103a16b16</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Length, NoOpChecker&lt; Length &gt; &gt; &amp;rhs) -&gt; decltype(lhs&lt; Length(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>aab6a70eaafe3d414d9ebb561150a5ae0</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a3b2ff344394e8157985fe636a85f18d9</anchor>
      <arglist>(const CheckedValue&lt; Length, NoOpChecker&lt; Length &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Length(lhs) &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a6ea68ce25d18cda2a9a333fa224f0558</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Length, NoOpChecker&lt; Length &gt; &gt; &amp;rhs) -&gt; decltype(lhs &gt; Length(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a5a5b28003deb87e06a3c9e51f44fb096</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)/RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a21a68e7bc007582c16847ed8615d8c26</anchor>
      <arglist>(const CheckedValue&lt; Length, NoOpChecker&lt; Length &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Length(lhs)/rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a740ddde1b6038fc20e0e763e0eabac6a</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Length, NoOpChecker&lt; Length &gt; &gt; &amp;rhs) -&gt; decltype(lhs/Length(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ace19087d3c9f0e9cf7b83eb131626bee</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)+RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a687d59516f156855de42eea778eccc49</anchor>
      <arglist>(const CheckedValue&lt; Length, NoOpChecker&lt; Length &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Length(lhs)+rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a75202d7d29b1ce5418c1ae4e32c95a08</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Length, NoOpChecker&lt; Length &gt; &gt; &amp;rhs) -&gt; decltype(lhs+Length(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>aa918349e3179ab2f97d04b41085d0a48</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) - RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>acf1adc96b8c69fa7bb0ce08582f93de7</anchor>
      <arglist>(const CheckedValue&lt; Length, NoOpChecker&lt; Length &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Length(lhs) - rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a5783466a0028f61a1e70076f410ac4ee</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Length, NoOpChecker&lt; Length &gt; &gt; &amp;rhs) -&gt; decltype(lhs - Length(rhs))</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CheckedValue&lt; Mass &gt;</name>
    <filename>classplayrho_1_1CheckedValue.html</filename>
    <member kind="typedef">
      <type>Mass</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a17d253593c24e29ef16cec75c1878c83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::remove_pointer&lt; Mass &gt;::type</type>
      <name>remove_pointer_type</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a7ae70764b405f77fbe3f370170258a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NoOpChecker&lt; Mass &gt;</type>
      <name>checker_type</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a7cd95d354fce04be2399ae2af61709b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>CheckedValue</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a47e37f1a6b29daa6c38d99a9d322dc94</anchor>
      <arglist>() noexcept(noexcept(NoOpChecker&lt; Mass &gt; {}()))</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>CheckedValue</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ae90f335daecd90e9c249b4811a0807dc</anchor>
      <arglist>(value_type value) noexcept(noexcept(checker_type{}(value)))</arglist>
    </member>
    <member kind="function">
      <type>constexpr value_type</type>
      <name>get</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a314230081e7cddd89466ae1a4dffcaf2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator value_type</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a8dfc68564f17eae760e416e7b45b81b1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_pointer&lt; U &gt;::value, U &gt;</type>
      <name>operator-&gt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ab9afc76618f8a3a8ce25c3fed1678eda</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_pointer&lt; U &gt;::value, remove_pointer_type &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a20c2e8c6d96f9e23e3a5b7fb228e768e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>value_type</type>
      <name>m_value</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a7977db83cfc36f9abe4dbb78779ffd53</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ab695c5da4298cd1267ccb84710dc5dc4</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) *RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a344c62fec7ff32c28d2a98fb3eff0cee</anchor>
      <arglist>(const CheckedValue&lt; Mass, NoOpChecker&lt; Mass &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliable&lt; CheckedValue&lt; Mass, NoOpChecker&lt; Mass &gt; &gt;, Other &gt;::value, decltype(Mass() *Other())&gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a14860a28f9b31d3c16987c19762c227a</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Mass, NoOpChecker&lt; Mass &gt; &gt; &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliable&lt; Other, CheckedValue&lt; Mass, NoOpChecker&lt; Mass &gt; &gt;&gt;::value, decltype(Other() *Mass())&gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>acc045bd4bbb560077978ce21cd20c49f</anchor>
      <arglist>(::std::ostream &amp;os, const CheckedValue&lt; Mass, NoOpChecker&lt; Mass &gt; &gt; &amp;value) -&gt; decltype(os&lt;&lt; Mass(value))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ab21e9430d6c13f5645a8a5af6a64a23a</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;()==std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs)==RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>adafba64613de79315803f30e1c800aad</anchor>
      <arglist>(const CheckedValue&lt; Mass, NoOpChecker&lt; Mass &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Mass(lhs)==rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>aa8fc70d9f3c91ab4c9afb7730f920243</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Mass, NoOpChecker&lt; Mass &gt; &gt; &amp;rhs) -&gt; decltype(lhs==Mass(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a0878dcd8f25150f77ebea43e908e3023</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;() !=std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs) !=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>af25888243d04857183fbff9a515bcbfd</anchor>
      <arglist>(const CheckedValue&lt; Mass, NoOpChecker&lt; Mass &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Mass(lhs) !=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a2a6bef32507b31e3d1ae0935a6719e71</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Mass, NoOpChecker&lt; Mass &gt; &gt; &amp;rhs) -&gt; decltype(lhs !=Mass(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a17f5c3cf62f38463edf89ddc5bf05b80</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a3e696d4bb8a0294762be3428301ebbec</anchor>
      <arglist>(const CheckedValue&lt; Mass, NoOpChecker&lt; Mass &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Mass(lhs)&lt;=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a55fa5e47ada221e269711dbbf90eedd7</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Mass, NoOpChecker&lt; Mass &gt; &gt; &amp;rhs) -&gt; decltype(lhs&lt;=Mass(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a5c18729fd53f4bb5275874c8cd1eb644</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>abcb14439b5fd9f3daf2b518c786865b7</anchor>
      <arglist>(const CheckedValue&lt; Mass, NoOpChecker&lt; Mass &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Mass(lhs) &gt;=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a092ab700ddc3c1dba9a60a49ce75cf6e</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Mass, NoOpChecker&lt; Mass &gt; &gt; &amp;rhs) -&gt; decltype(lhs &gt;=Mass(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a4e50b7f361b27adaf57e0b275b849cb2</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ab9f2a8be4da1677e412b8eabc2146873</anchor>
      <arglist>(const CheckedValue&lt; Mass, NoOpChecker&lt; Mass &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Mass(lhs)&lt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a6f64d5e0d888eb6813af5fa103a16b16</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Mass, NoOpChecker&lt; Mass &gt; &gt; &amp;rhs) -&gt; decltype(lhs&lt; Mass(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>aab6a70eaafe3d414d9ebb561150a5ae0</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a3b2ff344394e8157985fe636a85f18d9</anchor>
      <arglist>(const CheckedValue&lt; Mass, NoOpChecker&lt; Mass &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Mass(lhs) &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a6ea68ce25d18cda2a9a333fa224f0558</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Mass, NoOpChecker&lt; Mass &gt; &gt; &amp;rhs) -&gt; decltype(lhs &gt; Mass(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a5a5b28003deb87e06a3c9e51f44fb096</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)/RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a21a68e7bc007582c16847ed8615d8c26</anchor>
      <arglist>(const CheckedValue&lt; Mass, NoOpChecker&lt; Mass &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Mass(lhs)/rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a740ddde1b6038fc20e0e763e0eabac6a</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Mass, NoOpChecker&lt; Mass &gt; &gt; &amp;rhs) -&gt; decltype(lhs/Mass(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ace19087d3c9f0e9cf7b83eb131626bee</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)+RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a687d59516f156855de42eea778eccc49</anchor>
      <arglist>(const CheckedValue&lt; Mass, NoOpChecker&lt; Mass &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Mass(lhs)+rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a75202d7d29b1ce5418c1ae4e32c95a08</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Mass, NoOpChecker&lt; Mass &gt; &gt; &amp;rhs) -&gt; decltype(lhs+Mass(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>aa918349e3179ab2f97d04b41085d0a48</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) - RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>acf1adc96b8c69fa7bb0ce08582f93de7</anchor>
      <arglist>(const CheckedValue&lt; Mass, NoOpChecker&lt; Mass &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Mass(lhs) - rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a5783466a0028f61a1e70076f410ac4ee</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Mass, NoOpChecker&lt; Mass &gt; &gt; &amp;rhs) -&gt; decltype(lhs - Mass(rhs))</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CheckedValue&lt; Real &gt;</name>
    <filename>classplayrho_1_1CheckedValue.html</filename>
    <member kind="typedef">
      <type>Real</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a17d253593c24e29ef16cec75c1878c83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::remove_pointer&lt; Real &gt;::type</type>
      <name>remove_pointer_type</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a7ae70764b405f77fbe3f370170258a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NoOpChecker&lt; Real &gt;</type>
      <name>checker_type</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a7cd95d354fce04be2399ae2af61709b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>CheckedValue</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a47e37f1a6b29daa6c38d99a9d322dc94</anchor>
      <arglist>() noexcept(noexcept(NoOpChecker&lt; Real &gt; {}()))</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>CheckedValue</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ae90f335daecd90e9c249b4811a0807dc</anchor>
      <arglist>(value_type value) noexcept(noexcept(checker_type{}(value)))</arglist>
    </member>
    <member kind="function">
      <type>constexpr value_type</type>
      <name>get</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a314230081e7cddd89466ae1a4dffcaf2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator value_type</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a8dfc68564f17eae760e416e7b45b81b1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_pointer&lt; U &gt;::value, U &gt;</type>
      <name>operator-&gt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ab9afc76618f8a3a8ce25c3fed1678eda</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_pointer&lt; U &gt;::value, remove_pointer_type &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a20c2e8c6d96f9e23e3a5b7fb228e768e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>value_type</type>
      <name>m_value</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a7977db83cfc36f9abe4dbb78779ffd53</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ab695c5da4298cd1267ccb84710dc5dc4</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) *RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a344c62fec7ff32c28d2a98fb3eff0cee</anchor>
      <arglist>(const CheckedValue&lt; Real, NoOpChecker&lt; Real &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliable&lt; CheckedValue&lt; Real, NoOpChecker&lt; Real &gt; &gt;, Other &gt;::value, decltype(Real() *Other())&gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a14860a28f9b31d3c16987c19762c227a</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Real, NoOpChecker&lt; Real &gt; &gt; &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliable&lt; Other, CheckedValue&lt; Real, NoOpChecker&lt; Real &gt; &gt;&gt;::value, decltype(Other() *Real())&gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>acc045bd4bbb560077978ce21cd20c49f</anchor>
      <arglist>(::std::ostream &amp;os, const CheckedValue&lt; Real, NoOpChecker&lt; Real &gt; &gt; &amp;value) -&gt; decltype(os&lt;&lt; Real(value))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ab21e9430d6c13f5645a8a5af6a64a23a</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;()==std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs)==RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>adafba64613de79315803f30e1c800aad</anchor>
      <arglist>(const CheckedValue&lt; Real, NoOpChecker&lt; Real &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Real(lhs)==rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>aa8fc70d9f3c91ab4c9afb7730f920243</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Real, NoOpChecker&lt; Real &gt; &gt; &amp;rhs) -&gt; decltype(lhs==Real(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a0878dcd8f25150f77ebea43e908e3023</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;() !=std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs) !=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>af25888243d04857183fbff9a515bcbfd</anchor>
      <arglist>(const CheckedValue&lt; Real, NoOpChecker&lt; Real &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Real(lhs) !=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a2a6bef32507b31e3d1ae0935a6719e71</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Real, NoOpChecker&lt; Real &gt; &gt; &amp;rhs) -&gt; decltype(lhs !=Real(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a17f5c3cf62f38463edf89ddc5bf05b80</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a3e696d4bb8a0294762be3428301ebbec</anchor>
      <arglist>(const CheckedValue&lt; Real, NoOpChecker&lt; Real &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Real(lhs)&lt;=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a55fa5e47ada221e269711dbbf90eedd7</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Real, NoOpChecker&lt; Real &gt; &gt; &amp;rhs) -&gt; decltype(lhs&lt;=Real(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a5c18729fd53f4bb5275874c8cd1eb644</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>abcb14439b5fd9f3daf2b518c786865b7</anchor>
      <arglist>(const CheckedValue&lt; Real, NoOpChecker&lt; Real &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Real(lhs) &gt;=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a092ab700ddc3c1dba9a60a49ce75cf6e</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Real, NoOpChecker&lt; Real &gt; &gt; &amp;rhs) -&gt; decltype(lhs &gt;=Real(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a4e50b7f361b27adaf57e0b275b849cb2</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ab9f2a8be4da1677e412b8eabc2146873</anchor>
      <arglist>(const CheckedValue&lt; Real, NoOpChecker&lt; Real &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Real(lhs)&lt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a6f64d5e0d888eb6813af5fa103a16b16</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Real, NoOpChecker&lt; Real &gt; &gt; &amp;rhs) -&gt; decltype(lhs&lt; Real(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>aab6a70eaafe3d414d9ebb561150a5ae0</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a3b2ff344394e8157985fe636a85f18d9</anchor>
      <arglist>(const CheckedValue&lt; Real, NoOpChecker&lt; Real &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Real(lhs) &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a6ea68ce25d18cda2a9a333fa224f0558</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Real, NoOpChecker&lt; Real &gt; &gt; &amp;rhs) -&gt; decltype(lhs &gt; Real(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a5a5b28003deb87e06a3c9e51f44fb096</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)/RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a21a68e7bc007582c16847ed8615d8c26</anchor>
      <arglist>(const CheckedValue&lt; Real, NoOpChecker&lt; Real &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Real(lhs)/rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a740ddde1b6038fc20e0e763e0eabac6a</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Real, NoOpChecker&lt; Real &gt; &gt; &amp;rhs) -&gt; decltype(lhs/Real(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ace19087d3c9f0e9cf7b83eb131626bee</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)+RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a687d59516f156855de42eea778eccc49</anchor>
      <arglist>(const CheckedValue&lt; Real, NoOpChecker&lt; Real &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Real(lhs)+rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a75202d7d29b1ce5418c1ae4e32c95a08</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Real, NoOpChecker&lt; Real &gt; &gt; &amp;rhs) -&gt; decltype(lhs+Real(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>aa918349e3179ab2f97d04b41085d0a48</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) - RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>acf1adc96b8c69fa7bb0ce08582f93de7</anchor>
      <arglist>(const CheckedValue&lt; Real, NoOpChecker&lt; Real &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Real(lhs) - rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a5783466a0028f61a1e70076f410ac4ee</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Real, NoOpChecker&lt; Real &gt; &gt; &amp;rhs) -&gt; decltype(lhs - Real(rhs))</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CheckedValue&lt; RotInertia &gt;</name>
    <filename>classplayrho_1_1CheckedValue.html</filename>
    <member kind="typedef">
      <type>RotInertia</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a17d253593c24e29ef16cec75c1878c83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::remove_pointer&lt; RotInertia &gt;::type</type>
      <name>remove_pointer_type</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a7ae70764b405f77fbe3f370170258a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NoOpChecker&lt; RotInertia &gt;</type>
      <name>checker_type</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a7cd95d354fce04be2399ae2af61709b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>CheckedValue</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a47e37f1a6b29daa6c38d99a9d322dc94</anchor>
      <arglist>() noexcept(noexcept(NoOpChecker&lt; RotInertia &gt; {}()))</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>CheckedValue</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ae90f335daecd90e9c249b4811a0807dc</anchor>
      <arglist>(value_type value) noexcept(noexcept(checker_type{}(value)))</arglist>
    </member>
    <member kind="function">
      <type>constexpr value_type</type>
      <name>get</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a314230081e7cddd89466ae1a4dffcaf2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator value_type</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a8dfc68564f17eae760e416e7b45b81b1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_pointer&lt; U &gt;::value, U &gt;</type>
      <name>operator-&gt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ab9afc76618f8a3a8ce25c3fed1678eda</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_pointer&lt; U &gt;::value, remove_pointer_type &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a20c2e8c6d96f9e23e3a5b7fb228e768e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>value_type</type>
      <name>m_value</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a7977db83cfc36f9abe4dbb78779ffd53</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ab695c5da4298cd1267ccb84710dc5dc4</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) *RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a344c62fec7ff32c28d2a98fb3eff0cee</anchor>
      <arglist>(const CheckedValue&lt; RotInertia, NoOpChecker&lt; RotInertia &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliable&lt; CheckedValue&lt; RotInertia, NoOpChecker&lt; RotInertia &gt; &gt;, Other &gt;::value, decltype(RotInertia() *Other())&gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a14860a28f9b31d3c16987c19762c227a</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; RotInertia, NoOpChecker&lt; RotInertia &gt; &gt; &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliable&lt; Other, CheckedValue&lt; RotInertia, NoOpChecker&lt; RotInertia &gt; &gt;&gt;::value, decltype(Other() *RotInertia())&gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>acc045bd4bbb560077978ce21cd20c49f</anchor>
      <arglist>(::std::ostream &amp;os, const CheckedValue&lt; RotInertia, NoOpChecker&lt; RotInertia &gt; &gt; &amp;value) -&gt; decltype(os&lt;&lt; RotInertia(value))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ab21e9430d6c13f5645a8a5af6a64a23a</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;()==std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs)==RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>adafba64613de79315803f30e1c800aad</anchor>
      <arglist>(const CheckedValue&lt; RotInertia, NoOpChecker&lt; RotInertia &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(RotInertia(lhs)==rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>aa8fc70d9f3c91ab4c9afb7730f920243</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; RotInertia, NoOpChecker&lt; RotInertia &gt; &gt; &amp;rhs) -&gt; decltype(lhs==RotInertia(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a0878dcd8f25150f77ebea43e908e3023</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;() !=std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs) !=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>af25888243d04857183fbff9a515bcbfd</anchor>
      <arglist>(const CheckedValue&lt; RotInertia, NoOpChecker&lt; RotInertia &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(RotInertia(lhs) !=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a2a6bef32507b31e3d1ae0935a6719e71</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; RotInertia, NoOpChecker&lt; RotInertia &gt; &gt; &amp;rhs) -&gt; decltype(lhs !=RotInertia(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a17f5c3cf62f38463edf89ddc5bf05b80</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a3e696d4bb8a0294762be3428301ebbec</anchor>
      <arglist>(const CheckedValue&lt; RotInertia, NoOpChecker&lt; RotInertia &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(RotInertia(lhs)&lt;=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a55fa5e47ada221e269711dbbf90eedd7</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; RotInertia, NoOpChecker&lt; RotInertia &gt; &gt; &amp;rhs) -&gt; decltype(lhs&lt;=RotInertia(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a5c18729fd53f4bb5275874c8cd1eb644</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>abcb14439b5fd9f3daf2b518c786865b7</anchor>
      <arglist>(const CheckedValue&lt; RotInertia, NoOpChecker&lt; RotInertia &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(RotInertia(lhs) &gt;=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a092ab700ddc3c1dba9a60a49ce75cf6e</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; RotInertia, NoOpChecker&lt; RotInertia &gt; &gt; &amp;rhs) -&gt; decltype(lhs &gt;=RotInertia(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a4e50b7f361b27adaf57e0b275b849cb2</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ab9f2a8be4da1677e412b8eabc2146873</anchor>
      <arglist>(const CheckedValue&lt; RotInertia, NoOpChecker&lt; RotInertia &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(RotInertia(lhs)&lt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a6f64d5e0d888eb6813af5fa103a16b16</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; RotInertia, NoOpChecker&lt; RotInertia &gt; &gt; &amp;rhs) -&gt; decltype(lhs&lt; RotInertia(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>aab6a70eaafe3d414d9ebb561150a5ae0</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a3b2ff344394e8157985fe636a85f18d9</anchor>
      <arglist>(const CheckedValue&lt; RotInertia, NoOpChecker&lt; RotInertia &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(RotInertia(lhs) &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a6ea68ce25d18cda2a9a333fa224f0558</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; RotInertia, NoOpChecker&lt; RotInertia &gt; &gt; &amp;rhs) -&gt; decltype(lhs &gt; RotInertia(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a5a5b28003deb87e06a3c9e51f44fb096</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)/RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a21a68e7bc007582c16847ed8615d8c26</anchor>
      <arglist>(const CheckedValue&lt; RotInertia, NoOpChecker&lt; RotInertia &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(RotInertia(lhs)/rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a740ddde1b6038fc20e0e763e0eabac6a</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; RotInertia, NoOpChecker&lt; RotInertia &gt; &gt; &amp;rhs) -&gt; decltype(lhs/RotInertia(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ace19087d3c9f0e9cf7b83eb131626bee</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)+RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a687d59516f156855de42eea778eccc49</anchor>
      <arglist>(const CheckedValue&lt; RotInertia, NoOpChecker&lt; RotInertia &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(RotInertia(lhs)+rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a75202d7d29b1ce5418c1ae4e32c95a08</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; RotInertia, NoOpChecker&lt; RotInertia &gt; &gt; &amp;rhs) -&gt; decltype(lhs+RotInertia(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>aa918349e3179ab2f97d04b41085d0a48</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) - RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>acf1adc96b8c69fa7bb0ce08582f93de7</anchor>
      <arglist>(const CheckedValue&lt; RotInertia, NoOpChecker&lt; RotInertia &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(RotInertia(lhs) - rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a5783466a0028f61a1e70076f410ac4ee</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; RotInertia, NoOpChecker&lt; RotInertia &gt; &gt; &amp;rhs) -&gt; decltype(lhs - RotInertia(rhs))</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CheckedValue&lt; Torque &gt;</name>
    <filename>classplayrho_1_1CheckedValue.html</filename>
    <member kind="typedef">
      <type>Torque</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a17d253593c24e29ef16cec75c1878c83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::remove_pointer&lt; Torque &gt;::type</type>
      <name>remove_pointer_type</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a7ae70764b405f77fbe3f370170258a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NoOpChecker&lt; Torque &gt;</type>
      <name>checker_type</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a7cd95d354fce04be2399ae2af61709b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>CheckedValue</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a47e37f1a6b29daa6c38d99a9d322dc94</anchor>
      <arglist>() noexcept(noexcept(NoOpChecker&lt; Torque &gt; {}()))</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>CheckedValue</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ae90f335daecd90e9c249b4811a0807dc</anchor>
      <arglist>(value_type value) noexcept(noexcept(checker_type{}(value)))</arglist>
    </member>
    <member kind="function">
      <type>constexpr value_type</type>
      <name>get</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a314230081e7cddd89466ae1a4dffcaf2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator value_type</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a8dfc68564f17eae760e416e7b45b81b1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_pointer&lt; U &gt;::value, U &gt;</type>
      <name>operator-&gt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ab9afc76618f8a3a8ce25c3fed1678eda</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_pointer&lt; U &gt;::value, remove_pointer_type &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a20c2e8c6d96f9e23e3a5b7fb228e768e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>value_type</type>
      <name>m_value</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a7977db83cfc36f9abe4dbb78779ffd53</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ab695c5da4298cd1267ccb84710dc5dc4</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) *RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a344c62fec7ff32c28d2a98fb3eff0cee</anchor>
      <arglist>(const CheckedValue&lt; Torque, NoOpChecker&lt; Torque &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliable&lt; CheckedValue&lt; Torque, NoOpChecker&lt; Torque &gt; &gt;, Other &gt;::value, decltype(Torque() *Other())&gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a14860a28f9b31d3c16987c19762c227a</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Torque, NoOpChecker&lt; Torque &gt; &gt; &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliable&lt; Other, CheckedValue&lt; Torque, NoOpChecker&lt; Torque &gt; &gt;&gt;::value, decltype(Other() *Torque())&gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>acc045bd4bbb560077978ce21cd20c49f</anchor>
      <arglist>(::std::ostream &amp;os, const CheckedValue&lt; Torque, NoOpChecker&lt; Torque &gt; &gt; &amp;value) -&gt; decltype(os&lt;&lt; Torque(value))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ab21e9430d6c13f5645a8a5af6a64a23a</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;()==std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs)==RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>adafba64613de79315803f30e1c800aad</anchor>
      <arglist>(const CheckedValue&lt; Torque, NoOpChecker&lt; Torque &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Torque(lhs)==rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>aa8fc70d9f3c91ab4c9afb7730f920243</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Torque, NoOpChecker&lt; Torque &gt; &gt; &amp;rhs) -&gt; decltype(lhs==Torque(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a0878dcd8f25150f77ebea43e908e3023</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;() !=std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs) !=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>af25888243d04857183fbff9a515bcbfd</anchor>
      <arglist>(const CheckedValue&lt; Torque, NoOpChecker&lt; Torque &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Torque(lhs) !=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a2a6bef32507b31e3d1ae0935a6719e71</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Torque, NoOpChecker&lt; Torque &gt; &gt; &amp;rhs) -&gt; decltype(lhs !=Torque(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a17f5c3cf62f38463edf89ddc5bf05b80</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a3e696d4bb8a0294762be3428301ebbec</anchor>
      <arglist>(const CheckedValue&lt; Torque, NoOpChecker&lt; Torque &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Torque(lhs)&lt;=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a55fa5e47ada221e269711dbbf90eedd7</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Torque, NoOpChecker&lt; Torque &gt; &gt; &amp;rhs) -&gt; decltype(lhs&lt;=Torque(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a5c18729fd53f4bb5275874c8cd1eb644</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>abcb14439b5fd9f3daf2b518c786865b7</anchor>
      <arglist>(const CheckedValue&lt; Torque, NoOpChecker&lt; Torque &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Torque(lhs) &gt;=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a092ab700ddc3c1dba9a60a49ce75cf6e</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Torque, NoOpChecker&lt; Torque &gt; &gt; &amp;rhs) -&gt; decltype(lhs &gt;=Torque(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a4e50b7f361b27adaf57e0b275b849cb2</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ab9f2a8be4da1677e412b8eabc2146873</anchor>
      <arglist>(const CheckedValue&lt; Torque, NoOpChecker&lt; Torque &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Torque(lhs)&lt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a6f64d5e0d888eb6813af5fa103a16b16</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Torque, NoOpChecker&lt; Torque &gt; &gt; &amp;rhs) -&gt; decltype(lhs&lt; Torque(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>aab6a70eaafe3d414d9ebb561150a5ae0</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a3b2ff344394e8157985fe636a85f18d9</anchor>
      <arglist>(const CheckedValue&lt; Torque, NoOpChecker&lt; Torque &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Torque(lhs) &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a6ea68ce25d18cda2a9a333fa224f0558</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Torque, NoOpChecker&lt; Torque &gt; &gt; &amp;rhs) -&gt; decltype(lhs &gt; Torque(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a5a5b28003deb87e06a3c9e51f44fb096</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)/RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a21a68e7bc007582c16847ed8615d8c26</anchor>
      <arglist>(const CheckedValue&lt; Torque, NoOpChecker&lt; Torque &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Torque(lhs)/rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a740ddde1b6038fc20e0e763e0eabac6a</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Torque, NoOpChecker&lt; Torque &gt; &gt; &amp;rhs) -&gt; decltype(lhs/Torque(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>ace19087d3c9f0e9cf7b83eb131626bee</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)+RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a687d59516f156855de42eea778eccc49</anchor>
      <arglist>(const CheckedValue&lt; Torque, NoOpChecker&lt; Torque &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Torque(lhs)+rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a75202d7d29b1ce5418c1ae4e32c95a08</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Torque, NoOpChecker&lt; Torque &gt; &gt; &amp;rhs) -&gt; decltype(lhs+Torque(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>aa918349e3179ab2f97d04b41085d0a48</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) - RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>acf1adc96b8c69fa7bb0ce08582f93de7</anchor>
      <arglist>(const CheckedValue&lt; Torque, NoOpChecker&lt; Torque &gt; &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(Torque(lhs) - rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1CheckedValue.html</anchorfile>
      <anchor>a5783466a0028f61a1e70076f410ac4ee</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; Torque, NoOpChecker&lt; Torque &gt; &gt; &amp;rhs) -&gt; decltype(lhs - Torque(rhs))</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::BlockAllocator::Chunk</name>
    <filename>structplayrho_1_1BlockAllocator_1_1Chunk.html</filename>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>structplayrho_1_1BlockAllocator_1_1Chunk.html</anchorfile>
      <anchor>afb9d9f2cdbc2d42f20c8a3fb57882ac9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_type</type>
      <name>blockSize</name>
      <anchorfile>structplayrho_1_1BlockAllocator_1_1Chunk.html</anchorfile>
      <anchor>a9f089d6471c64f144bfd554b13bb215e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Block *</type>
      <name>blocks</name>
      <anchorfile>structplayrho_1_1BlockAllocator_1_1Chunk.html</anchorfile>
      <anchor>a4be991e1465ee5b0e52cceb8ee2b444a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::ClipVertex</name>
    <filename>structplayrho_1_1d2_1_1ClipVertex.html</filename>
    <member kind="variable">
      <type>Length2</type>
      <name>v</name>
      <anchorfile>structplayrho_1_1d2_1_1ClipVertex.html</anchorfile>
      <anchor>a544a8a3e5b956c7c53b8b392890f5579</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ContactFeature</type>
      <name>cf</name>
      <anchorfile>structplayrho_1_1d2_1_1ClipVertex.html</anchorfile>
      <anchor>a70e36425e1773d72f724cec972fcd785</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::Shape::Concept</name>
    <filename>structplayrho_1_1d2_1_1Shape_1_1Concept.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual std::unique_ptr&lt; Concept &gt;</type>
      <name>Clone_</name>
      <anchorfile>structplayrho_1_1d2_1_1Shape_1_1Concept.html</anchorfile>
      <anchor>a6c43f482245b56de3d68bbaa14e89a18</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ChildCounter</type>
      <name>GetChildCount_</name>
      <anchorfile>structplayrho_1_1d2_1_1Shape_1_1Concept.html</anchorfile>
      <anchor>a660fac4e9cf65aa5d96295c54f42713d</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DistanceProxy</type>
      <name>GetChild_</name>
      <anchorfile>structplayrho_1_1d2_1_1Shape_1_1Concept.html</anchorfile>
      <anchor>a56e8193cb70e927c06e8c0d452b03791</anchor>
      <arglist>(ChildCounter index) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual MassData</type>
      <name>GetMassData_</name>
      <anchorfile>structplayrho_1_1d2_1_1Shape_1_1Concept.html</anchorfile>
      <anchor>aef0072a16d03b429a284d3b091620418</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius_</name>
      <anchorfile>structplayrho_1_1d2_1_1Shape_1_1Concept.html</anchorfile>
      <anchor>ae23636213c928592f75cbc2aecee8555</anchor>
      <arglist>(ChildCounter idx) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual NonNegative&lt; AreaDensity &gt;</type>
      <name>GetDensity_</name>
      <anchorfile>structplayrho_1_1d2_1_1Shape_1_1Concept.html</anchorfile>
      <anchor>a2dd78709eee0f2ce7b4da9aa4541ae1d</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Real</type>
      <name>GetFriction_</name>
      <anchorfile>structplayrho_1_1d2_1_1Shape_1_1Concept.html</anchorfile>
      <anchor>a55a117dcc1cee1bc2e241c02887573f3</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Real</type>
      <name>GetRestitution_</name>
      <anchorfile>structplayrho_1_1d2_1_1Shape_1_1Concept.html</anchorfile>
      <anchor>a235ce655f2541326811ea782625d1240</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Transform_</name>
      <anchorfile>structplayrho_1_1d2_1_1Shape_1_1Concept.html</anchorfile>
      <anchor>a275db197d814199c5e2341fed9401c9e</anchor>
      <arglist>(const Mat22 &amp;m)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>IsEqual_</name>
      <anchorfile>structplayrho_1_1d2_1_1Shape_1_1Concept.html</anchorfile>
      <anchor>a7c1fe8d532d34d70b77fe54a9238c4ee</anchor>
      <arglist>(const Concept &amp;other) const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TypeID</type>
      <name>GetType_</name>
      <anchorfile>structplayrho_1_1d2_1_1Shape_1_1Concept.html</anchorfile>
      <anchor>a227b42d248411a9c34dd52760f2d259e</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const void *</type>
      <name>GetData_</name>
      <anchorfile>structplayrho_1_1d2_1_1Shape_1_1Concept.html</anchorfile>
      <anchor>ab527f70b26af44030cace857f6e522ff</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1d2_1_1Shape_1_1Concept.html</anchorfile>
      <anchor>ac5e70d12bd607f60e15598655aceac88</anchor>
      <arglist>(const Concept &amp;lhs, const Concept &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1d2_1_1Shape_1_1Concept.html</anchorfile>
      <anchor>a69548919aa6d93964edc34c2b4d3f55e</anchor>
      <arglist>(const Concept &amp;lhs, const Concept &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::Joint::Concept</name>
    <filename>structplayrho_1_1d2_1_1Joint_1_1Concept.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Concept</name>
      <anchorfile>structplayrho_1_1d2_1_1Joint_1_1Concept.html</anchorfile>
      <anchor>ac3c19703be86a8d477dc7d3454815e4f</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::unique_ptr&lt; Concept &gt;</type>
      <name>Clone_</name>
      <anchorfile>structplayrho_1_1d2_1_1Joint_1_1Concept.html</anchorfile>
      <anchor>a881f2295f17b19ba4216c360fdc8b4c7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TypeID</type>
      <name>GetType_</name>
      <anchorfile>structplayrho_1_1d2_1_1Joint_1_1Concept.html</anchorfile>
      <anchor>ac15106beeb39fde087b92a1c17d3c205</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const void *</type>
      <name>GetData_</name>
      <anchorfile>structplayrho_1_1d2_1_1Joint_1_1Concept.html</anchorfile>
      <anchor>a65729397f7b8d67f829a2f9ba059266c</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void *</type>
      <name>GetData_</name>
      <anchorfile>structplayrho_1_1d2_1_1Joint_1_1Concept.html</anchorfile>
      <anchor>a280fc1a78054f51b2ccd555ca0ae11a0</anchor>
      <arglist>() noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>IsEqual_</name>
      <anchorfile>structplayrho_1_1d2_1_1Joint_1_1Concept.html</anchorfile>
      <anchor>a5a1d30c7df906057a5bf53aa25272476</anchor>
      <arglist>(const Concept &amp;other) const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual BodyID</type>
      <name>GetBodyA_</name>
      <anchorfile>structplayrho_1_1d2_1_1Joint_1_1Concept.html</anchorfile>
      <anchor>a5a9a76c235d9ee9d45ca237db7dcb895</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual BodyID</type>
      <name>GetBodyB_</name>
      <anchorfile>structplayrho_1_1d2_1_1Joint_1_1Concept.html</anchorfile>
      <anchor>aaa29d4f68fdafe579328dcf064b7aea6</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>GetCollideConnected_</name>
      <anchorfile>structplayrho_1_1d2_1_1Joint_1_1Concept.html</anchorfile>
      <anchor>aada82adff6890c399062f0ad3de3abac</anchor>
      <arglist>() const noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>ShiftOrigin_</name>
      <anchorfile>structplayrho_1_1d2_1_1Joint_1_1Concept.html</anchorfile>
      <anchor>a610b2ae2830f054c211b53dae3b7f77d</anchor>
      <arglist>(Length2 value) noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>InitVelocity_</name>
      <anchorfile>structplayrho_1_1d2_1_1Joint_1_1Concept.html</anchorfile>
      <anchor>a76fbd3d470eec3bd0bbcc0f72ff6b905</anchor>
      <arglist>(BodyConstraintsMap &amp;bodies, const playrho::StepConf &amp;step, const ConstraintSolverConf &amp;conf)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>SolveVelocity_</name>
      <anchorfile>structplayrho_1_1d2_1_1Joint_1_1Concept.html</anchorfile>
      <anchor>aac7e64baa4d4ef49212c799a1c376f81</anchor>
      <arglist>(BodyConstraintsMap &amp;bodies, const playrho::StepConf &amp;step)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>SolvePosition_</name>
      <anchorfile>structplayrho_1_1d2_1_1Joint_1_1Concept.html</anchorfile>
      <anchor>aa3f64885e0d1f4097576d37661872be5</anchor>
      <arglist>(BodyConstraintsMap &amp;bodies, const ConstraintSolverConf &amp;conf) const =0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::Manifold::Conf</name>
    <filename>structplayrho_1_1d2_1_1Manifold_1_1Conf.html</filename>
    <member kind="variable">
      <type>Length</type>
      <name>linearSlop</name>
      <anchorfile>structplayrho_1_1d2_1_1Manifold_1_1Conf.html</anchorfile>
      <anchor>ab6eeee16af7550804d91a82757aef598</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>targetDepth</name>
      <anchorfile>structplayrho_1_1d2_1_1Manifold_1_1Conf.html</anchorfile>
      <anchor>adb756b8bf5a96a6feea6f80483f474ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>tolerance</name>
      <anchorfile>structplayrho_1_1d2_1_1Manifold_1_1Conf.html</anchorfile>
      <anchor>af0944fc64740e848e04079b43c341376</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>maxCirclesRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1Manifold_1_1Conf.html</anchorfile>
      <anchor>ae311a665bbb972916ca896be04ace473</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr Manifold::Conf</type>
      <name>GetDefaultManifoldConf</name>
      <anchorfile>structplayrho_1_1d2_1_1Manifold_1_1Conf.html</anchorfile>
      <anchor>acaf37db0f0fc4d474c6a447b1032d73f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>Manifold::Conf</type>
      <name>GetManifoldConf</name>
      <anchorfile>structplayrho_1_1d2_1_1Manifold_1_1Conf.html</anchorfile>
      <anchor>aa8f1bf295c7fdae2783dfc6368f39a95</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::VelocityConstraint::Conf</name>
    <filename>structplayrho_1_1d2_1_1VelocityConstraint_1_1Conf.html</filename>
    <member kind="variable">
      <type>Real</type>
      <name>dtRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1VelocityConstraint_1_1Conf.html</anchorfile>
      <anchor>a318e6cdd10c95ad32829125160a8950a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinearVelocity</type>
      <name>velocityThreshold</name>
      <anchorfile>structplayrho_1_1d2_1_1VelocityConstraint_1_1Conf.html</anchorfile>
      <anchor>a26d2ea8863494e13d6c62da51181627d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>blockSolve</name>
      <anchorfile>structplayrho_1_1d2_1_1VelocityConstraint_1_1Conf.html</anchorfile>
      <anchor>adc6dd16353d5df05187f3a35c29acef6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::StackAllocator::Conf</name>
    <filename>structplayrho_1_1StackAllocator_1_1Conf.html</filename>
    <member kind="variable">
      <type>size_type</type>
      <name>preallocation_size</name>
      <anchorfile>structplayrho_1_1StackAllocator_1_1Conf.html</anchorfile>
      <anchor>a95611c9fe9f39d544614c918727cff8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_type</type>
      <name>allocation_records</name>
      <anchorfile>structplayrho_1_1StackAllocator_1_1Conf.html</anchorfile>
      <anchor>a38007c811dfeed6d390c38ede273f8a7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::ConstraintSolverConf</name>
    <filename>structplayrho_1_1ConstraintSolverConf.html</filename>
    <member kind="function">
      <type>constexpr ConstraintSolverConf &amp;</type>
      <name>UseResolutionRate</name>
      <anchorfile>structplayrho_1_1ConstraintSolverConf.html</anchorfile>
      <anchor>af05fd8b0c75bce6d598c8f221d42c988</anchor>
      <arglist>(Real value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ConstraintSolverConf &amp;</type>
      <name>UseLinearSlop</name>
      <anchorfile>structplayrho_1_1ConstraintSolverConf.html</anchorfile>
      <anchor>a41f56fac5e8c601d4acb47db3c0a4bc6</anchor>
      <arglist>(Length value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ConstraintSolverConf &amp;</type>
      <name>UseAngularSlop</name>
      <anchorfile>structplayrho_1_1ConstraintSolverConf.html</anchorfile>
      <anchor>af44f65605899416fc5ae7940e6574454</anchor>
      <arglist>(Angle value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ConstraintSolverConf &amp;</type>
      <name>UseMaxLinearCorrection</name>
      <anchorfile>structplayrho_1_1ConstraintSolverConf.html</anchorfile>
      <anchor>a14974ecb3d62147f64f5ceee83e625fb</anchor>
      <arglist>(Length value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ConstraintSolverConf &amp;</type>
      <name>UseMaxAngularCorrection</name>
      <anchorfile>structplayrho_1_1ConstraintSolverConf.html</anchorfile>
      <anchor>a45ced71eb3cdf8f2afa9d2802fef0849</anchor>
      <arglist>(Angle value) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>resolutionRate</name>
      <anchorfile>structplayrho_1_1ConstraintSolverConf.html</anchorfile>
      <anchor>ac86f35015ef9ac64623cf75040877a4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>linearSlop</name>
      <anchorfile>structplayrho_1_1ConstraintSolverConf.html</anchorfile>
      <anchor>a0a06a89f265de0dfdefa618c6ae6c4d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Angle</type>
      <name>angularSlop</name>
      <anchorfile>structplayrho_1_1ConstraintSolverConf.html</anchorfile>
      <anchor>adddb08435179020d3da74422d611d4e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>maxLinearCorrection</name>
      <anchorfile>structplayrho_1_1ConstraintSolverConf.html</anchorfile>
      <anchor>ae4b3ba29066a65128fab09298cad41df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Angle</type>
      <name>maxAngularCorrection</name>
      <anchorfile>structplayrho_1_1ConstraintSolverConf.html</anchorfile>
      <anchor>a253a4bc881f71c58f227fe7effa739ec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::Contact</name>
    <filename>classplayrho_1_1d2_1_1Contact.html</filename>
    <member kind="enumvalue">
      <name>e_sensorFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a270eaabc254f04e8793c446be3966e75a7abed1a9d06acee1ca8bcd047032d601</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_activeFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a270eaabc254f04e8793c446be3966e75ac60b7f1d80a1a35c691cb709130d9197</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_impenetrableFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a270eaabc254f04e8793c446be3966e75a364326f3485378592ffb56bfe1574050</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TimestepIters</type>
      <name>substep_type</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a4d1cd0d07e1cabbb415fae7e4f838f90</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::uint8_t</type>
      <name>FlagsType</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a3a4d1ee4256fd23b7f6d59a943c16a04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_sensorFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a270eaabc254f04e8793c446be3966e75a7abed1a9d06acee1ca8bcd047032d601</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_activeFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a270eaabc254f04e8793c446be3966e75ac60b7f1d80a1a35c691cb709130d9197</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_impenetrableFlag</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a270eaabc254f04e8793c446be3966e75a364326f3485378592ffb56bfe1574050</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Contact</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a0392b1fd4393deb7b561eeea79f9db6f</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Contact</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a7dc285a4961ad33adbbaf4a6d5ff0854</anchor>
      <arglist>(BodyID bA, FixtureID fA, ChildCounter iA, BodyID bB, FixtureID fB, ChildCounter iB) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsTouching</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a0bf45a339742f6db83b9e6ca4e54fdd1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTouching</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a861f0b57ff7ede0d58a7095008bb7f8c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetTouching</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>ac57fdf02d03afd4d65b8906f4e448160</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a438561f87b3779e64f78b86aa2f337ad</anchor>
      <arglist>(bool flag) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a1a5ce883a515de0ff292c0086774be39</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a25c76926ff2509a572ebed8059a2d85d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a3883618aed9fe042053970de3ebac794</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>GetBodyA</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a50060b759bffd416a32957a49934611e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>FixtureID</type>
      <name>GetFixtureA</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a8ca765607b961fd004597cbfb098e9f1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetChildIndexA</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a0360ba36c9a23678996cf669e45d3d46</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>GetBodyB</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a7bb0a44199b27491f5a4ae501e320a8c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>FixtureID</type>
      <name>GetFixtureB</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a4e9fe3466438ccec9b902c11eb535947</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetChildIndexB</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>af6a74d980c2cf93a3c7fa33406308a39</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFriction</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>ad17871896907f9bf24487909ba98f105</anchor>
      <arglist>(Real friction) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetFriction</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a4138ff67e9742e3a08b10dead573e0a2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRestitution</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a287f5162d91997593716f5ebca154527</anchor>
      <arglist>(Real restitution) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetRestitution</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>ab4d6887a07e00b6854f0cc3d1a137dd6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTangentSpeed</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a02168acc7aab04eb10e6aa738a6392ca</anchor>
      <arglist>(LinearVelocity speed) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity</type>
      <name>GetTangentSpeed</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a174961238838f3c3fa6bebee50bf655e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>substep_type</type>
      <name>GetToiCount</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>aa8edfa65f97d2c80e868bac50695fed7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasValidToi</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a4ebfcc84851d42c9828e244fba58de8f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetToi</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>ae1a23d2f5c34d9eff2afa6f435c90311</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FlagForFiltering</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>ab851da7babc1be743106f2a6cb9e548d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>NeedsFiltering</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a6e2f98ef33d4945ef94853c92f031b87</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FlagForUpdating</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a4985bfe554175931ab2029a885b1e888</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>NeedsUpdating</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a867592ecb023bd5c7aaf41a14fe050c5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSensor</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a7349db861fba844b341387a4270f738b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetIsSensor</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>ab7482a78f6bd6013fe0dff89f5104602</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetIsSensor</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a6b3a13a1f84c7d15ee8274d417ee129c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsImpenetrable</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a046b460177444164ff18c120d149fdec</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetImpenetrable</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>ad615bc6679edc834efc01cbef1a5cc86</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetImpenetrable</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a4a26acd94ec015a812c82905ed691c88</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsActive</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>ac88517e4481a3a96bce97159f3d0c096</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetIsActive</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>ae67c1e8a0643019a2cb588db94cc787b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetIsActive</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>ae833c80099d948e821b32eb1064b8a97</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnflagForFiltering</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a6ac4f443849195cd4c83c962c1266c75</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnflagForUpdating</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a77459f15b9e220198f560cef7214ad2e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetToi</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>acc48e89085110d190dcfa27c91fceac6</anchor>
      <arglist>(Real toi) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetToi</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a3a4858d08b21c246e6f5fcc9ab01e690</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetToiCount</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a3f581cf54c029ad7fabbe6b9b14ee51a</anchor>
      <arglist>(substep_type value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IncrementToiCount</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a810ed007eb05ca91d47dbc280daffcd1</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BodyID</type>
      <name>m_bodyA</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a8ac89b7ca1117f6f50a466380260a0b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BodyID</type>
      <name>m_bodyB</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>acb8ee591e8f9e392a73c3d4e02a53b17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FixtureID</type>
      <name>m_fixtureA</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>ac59624002c224b67e2b046016b49daea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FixtureID</type>
      <name>m_fixtureB</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>aa7d49040920fe60910a31c28adb76f05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ChildCounter</type>
      <name>m_indexA</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a53ff171fbc8dd13bb3ff4f02a59a78b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ChildCounter</type>
      <name>m_indexB</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>aa2c43b2112a3d5d994c5f6af0dc17978</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>m_friction</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>ac099ea8211101456e70c51c30f74f4c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>m_restitution</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a7e713223c1eb0555edd8086c7d94f98d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LinearVelocity</type>
      <name>m_tangentSpeed</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a6f6acd4f6d2907c7be6bfdbaafc4f524</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>m_toi</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a3302b1cce9b62f50664dc411aae7c0c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>substep_type</type>
      <name>m_toiCount</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a92cc4ac77de07c6efa1bf0baa399cc50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FlagsType</type>
      <name>m_flags</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a49b82f8b253db4cac91ae7e7432c463c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeIntersectingAABB</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a58da6fd8e2c8f3ad974474ce7983dbf4</anchor>
      <arglist>(const World &amp;world, const Contact &amp;contact)</arglist>
    </member>
    <member kind="function">
      <type>WorldManifold</type>
      <name>GetWorldManifold</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a53c028875bbee1fffcd3fc497bee2dc5</anchor>
      <arglist>(const World &amp;world, const Contact &amp;contact, const Manifold &amp;manifold)</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>GetBodyA</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a22da41d3ff9c82d608633673612b8821</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>GetBodyB</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a232909af8c24e7a01804a0278c6cfef0</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>FixtureID</type>
      <name>GetFixtureA</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a71b1470647c9973caf24c8d5ac40b009</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>FixtureID</type>
      <name>GetFixtureB</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>ace25c4282f503f8529992e268aad8494</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetChildIndexA</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>afb78a950ed55c8058f6beffd7b26a180</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetChildIndexB</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>abf62df2b59a399644e24938289aa3dd1</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsImpenetrable</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>aae0a081f37037b2a2efb245676ace55b</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsActive</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a679c4d673a6ea2890e0d39a7b6fdb0f7</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a7bd725e3bea38730e3dc56b76bf320ad</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsTouching</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>ac70b242a3771bc7c98861f09c13685e4</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSensor</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>ae84693232344232e2644fdf1fef53ab1</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetToiCount</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>ae72fc7cccfb35eb5f62fc8b68a52a899</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>NeedsFiltering</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>aeb26e3b4f404e518ab43f5bb375044f3</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>NeedsUpdating</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>aa8a1257667c2de5ef78011edb9b207bc</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>HasValidToi</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>ad1892c3cba1a2956c9b812b72c704793</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetToi</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a81d39ed1266907d4ef7cb7ebff3fd83b</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetFriction</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a04c2f4be0c031a46f8bc9a19f6493519</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFriction</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a7650ec005ac318672148b287439f5adc</anchor>
      <arglist>(Contact &amp;contact, Real value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetRestitution</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>ac09b3622eb7578b84fed79b5c60a8963</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRestitution</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a0ae0edd25827c1833828e25242fa98b3</anchor>
      <arglist>(Contact &amp;contact, Real value)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetTangentSpeed</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a992dda5a24ab09ad4f58e854e96eff16</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTangentSpeed</name>
      <anchorfile>classplayrho_1_1d2_1_1Contact.html</anchorfile>
      <anchor>a261c046785888f14c36e0b2758e05619</anchor>
      <arglist>(Contact &amp;contact, LinearVelocity value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::ContactFeature</name>
    <filename>structplayrho_1_1ContactFeature.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>structplayrho_1_1ContactFeature.html</anchorfile>
      <anchor>afd2b1a5d28a16fc49261c39d8cebabc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::uint8_t</type>
      <name>Index</name>
      <anchorfile>structplayrho_1_1ContactFeature.html</anchorfile>
      <anchor>ab960333ec02960bebf043a55ef1b6041</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Type</type>
      <name>typeA</name>
      <anchorfile>structplayrho_1_1ContactFeature.html</anchorfile>
      <anchor>a5c088ec7e1896a2b461674065d195dad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Index</type>
      <name>indexA</name>
      <anchorfile>structplayrho_1_1ContactFeature.html</anchorfile>
      <anchor>ac1bd8a9bfa4c1cdb13e0e603e945d786</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Type</type>
      <name>typeB</name>
      <anchorfile>structplayrho_1_1ContactFeature.html</anchorfile>
      <anchor>aeed0a48d9b920fc4a044d12f506905f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Index</type>
      <name>indexB</name>
      <anchorfile>structplayrho_1_1ContactFeature.html</anchorfile>
      <anchor>ab540beeb299389dccbac7381e4e39f6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr ContactFeature</type>
      <name>GetVertexVertexContactFeature</name>
      <anchorfile>structplayrho_1_1ContactFeature.html</anchorfile>
      <anchor>ad0c8c86c92d71e89dd707af00b1de6a8</anchor>
      <arglist>(ContactFeature::Index a, ContactFeature::Index b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ContactFeature</type>
      <name>GetVertexFaceContactFeature</name>
      <anchorfile>structplayrho_1_1ContactFeature.html</anchorfile>
      <anchor>a525adfccea1a81ce8311751fc90d0614</anchor>
      <arglist>(ContactFeature::Index a, ContactFeature::Index b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ContactFeature</type>
      <name>GetFaceVertexContactFeature</name>
      <anchorfile>structplayrho_1_1ContactFeature.html</anchorfile>
      <anchor>a874b42008ce4794858edc982ba13534a</anchor>
      <arglist>(ContactFeature::Index a, ContactFeature::Index b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ContactFeature</type>
      <name>GetFaceFaceContactFeature</name>
      <anchorfile>structplayrho_1_1ContactFeature.html</anchorfile>
      <anchor>aa64fefdeb5b40b3ee00c30dc263397b9</anchor>
      <arglist>(ContactFeature::Index a, ContactFeature::Index b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ContactFeature</type>
      <name>Flip</name>
      <anchorfile>structplayrho_1_1ContactFeature.html</anchorfile>
      <anchor>a43951f69f7ead57450bac66cbb76b0e1</anchor>
      <arglist>(ContactFeature val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1ContactFeature.html</anchorfile>
      <anchor>ac19a825ed22691eab1981a616b6bf539</anchor>
      <arglist>(ContactFeature lhs, ContactFeature rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1ContactFeature.html</anchorfile>
      <anchor>a9bcf95269c48c96b8af0854d24894e3d</anchor>
      <arglist>(ContactFeature lhs, ContactFeature rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::ContactImpulsesList</name>
    <filename>classplayrho_1_1d2_1_1ContactImpulsesList.html</filename>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(MaxManifoldPoints)&gt;::type</type>
      <name>Counter</name>
      <anchorfile>classplayrho_1_1d2_1_1ContactImpulsesList.html</anchorfile>
      <anchor>afd836a0f7f5fa78a93b249eb81ea48dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Counter</type>
      <name>GetCount</name>
      <anchorfile>classplayrho_1_1d2_1_1ContactImpulsesList.html</anchorfile>
      <anchor>a492e5b3928781d272c8281adcd5ae900</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Momentum</type>
      <name>GetEntryNormal</name>
      <anchorfile>classplayrho_1_1d2_1_1ContactImpulsesList.html</anchorfile>
      <anchor>a93e87aaa55a2d38ff22bda824bf84ef6</anchor>
      <arglist>(Counter index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Momentum</type>
      <name>GetEntryTanget</name>
      <anchorfile>classplayrho_1_1d2_1_1ContactImpulsesList.html</anchorfile>
      <anchor>aaba0fcd7239b70c9c20a27c6f54f42da</anchor>
      <arglist>(Counter index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddEntry</name>
      <anchorfile>classplayrho_1_1d2_1_1ContactImpulsesList.html</anchorfile>
      <anchor>a10582ed9bfbe1061650b20acbaa3787f</anchor>
      <arglist>(Momentum normal, Momentum tangent) noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Momentum</type>
      <name>normalImpulses</name>
      <anchorfile>classplayrho_1_1d2_1_1ContactImpulsesList.html</anchorfile>
      <anchor>a4c399da05a0b983ab08739a270263b2d</anchor>
      <arglist>[MaxManifoldPoints]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Momentum</type>
      <name>tangentImpulses</name>
      <anchorfile>classplayrho_1_1d2_1_1ContactImpulsesList.html</anchorfile>
      <anchor>ab47403a48da1c421d7cdf275df8bed91</anchor>
      <arglist>[MaxManifoldPoints]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Counter</type>
      <name>count</name>
      <anchorfile>classplayrho_1_1d2_1_1ContactImpulsesList.html</anchorfile>
      <anchor>adcd343ded0e95212ea49c693558c1c7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Momentum</type>
      <name>GetMaxNormalImpulse</name>
      <anchorfile>classplayrho_1_1d2_1_1ContactImpulsesList.html</anchorfile>
      <anchor>a07f0d8f5fce9556590d8e7e40289ae33</anchor>
      <arglist>(const ContactImpulsesList &amp;impulses) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::ContactKey</name>
    <filename>classplayrho_1_1ContactKey.html</filename>
    <member kind="function">
      <type>constexpr</type>
      <name>ContactKey</name>
      <anchorfile>classplayrho_1_1ContactKey.html</anchorfile>
      <anchor>aaa749c69a5420b84e6749501a81bd297</anchor>
      <arglist>(ContactCounter fp1, ContactCounter fp2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ContactCounter</type>
      <name>GetMin</name>
      <anchorfile>classplayrho_1_1ContactKey.html</anchorfile>
      <anchor>a106ab79f2dd1afc5006a4732c491ea5f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ContactCounter</type>
      <name>GetMax</name>
      <anchorfile>classplayrho_1_1ContactKey.html</anchorfile>
      <anchor>ae4790905ec6ec9869b30444333f65e75</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::pair&lt; ContactCounter, ContactCounter &gt;</type>
      <name>m_ids</name>
      <anchorfile>classplayrho_1_1ContactKey.html</anchorfile>
      <anchor>a3824b48d3bd8f643b1d65c7197a3bd94</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::WorldImpl::ContactToiData</name>
    <filename>structplayrho_1_1d2_1_1WorldImpl_1_1ContactToiData.html</filename>
    <member kind="variable">
      <type>ContactID</type>
      <name>contact</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldImpl_1_1ContactToiData.html</anchorfile>
      <anchor>afc2c372903e2eb090cd5664e13ba175a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>toi</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldImpl_1_1ContactToiData.html</anchorfile>
      <anchor>ac6dc1c977e0fe8815223a1dc03fe1c8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ContactCounter</type>
      <name>simultaneous</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldImpl_1_1ContactToiData.html</anchorfile>
      <anchor>a442576baf8765727d13e1d3d8413c26b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::WorldImpl::ContactUpdateConf</name>
    <filename>structplayrho_1_1d2_1_1WorldImpl_1_1ContactUpdateConf.html</filename>
    <member kind="variable">
      <type>DistanceConf</type>
      <name>distance</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldImpl_1_1ContactUpdateConf.html</anchorfile>
      <anchor>ab59e80956a034b17abd2ba125d30fd26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Manifold::Conf</type>
      <name>manifold</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldImpl_1_1ContactUpdateConf.html</anchorfile>
      <anchor>a5df61b64877a6039cf5a10256557954c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::ConvexHull</name>
    <filename>classplayrho_1_1d2_1_1ConvexHull.html</filename>
    <member kind="function">
      <type>DistanceProxy</type>
      <name>GetDistanceProxy</name>
      <anchorfile>classplayrho_1_1d2_1_1ConvexHull.html</anchorfile>
      <anchor>a7d7018e5533e08eb8f3eba2a433cc3a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1ConvexHull.html</anchorfile>
      <anchor>a2acf139f12016ebffac2da470ea55330</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ConvexHull &amp;</type>
      <name>Transform</name>
      <anchorfile>classplayrho_1_1d2_1_1ConvexHull.html</anchorfile>
      <anchor>af3934cbb1d879f86b8f74f1b4aef9f97</anchor>
      <arglist>(const Mat22 &amp;m) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConvexHull</type>
      <name>Get</name>
      <anchorfile>classplayrho_1_1d2_1_1ConvexHull.html</anchorfile>
      <anchor>a678ba0811f2975d1cdba6bfca49005eb</anchor>
      <arglist>(const VertexSet &amp;pointSet, NonNegative&lt; Length &gt; vertexRadius=NonNegative&lt; Length &gt;{DefaultLinearSlop *Real{2}})</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ConvexHull</name>
      <anchorfile>classplayrho_1_1d2_1_1ConvexHull.html</anchorfile>
      <anchor>a4f31877fb18573000797358e6b172eb2</anchor>
      <arglist>(std::vector&lt; Length2 &gt; verts, std::vector&lt; UnitVec &gt; norms, NonNegative&lt; Length &gt; vr)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Length2 &gt;</type>
      <name>vertices</name>
      <anchorfile>classplayrho_1_1d2_1_1ConvexHull.html</anchorfile>
      <anchor>a7b25a4427c159fc28eeb51d3263161a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; UnitVec &gt;</type>
      <name>normals</name>
      <anchorfile>classplayrho_1_1d2_1_1ConvexHull.html</anchorfile>
      <anchor>ac10e33617d268b3104ce10363c15b653</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NonNegative&lt; Length &gt;</type>
      <name>vertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1ConvexHull.html</anchorfile>
      <anchor>a0d0190f2575b12cafbf1b121b5215b2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1d2_1_1ConvexHull.html</anchorfile>
      <anchor>aa99886fb5a26ab66edf9e1cca4b9f8b9</anchor>
      <arglist>(const ConvexHull &amp;lhs, const ConvexHull &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1d2_1_1ConvexHull.html</anchorfile>
      <anchor>ac2d04de1e99eea10f31f2a757b706607</anchor>
      <arglist>(const ConvexHull &amp;lhs, const ConvexHull &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::Defaults</name>
    <filename>structplayrho_1_1detail_1_1Defaults.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>GetLinearSlop</name>
      <anchorfile>structplayrho_1_1detail_1_1Defaults.html</anchorfile>
      <anchor>a43a654df8fdec02cbbe2da77b4f97108</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>GetMaxVertexRadius</name>
      <anchorfile>structplayrho_1_1detail_1_1Defaults.html</anchorfile>
      <anchor>a1d49ce1c8a6c8db49591f048aba79939</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::Defaults&lt; Fixed&lt; std::int32_t, FRACTION_BITS &gt; &gt;</name>
    <filename>structplayrho_1_1detail_1_1Defaults_3_01Fixed_3_01std_1_1int32__t_00_01FRACTION__BITS_01_4_01_4.html</filename>
    <templarg>FRACTION_BITS</templarg>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>GetLinearSlop</name>
      <anchorfile>structplayrho_1_1detail_1_1Defaults_3_01Fixed_3_01std_1_1int32__t_00_01FRACTION__BITS_01_4_01_4.html</anchorfile>
      <anchor>a7115afb2832ac36ec8e186f2772c4d91</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>GetMaxVertexRadius</name>
      <anchorfile>structplayrho_1_1detail_1_1Defaults_3_01Fixed_3_01std_1_1int32__t_00_01FRACTION__BITS_01_4_01_4.html</anchorfile>
      <anchor>ac2eee4337f77c98b9d34127ae52a4b72</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::WorldImpl::DestroyContactsStats</name>
    <filename>structplayrho_1_1d2_1_1WorldImpl_1_1DestroyContactsStats.html</filename>
    <member kind="variable">
      <type>ContactCounter</type>
      <name>ignored</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldImpl_1_1DestroyContactsStats.html</anchorfile>
      <anchor>a3a7e13e9a25ad1bc66e55b543ab0af9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ContactCounter</type>
      <name>erased</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldImpl_1_1DestroyContactsStats.html</anchorfile>
      <anchor>aef9f3bd7e31c1b02155af79f33f675c1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::propagate_const::detect_element_type</name>
    <filename>structplayrho_1_1propagate__const_1_1detect__element__type.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename U::element_type</type>
      <name>type</name>
      <anchorfile>structplayrho_1_1propagate__const_1_1detect__element__type.html</anchorfile>
      <anchor>af3d12645045d3a19d842208786d9197c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::propagate_const::detect_element_type&lt; U * &gt;</name>
    <filename>structplayrho_1_1propagate__const_1_1detect__element__type_3_01U_01_5_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>U</type>
      <name>type</name>
      <anchorfile>structplayrho_1_1propagate__const_1_1detect__element__type_3_01U_01_5_01_4.html</anchorfile>
      <anchor>a1ee75d29227ac0da9a813df72651270f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::DiskShapeConf</name>
    <filename>structplayrho_1_1d2_1_1DiskShapeConf.html</filename>
    <base>ShapeBuilder&lt; DiskShapeConf &gt;</base>
    <member kind="function">
      <type>constexpr</type>
      <name>DiskShapeConf</name>
      <anchorfile>structplayrho_1_1d2_1_1DiskShapeConf.html</anchorfile>
      <anchor>a4b755ac0090f2feb76bb18c8d06cff9c</anchor>
      <arglist>(NonNegative&lt; Length &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>constexpr DiskShapeConf &amp;</type>
      <name>UseLocation</name>
      <anchorfile>structplayrho_1_1d2_1_1DiskShapeConf.html</anchorfile>
      <anchor>a32a665f63db2679b558eaf5dc10a3437</anchor>
      <arglist>(Length2 value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr DiskShapeConf &amp;</type>
      <name>UseRadius</name>
      <anchorfile>structplayrho_1_1d2_1_1DiskShapeConf.html</anchorfile>
      <anchor>a023ccf07ca74f7dd4a5e0f552c27fd1f</anchor>
      <arglist>(NonNegative&lt; Length &gt; r) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr DiskShapeConf &amp;</type>
      <name>Transform</name>
      <anchorfile>structplayrho_1_1d2_1_1DiskShapeConf.html</anchorfile>
      <anchor>a1d757165d916f1ecddb0eb130283a32d</anchor>
      <arglist>(const Mat22 &amp;m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetRadius</name>
      <anchorfile>structplayrho_1_1d2_1_1DiskShapeConf.html</anchorfile>
      <anchor>a876cfe2252080d2f09e777d2f5ef2c48</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocation</name>
      <anchorfile>structplayrho_1_1d2_1_1DiskShapeConf.html</anchorfile>
      <anchor>a80722e9c17a546a9d2cecd9545654a04</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr NonNegative&lt; Length &gt;</type>
      <name>GetDefaultRadius</name>
      <anchorfile>structplayrho_1_1d2_1_1DiskShapeConf.html</anchorfile>
      <anchor>a694ac3d77cd84cc54f765097f79d6b4c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Length &gt;</type>
      <name>vertexRadius</name>
      <anchorfile>structplayrho_1_1d2_1_1DiskShapeConf.html</anchorfile>
      <anchor>a2f1de4aa7db27a666fdd7f2f85130f7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>location</name>
      <anchorfile>structplayrho_1_1d2_1_1DiskShapeConf.html</anchorfile>
      <anchor>adaafd1c41a01e0708a9a18b125133ac7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::DistanceConf</name>
    <filename>structplayrho_1_1d2_1_1DistanceConf.html</filename>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(DefaultMaxDistanceIters)&gt;::type</type>
      <name>iteration_type</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceConf.html</anchorfile>
      <anchor>a18fe1adddb6ad25884ebcaf28de640df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Simplex::Cache</type>
      <name>cache</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceConf.html</anchorfile>
      <anchor>ad0dc57b1e5c4fc6bc9ea4c352b1f7526</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iteration_type</type>
      <name>maxIterations</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceConf.html</anchorfile>
      <anchor>aad8920477d137c4acfa0b5341ae521b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>DistanceConf</type>
      <name>GetDistanceConf</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceConf.html</anchorfile>
      <anchor>ac19f21bdad4b0722921c971c3cab85d1</anchor>
      <arglist>(const ToiConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DistanceConf</type>
      <name>GetDistanceConf</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceConf.html</anchorfile>
      <anchor>a0955c2cf9e582ac1e1e6e8f2dd8ce317</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DistanceOutput</type>
      <name>Distance</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceConf.html</anchorfile>
      <anchor>ad01443fd4ea346d550ece90f7f92b1f4</anchor>
      <arglist>(const DistanceProxy &amp;proxyA, const Transformation &amp;transformA, const DistanceProxy &amp;proxyB, const Transformation &amp;transformB, DistanceConf conf=DistanceConf{})</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::DistanceJointConf</name>
    <filename>structplayrho_1_1d2_1_1DistanceJointConf.html</filename>
    <base>JointBuilder&lt; DistanceJointConf &gt;</base>
    <member kind="typedef">
      <type>JointBuilder&lt; DistanceJointConf &gt;</type>
      <name>super</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>ad6c39a43cfd69b61f0de297dda64d08c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>DistanceJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a1b33de0b72e43e2998e8ee7e82ed1f44</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DistanceJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>abd684f40ac629fbdc63c4918bc08adf0</anchor>
      <arglist>(const DistanceJointConf &amp;copy)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DistanceJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a1e64d0e671872642fb1780bdd48bd5f7</anchor>
      <arglist>(BodyID bA, BodyID bB, Length2 laA=Length2{}, Length2 laB=Length2{}, Length l=1_m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseLength</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a8e7be8cd2a4a26946ec3d76c557c3415</anchor>
      <arglist>(Length v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseFrequency</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>ade3a28314f661fb965ad501629c07720</anchor>
      <arglist>(NonNegative&lt; Frequency &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseDampingRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a6796a2f3c1453464e6fd74bc105069aa</anchor>
      <arglist>(Real v) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorA</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a82a119f9c13f7b9f792384ce12ea2c7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorB</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a0202d808b84c9cfd47b62231a4b79be8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>length</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a728c814c133bab347a07278fa6153fd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Frequency &gt;</type>
      <name>frequency</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a120be14a41a01c027ca4cbac8369d798</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>dampingRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a2867b1456cf01d9f41e3b5471462fb3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum</type>
      <name>impulse</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>ad9a6fccb452eb949459da0344ad6ccde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitVec</type>
      <name>u</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a39925316cb1891559fb9e2e90ffdcfe0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>rA</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a345e031938e20975cb06d92d6df7b2f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>rB</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>aad1481b362f8f9915a53a2703483c74f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InvMass</type>
      <name>invGamma</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a01739da1e55d41407f73dd4655fdfd7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinearVelocity</type>
      <name>bias</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a72aaa5a9d2c446e9603bd8a6d73626a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Mass</type>
      <name>mass</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a4c27633a7b86c68a58a45705ae696fb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a262919449fdc976d24c1b57d5f764610</anchor>
      <arglist>(const DistanceJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>af7938377c565a183168613b640e651e8</anchor>
      <arglist>(const DistanceJointConf &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>ShiftOrigin</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a1086ac024e4e129259c3c1b4f7c5a6c4</anchor>
      <arglist>(DistanceJointConf &amp;, Length2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>af55559c8bf6c930582040cf3321b691f</anchor>
      <arglist>(DistanceJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a657f69a1e69282dd357d92926b766211</anchor>
      <arglist>(DistanceJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a2c85157ff9400e7126ef9959f062b347</anchor>
      <arglist>(const DistanceJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetFrequency</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>ae0cc3578e6f724a74d45e9cfc02d412d</anchor>
      <arglist>(DistanceJointConf &amp;object, NonNegative&lt; Frequency &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetDampingRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a1f9a4e32b7ca3e69527dca3e2793e1ba</anchor>
      <arglist>(DistanceJointConf &amp;object, Real value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLength</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>a9d8e5d2ecc10f965faa16f74ade58628</anchor>
      <arglist>(const DistanceJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetLength</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceJointConf.html</anchorfile>
      <anchor>abf156111fddecc740c68f7dbcdaf7ba0</anchor>
      <arglist>(DistanceJointConf &amp;object, Length value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::DistanceOutput</name>
    <filename>structplayrho_1_1d2_1_1DistanceOutput.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>State</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceOutput.html</anchorfile>
      <anchor>a1a05f48bffc628114d177f353b8f1bae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(DefaultMaxDistanceIters)&gt;::type</type>
      <name>iteration_type</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceOutput.html</anchorfile>
      <anchor>a2015bfeb0654b195a1f0ec4de6458870</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Simplex</type>
      <name>simplex</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceOutput.html</anchorfile>
      <anchor>ab00a929734dfa08adce26a4f0411be1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iteration_type</type>
      <name>iterations</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceOutput.html</anchorfile>
      <anchor>a3e530bb6c13140f89aa96893d816683c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>State</type>
      <name>state</name>
      <anchorfile>structplayrho_1_1d2_1_1DistanceOutput.html</anchorfile>
      <anchor>a4dacf9189684fb5a146abfabba8df687</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::DistanceProxy</name>
    <filename>classplayrho_1_1d2_1_1DistanceProxy.html</filename>
    <member kind="typedef">
      <type>const Length2 *</type>
      <name>ConstVertexPointer</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>a907c4696aeb6b312916c5f8d8ccac2df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstVertexPointer</type>
      <name>ConstVertexIterator</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>a079697225a964bf2a6cc647e9543ccfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const UnitVec *</type>
      <name>ConstNormalPointer</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>ab4e33e8b30053ce9a1465e7743706960</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstNormalPointer</type>
      <name>ConstNormalIterator</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>abf6427308cbc66d4216be96aa1f71677</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DistanceProxy</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>a195ea26814c4fc64d16b5c492b9494db</anchor>
      <arglist>(const DistanceProxy &amp;copy) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DistanceProxy</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>ae9b4f10ea5d31214657b19d9d777b9e7</anchor>
      <arglist>(const NonNegative&lt; Length &gt; vertexRadius, const VertexCounter count, const Length2 *vertices, const UnitVec *normals) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>ac546ae436486377126a13b246ed97d55</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Range&lt; ConstVertexIterator &gt;</type>
      <name>GetVertices</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>a6e441632fdd6b68df536e493e7534686</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Range&lt; ConstNormalIterator &gt;</type>
      <name>GetNormals</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>abfbb598dc7da7ad91d10891cfd433f40</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetVertexCount</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>a4feb3f3f5b109c56bfed98ae35a607ab</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetVertex</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>af58ea5737487abe0a4ceab5f7a7c09d0</anchor>
      <arglist>(VertexCounter index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetNormal</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>a20cf8979b7630e5caf1ce9958768f1d9</anchor>
      <arglist>(VertexCounter index) const noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Length2 *</type>
      <name>m_vertices</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>a80e6e9ca67196385d6ea791214df61ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const UnitVec *</type>
      <name>m_normals</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>a72358c3b2843f13ee2f7b68eead84f67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>VertexCounter</type>
      <name>m_count</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>addf1a2c627324b7a71ce9b2b08f87691</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NonNegative&lt; Length &gt;</type>
      <name>m_vertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>a881fe9e60e029e3de4f393a326f50f37</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeAABB</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>a44cc65808fd89570707b3af1bc87eb36</anchor>
      <arglist>(const DistanceProxy &amp;proxy, const Transformation &amp;xf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeAABB</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>aa67cf0c4b074e5c10a793cb2f16a0860</anchor>
      <arglist>(const DistanceProxy &amp;proxy, const Transformation &amp;xfm0, const Transformation &amp;xfm1) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>a1311c8979a6d955fa240491cbf239e99</anchor>
      <arglist>(const DistanceProxy &amp;lhs, const DistanceProxy &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>a1c65d94d98dea8f68c3dd32e90b888bb</anchor>
      <arglist>(const DistanceProxy &amp;lhs, const DistanceProxy &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>VertexCounter</type>
      <name>GetSupportIndex</name>
      <anchorfile>classplayrho_1_1d2_1_1DistanceProxy.html</anchorfile>
      <anchor>a6cfc27f1644f9c4d6da229b5eba07e51</anchor>
      <arglist>(const DistanceProxy &amp;proxy, T dir) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestPoint</name>
      <anchorfile>group__TestPointGroup.html</anchorfile>
      <anchor>gac9da7b3dd9e1dc5532a0f3c47f31f22e</anchor>
      <arglist>(const DistanceProxy &amp;proxy, Length2 point) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gabc2e992343e201f48c1956753a530247</anchor>
      <arglist>(const DistanceProxy &amp;proxy, const RayCastInput &amp;input, const Transformation &amp;transform) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::DynamicTree</name>
    <filename>classplayrho_1_1d2_1_1DynamicTree.html</filename>
    <class kind="struct">playrho::d2::DynamicTree::BranchData</class>
    <class kind="struct">playrho::d2::DynamicTree::LeafData</class>
    <class kind="class">playrho::d2::DynamicTree::TreeNode</class>
    <class kind="struct">playrho::d2::DynamicTree::UnusedData</class>
    <class kind="union">playrho::d2::DynamicTree::VariantData</class>
    <member kind="typedef">
      <type>ContactCounter</type>
      <name>Size</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a50dd3ef079943c3c2e5e9f5db597e9ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ContactCounter</type>
      <name>Height</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>afb4c79ac3866ac6733d47abd14ec88ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicTree</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>ac4e2861f240ffce2e9ea51d8940c5150</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicTree</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a06fea4c54490270294a56ae627701639</anchor>
      <arglist>(Size nodeCapacity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicTree</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>af2d9142c669aec29bb9916a8501f4879</anchor>
      <arglist>(const DynamicTree &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicTree</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a3cd15bb0281c6ab6191e51b26f1d8c8b</anchor>
      <arglist>(DynamicTree &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DynamicTree</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>ad81a322bcd52726dba15394783eea8fb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>DynamicTree &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a2fafb37e54884438b868f3cb18714730</anchor>
      <arglist>(DynamicTree other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>ad8b0e591e1c43454b16d924e628cb1e8</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>CreateLeaf</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a41731222ce0dbd6ffa1f6d8d2f753bdd</anchor>
      <arglist>(const AABB &amp;aabb, const LeafData &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DestroyLeaf</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a797247f9d1710de7c5883fe08f1c868a</anchor>
      <arglist>(Size index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UpdateLeaf</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>af791e371bb59fb7440d0440d0f89766b</anchor>
      <arglist>(Size index, const AABB &amp;aabb)</arglist>
    </member>
    <member kind="function">
      <type>LeafData</type>
      <name>GetLeafData</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a53d2bd646d7fcd1d5ebbef75c73a5020</anchor>
      <arglist>(Size index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLeafData</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a949f9eff32aa5fb52cd587921a4a4dcc</anchor>
      <arglist>(Size index, LeafData value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>GetAABB</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a06675690daf54a10b18f1da1a8a7326b</anchor>
      <arglist>(Size index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Height</type>
      <name>GetHeight</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a4c6bccb9bc6df8db71421e3ef32d001c</anchor>
      <arglist>(Size index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>GetOther</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a6c47548f16509b0088da777223dab05b</anchor>
      <arglist>(Size index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>BranchData</type>
      <name>GetBranchData</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>ab905d71ffa6b1e5b6d2a684ca3758a1f</anchor>
      <arglist>(Size index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>GetRootIndex</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>ad8f642f8240c30f686f9db11533a2b51</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>GetFreeIndex</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a6a84cb18d4e07355e33e01fc062974a3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RebuildBottomUp</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a47cbaffc41092844c1b4812057e37f13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ShiftOrigin</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a69057dc79224305372bbccac53c11bc6</anchor>
      <arglist>(Length2 newOrigin) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>GetNodeCapacity</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a6d5405cac98b2f35be80869c23abfe5a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reserve</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>ad1fa3e1b69c47356cee7809d9137d7a0</anchor>
      <arglist>(Size value)</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>GetNodeCount</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a211b3f8b163604b56db4fa3887fc2f43</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>GetLeafCount</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a835291d0eb5b8bf966c76e2ab4f4e3fe</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>FindReference</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a3e47af4d29d32f41e00a90d854a73adb</anchor>
      <arglist>(Size index) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr Size</type>
      <name>GetInvalidSize</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>acde73f39b7e56017e0ba2f172ab6da7f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr Height</type>
      <name>GetInvalidHeight</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a660dd80a96856e7e5a18982253db0916</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>IsUnused</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>ab9fcc2634936361047199e8ac516926e</anchor>
      <arglist>(Height value) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>IsLeaf</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>adcd3feb3b811796b4accf408526bc0b0</anchor>
      <arglist>(Height value) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>IsBranch</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a76d618b561088968b813f343d71803b0</anchor>
      <arglist>(Height value) noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>InvalidHeight</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a7933229b46b99e1c5d1858da7f3266c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>Size</type>
      <name>AllocateNode</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>aaa3bf83c3373a8e75c56bb30089718d1</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>FreeNode</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a185b1ce2a5a7c97925d21709e7fb5a16</anchor>
      <arglist>(Size index) noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Size</type>
      <name>m_nodeCount</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a61e49f54d4e65e71602be43a6a43ebf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Size</type>
      <name>m_leafCount</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a760c2ad855912c572c3ca2212ebaa076</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Size</type>
      <name>m_rootIndex</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>aa0d0479631ae19947bed0084c32dbe0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Size</type>
      <name>m_freeIndex</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a3e89800a96b86c86d36af48b82637b42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Size</type>
      <name>m_nodeCapacity</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a0f8c401e9877c5ee05fc3e375cd178da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TreeNode *</type>
      <name>m_nodes</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a66e4219e9308b8a127bf47eae8b2c91c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a778697779a16cce60de39b6dee75a75d</anchor>
      <arglist>(DynamicTree &amp;lhs, DynamicTree &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DynamicTree::Height</type>
      <name>GetHeight</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a72265a3c2d4511e74df6ab4d13112f6d</anchor>
      <arglist>(const DynamicTree &amp;tree) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>GetAABB</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>adebb4dfdc038631f8b24ee19a0b29713</anchor>
      <arglist>(const DynamicTree &amp;tree) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestOverlap</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree.html</anchorfile>
      <anchor>a905424c61ac9933179b91eb12ac0d537</anchor>
      <arglist>(const DynamicTree &amp;tree, DynamicTree::Size leafIdA, DynamicTree::Size leafIdB) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::EdgeShapeConf</name>
    <filename>classplayrho_1_1d2_1_1EdgeShapeConf.html</filename>
    <base>ShapeBuilder&lt; EdgeShapeConf &gt;</base>
    <member kind="function">
      <type></type>
      <name>EdgeShapeConf</name>
      <anchorfile>classplayrho_1_1d2_1_1EdgeShapeConf.html</anchorfile>
      <anchor>a4411ca2f890e0d98c65db50d25f77948</anchor>
      <arglist>(Length2 vA, Length2 vB, const EdgeShapeConf &amp;conf=GetDefaultConf()) noexcept</arglist>
    </member>
    <member kind="function">
      <type>EdgeShapeConf &amp;</type>
      <name>Set</name>
      <anchorfile>classplayrho_1_1d2_1_1EdgeShapeConf.html</anchorfile>
      <anchor>a3c285199c324b6de0de6ed0ee4c675f9</anchor>
      <arglist>(Length2 vA, Length2 vB) noexcept</arglist>
    </member>
    <member kind="function">
      <type>EdgeShapeConf &amp;</type>
      <name>UseVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1EdgeShapeConf.html</anchorfile>
      <anchor>a0fa0648764ab95db5771e0bb4c4aba12</anchor>
      <arglist>(NonNegative&lt; Length &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>EdgeShapeConf &amp;</type>
      <name>Transform</name>
      <anchorfile>classplayrho_1_1d2_1_1EdgeShapeConf.html</anchorfile>
      <anchor>ae456a6827c99d1ae50ae93a31c2a9ebc</anchor>
      <arglist>(const Mat22 &amp;m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetVertexA</name>
      <anchorfile>classplayrho_1_1d2_1_1EdgeShapeConf.html</anchorfile>
      <anchor>a3affefb1face6109ba0dbf3f2ae1316c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetVertexB</name>
      <anchorfile>classplayrho_1_1d2_1_1EdgeShapeConf.html</anchorfile>
      <anchor>a4e1dafe1cd7aabc170875038d72b6e76</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>DistanceProxy</type>
      <name>GetChild</name>
      <anchorfile>classplayrho_1_1d2_1_1EdgeShapeConf.html</anchorfile>
      <anchor>a60b2f40cbcd5bec85036d7f8169b1009</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr NonNegative&lt; Length &gt;</type>
      <name>GetDefaultVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1EdgeShapeConf.html</anchorfile>
      <anchor>a2440d2d407850714f6a96134a8cca0fb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EdgeShapeConf</type>
      <name>GetDefaultConf</name>
      <anchorfile>classplayrho_1_1d2_1_1EdgeShapeConf.html</anchorfile>
      <anchor>aeaba8cac67b704014d26574a3492bae0</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Length &gt;</type>
      <name>vertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1EdgeShapeConf.html</anchorfile>
      <anchor>ab511eef5cb53693920b010d1298db639</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Length2</type>
      <name>m_vertices</name>
      <anchorfile>classplayrho_1_1d2_1_1EdgeShapeConf.html</anchorfile>
      <anchor>aec865f23aaf6547f9390711ec4463c98</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>UnitVec</type>
      <name>m_normals</name>
      <anchorfile>classplayrho_1_1d2_1_1EdgeShapeConf.html</anchorfile>
      <anchor>a4e0f8d611b0978eb57c26f3525e3fab0</anchor>
      <arglist>[2]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::equal_to&lt; playrho::d2::JointKey &gt;</name>
    <filename>structstd_1_1equal__to_3_01playrho_1_1d2_1_1JointKey_01_4.html</filename>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator()</name>
      <anchorfile>structstd_1_1equal__to_3_01playrho_1_1d2_1_1JointKey_01_4.html</anchorfile>
      <anchor>aba9ef6e57f20b9da785c8d38dbca206b</anchor>
      <arglist>(const playrho::d2::JointKey &amp;lhs, const playrho::d2::JointKey &amp;rhs) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::equal_to&lt;::playrho::propagate_const&lt; T &gt; &gt;</name>
    <filename>structstd_1_1equal__to_3_1_1playrho_1_1propagate__const_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>::playrho::propagate_const&lt; T &gt;</type>
      <name>first_argument_type</name>
      <anchorfile>structstd_1_1equal__to_3_1_1playrho_1_1propagate__const_3_01T_01_4_01_4.html</anchorfile>
      <anchor>aa4b36bedb1bb6dbbcbd2ce69b28b8692</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>::playrho::propagate_const&lt; T &gt;</type>
      <name>second_argument_type</name>
      <anchorfile>structstd_1_1equal__to_3_1_1playrho_1_1propagate__const_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a1dcc641ce2e779cc8c0b5116fb96407a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structstd_1_1equal__to_3_1_1playrho_1_1propagate__const_3_01T_01_4_01_4.html</anchorfile>
      <anchor>aa043e7c69ff6bdedfd16643bc7fa6369</anchor>
      <arglist>(const ::playrho::propagate_const&lt; T &gt; &amp;pc1, const ::playrho::propagate_const&lt; T &gt; &amp;pc2) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::Filter</name>
    <filename>structplayrho_1_1Filter.html</filename>
    <member kind="typedef">
      <type>std::uint16_t</type>
      <name>bits_type</name>
      <anchorfile>structplayrho_1_1Filter.html</anchorfile>
      <anchor>afc7787e34f2ba644f3b3e135225647a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::int16_t</type>
      <name>index_type</name>
      <anchorfile>structplayrho_1_1Filter.html</anchorfile>
      <anchor>a289ef26ff12cc3cb15d74062ce27fd72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bits_type</type>
      <name>categoryBits</name>
      <anchorfile>structplayrho_1_1Filter.html</anchorfile>
      <anchor>a70f8953a304f7c864cda8f937fc65bc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bits_type</type>
      <name>maskBits</name>
      <anchorfile>structplayrho_1_1Filter.html</anchorfile>
      <anchor>a9a186cc516b67d2165419e515e5be3c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>index_type</type>
      <name>groupIndex</name>
      <anchorfile>structplayrho_1_1Filter.html</anchorfile>
      <anchor>a8388c2614c205b7aaa2226849779619f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1Filter.html</anchorfile>
      <anchor>a9cecc5b25e8e89a47a552caf672bd69c</anchor>
      <arglist>(const Filter lhs, const Filter rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1Filter.html</anchorfile>
      <anchor>ab71806508440416ef208f51580a6c50c</anchor>
      <arglist>(const Filter lhs, const Filter rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ShouldCollide</name>
      <anchorfile>structplayrho_1_1Filter.html</anchorfile>
      <anchor>a223329721a8138f316898ed9a4877250</anchor>
      <arglist>(const Filter filterA, const Filter filterB) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::FiniteChecker</name>
    <filename>structplayrho_1_1FiniteChecker.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::invalid_argument</type>
      <name>exception_type</name>
      <anchorfile>structplayrho_1_1FiniteChecker.html</anchorfile>
      <anchor>a5ebf3fa4cb532f1f77d2c11535ef01f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structplayrho_1_1FiniteChecker.html</anchorfile>
      <anchor>a06951d9e1e48a3dd79dcae38a2616e47</anchor>
      <arglist>() noexcept(noexcept(static_cast&lt; T &gt;(0))) -&gt; decltype(static_cast&lt; T &gt;(0))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structplayrho_1_1FiniteChecker.html</anchorfile>
      <anchor>a5ab989aadf15285604e8a0c7f711af9e</anchor>
      <arglist>(const T &amp;v) -&gt; decltype(isfinite(v), T</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::Fixed</name>
    <filename>classplayrho_1_1Fixed.html</filename>
    <templarg></templarg>
    <templarg>FRACTION_BITS</templarg>
    <class kind="struct">playrho::Fixed::scalar_type</class>
    <member kind="enumeration">
      <type></type>
      <name>CmpResult</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a17b16b2f06f99d0e941d7e8d9bff4e77</anchor>
      <arglist></arglist>
      <enumvalue file="classplayrho_1_1Fixed.html" anchor="a17b16b2f06f99d0e941d7e8d9bff4e77a29dcef0a3767c4ff65c0a47354a64869">Incomparable</enumvalue>
      <enumvalue file="classplayrho_1_1Fixed.html" anchor="a17b16b2f06f99d0e941d7e8d9bff4e77af5f286e73bda105e538310b3190f75c5">Equal</enumvalue>
      <enumvalue file="classplayrho_1_1Fixed.html" anchor="a17b16b2f06f99d0e941d7e8d9bff4e77ac6d9d7bb9939f62f01c80f8b1251501c">LessThan</enumvalue>
      <enumvalue file="classplayrho_1_1Fixed.html" anchor="a17b16b2f06f99d0e941d7e8d9bff4e77af6d044fe1f01fb0c956b80099e2a3072">GreaterThan</enumvalue>
    </member>
    <member kind="typedef">
      <type>BASE_TYPE</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>ad5302b547a8052bcaec79f04430afaee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Fixed</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a6a458c0ea31087e82401dfa621b177f8</anchor>
      <arglist>(long double val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Fixed</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>ab1823b0d4b06595d3f1f4f6159b8551e</anchor>
      <arglist>(double val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Fixed</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>aa799babbcf53d04180d7dd98cf03b16f</anchor>
      <arglist>(float val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Fixed</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>aea9908fdc2c59dbb21327bc71f9e6ade</anchor>
      <arglist>(unsigned long long val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Fixed</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a861732457689a3b0b87ef7bf5c5f696a</anchor>
      <arglist>(unsigned long val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Fixed</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>af352cfb5293e8f992298819b48495265</anchor>
      <arglist>(unsigned int val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Fixed</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a8424347cfc61cbcc9aa4a49498946cec</anchor>
      <arglist>(long long val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Fixed</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a663679bd371ab162e801fd931584a54c</anchor>
      <arglist>(long val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Fixed</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a6b36e8ececf43e981d89928175d18247</anchor>
      <arglist>(int val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Fixed</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a9fa3992b8612831e11901ecc0c223a30</anchor>
      <arglist>(short val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Fixed</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a608468aa293e76ec38b7f7d384ac2034</anchor>
      <arglist>(value_type val, unsigned int fraction) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Fixed</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>ac92de155998569315ff02e1d24d0e5f6</anchor>
      <arglist>(const Fixed&lt; BT, FB &gt; val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>ConvertTo</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a035a071fc8938b0844a736dc8ed6349c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr CmpResult</type>
      <name>Compare</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a32d7fcfbf0765894e9abec13705968bb</anchor>
      <arglist>(const Fixed other) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator long double</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a80b9d48bf0c67d8efb85e8eb1d4712cc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator double</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>ad3ba72907e86d63b812e666231a601fc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator float</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a28628336e5ee1fa4e47ca24464b434a5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator long long</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>adc538586b937adbc0d07d2ecd346b5fd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator long</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>abda06ae88f64dc1bc599bbeee8ff2fe5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator unsigned long long</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a2af07f2b5055a07f22368fe836ef1453</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator unsigned long</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a2ae69562703a350b3bbe0c60cf0ac2a1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator unsigned int</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>ab9894ecae80cda694e576e2906c8b9ba</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator int</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a9042b1068f636c17585377520997e330</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator short</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a60af5e5e714be48bd3a984cae6379126</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Fixed</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a75b6c941518b707b47d7402c8c5a46c8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Fixed</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a5f378df30e254120e594223e9801a281</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator bool</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>ae5709dfd2f07e7129c9488e6e918353d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>abbb2f31d378da7ae7536aca6abfb0606</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Fixed &amp;</type>
      <name>operator+=</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a5b68036c517ccebcb91d7137570993ed</anchor>
      <arglist>(Fixed val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Fixed &amp;</type>
      <name>operator-=</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>aa3c1e6b5cfe89b1c156116a6c8d85e21</anchor>
      <arglist>(Fixed val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Fixed &amp;</type>
      <name>operator*=</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a47b9aa9664387ebf269ffc073e7fbe7b</anchor>
      <arglist>(Fixed val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Fixed &amp;</type>
      <name>operator/=</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a14c68cc3fc0dbb7c4439d125376d3b5c</anchor>
      <arglist>(Fixed val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Fixed &amp;</type>
      <name>operator%=</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>aa0ff5cb746a54cd30f2233f7d60bb91b</anchor>
      <arglist>(Fixed val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>isfinite</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>ac0fd7ab7953ba4fd1db70c5b6f2c9890</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>isnan</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a848e394f6641a7d95421f346a02086ae</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr int</type>
      <name>getsign</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>acab0e81520ba5aebe0254ef1d78058b9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr Fixed</type>
      <name>GetMin</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a51ec3c07dd4a476c6139ee5c481bb2e4</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr Fixed</type>
      <name>GetInfinity</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a53788cab95bd0c406f58026e647beda9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr Fixed</type>
      <name>GetMax</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a442ce09ef7b5e5b5ae1e9b0618522704</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr Fixed</type>
      <name>GetNaN</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a1ff80903da60611b8aea0224d3d3f4eb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr Fixed</type>
      <name>GetNegativeInfinity</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a185fb950a852db73f2f550b58a2d66af</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr Fixed</type>
      <name>GetLowest</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>af56f6641ae9d00bf8894d0b4eaebdd78</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr value_type</type>
      <name>GetFromFloat</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a2ad5bd576f2074a511bf797d9f946a92</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr value_type</type>
      <name>GetFromSignedInt</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>aecdf890560a9628053362827e2244dc6</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr value_type</type>
      <name>GetFromUnsignedInt</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>ab0301ea06b852d6f8ef6b121c22f7555</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>TotalBits</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a50039441c4eaff3a416c73ccd76329c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>FractionBits</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>ac825eb04e8322608de0b5aeb11335480</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>WholeBits</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>afe3dade97bcc1a2b568b465b42b84c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>ScaleFactor</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>aa77846d928bc514796c6ecde33696140</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>typename Wider&lt; value_type &gt;::type</type>
      <name>wider_type</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>ad5955b684e72fea28ee4fb76d79b1756</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>typename std::make_unsigned&lt; wider_type &gt;::type</type>
      <name>unsigned_wider_type</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>af7d5c9351234d374784ece14db77ae7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::numeric_limits&lt; value_type &gt;</type>
      <name>numeric_limits</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a4787c158e991542cff4acf03b3323d9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>constexpr</type>
      <name>Fixed</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>afba6da090c960d7d7470dd83b1febd85</anchor>
      <arglist>(value_type val, scalar_type scalar) noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>value_type</type>
      <name>m_value</name>
      <anchorfile>classplayrho_1_1Fixed.html</anchorfile>
      <anchor>a7e1fc9095d5dadb23d2003ae9d5e5734</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::FixtureConf</name>
    <filename>structplayrho_1_1d2_1_1FixtureConf.html</filename>
    <member kind="function">
      <type>FixtureConf &amp;</type>
      <name>UseShape</name>
      <anchorfile>structplayrho_1_1d2_1_1FixtureConf.html</anchorfile>
      <anchor>a7567d61a39e8a99eb048d99eb8f2f010</anchor>
      <arglist>(Shape value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>FixtureConf &amp;</type>
      <name>UseShape</name>
      <anchorfile>structplayrho_1_1d2_1_1FixtureConf.html</anchorfile>
      <anchor>a95e40312747c6290d11482631033956f</anchor>
      <arglist>(T &amp;&amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>FixtureConf &amp;</type>
      <name>UseBody</name>
      <anchorfile>structplayrho_1_1d2_1_1FixtureConf.html</anchorfile>
      <anchor>ad42511ad03df6a3efd57b4b957e11c52</anchor>
      <arglist>(BodyID value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>FixtureConf &amp;</type>
      <name>UseIsSensor</name>
      <anchorfile>structplayrho_1_1d2_1_1FixtureConf.html</anchorfile>
      <anchor>aebd7788b1d56c1da1a66986c2f13091c</anchor>
      <arglist>(bool value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>FixtureConf &amp;</type>
      <name>UseFilter</name>
      <anchorfile>structplayrho_1_1d2_1_1FixtureConf.html</anchorfile>
      <anchor>a4b0e7e9ddc794a1f751d36fcfe355062</anchor>
      <arglist>(Filter value) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Shape</type>
      <name>shape</name>
      <anchorfile>structplayrho_1_1d2_1_1FixtureConf.html</anchorfile>
      <anchor>a529527e5aca17f4e162eaccfd8e1f0e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Filter</type>
      <name>filter</name>
      <anchorfile>structplayrho_1_1d2_1_1FixtureConf.html</anchorfile>
      <anchor>a6db711336e93f9aa8b45da7739175779</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BodyID</type>
      <name>body</name>
      <anchorfile>structplayrho_1_1d2_1_1FixtureConf.html</anchorfile>
      <anchor>af9ba0438da3d5d1a1f4d2d5cb7c73168</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isSensor</name>
      <anchorfile>structplayrho_1_1d2_1_1FixtureConf.html</anchorfile>
      <anchor>a6ee27d488bf91f504acadd259fa36798</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1d2_1_1FixtureConf.html</anchorfile>
      <anchor>aa2bccb8a9f96f9ef20bfc0c27cd12a25</anchor>
      <arglist>(const FixtureConf &amp;lhs, const FixtureConf &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1d2_1_1FixtureConf.html</anchorfile>
      <anchor>aef63403acbb62366a22771e25f15a449</anchor>
      <arglist>(const FixtureConf &amp;lhs, const FixtureConf &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>GetBody</name>
      <anchorfile>structplayrho_1_1d2_1_1FixtureConf.html</anchorfile>
      <anchor>ae05325dba34e8b95a635dce75de1f384</anchor>
      <arglist>(const FixtureConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Shape &amp;</type>
      <name>GetShape</name>
      <anchorfile>structplayrho_1_1d2_1_1FixtureConf.html</anchorfile>
      <anchor>a219930e7c3bdda61101c8dfaef585df9</anchor>
      <arglist>(const FixtureConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; AreaDensity &gt;</type>
      <name>GetDensity</name>
      <anchorfile>structplayrho_1_1d2_1_1FixtureConf.html</anchorfile>
      <anchor>a5878e137ad334d88e3070c30de9da341</anchor>
      <arglist>(const FixtureConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetFriction</name>
      <anchorfile>structplayrho_1_1d2_1_1FixtureConf.html</anchorfile>
      <anchor>a2ffa79efc13ccd989e1957480f0a920c</anchor>
      <arglist>(const FixtureConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetRestitution</name>
      <anchorfile>structplayrho_1_1d2_1_1FixtureConf.html</anchorfile>
      <anchor>a5f4b19f147e62dd01f2f2cd6bc201df0</anchor>
      <arglist>(const FixtureConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSensor</name>
      <anchorfile>structplayrho_1_1d2_1_1FixtureConf.html</anchorfile>
      <anchor>a6831c65fd153acc5c4938f9249537126</anchor>
      <arglist>(const FixtureConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSensor</name>
      <anchorfile>structplayrho_1_1d2_1_1FixtureConf.html</anchorfile>
      <anchor>a65d348a372259f54db6e183244fdf6b2</anchor>
      <arglist>(FixtureConf &amp;conf, bool value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Filter</type>
      <name>GetFilterData</name>
      <anchorfile>structplayrho_1_1d2_1_1FixtureConf.html</anchorfile>
      <anchor>ad6cb511ceee3aa66e8439d1aec080b7b</anchor>
      <arglist>(const FixtureConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFilterData</name>
      <anchorfile>structplayrho_1_1d2_1_1FixtureConf.html</anchorfile>
      <anchor>a6915c94247e90e0fb4ec9948ab979851</anchor>
      <arglist>(FixtureConf &amp;conf, Filter value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ShouldCollide</name>
      <anchorfile>structplayrho_1_1d2_1_1FixtureConf.html</anchorfile>
      <anchor>aab1cd6287bdc232e5d97c01a12b71c3c</anchor>
      <arglist>(const FixtureConf &amp;fixtureA, const FixtureConf &amp;fixtureB) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetDefaultFriction</name>
      <anchorfile>structplayrho_1_1d2_1_1FixtureConf.html</anchorfile>
      <anchor>a6e6f412c2af9722fd3bc32527459feba</anchor>
      <arglist>(const FixtureConf &amp;fixtureA, const FixtureConf &amp;fixtureB)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetDefaultRestitution</name>
      <anchorfile>structplayrho_1_1d2_1_1FixtureConf.html</anchorfile>
      <anchor>ab39f3148c511e1a82d6d23701423da43</anchor>
      <arglist>(const FixtureConf &amp;fixtureA, const FixtureConf &amp;fixtureB)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::FlagGuard</name>
    <filename>classplayrho_1_1FlagGuard.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>FlagGuard</name>
      <anchorfile>classplayrho_1_1FlagGuard.html</anchorfile>
      <anchor>ac104fceea41a9806de0fda376f3d39df</anchor>
      <arglist>(T &amp;flag, T value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FlagGuard</name>
      <anchorfile>classplayrho_1_1FlagGuard.html</anchorfile>
      <anchor>aab62ecc09e99a7544135fbb72371f0b2</anchor>
      <arglist>(const FlagGuard&lt; T &gt; &amp;value)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FlagGuard</name>
      <anchorfile>classplayrho_1_1FlagGuard.html</anchorfile>
      <anchor>af487c3ee0e823dce4c17ef7e4663f6a3</anchor>
      <arglist>(FlagGuard&lt; T &gt; &amp;&amp;value) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>FlagGuard&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1FlagGuard.html</anchorfile>
      <anchor>a8524fe292f8940fefc250c5df2276535</anchor>
      <arglist>(const FlagGuard&lt; T &gt; &amp;value)=delete</arglist>
    </member>
    <member kind="function">
      <type>FlagGuard&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1FlagGuard.html</anchorfile>
      <anchor>a2566ed27d453c2f37e08a855df5133c6</anchor>
      <arglist>(FlagGuard&lt; T &gt; &amp;&amp;value) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FlagGuard</name>
      <anchorfile>classplayrho_1_1FlagGuard.html</anchorfile>
      <anchor>a1649a18e1024ccbc6e8704b2f381f31e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T &amp;</type>
      <name>m_flag</name>
      <anchorfile>classplayrho_1_1FlagGuard.html</anchorfile>
      <anchor>a6684aaa2fe044fec208be083b0364edd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>m_value</name>
      <anchorfile>classplayrho_1_1FlagGuard.html</anchorfile>
      <anchor>a4fea9f698b89ab508f7e52788992c8a8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::FrictionJointConf</name>
    <filename>structplayrho_1_1d2_1_1FrictionJointConf.html</filename>
    <base>JointBuilder&lt; FrictionJointConf &gt;</base>
    <member kind="typedef">
      <type>JointBuilder&lt; FrictionJointConf &gt;</type>
      <name>super</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>a7af858d7bbdbc4e1de402f4b315d4f8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>FrictionJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>a3e95865160669c95b469f5e83a1db974</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FrictionJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>a749d223979ea418dc2a08a640ee5450c</anchor>
      <arglist>(BodyID bodyA, BodyID bodyB, Length2 laA=Length2{}, Length2 laB=Length2{}) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseMaxForce</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>a9bc00e6cd5250aab9461ba4058755ca1</anchor>
      <arglist>(NonNegative&lt; Force &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseMaxTorque</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>ac05a2f4d428a8965302aa50053bd5826</anchor>
      <arglist>(NonNegative&lt; Torque &gt; v) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorA</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>a99fdb13a3f08e267da5d4351e0a82968</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorB</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>ad320a4d48709fed7a9ba8ad7d96b422a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Force &gt;</type>
      <name>maxForce</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>a951dfd6ab71a10b2bf897c519b486e6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Torque &gt;</type>
      <name>maxTorque</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>a0dc172c241a2bd93f84c74c23b80da4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum2</type>
      <name>linearImpulse</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>af4ffe893bedc0ae14ca078e07d5d2a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AngularMomentum</type>
      <name>angularImpulse</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>a4ff93913a610c8efb9f24f48f734c992</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>rA</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>aa43fa9b599c41c569618a26de255e8b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>rB</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>a372d0b584a9ca98f99ddcefed5519016</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Mass22</type>
      <name>linearMass</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>a0e9abf7dc8a18f5120e06497cea4f3c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RotInertia</type>
      <name>angularMass</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>a61a56cd8cef199ca7396f6b850642a3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>a91ac3d07e13f9277632001e8f02de54f</anchor>
      <arglist>(const FrictionJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>ade895bb6a4e1b45bc803784534f2ffb2</anchor>
      <arglist>(const FrictionJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>ShiftOrigin</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>a110d0d6a089b3b8883e1f319984774fb</anchor>
      <arglist>(FrictionJointConf &amp;, Length2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>aa1ee93d27169ffa7e1c194081f1ba5a2</anchor>
      <arglist>(FrictionJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>a01d1ba8983bfece5db0f72889182169c</anchor>
      <arglist>(FrictionJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>ad8557c8dfa18bd290b35163d5cf86eba</anchor>
      <arglist>(const FrictionJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetMaxForce</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>aba8162d50c28927d87bdf7e29aa8afe0</anchor>
      <arglist>(const FrictionJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetMaxForce</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>afa6324a364b2b89057a749a5032ff720</anchor>
      <arglist>(FrictionJointConf &amp;object, NonNegative&lt; Force &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetMaxTorque</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>a00b4cc40afea7be207a08ad7c018f3c1</anchor>
      <arglist>(const FrictionJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetMaxTorque</name>
      <anchorfile>structplayrho_1_1d2_1_1FrictionJointConf.html</anchorfile>
      <anchor>acfc7a47e907d3aaf399a7919896f3571</anchor>
      <arglist>(FrictionJointConf &amp;object, NonNegative&lt; Torque &gt; value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::GearJointConf</name>
    <filename>structplayrho_1_1d2_1_1GearJointConf.html</filename>
    <base>JointBuilder&lt; GearJointConf &gt;</base>
    <member kind="typedef">
      <type>JointBuilder&lt; GearJointConf &gt;</type>
      <name>super</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>a94653fdd123e340df4cb748a59482a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>GearJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>a944f5786333bad3dbd4d3b6d4fef530d</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GearJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>a32ea95a3ff64b025902030271f8a893c</anchor>
      <arglist>(BodyID bA, BodyID bB, BodyID bC, BodyID bD) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>a77274d38c0810e3d78a3f5190ede395b</anchor>
      <arglist>(Real v) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>BodyID</type>
      <name>bodyC</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>a1d98acaf8f48b7aa1b9d895dfc41f80d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BodyID</type>
      <name>bodyD</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>a1da02e5e7815b02f0157b7a014b21e14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TypeID</type>
      <name>type1</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>a33d2c8c5c412cbdc8de0c9830969c7d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TypeID</type>
      <name>type2</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>acb8c14edf7fe93f1b94fdb2510390e1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorA</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>a7d9bb89ec48f2dfca97b15d3dca92fcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorB</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>ad6c881197e68a2ea5d3550bcf1dc0dc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorC</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>aa9c755c2fc0872588ad150477980c170</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorD</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>a224ad6a9b8cd8f338acbe83ff2dc2d65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitVec</type>
      <name>localAxis1</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>a15d653f83fe76d81ba8cf7b11ab7e1e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitVec</type>
      <name>localAxis2</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>a5aed2f106be2b58a10889b0dbb44e2e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Angle</type>
      <name>referenceAngle1</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>a81c0eee92bc3dd5369c6236638f98d60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Angle</type>
      <name>referenceAngle2</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>ab627e79702faf12413009807c33f849b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>ratio</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>a738bfaf044a89d5ceaeefaad4930deeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>constant</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>a57220f1055e1b98694d1588bd544405e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum</type>
      <name>impulse</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>aabe48496c0095d281ecd98fdb8ec4d6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec2</type>
      <name>JvAC</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>a6d5b12186746c939daa3f92d49a57ec3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec2</type>
      <name>JvBD</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>acd83c9e7b6a4b6b183e711e31fff0e67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>JwA</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>a209e0a1b3d01dc83aee6edf9b90852bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>JwB</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>a1442b630b5bd8428f222af8c40df3a8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>JwC</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>afca372438bb8f4b765a9671ec20ecbf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>JwD</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>afd71024d1077594e2cfde83a60581617</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>mass</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>a36ff7633d3f7decd5942d37b2a468cd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>aef9ee799e4e668610deb9199d0848153</anchor>
      <arglist>(const GearJointConf &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>constexpr AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>af2ce467ab8d8f56bd0cf232fd554e58b</anchor>
      <arglist>(const GearJointConf &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>ShiftOrigin</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>a086d21b8f77c0782aaaaee20a89aee6c</anchor>
      <arglist>(GearJointConf &amp;, Length2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>ad4f27859af3d0b4d13db6f8cc531c92b</anchor>
      <arglist>(GearJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>a69fd9db8bd9050f4f34c3932bc5c1f6b</anchor>
      <arglist>(GearJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>a5e4a317737862143d7fe7cb241f4a213</anchor>
      <arglist>(const GearJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>ad6bb4ee45a731f7095f5c052f16e15c0</anchor>
      <arglist>(const GearJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>a0561c70cfa90284d65bba0a3f59cb62a</anchor>
      <arglist>(GearJointConf &amp;object, Real value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetConstant</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>ac71c6757a2460462d539185069dd9c4c</anchor>
      <arglist>(const GearJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetType1</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>ae6d9a2fadb19711e6a7dba77fc7c1b6d</anchor>
      <arglist>(const GearJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetType2</name>
      <anchorfile>structplayrho_1_1d2_1_1GearJointConf.html</anchorfile>
      <anchor>a7bdfada30a9ccbb76361f8554034da92</anchor>
      <arglist>(const GearJointConf &amp;object) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::greater&lt;::playrho::propagate_const&lt; T &gt; &gt;</name>
    <filename>structstd_1_1greater_3_1_1playrho_1_1propagate__const_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>::playrho::propagate_const&lt; T &gt;</type>
      <name>first_argument_type</name>
      <anchorfile>structstd_1_1greater_3_1_1playrho_1_1propagate__const_3_01T_01_4_01_4.html</anchorfile>
      <anchor>ae4f366549b096f171cada8dd54017351</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>::playrho::propagate_const&lt; T &gt;</type>
      <name>second_argument_type</name>
      <anchorfile>structstd_1_1greater_3_1_1playrho_1_1propagate__const_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a65207672eca8932c28f1db3e5593b651</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structstd_1_1greater_3_1_1playrho_1_1propagate__const_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a88729a8b2243bd82738c01d4e2d893ee</anchor>
      <arglist>(const ::playrho::propagate_const&lt; T &gt; &amp;pc1, const ::playrho::propagate_const&lt; T &gt; &amp;pc2) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::greater_equal&lt;::playrho::propagate_const&lt; T &gt; &gt;</name>
    <filename>structstd_1_1greater__equal_3_1_1playrho_1_1propagate__const_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>::playrho::propagate_const&lt; T &gt;</type>
      <name>first_argument_type</name>
      <anchorfile>structstd_1_1greater__equal_3_1_1playrho_1_1propagate__const_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a5432978e6c9222561919d466e29db154</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>::playrho::propagate_const&lt; T &gt;</type>
      <name>second_argument_type</name>
      <anchorfile>structstd_1_1greater__equal_3_1_1playrho_1_1propagate__const_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a18bb6fdbd0d316a3e52b3cd8fe9d6e20</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structstd_1_1greater__equal_3_1_1playrho_1_1propagate__const_3_01T_01_4_01_4.html</anchorfile>
      <anchor>ae126645508db6230758d63de577fbfa1</anchor>
      <arglist>(const ::playrho::propagate_const&lt; T &gt; &amp;pc1, const ::playrho::propagate_const&lt; T &gt; &amp;pc2) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::GrowableStack</name>
    <filename>classplayrho_1_1GrowableStack.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>ElementType</name>
      <anchorfile>classplayrho_1_1GrowableStack.html</anchorfile>
      <anchor>a96746e86907cd1053b982e432ce680db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>CountType</name>
      <anchorfile>classplayrho_1_1GrowableStack.html</anchorfile>
      <anchor>a7d7f4c80b39831539b8f978700087ddc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>classplayrho_1_1GrowableStack.html</anchorfile>
      <anchor>a9a52c69b5e506bef0d458f1631ca3514</anchor>
      <arglist>(const ElementType &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>ElementType</type>
      <name>top</name>
      <anchorfile>classplayrho_1_1GrowableStack.html</anchorfile>
      <anchor>aca6d1bc59a1ba12492ed2ae2c9974590</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>classplayrho_1_1GrowableStack.html</anchorfile>
      <anchor>abd96c05bbcee5de9e40962a4a62a4bfc</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr CountType</type>
      <name>size</name>
      <anchorfile>classplayrho_1_1GrowableStack.html</anchorfile>
      <anchor>a25c2a5c02fc0760c0e2183ea314df1a5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr CountType</type>
      <name>capacity</name>
      <anchorfile>classplayrho_1_1GrowableStack.html</anchorfile>
      <anchor>a2b99feb8c53ba9ded557ce46418f30e6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classplayrho_1_1GrowableStack.html</anchorfile>
      <anchor>aad3430a4ab40781e54d31fc902c2c285</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr CountType</type>
      <name>GetInitialCapacity</name>
      <anchorfile>classplayrho_1_1GrowableStack.html</anchorfile>
      <anchor>a7fd71084bf3bf8d63a079ac30dc8bd9c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr CountType</type>
      <name>GetBufferGrowthRate</name>
      <anchorfile>classplayrho_1_1GrowableStack.html</anchorfile>
      <anchor>a7cedecdb334d7cd194f7de3fffd8f1d7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ElementType</type>
      <name>m_array</name>
      <anchorfile>classplayrho_1_1GrowableStack.html</anchorfile>
      <anchor>a5acbca2c9da5891ceba1c24a605337d8</anchor>
      <arglist>[N]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ElementType *</type>
      <name>m_stack</name>
      <anchorfile>classplayrho_1_1GrowableStack.html</anchorfile>
      <anchor>afe3860237321dbeab24e8e1a846572a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CountType</type>
      <name>m_count</name>
      <anchorfile>classplayrho_1_1GrowableStack.html</anchorfile>
      <anchor>a25bd3310cbd7479f35a88e38f93b92bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CountType</type>
      <name>m_capacity</name>
      <anchorfile>classplayrho_1_1GrowableStack.html</anchorfile>
      <anchor>ad07d94d47bf57ea49f3cafac12c864cf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::HasFunctor</name>
    <filename>structplayrho_1_1HasFunctor.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::HasFunctor&lt; Type, Return(Args...)&gt;</name>
    <filename>structplayrho_1_1HasFunctor_3_01Type_00_01Return_07Args_8_8_8_08_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>Args</templarg>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>value</name>
      <anchorfile>structplayrho_1_1HasFunctor_3_01Type_00_01Return_07Args_8_8_8_08_4.html</anchorfile>
      <anchor>a772dfe6418e03633d947b84116d588ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>decltype(check&lt; Type &gt;(0))</type>
      <name>type</name>
      <anchorfile>structplayrho_1_1HasFunctor_3_01Type_00_01Return_07Args_8_8_8_08_4.html</anchorfile>
      <anchor>a01ad620cbb98956fb246d8f8c6ca4c67</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static constexpr auto</type>
      <name>check</name>
      <anchorfile>structplayrho_1_1HasFunctor_3_01Type_00_01Return_07Args_8_8_8_08_4.html</anchorfile>
      <anchor>a8d8a720e7ae1f99e2990e98850dd3474</anchor>
      <arglist>(T *) -&gt; typename std::is_same&lt; decltype(std::declval&lt; T &gt;()(std::declval&lt; Args &gt;()...)), Return &gt;::type</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static constexpr std::false_type</type>
      <name>check</name>
      <anchorfile>structplayrho_1_1HasFunctor_3_01Type_00_01Return_07Args_8_8_8_08_4.html</anchorfile>
      <anchor>aac88f0b3262b23f059b1490e3c6bbfdd</anchor>
      <arglist>(...)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; playrho::ContactKey &gt;</name>
    <filename>structstd_1_1hash_3_01playrho_1_1ContactKey_01_4.html</filename>
    <member kind="typedef">
      <type>playrho::ContactKey</type>
      <name>argument_type</name>
      <anchorfile>structstd_1_1hash_3_01playrho_1_1ContactKey_01_4.html</anchorfile>
      <anchor>ac19c78e4d7df44d45e71d6eaca2235da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>result_type</name>
      <anchorfile>structstd_1_1hash_3_01playrho_1_1ContactKey_01_4.html</anchorfile>
      <anchor>abfe90dda9bfc6a5c384d90d59672a396</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr std::size_t</type>
      <name>operator()</name>
      <anchorfile>structstd_1_1hash_3_01playrho_1_1ContactKey_01_4.html</anchorfile>
      <anchor>ad67a67c6f63499c928df80829c07e4ef</anchor>
      <arglist>(const playrho::ContactKey &amp;key) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt;::playrho::detail::IndexingNamedType&lt; T, Tag &gt; &gt;</name>
    <filename>structstd_1_1hash_3_1_1playrho_1_1detail_1_1IndexingNamedType_3_01T_00_01Tag_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>::std::size_t</type>
      <name>operator()</name>
      <anchorfile>structstd_1_1hash_3_1_1playrho_1_1detail_1_1IndexingNamedType_3_01T_00_01Tag_01_4_01_4.html</anchorfile>
      <anchor>aa13ca1029751c40580cb84fb502a3905</anchor>
      <arglist>(const ::playrho::detail::IndexingNamedType&lt; T, Tag &gt; &amp;v) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt;::playrho::propagate_const&lt; T &gt; &gt;</name>
    <filename>structstd_1_1hash_3_1_1playrho_1_1propagate__const_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>size_t</type>
      <name>result_type</name>
      <anchorfile>structstd_1_1hash_3_1_1playrho_1_1propagate__const_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a043589f28ad3585deb5f5afb52786ab4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>::playrho::propagate_const&lt; T &gt;</type>
      <name>argument_type</name>
      <anchorfile>structstd_1_1hash_3_1_1playrho_1_1propagate__const_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a63d75e2c077ef2d54f404dc795cef346</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structstd_1_1hash_3_1_1playrho_1_1propagate__const_3_01T_01_4_01_4.html</anchorfile>
      <anchor>ac3df24e63aac45530fae299ce15d905d</anchor>
      <arglist>(const ::playrho::propagate_const&lt; T &gt; &amp;pc) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::HasType</name>
    <filename>structplayrho_1_1HasType.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::HasType&lt; T, std::tuple&lt; T, Ts... &gt; &gt;</name>
    <filename>structplayrho_1_1HasType_3_01T_00_01std_1_1tuple_3_01T_00_01Ts_8_8_8_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Ts</templarg>
  </compound>
  <compound kind="class">
    <name>HasType&lt; T, std::tuple&lt; Ts... &gt; &gt;</name>
    <filename>structplayrho_1_1HasType.html</filename>
  </compound>
  <compound kind="struct">
    <name>playrho::HasType&lt; T, std::tuple&lt; U, Ts... &gt; &gt;</name>
    <filename>structplayrho_1_1HasType_3_01T_00_01std_1_1tuple_3_01U_00_01Ts_8_8_8_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>Ts</templarg>
    <base>HasType&lt; T, std::tuple&lt; Ts... &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>playrho::HasType&lt; T, std::tuple&lt;&gt; &gt;</name>
    <filename>structplayrho_1_1HasType_3_01T_00_01std_1_1tuple_3_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>playrho::detail::IndexingNamedType</name>
    <filename>classplayrho_1_1detail_1_1IndexingNamedType.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>underlying_type</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a2ed01bf69779b0880b5092c6bbad560b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>IndexingNamedType</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a892cfd05d866e1abb9af247c65ebb6df</anchor>
      <arglist>() noexcept(std::is_nothrow_default_constructible&lt; underlying_type &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>IndexingNamedType</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a3a345acf416a0b32e28a87ee929b65f1</anchor>
      <arglist>(const underlying_type &amp;value) noexcept(std::is_nothrow_copy_constructible&lt; underlying_type &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>IndexingNamedType</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a3d2b448e6586f75c688e887340a8eedd</anchor>
      <arglist>(underlying_type &amp;&amp;value) noexcept(std::is_nothrow_move_constructible&lt; underlying_type &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator underlying_type &amp;</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>af542614fbc4afa44a04a94ae6a5b7702</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator const underlying_type &amp;</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a3bf3196bd10d8150d943e66b7d8fa91c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr underlying_type &amp;</type>
      <name>get</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>aed65976407ff62b11d16b009db270c1d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr underlying_type const  &amp;</type>
      <name>get</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a0b2a72d277c5b898b05b1afd5621ecca</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>underlying_type</type>
      <name>value_</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a100463230cc387293d8b93ea869038bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a2e21d574919f686373b0b82f9d35ef98</anchor>
      <arglist>(IndexingNamedType &amp;a, IndexingNamedType &amp;b) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a1110c36b661a413db786630b5a227aa3</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a244171e28eaad9254155129b7a6165ac</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a232b179c6990665f378e72f07d60fa56</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>ad6395f2e2c4d40b86cb779785af8db65</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a3027e696fb2524a81e9b017125095131</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>ad61ded65d54e459fd000aba775fbd30c</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend ::std::size_t</type>
      <name>hash</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>abc4075e5b137da9e3c8be4500f8be64c</anchor>
      <arglist>(const IndexingNamedType &amp;v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IndexingNamedType&lt; BodyCounter, struct BodyIdentifier &gt;</name>
    <filename>classplayrho_1_1detail_1_1IndexingNamedType.html</filename>
    <member kind="typedef">
      <type>BodyCounter</type>
      <name>underlying_type</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a2ed01bf69779b0880b5092c6bbad560b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>IndexingNamedType</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a892cfd05d866e1abb9af247c65ebb6df</anchor>
      <arglist>() noexcept(std::is_nothrow_default_constructible&lt; underlying_type &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>IndexingNamedType</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a3a345acf416a0b32e28a87ee929b65f1</anchor>
      <arglist>(const underlying_type &amp;value) noexcept(std::is_nothrow_copy_constructible&lt; underlying_type &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>IndexingNamedType</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a3d2b448e6586f75c688e887340a8eedd</anchor>
      <arglist>(underlying_type &amp;&amp;value) noexcept(std::is_nothrow_move_constructible&lt; underlying_type &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator underlying_type &amp;</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>af542614fbc4afa44a04a94ae6a5b7702</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator const underlying_type &amp;</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a3bf3196bd10d8150d943e66b7d8fa91c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr underlying_type &amp;</type>
      <name>get</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>aed65976407ff62b11d16b009db270c1d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr underlying_type const &amp;</type>
      <name>get</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a0b2a72d277c5b898b05b1afd5621ecca</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>underlying_type</type>
      <name>value_</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a100463230cc387293d8b93ea869038bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a2e21d574919f686373b0b82f9d35ef98</anchor>
      <arglist>(IndexingNamedType &amp;a, IndexingNamedType &amp;b) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a1110c36b661a413db786630b5a227aa3</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a244171e28eaad9254155129b7a6165ac</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a232b179c6990665f378e72f07d60fa56</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>ad6395f2e2c4d40b86cb779785af8db65</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a3027e696fb2524a81e9b017125095131</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>ad61ded65d54e459fd000aba775fbd30c</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend ::std::size_t</type>
      <name>hash</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>abc4075e5b137da9e3c8be4500f8be64c</anchor>
      <arglist>(const IndexingNamedType &amp;v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IndexingNamedType&lt; const char *const *, struct TypeIdentifier &gt;</name>
    <filename>classplayrho_1_1detail_1_1IndexingNamedType.html</filename>
    <member kind="typedef">
      <type>const char *const *</type>
      <name>underlying_type</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a2ed01bf69779b0880b5092c6bbad560b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>IndexingNamedType</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a892cfd05d866e1abb9af247c65ebb6df</anchor>
      <arglist>() noexcept(std::is_nothrow_default_constructible&lt; underlying_type &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>IndexingNamedType</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a3a345acf416a0b32e28a87ee929b65f1</anchor>
      <arglist>(const underlying_type &amp;value) noexcept(std::is_nothrow_copy_constructible&lt; underlying_type &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>IndexingNamedType</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a3d2b448e6586f75c688e887340a8eedd</anchor>
      <arglist>(underlying_type &amp;&amp;value) noexcept(std::is_nothrow_move_constructible&lt; underlying_type &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator underlying_type &amp;</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>af542614fbc4afa44a04a94ae6a5b7702</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator const underlying_type &amp;</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a3bf3196bd10d8150d943e66b7d8fa91c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr underlying_type &amp;</type>
      <name>get</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>aed65976407ff62b11d16b009db270c1d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr underlying_type const &amp;</type>
      <name>get</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a0b2a72d277c5b898b05b1afd5621ecca</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>underlying_type</type>
      <name>value_</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a100463230cc387293d8b93ea869038bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a2e21d574919f686373b0b82f9d35ef98</anchor>
      <arglist>(IndexingNamedType &amp;a, IndexingNamedType &amp;b) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a1110c36b661a413db786630b5a227aa3</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a244171e28eaad9254155129b7a6165ac</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a232b179c6990665f378e72f07d60fa56</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>ad6395f2e2c4d40b86cb779785af8db65</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a3027e696fb2524a81e9b017125095131</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>ad61ded65d54e459fd000aba775fbd30c</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend ::std::size_t</type>
      <name>hash</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>abc4075e5b137da9e3c8be4500f8be64c</anchor>
      <arglist>(const IndexingNamedType &amp;v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IndexingNamedType&lt; ContactCounter, struct ContactIdentifier &gt;</name>
    <filename>classplayrho_1_1detail_1_1IndexingNamedType.html</filename>
    <member kind="typedef">
      <type>ContactCounter</type>
      <name>underlying_type</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a2ed01bf69779b0880b5092c6bbad560b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>IndexingNamedType</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a892cfd05d866e1abb9af247c65ebb6df</anchor>
      <arglist>() noexcept(std::is_nothrow_default_constructible&lt; underlying_type &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>IndexingNamedType</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a3a345acf416a0b32e28a87ee929b65f1</anchor>
      <arglist>(const underlying_type &amp;value) noexcept(std::is_nothrow_copy_constructible&lt; underlying_type &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>IndexingNamedType</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a3d2b448e6586f75c688e887340a8eedd</anchor>
      <arglist>(underlying_type &amp;&amp;value) noexcept(std::is_nothrow_move_constructible&lt; underlying_type &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator underlying_type &amp;</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>af542614fbc4afa44a04a94ae6a5b7702</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator const underlying_type &amp;</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a3bf3196bd10d8150d943e66b7d8fa91c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr underlying_type &amp;</type>
      <name>get</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>aed65976407ff62b11d16b009db270c1d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr underlying_type const &amp;</type>
      <name>get</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a0b2a72d277c5b898b05b1afd5621ecca</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>underlying_type</type>
      <name>value_</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a100463230cc387293d8b93ea869038bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a2e21d574919f686373b0b82f9d35ef98</anchor>
      <arglist>(IndexingNamedType &amp;a, IndexingNamedType &amp;b) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a1110c36b661a413db786630b5a227aa3</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a244171e28eaad9254155129b7a6165ac</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a232b179c6990665f378e72f07d60fa56</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>ad6395f2e2c4d40b86cb779785af8db65</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a3027e696fb2524a81e9b017125095131</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>ad61ded65d54e459fd000aba775fbd30c</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend ::std::size_t</type>
      <name>hash</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>abc4075e5b137da9e3c8be4500f8be64c</anchor>
      <arglist>(const IndexingNamedType &amp;v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IndexingNamedType&lt; FixtureCounter, struct FixtureIdentifier &gt;</name>
    <filename>classplayrho_1_1detail_1_1IndexingNamedType.html</filename>
    <member kind="typedef">
      <type>FixtureCounter</type>
      <name>underlying_type</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a2ed01bf69779b0880b5092c6bbad560b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>IndexingNamedType</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a892cfd05d866e1abb9af247c65ebb6df</anchor>
      <arglist>() noexcept(std::is_nothrow_default_constructible&lt; underlying_type &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>IndexingNamedType</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a3a345acf416a0b32e28a87ee929b65f1</anchor>
      <arglist>(const underlying_type &amp;value) noexcept(std::is_nothrow_copy_constructible&lt; underlying_type &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>IndexingNamedType</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a3d2b448e6586f75c688e887340a8eedd</anchor>
      <arglist>(underlying_type &amp;&amp;value) noexcept(std::is_nothrow_move_constructible&lt; underlying_type &gt;::value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator underlying_type &amp;</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>af542614fbc4afa44a04a94ae6a5b7702</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator const underlying_type &amp;</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a3bf3196bd10d8150d943e66b7d8fa91c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr underlying_type &amp;</type>
      <name>get</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>aed65976407ff62b11d16b009db270c1d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr underlying_type const &amp;</type>
      <name>get</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a0b2a72d277c5b898b05b1afd5621ecca</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>underlying_type</type>
      <name>value_</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a100463230cc387293d8b93ea869038bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a2e21d574919f686373b0b82f9d35ef98</anchor>
      <arglist>(IndexingNamedType &amp;a, IndexingNamedType &amp;b) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a1110c36b661a413db786630b5a227aa3</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a244171e28eaad9254155129b7a6165ac</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a232b179c6990665f378e72f07d60fa56</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>ad6395f2e2c4d40b86cb779785af8db65</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>a3027e696fb2524a81e9b017125095131</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>ad61ded65d54e459fd000aba775fbd30c</anchor>
      <arglist>(const IndexingNamedType &amp;lhs, const IndexingNamedType &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend ::std::size_t</type>
      <name>hash</name>
      <anchorfile>classplayrho_1_1detail_1_1IndexingNamedType.html</anchorfile>
      <anchor>abc4075e5b137da9e3c8be4500f8be64c</anchor>
      <arglist>(const IndexingNamedType &amp;v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::Interval</name>
    <filename>classplayrho_1_1Interval.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>af3f2912d491535ecbe0f8b03da2357b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::numeric_limits&lt; value_type &gt;</type>
      <name>limits</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>aa866ea1ceb4bd34b4cb87ed352407ddd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Interval</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>aa211c2ffb0d1562ce962d7180a0aae03</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Interval</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a074f10f433f625c70092cf1ab265bc25</anchor>
      <arglist>(const Interval &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Interval</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a4071753242d3c3559f6dd8c4ebe4238e</anchor>
      <arglist>(Interval &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Interval</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a43c16855f11c783e19354422e2fa6803</anchor>
      <arglist>(const value_type &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Interval</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a952bb61807438fef2bf879463a0a06cd</anchor>
      <arglist>(const value_type &amp;a, const value_type &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Interval</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a4792761058cdb51068e3b130c83488e9</anchor>
      <arglist>(const std::initializer_list&lt; T &gt; ilist) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Interval &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a8dee2cf813de69b22a8872c432a1ae7f</anchor>
      <arglist>(const Interval &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>Interval &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a296371ae35bc96229e72601b59469620</anchor>
      <arglist>(Interval &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr Interval &amp;</type>
      <name>Move</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>af7db33439395c429c5d9c116dac9669a</anchor>
      <arglist>(const value_type &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr value_type</type>
      <name>GetMin</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a383d8880c22e2b84af21ef3ec17df785</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr value_type</type>
      <name>GetMax</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a0e105e9e1d8703aa7072cc055a8954e9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Interval &amp;</type>
      <name>Include</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a77a1fefb7913c79056818fb075de8dda</anchor>
      <arglist>(const value_type &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Interval &amp;</type>
      <name>Include</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a9ac952f97f239bafafdc5f2dc8c0bc9a</anchor>
      <arglist>(const Interval &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Interval &amp;</type>
      <name>Intersect</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a837be1737523a855ac535d0804b3b4a1</anchor>
      <arglist>(const Interval &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Interval &amp;</type>
      <name>Expand</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a2fbbb1fad7f782d2019886bb2607260b</anchor>
      <arglist>(const value_type &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Interval &amp;</type>
      <name>ExpandEqually</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>ab88de3c550301aef9515c6d9ab44d81b</anchor>
      <arglist>(const NonNegative&lt; value_type &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr value_type</type>
      <name>GetLowest</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a170e5b2b32b935dd223777fa92d89014</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr value_type</type>
      <name>GetHighest</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>aa3c4f39b89d6d069336294dddd699ace</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::pair&lt; value_type, value_type &gt;</type>
      <name>pair_type</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a10cf0f7f8c15ba2ff9cfee82c8b759d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>constexpr</type>
      <name>Interval</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a6a95bc9c3215164b135883de6b450989</anchor>
      <arglist>(pair_type pair) noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>value_type</type>
      <name>m_min</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a1897cba3de761cb2c89f62255b43f56a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>value_type</type>
      <name>m_max</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>ac1383ef6c4c0bdfae5593f1675fecb04</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Interval&lt; Length &gt;</type>
      <name>LengthInterval</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>ab87595595939d0c7469bc1c48524598a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>GetCenter</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a6ddf94310b3145c842e6365e3ec69226</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsIntersecting</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a3eff0342e8a7b5e15dcf232d7f28f961</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;a, const Interval&lt; T &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Interval&lt; T &gt;</type>
      <name>GetIntersection</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a4baf1dd76711ae5151d0ee07a8b345d0</anchor>
      <arglist>(Interval&lt; T &gt; a, const Interval&lt; T &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>ac1b97d7e2f5894048236948061068fb5</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;a, const Interval&lt; T &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a861fb100d29d58d6f26f3767017886b3</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;a, const Interval&lt; T &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>a815e65e38974a8bb60ef0a096bea0241</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;lhs, const Interval&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>adbf50e7e086182f69dc09e011aef6345</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;lhs, const Interval&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>acc58a55aab3f8bdd7ea411a6b2a4ddfb</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;lhs, const Interval&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1Interval.html</anchorfile>
      <anchor>acca7f35c089808652f6c5d6c06a85ae7</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;lhs, const Interval&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::InvalidArgument</name>
    <filename>classplayrho_1_1InvalidArgument.html</filename>
  </compound>
  <compound kind="struct">
    <name>playrho::propagate_const::is_propagate_const</name>
    <filename>structplayrho_1_1propagate__const_1_1is__propagate__const.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::propagate_const::is_propagate_const&lt; propagate_const&lt; U &gt; &gt;</name>
    <filename>structplayrho_1_1propagate__const_1_1is__propagate__const_3_01propagate__const_3_01U_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::IsAddable</name>
    <filename>structplayrho_1_1IsAddable.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::IsAddable&lt; T1, T2, std::void_t&lt; decltype(T1{}+T2{})&gt; &gt;</name>
    <filename>structplayrho_1_1IsAddable_3_01T1_00_01T2_00_01std_1_1void__t_3_01decltype_07T1_02_03_09T2_02_03_08_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::IsArithmetic</name>
    <filename>structplayrho_1_1IsArithmetic.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::IsArithmetic&lt; T, std::void_t&lt; decltype(T{}+T{}), decltype(T{} - T{}), decltype(T{} *T{}), decltype(T{}/T{})&gt; &gt;</name>
    <filename>structplayrho_1_1IsArithmetic_3_01T_00_01std_1_1void__t_3_01decltype_07T_02_03_09T_02_03_08_00_0e30487095fcbd3150b7b99d467763a14.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::IsDivisable</name>
    <filename>structplayrho_1_1IsDivisable.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::IsDivisable&lt; T1, T2, std::void_t&lt; decltype(T1{}/T2{})&gt; &gt;</name>
    <filename>structplayrho_1_1IsDivisable_3_01T1_00_01T2_00_01std_1_1void__t_3_01decltype_07T1_02_03_2T2_02_03_08_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::IsEqualityComparable</name>
    <filename>structplayrho_1_1IsEqualityComparable.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::IsEqualityComparable&lt; T1, T2, std::void_t&lt; decltype(T1{}==T2{})&gt; &gt;</name>
    <filename>structplayrho_1_1IsEqualityComparable_3_01T1_00_01T2_00_01std_1_1void__t_3_01decltype_07T1_02_03_0a_0aT2_02_03_08_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::IsInequalityComparable</name>
    <filename>structplayrho_1_1IsInequalityComparable.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::IsInequalityComparable&lt; T1, T2, std::void_t&lt; decltype(T1{} !=T2{})&gt; &gt;</name>
    <filename>structplayrho_1_1IsInequalityComparable_3_01T1_00_01T2_00_01std_1_1void__t_3_01decltype_07T1_02_03_01_9_0aT2_02_03_08_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::IsIterableImpl</name>
    <filename>structplayrho_1_1detail_1_1IsIterableImpl.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::IsIterableImpl&lt; T, std::void_t&lt; decltype(begin(std::declval&lt; T &gt;())), decltype(end(std::declval&lt; T &gt;())), decltype(++std::declval&lt; decltype(begin(std::declval&lt; T &amp; &gt;()))&amp; &gt;()), decltype(*begin(std::declval&lt; T &gt;())) &gt; &gt;</name>
    <filename>structplayrho_1_1detail_1_1IsIterableImpl_3_01T_00_01std_1_1void__t_3_01decltype_07begin_07std_13619530b21097a509a6589d454070d72.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::Island</name>
    <filename>structplayrho_1_1d2_1_1Island.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; BodyID &gt;</type>
      <name>Bodies</name>
      <anchorfile>structplayrho_1_1d2_1_1Island.html</anchorfile>
      <anchor>a57085e7ed63f0bc971b650bc638ef89b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; ContactID &gt;</type>
      <name>Contacts</name>
      <anchorfile>structplayrho_1_1d2_1_1Island.html</anchorfile>
      <anchor>a289f2f159d9c7f677a3647ef23ed47ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; JointID &gt;</type>
      <name>Joints</name>
      <anchorfile>structplayrho_1_1d2_1_1Island.html</anchorfile>
      <anchor>ababb76be76db30a2347cce700dc17c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Bodies</type>
      <name>bodies</name>
      <anchorfile>structplayrho_1_1d2_1_1Island.html</anchorfile>
      <anchor>afc2982bb613af674b9f85faf3e530173</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Contacts</type>
      <name>contacts</name>
      <anchorfile>structplayrho_1_1d2_1_1Island.html</anchorfile>
      <anchor>a90d8f85d0947114dec4e3fe6ef5694f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Joints</type>
      <name>joints</name>
      <anchorfile>structplayrho_1_1d2_1_1Island.html</anchorfile>
      <anchor>afc861f4f97ed94009fed0b82f1bcaf49</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reserve</name>
      <anchorfile>structplayrho_1_1d2_1_1Island.html</anchorfile>
      <anchor>a664acb63c47699be5fb3eb03201ecddc</anchor>
      <arglist>(Island &amp;island, BodyCounter bodies, ContactCounter contacts, JointCounter joints)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>structplayrho_1_1d2_1_1Island.html</anchorfile>
      <anchor>aacc77212a4102b2b298af7a5cc1be392</anchor>
      <arglist>(Island &amp;island) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsFullOfBodies</name>
      <anchorfile>structplayrho_1_1d2_1_1Island.html</anchorfile>
      <anchor>ad81cfb61a8aae11d28836a542584dd7f</anchor>
      <arglist>(const Island &amp;island)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsFullOfContacts</name>
      <anchorfile>structplayrho_1_1d2_1_1Island.html</anchorfile>
      <anchor>a0613fe306ae99ce5ca98798c757a3dc2</anchor>
      <arglist>(const Island &amp;island)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>Count</name>
      <anchorfile>structplayrho_1_1d2_1_1Island.html</anchorfile>
      <anchor>a3063d5a0619a13b6a4e9c7dd682d2b8c</anchor>
      <arglist>(const Island &amp;island, BodyID entry)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>Count</name>
      <anchorfile>structplayrho_1_1d2_1_1Island.html</anchorfile>
      <anchor>aacd06d34c7670daf163be95cded7b12f</anchor>
      <arglist>(const Island &amp;island, ContactID entry)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>Count</name>
      <anchorfile>structplayrho_1_1d2_1_1Island.html</anchorfile>
      <anchor>a12ca0d1652e526ef8a5829a386056f3f</anchor>
      <arglist>(const Island &amp;island, JointID entry)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::IslandStats</name>
    <filename>structplayrho_1_1IslandStats.html</filename>
    <member kind="variable">
      <type>Length</type>
      <name>minSeparation</name>
      <anchorfile>structplayrho_1_1IslandStats.html</anchorfile>
      <anchor>a56647a7552d22c1601e221060571a1e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum</type>
      <name>maxIncImpulse</name>
      <anchorfile>structplayrho_1_1IslandStats.html</anchorfile>
      <anchor>ad6315063bcd677bfbf1fc02e3a4df5de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BodyCounter</type>
      <name>bodiesSlept</name>
      <anchorfile>structplayrho_1_1IslandStats.html</anchorfile>
      <anchor>a0e77adb6237f10240ff654d4b568baf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ContactCounter</type>
      <name>contactsUpdated</name>
      <anchorfile>structplayrho_1_1IslandStats.html</anchorfile>
      <anchor>a26a43c272d9953c4e7ca5f8c98339a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ContactCounter</type>
      <name>contactsSkipped</name>
      <anchorfile>structplayrho_1_1IslandStats.html</anchorfile>
      <anchor>a5527b23bccc7a5d52883c73d9a38d18d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>solved</name>
      <anchorfile>structplayrho_1_1IslandStats.html</anchorfile>
      <anchor>a5b80c2efc3ebf289982130730d514259</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TimestepIters</type>
      <name>positionIterations</name>
      <anchorfile>structplayrho_1_1IslandStats.html</anchorfile>
      <anchor>a8300c0cdc5ecf44a03123484c4f90ee6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TimestepIters</type>
      <name>velocityIterations</name>
      <anchorfile>structplayrho_1_1IslandStats.html</anchorfile>
      <anchor>a32a1db01bb6337f88faedc21b35c5175</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::IsMatrix</name>
    <filename>structplayrho_1_1IsMatrix.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::IsMatrix&lt; Vector&lt; Vector&lt; T, N &gt;, M &gt; &gt;</name>
    <filename>structplayrho_1_1IsMatrix_3_01Vector_3_01Vector_3_01T_00_01N_01_4_00_01M_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>M</templarg>
    <templarg>N</templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::IsMultipliable</name>
    <filename>structplayrho_1_1IsMultipliable.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::IsMultipliable&lt; T1, T2, std::void_t&lt; decltype(T1{} *T2{})&gt; &gt;</name>
    <filename>structplayrho_1_1IsMultipliable_3_01T1_00_01T2_00_01std_1_1void__t_3_01decltype_07T1_02_03_01_5T2_02_03_08_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::IsSquareMatrix</name>
    <filename>structplayrho_1_1IsSquareMatrix.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::IsSquareMatrix&lt; Vector&lt; Vector&lt; T, M &gt;, M &gt; &gt;</name>
    <filename>structplayrho_1_1IsSquareMatrix_3_01Vector_3_01Vector_3_01T_00_01M_01_4_00_01M_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>M</templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::IsValidJointType</name>
    <filename>structplayrho_1_1d2_1_1IsValidJointType.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::IsValidJointType&lt; T, std::void_t&lt; decltype(GetBodyA(std::declval&lt; T &gt;())), decltype(GetBodyB(std::declval&lt; T &gt;())), decltype(GetCollideConnected(std::declval&lt; T &gt;())), decltype(ShiftOrigin(std::declval&lt; T &amp; &gt;(), std::declval&lt; Length2 &gt;())), decltype(InitVelocity(std::declval&lt; T &amp; &gt;(), std::declval&lt; std::vector&lt; BodyConstraint &gt; &amp; &gt;(), std::declval&lt; StepConf &gt;(), std::declval&lt; ConstraintSolverConf &gt;())), decltype(SolveVelocity(std::declval&lt; T &amp; &gt;(), std::declval&lt; std::vector&lt; BodyConstraint &gt; &amp; &gt;(), std::declval&lt; StepConf &gt;())), decltype(SolvePosition(std::declval&lt; T &gt;(), std::declval&lt; std::vector&lt; BodyConstraint &gt; &amp; &gt;(), std::declval&lt; ConstraintSolverConf &gt;())), decltype(std::declval&lt; T &gt;()==std::declval&lt; T &gt;()), decltype(Joint{std::declval&lt; T &gt;()})&gt; &gt;</name>
    <filename>structplayrho_1_1d2_1_1IsValidJointType_3_01T_00_01std_1_1void__t_3_01decltype_07GetBodyA_07std_f46b9ec9d43482967902ab937217ed36.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::IsValidShapeType</name>
    <filename>structplayrho_1_1d2_1_1IsValidShapeType.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::IsValidShapeType&lt; T, std::void_t&lt; decltype(GetChildCount(std::declval&lt; T &gt;())), decltype(GetChild(std::declval&lt; T &gt;(), std::declval&lt; ChildCounter &gt;())), decltype(GetMassData(std::declval&lt; T &gt;())), decltype(GetVertexRadius(std::declval&lt; T &gt;(), std::declval&lt; ChildCounter &gt;())), decltype(GetDensity(std::declval&lt; T &gt;())), decltype(GetFriction(std::declval&lt; T &gt;())), decltype(GetRestitution(std::declval&lt; T &gt;())), decltype(Transform(std::declval&lt; T &amp; &gt;(), std::declval&lt; Mat22 &gt;())), decltype(std::declval&lt; T &gt;()==std::declval&lt; T &gt;()), decltype(Shape{std::declval&lt; T &gt;()})&gt; &gt;</name>
    <filename>structplayrho_1_1d2_1_1IsValidShapeType_3_01T_00_01std_1_1void__t_3_01decltype_07GetChildCount_0d6dff8bc9a2931522642c5eb50f9e01f.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::IsVector</name>
    <filename>structplayrho_1_1IsVector.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::IsVector&lt; Vector&lt; T, N &gt; &gt;</name>
    <filename>structplayrho_1_1IsVector_3_01Vector_3_01T_00_01N_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
  </compound>
  <compound kind="class">
    <name>playrho::d2::Joint</name>
    <filename>classplayrho_1_1d2_1_1Joint.html</filename>
    <class kind="struct">playrho::d2::Joint::Concept</class>
    <class kind="struct">playrho::d2::Joint::Model</class>
    <member kind="typedef">
      <type>std::vector&lt; BodyConstraint &gt;</type>
      <name>BodyConstraintsMap</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a2f4a323ae3e657599d2e765d6dadbb57</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Joint</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a629afbd4f38402a8f5d23a13199642f1</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Joint</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>ab064da54849fb5adaac0866cc6dea9c5</anchor>
      <arglist>(const Joint &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Joint</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>afe6ebeb9d617e7abb955eb4977dc1451</anchor>
      <arglist>(Joint &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Joint</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a1f0d73ef9cb8983e0eb288ff682c1783</anchor>
      <arglist>(T &amp;&amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>Joint &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>ac016a97cb182a1122528839ff5d432ba</anchor>
      <arglist>(const Joint &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Joint &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a1b06f0e9027ce164fc6dd50d050c7a7e</anchor>
      <arglist>(Joint &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Joint &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a79d292f30f9366f3928e02ddec0b5e94</anchor>
      <arglist>(T &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a686ecf9d5b134af67040d2167eaaacbc</anchor>
      <arglist>(Joint &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_value</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>ad463d7b16f9fe80ab5f3368734bf75db</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::enable_if_t&lt;!std::is_same_v&lt; DecayedType, Joint &gt;, DecayedType &gt;</type>
      <name>DecayedTypeIfNotSelf</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a0f9a7c973d3f6801f6a7837acd952cc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unique_ptr&lt; Concept &gt;</type>
      <name>m_self</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a82f04fcd5147affc2cdd86604c3c7758</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend TypeID</type>
      <name>GetType</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a2ca986bd855aa5470a1ba1cd44f27f7b</anchor>
      <arglist>(const Joint &amp;object) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::add_pointer_t&lt; std::add_const_t&lt; T &gt; &gt;</type>
      <name>TypeCast</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>afbe06ff8376003dcba368f69191b97fd</anchor>
      <arglist>(const Joint *value) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::add_pointer_t&lt; T &gt;</type>
      <name>TypeCast</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>acd73f8a32384e237c826c5d2f7c60cce</anchor>
      <arglist>(Joint *value) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a236b60d14dce843e92ca4e9ddeecc6b2</anchor>
      <arglist>(const Joint &amp;lhs, const Joint &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a77c7fac4adcbb85f9cfc10e1c59a0694</anchor>
      <arglist>(const Joint &amp;lhs, const Joint &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend BodyID</type>
      <name>GetBodyA</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a77014275fd3396814dca3cb040531a93</anchor>
      <arglist>(const Joint &amp;object) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend BodyID</type>
      <name>GetBodyB</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a7fc6232bebaf980916267eac986af1b6</anchor>
      <arglist>(const Joint &amp;object) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>GetCollideConnected</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a1d3db8891b3291d9ba80b2b78129dffe</anchor>
      <arglist>(const Joint &amp;object) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>ShiftOrigin</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>ab1fd942ded9bd44c35ca6b53448853d8</anchor>
      <arglist>(Joint &amp;object, Length2 value) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>InitVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>aa16d15d5050a08af7aecd5dcd99443fb</anchor>
      <arglist>(Joint &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const playrho::StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>SolveVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a1d169bb471d249df8a59a40f281419e0</anchor>
      <arglist>(Joint &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const playrho::StepConf &amp;step)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>SolvePosition</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a27aed9f55469eccfe93c2ce023e97333</anchor>
      <arglist>(const Joint &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>DistanceJointConf</type>
      <name>GetDistanceJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a8ae635b1541038f25f4b61c94b4328a8</anchor>
      <arglist>(const Joint &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>FrictionJointConf</type>
      <name>GetFrictionJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a6803b46a1d73db03f4a26515460c4880</anchor>
      <arglist>(const Joint &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>GearJointConf</type>
      <name>GetGearJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>acfe71a7206e29118d5fc491c30470272</anchor>
      <arglist>(const Joint &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>TypeCast</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>af04a40472f1b7576171f3132305ce7a2</anchor>
      <arglist>(const Joint &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>TypeCast</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>ac91cb4dc6cbce2a3d54364794b1f1887</anchor>
      <arglist>(Joint &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>TypeCast</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a3a5b4ab06d5e078ef5aa2e67b56c5dcc</anchor>
      <arglist>(Joint &amp;&amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalAnchorA</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a93ffc7c5314aab54f2655159b34412d4</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalAnchorB</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>ac5f4ede3e6df197f89bcff22331feb1f</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a9d1898f619ead98398df5bfedae7babe</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a7ed1d7a8f54847819b04cf02a47c658e</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetReferenceAngle</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>ae15b18e1e52dfb2a3a2c093bf5c6cb3e</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetLocalXAxisA</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a03a1ac31d6ec2e9713730ebdd3450000</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetLocalYAxisA</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>abf6c43ab585a2f186d301991199e451d</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetMotorSpeed</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a56bbd2633ddd1ac1a15ac718e9f27a3a</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMotorSpeed</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a7baeaf66a5496fad0d16eb1b28823f47</anchor>
      <arglist>(Joint &amp;object, AngularVelocity value)</arglist>
    </member>
    <member kind="function">
      <type>Force</type>
      <name>GetMaxForce</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a9d3364c84b46f1f28b1af86e05f83e83</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Torque</type>
      <name>GetMaxTorque</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>ae39bc1b87b949e8ddc966335bf526c9e</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Force</type>
      <name>GetMaxMotorForce</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>ac6c441699c9682957b71d30ec512c920</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMaxMotorForce</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>ae9cea0c1cb352dc91e0f77e3b4202d5f</anchor>
      <arglist>(Joint &amp;object, Force value)</arglist>
    </member>
    <member kind="function">
      <type>Torque</type>
      <name>GetMaxMotorTorque</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a8695771767390f89daedfca11bb372fe</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMaxMotorTorque</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>ac17a5d01b67c5e42c42cb0b3c2e01905</anchor>
      <arglist>(Joint &amp;object, Torque value)</arglist>
    </member>
    <member kind="function">
      <type>RotInertia</type>
      <name>GetAngularMass</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>ad342577d3c27c31a3c5c474b3c8d071a</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetRatio</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a819236db84fd9a87d9e0e9bb2103aba4</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetDampingRatio</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a1d5c9f8e6c57fc6620cbfd4042f0aa01</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Frequency</type>
      <name>GetFrequency</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>ab0761255e7ae5a4dc119e7b1a2873ffe</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFrequency</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>af03e3c2d8228e1bf08294102ad6612ce</anchor>
      <arglist>(Joint &amp;object, Frequency value)</arglist>
    </member>
    <member kind="function">
      <type>AngularMomentum</type>
      <name>GetAngularMotorImpulse</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>ad6c9c6f1cffb8b95006e85e59405b468</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetTarget</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>ac72c143ca1f9f831ab8c5075563db207</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTarget</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a32817cd25a220c6c39b8d70a935a1e4c</anchor>
      <arglist>(Joint &amp;object, Length2 value)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetLinearLowerLimit</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a69c77ad98199a4a125134aa9dcad9b27</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetLinearUpperLimit</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a7bd07582bf06db7e38afe9d1050a4fe3</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLinearLimits</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a0c848f01e3faf56ecccc16c8819290ad</anchor>
      <arglist>(Joint &amp;object, Length lower, Length upper)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngularLowerLimit</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>af2a0a13adc8cbef557d0264d5fd8ec78</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngularUpperLimit</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a33690974dec12f9f1186cace72777a8e</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngularLimits</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a054f7637a988ddb54b4dd83ba320a172</anchor>
      <arglist>(Joint &amp;object, Angle lower, Angle upper)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLimitEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a38af51869b6c1d87b93123a4a790f874</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnableLimit</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a8736e94424a5e0f88a983a4d39097e4d</anchor>
      <arglist>(Joint &amp;object, bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMotorEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>ad5b4dd16b94cfe0d1f5ce07a01cc598d</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnableMotor</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a07028eef8277c8ce9f1e6a0004d19638</anchor>
      <arglist>(Joint &amp;object, bool value)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLinearOffset</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a71fafe51e82dce85fea4873cd164b521</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLinearOffset</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a4f4cb2e25eff8eb3d6895c79ca3516f5</anchor>
      <arglist>(Joint &amp;object, Length2 value)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngularOffset</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>aea1405cb3a2b9aa07a391b41b0813505</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngularOffset</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a8a77ffe9ddb532660776e958fa4144d9</anchor>
      <arglist>(Joint &amp;object, Angle value)</arglist>
    </member>
    <member kind="function">
      <type>LimitState</type>
      <name>GetLimitState</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a96e6945a982e424009580a3275d9aa45</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetGroundAnchorA</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>abdb43acaf1ba0f40fc54cdd3e44ef49f</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetGroundAnchorB</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>aa0b16d611763fe6599ab00974b1f9de6</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Momentum</type>
      <name>GetLinearMotorImpulse</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>afb2ee68ebcacf1e5d265df72807867f5</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetLength</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a729a90b55326be7bf460e092eb0ad1d9</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Torque</type>
      <name>GetMotorTorque</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a5771e47bcd401f72f04f8c24c482270b</anchor>
      <arglist>(const Joint &amp;joint, Frequency inv_dt)</arglist>
    </member>
    <member kind="function">
      <type>MotorJointConf</type>
      <name>GetMotorJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a951bef7be11b0c1bfdf1adb67f6169c2</anchor>
      <arglist>(const Joint &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PrismaticJointConf</type>
      <name>GetPrismaticJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a35f6f1e912af7403f2fe74281b0e839f</anchor>
      <arglist>(const Joint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>PulleyJointConf</type>
      <name>GetPulleyJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a7844807c1d0889d5dc5cb28bd1a7ae7d</anchor>
      <arglist>(const Joint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>RevoluteJointConf</type>
      <name>GetRevoluteJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a679b91e916353c9022ebc3cc26f9201c</anchor>
      <arglist>(const Joint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>RopeJointConf</type>
      <name>GetRopeJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>ae54fa708398286ff56a7c57bfe50fd94</anchor>
      <arglist>(const Joint &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TargetJointConf</type>
      <name>GetTargetJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a61f1607657e41b75797c28649e818f8e</anchor>
      <arglist>(const Joint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>WeldJointConf</type>
      <name>GetWeldJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>a068dc3f2013d3029414eb4d0eaf85f13</anchor>
      <arglist>(const Joint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>WheelJointConf</type>
      <name>GetWheelJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1Joint.html</anchorfile>
      <anchor>ab455b1a4e3159193b477bef90fa819b4</anchor>
      <arglist>(const Joint &amp;joint)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::JointBuilder</name>
    <filename>structplayrho_1_1d2_1_1JointBuilder.html</filename>
    <templarg></templarg>
    <base>playrho::d2::JointConf</base>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a52594f21a1440facedc0d0101a271c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a733fc319651379e8afa36146bebe68df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyA</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a30d41149145a1adea49f497e169a8e20</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyB</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a7485835c7c2b8833eee260621680e0b3</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseCollideConnected</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a3df0b0d793cf72b42fdefae06f5f22ef</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JointBuilder&lt; DistanceJointConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1JointBuilder.html</filename>
    <base>playrho::d2::JointConf</base>
    <member kind="typedef">
      <type>DistanceJointConf</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a52594f21a1440facedc0d0101a271c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a733fc319651379e8afa36146bebe68df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyA</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a30d41149145a1adea49f497e169a8e20</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyB</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a7485835c7c2b8833eee260621680e0b3</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseCollideConnected</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a3df0b0d793cf72b42fdefae06f5f22ef</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JointBuilder&lt; FrictionJointConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1JointBuilder.html</filename>
    <base>playrho::d2::JointConf</base>
    <member kind="typedef">
      <type>FrictionJointConf</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a52594f21a1440facedc0d0101a271c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a733fc319651379e8afa36146bebe68df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyA</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a30d41149145a1adea49f497e169a8e20</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyB</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a7485835c7c2b8833eee260621680e0b3</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseCollideConnected</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a3df0b0d793cf72b42fdefae06f5f22ef</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JointBuilder&lt; GearJointConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1JointBuilder.html</filename>
    <base>playrho::d2::JointConf</base>
    <member kind="typedef">
      <type>GearJointConf</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a52594f21a1440facedc0d0101a271c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a733fc319651379e8afa36146bebe68df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyA</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a30d41149145a1adea49f497e169a8e20</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyB</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a7485835c7c2b8833eee260621680e0b3</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseCollideConnected</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a3df0b0d793cf72b42fdefae06f5f22ef</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JointBuilder&lt; MotorJointConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1JointBuilder.html</filename>
    <base>playrho::d2::JointConf</base>
    <member kind="typedef">
      <type>MotorJointConf</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a52594f21a1440facedc0d0101a271c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a733fc319651379e8afa36146bebe68df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyA</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a30d41149145a1adea49f497e169a8e20</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyB</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a7485835c7c2b8833eee260621680e0b3</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseCollideConnected</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a3df0b0d793cf72b42fdefae06f5f22ef</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JointBuilder&lt; PrismaticJointConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1JointBuilder.html</filename>
    <base>playrho::d2::JointConf</base>
    <member kind="typedef">
      <type>PrismaticJointConf</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a52594f21a1440facedc0d0101a271c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a733fc319651379e8afa36146bebe68df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyA</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a30d41149145a1adea49f497e169a8e20</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyB</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a7485835c7c2b8833eee260621680e0b3</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseCollideConnected</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a3df0b0d793cf72b42fdefae06f5f22ef</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JointBuilder&lt; PulleyJointConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1JointBuilder.html</filename>
    <base>playrho::d2::JointConf</base>
    <member kind="typedef">
      <type>PulleyJointConf</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a52594f21a1440facedc0d0101a271c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a733fc319651379e8afa36146bebe68df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyA</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a30d41149145a1adea49f497e169a8e20</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyB</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a7485835c7c2b8833eee260621680e0b3</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseCollideConnected</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a3df0b0d793cf72b42fdefae06f5f22ef</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JointBuilder&lt; RevoluteJointConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1JointBuilder.html</filename>
    <base>playrho::d2::JointConf</base>
    <member kind="typedef">
      <type>RevoluteJointConf</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a52594f21a1440facedc0d0101a271c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a733fc319651379e8afa36146bebe68df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyA</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a30d41149145a1adea49f497e169a8e20</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyB</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a7485835c7c2b8833eee260621680e0b3</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseCollideConnected</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a3df0b0d793cf72b42fdefae06f5f22ef</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JointBuilder&lt; RopeJointConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1JointBuilder.html</filename>
    <base>playrho::d2::JointConf</base>
    <member kind="typedef">
      <type>RopeJointConf</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a52594f21a1440facedc0d0101a271c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a733fc319651379e8afa36146bebe68df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyA</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a30d41149145a1adea49f497e169a8e20</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyB</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a7485835c7c2b8833eee260621680e0b3</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseCollideConnected</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a3df0b0d793cf72b42fdefae06f5f22ef</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JointBuilder&lt; TargetJointConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1JointBuilder.html</filename>
    <base>playrho::d2::JointConf</base>
    <member kind="typedef">
      <type>TargetJointConf</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a52594f21a1440facedc0d0101a271c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a733fc319651379e8afa36146bebe68df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyA</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a30d41149145a1adea49f497e169a8e20</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyB</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a7485835c7c2b8833eee260621680e0b3</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseCollideConnected</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a3df0b0d793cf72b42fdefae06f5f22ef</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JointBuilder&lt; WeldJointConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1JointBuilder.html</filename>
    <base>playrho::d2::JointConf</base>
    <member kind="typedef">
      <type>WeldJointConf</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a52594f21a1440facedc0d0101a271c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a733fc319651379e8afa36146bebe68df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyA</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a30d41149145a1adea49f497e169a8e20</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyB</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a7485835c7c2b8833eee260621680e0b3</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseCollideConnected</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a3df0b0d793cf72b42fdefae06f5f22ef</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JointBuilder&lt; WheelJointConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1JointBuilder.html</filename>
    <base>playrho::d2::JointConf</base>
    <member kind="typedef">
      <type>WheelJointConf</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a52594f21a1440facedc0d0101a271c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a733fc319651379e8afa36146bebe68df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyA</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a30d41149145a1adea49f497e169a8e20</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseBodyB</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a7485835c7c2b8833eee260621680e0b3</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>UseCollideConnected</name>
      <anchorfile>structplayrho_1_1d2_1_1JointBuilder.html</anchorfile>
      <anchor>a3df0b0d793cf72b42fdefae06f5f22ef</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::JointConf</name>
    <filename>structplayrho_1_1d2_1_1JointConf.html</filename>
    <member kind="variable">
      <type>BodyID</type>
      <name>bodyA</name>
      <anchorfile>structplayrho_1_1d2_1_1JointConf.html</anchorfile>
      <anchor>a9363d310f4854dcac38ad3849cbcc58b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BodyID</type>
      <name>bodyB</name>
      <anchorfile>structplayrho_1_1d2_1_1JointConf.html</anchorfile>
      <anchor>aa97b967e6f53d41ea52b1af0631e6ea4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>collideConnected</name>
      <anchorfile>structplayrho_1_1d2_1_1JointConf.html</anchorfile>
      <anchor>aaa7f7c919649416cb14a4abb8deacc33</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>structplayrho_1_1d2_1_1JointConf.html</anchorfile>
      <anchor>aaae24e0e3eadefda8d4145490e1c49ab</anchor>
      <arglist>(JointConf &amp;def, const Joint &amp;joint) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::JointKey</name>
    <filename>classplayrho_1_1d2_1_1JointKey.html</filename>
    <member kind="function">
      <type>constexpr BodyID</type>
      <name>GetBody1</name>
      <anchorfile>classplayrho_1_1d2_1_1JointKey.html</anchorfile>
      <anchor>a5920ff4773c15dc53e66d34a7d7530a1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyID</type>
      <name>GetBody2</name>
      <anchorfile>classplayrho_1_1d2_1_1JointKey.html</anchorfile>
      <anchor>aacd5329c756428785f35d31f43b46c95</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr JointKey</type>
      <name>Get</name>
      <anchorfile>classplayrho_1_1d2_1_1JointKey.html</anchorfile>
      <anchor>ae6c8f8f9e3a4420f423dbae810ff151b</anchor>
      <arglist>(BodyID bodyA, BodyID bodyB) noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>constexpr</type>
      <name>JointKey</name>
      <anchorfile>classplayrho_1_1d2_1_1JointKey.html</anchorfile>
      <anchor>abac02068bd88fb6f5ae9431aded4ebe7</anchor>
      <arglist>(BodyID body1, BodyID body2)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BodyID</type>
      <name>m_body1</name>
      <anchorfile>classplayrho_1_1d2_1_1JointKey.html</anchorfile>
      <anchor>a5952f07b053d86839a183ca8a6c86288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BodyID</type>
      <name>m_body2</name>
      <anchorfile>classplayrho_1_1d2_1_1JointKey.html</anchorfile>
      <anchor>a5c60e8d15f4c4b6d57962d84aac26d05</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsFor</name>
      <anchorfile>classplayrho_1_1d2_1_1JointKey.html</anchorfile>
      <anchor>a5edd5fadb12409e0449a93e23be8dc5b</anchor>
      <arglist>(const JointKey key, BodyID body) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::DynamicTree::LeafData</name>
    <filename>structplayrho_1_1d2_1_1DynamicTree_1_1LeafData.html</filename>
    <member kind="variable">
      <type>BodyID</type>
      <name>body</name>
      <anchorfile>structplayrho_1_1d2_1_1DynamicTree_1_1LeafData.html</anchorfile>
      <anchor>a34371c4109e709c54779f190a7bdfa1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FixtureID</type>
      <name>fixture</name>
      <anchorfile>structplayrho_1_1d2_1_1DynamicTree_1_1LeafData.html</anchorfile>
      <anchor>a98e7589d361ae862e35233f5335791df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ChildCounter</type>
      <name>childIndex</name>
      <anchorfile>structplayrho_1_1d2_1_1DynamicTree_1_1LeafData.html</anchorfile>
      <anchor>a1a1172d98c356ab28405f0bdfe17b94d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1d2_1_1DynamicTree_1_1LeafData.html</anchorfile>
      <anchor>a8f179e80df6ce247f31faeeacb45de79</anchor>
      <arglist>(const DynamicTree::LeafData &amp;lhs, const DynamicTree::LeafData &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1d2_1_1DynamicTree_1_1LeafData.html</anchorfile>
      <anchor>ae1ed888f691a2a52ae7a8a2b09f31652</anchor>
      <arglist>(const DynamicTree::LeafData &amp;lhs, const DynamicTree::LeafData &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::LengthError</name>
    <filename>classplayrho_1_1LengthError.html</filename>
  </compound>
  <compound kind="struct">
    <name>playrho::LengthIndexPair</name>
    <filename>structplayrho_1_1LengthIndexPair.html</filename>
    <member kind="variable">
      <type>Length</type>
      <name>distance</name>
      <anchorfile>structplayrho_1_1LengthIndexPair.html</anchorfile>
      <anchor>ae536eb1885cee2b803e82e8171ab9eb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexPair</type>
      <name>indices</name>
      <anchorfile>structplayrho_1_1LengthIndexPair.html</anchorfile>
      <anchor>ad6a89b69c4a84810b16b3be86f74e6b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::LengthIndices</name>
    <filename>structplayrho_1_1detail_1_1LengthIndices.html</filename>
    <templarg>N</templarg>
    <member kind="variable">
      <type>Length</type>
      <name>distance</name>
      <anchorfile>structplayrho_1_1detail_1_1LengthIndices.html</anchorfile>
      <anchor>ae65542d848e941bbadd0e87514161a72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VertexCounterArray&lt; N &gt;</type>
      <name>indices</name>
      <anchorfile>structplayrho_1_1detail_1_1LengthIndices.html</anchorfile>
      <anchor>ac0afe75cf5e5314e21346c52ca71209e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::less&lt; playrho::d2::JointKey &gt;</name>
    <filename>structstd_1_1less_3_01playrho_1_1d2_1_1JointKey_01_4.html</filename>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator()</name>
      <anchorfile>structstd_1_1less_3_01playrho_1_1d2_1_1JointKey_01_4.html</anchorfile>
      <anchor>a61d752bdc14075271b0920bd71b1b386</anchor>
      <arglist>(const playrho::d2::JointKey &amp;lhs, const playrho::d2::JointKey &amp;rhs) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::less&lt;::playrho::propagate_const&lt; T &gt; &gt;</name>
    <filename>structstd_1_1less_3_1_1playrho_1_1propagate__const_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>::playrho::propagate_const&lt; T &gt;</type>
      <name>first_argument_type</name>
      <anchorfile>structstd_1_1less_3_1_1playrho_1_1propagate__const_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a6505d332ba9004d32f41c9a4c75eaa29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>::playrho::propagate_const&lt; T &gt;</type>
      <name>second_argument_type</name>
      <anchorfile>structstd_1_1less_3_1_1playrho_1_1propagate__const_3_01T_01_4_01_4.html</anchorfile>
      <anchor>acc9019ea164a485520f864af8d1ed8aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structstd_1_1less_3_1_1playrho_1_1propagate__const_3_01T_01_4_01_4.html</anchorfile>
      <anchor>acd8e06415978eb2b7382e3d36031b201</anchor>
      <arglist>(const ::playrho::propagate_const&lt; T &gt; &amp;pc1, const ::playrho::propagate_const&lt; T &gt; &amp;pc2) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::less_equal&lt;::playrho::propagate_const&lt; T &gt; &gt;</name>
    <filename>structstd_1_1less__equal_3_1_1playrho_1_1propagate__const_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>::playrho::propagate_const&lt; T &gt;</type>
      <name>first_argument_type</name>
      <anchorfile>structstd_1_1less__equal_3_1_1playrho_1_1propagate__const_3_01T_01_4_01_4.html</anchorfile>
      <anchor>aebb9d74139bd4cfc091418730ef8b619</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>::playrho::propagate_const&lt; T &gt;</type>
      <name>second_argument_type</name>
      <anchorfile>structstd_1_1less__equal_3_1_1playrho_1_1propagate__const_3_01T_01_4_01_4.html</anchorfile>
      <anchor>abbc13381f2315005d438d7437ec5ec08</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structstd_1_1less__equal_3_1_1playrho_1_1propagate__const_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a9485af953fb9a96dafdb836fff53e7e6</anchor>
      <arglist>(const ::playrho::propagate_const&lt; T &gt; &amp;pc1, const ::playrho::propagate_const&lt; T &gt; &amp;pc2) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::LexicographicalGreater</name>
    <filename>structplayrho_1_1LexicographicalGreater.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator()</name>
      <anchorfile>structplayrho_1_1LexicographicalGreater.html</anchorfile>
      <anchor>ac790375bb1a9eea06b81487d672a67c2</anchor>
      <arglist>(const T &amp;lhs, const T &amp;rhs) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::LexicographicalGreaterEqual</name>
    <filename>structplayrho_1_1LexicographicalGreaterEqual.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator()</name>
      <anchorfile>structplayrho_1_1LexicographicalGreaterEqual.html</anchorfile>
      <anchor>a6227678953085394aa7480fec8977542</anchor>
      <arglist>(const T &amp;lhs, const T &amp;rhs) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::LexicographicalLess</name>
    <filename>structplayrho_1_1LexicographicalLess.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator()</name>
      <anchorfile>structplayrho_1_1LexicographicalLess.html</anchorfile>
      <anchor>ab4454a1648e777f056ce57450746c7a9</anchor>
      <arglist>(const T &amp;lhs, const T &amp;rhs) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::LexicographicalLessEqual</name>
    <filename>structplayrho_1_1LexicographicalLessEqual.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator()</name>
      <anchorfile>structplayrho_1_1LexicographicalLessEqual.html</anchorfile>
      <anchor>a6c13e9bc94c64eeef2925b870caf7863</anchor>
      <arglist>(const T &amp;lhs, const T &amp;rhs) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::Manifold</name>
    <filename>classplayrho_1_1d2_1_1Manifold.html</filename>
    <class kind="struct">playrho::d2::Manifold::Conf</class>
    <class kind="struct">playrho::d2::Manifold::Point</class>
    <class kind="struct">playrho::d2::Manifold::PointArray</class>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a7ff238fab84e4d9dc478205840bd2b4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_unset</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a7ff238fab84e4d9dc478205840bd2b4aab0b6bab8f299c068c058ad66d1ada97b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_circles</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a7ff238fab84e4d9dc478205840bd2b4aa404a7aad615dac34bb439a4419bb603d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_faceA</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a7ff238fab84e4d9dc478205840bd2b4aa8553bfcf72ca701046534f9db05a698a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_faceB</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a7ff238fab84e4d9dc478205840bd2b4aa0aab1f9c4679f8d2ff978e5fe28a2e5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(MaxManifoldPoints)&gt;::type</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a05c347426e71c41c3b5cff2ff42fa864</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ContactFeature::Index</type>
      <name>CfIndex</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>abfa05cdcf8c1ea283a03ad70e9ae0543</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ContactFeature::Type</type>
      <name>CfType</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>acf4b47d8ef7fa8d2267b055934cec2d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_unset</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a7ff238fab84e4d9dc478205840bd2b4aab0b6bab8f299c068c058ad66d1ada97b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_circles</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a7ff238fab84e4d9dc478205840bd2b4aa404a7aad615dac34bb439a4419bb603d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_faceA</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a7ff238fab84e4d9dc478205840bd2b4aa8553bfcf72ca701046534f9db05a698a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_faceB</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a7ff238fab84e4d9dc478205840bd2b4aa0aab1f9c4679f8d2ff978e5fe28a2e5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Manifold</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a27050de13d19927176e1ab48f8218ecd</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Manifold</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a5cea02945f6e8c263c39c1679a96b7f4</anchor>
      <arglist>(const Manifold &amp;copy)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr Type</type>
      <name>GetType</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a39775ff69570500f48db1f298c24dee1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>GetPointCount</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a7a9bbf036b63bcd70d6758a0ac571314</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ContactFeature</type>
      <name>GetContactFeature</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>ab49c80c7a89c0e139dbd11689152d79b</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetContactImpulses</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>aff93d957a2f35dab912e770093de9ede</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetContactImpulses</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>af270f6aebe84d08ff5de8eea1f2ccbe4</anchor>
      <arglist>(size_type index, Momentum2 value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Point &amp;</type>
      <name>GetPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>afc69f25e15e201ca7db3fd75e9c04ac3</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPointImpulses</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a477022edb23b761024a659e533098047</anchor>
      <arglist>(size_type index, Momentum n, Momentum t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a1399ecf9d6951ca8b72dd34dc66d1e75</anchor>
      <arglist>(const Point &amp;mp) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>ae52dee2b3919b2ef87c65d281ec12ccc</anchor>
      <arglist>(CfType type, CfIndex index, Length2 point) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec</type>
      <name>GetLocalNormal</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a75f5e3327c38c904dd6f52d3420e1378</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length2</type>
      <name>GetLocalPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>aad25a11b72fa21c6dc6e36743baddc19</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length2</type>
      <name>GetOpposingPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a7cb046e3526a6dff59a1b246cf87fba0</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Manifold</type>
      <name>GetForCircles</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>ab19eafd2d1d5c978707fcfcd043a5b16</anchor>
      <arglist>(Length2 vA, CfIndex iA, Length2 vB, CfIndex iB) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Manifold</type>
      <name>GetForFaceA</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>ae36eca50e09df75844bc8b0f5b1571c8</anchor>
      <arglist>(UnitVec normalA, Length2 faceA) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Manifold</type>
      <name>GetForFaceA</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>ae152f8218cc779409748741948cee42c</anchor>
      <arglist>(UnitVec ln, Length2 lp, const Point &amp;mp1) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Manifold</type>
      <name>GetForFaceA</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a66a2eb957b8c145582d1bbb746f0ba58</anchor>
      <arglist>(UnitVec ln, Length2 lp, const Point &amp;mp1, const Point &amp;mp2) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Manifold</type>
      <name>GetForFaceB</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a5b6211aa32f902554f00e03a92b55b7f</anchor>
      <arglist>(UnitVec ln, Length2 lp) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Manifold</type>
      <name>GetForFaceB</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>afe0f58542ec85b3157ecfc8eb116aa84</anchor>
      <arglist>(UnitVec ln, Length2 lp, const Point &amp;mp1) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Manifold</type>
      <name>GetForFaceB</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a085b3c271852fd58f09f66af00196360</anchor>
      <arglist>(UnitVec ln, Length2 lp, const Point &amp;mp1, const Point &amp;mp2) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Manifold</type>
      <name>GetForFaceA</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a638197fe01a1a3a66f8d824cfb6007c5</anchor>
      <arglist>(UnitVec na, CfIndex ia, Length2 pa) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Manifold</type>
      <name>GetForFaceB</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a655c5947eb274f1bde7d272cf6d00a4d</anchor>
      <arglist>(UnitVec nb, CfIndex ib, Length2 pb) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Manifold</type>
      <name>GetForFaceA</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>ad7dc371a98115275e9e0960ce15d4be9</anchor>
      <arglist>(UnitVec na, CfIndex ia, Length2 pa, CfType tb0, CfIndex ib0, Length2 pb0) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Manifold</type>
      <name>GetForFaceB</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a282ec25d1d0f99e4ebf6f2cc91e64816</anchor>
      <arglist>(UnitVec nb, CfIndex ib, Length2 pb, CfType ta0, CfIndex ia0, Length2 pa0) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Manifold</type>
      <name>GetForFaceA</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a6c5c998571725b32efb5bd954055c658</anchor>
      <arglist>(UnitVec na, CfIndex ia, Length2 pa, CfType tb0, CfIndex ib0, Length2 pb0, CfType tb1, CfIndex ib1, Length2 pb1) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Manifold</type>
      <name>GetForFaceB</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a3895a7108d8b9bc5d678b5cf2336181a</anchor>
      <arglist>(UnitVec nb, CfIndex ib, Length2 pb, CfType ta0, CfIndex ia0, Length2 pa0, CfType ta1, CfIndex ia1, Length2 pa1) noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>constexpr</type>
      <name>Manifold</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a35b609b77c7ee190f91ca012090c6627</anchor>
      <arglist>(Type t, UnitVec ln, Length2 lp, size_type n, const PointArray &amp;mpa) noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Type</type>
      <name>m_type</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>aa9019fcdda5b78bdbf64cad847065055</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_type</type>
      <name>m_pointCount</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>ac4c37612aca3c09b5b29a5bb32938bde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>UnitVec</type>
      <name>m_localNormal</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a1f0b10624eb30c69fbb13133d123c2a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Length2</type>
      <name>m_localPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>abe18d8326aceefbd87404342717688e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PointArray</type>
      <name>m_points</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a5bb143084510beef7d577bf987ba7f9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a18bbc8e12d21c4ae260d0bb333e0eed5</anchor>
      <arglist>(const Manifold &amp;lhs, const Manifold &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>ab7261adb2e0ccb0b3db58fc194d50614</anchor>
      <arglist>(const Manifold &amp;lhs, const Manifold &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Manifold</type>
      <name>CollideShapes</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a05380ac6609b4f7b27e4c1ae9e9e7535</anchor>
      <arglist>(const DistanceProxy &amp;shapeA, const Transformation &amp;xfA, const DistanceProxy &amp;shapeB, const Transformation &amp;xfB, Manifold::Conf conf=GetDefaultManifoldConf())</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a2a68b2ee4602e8bcf4c9376e69ffdcd7</anchor>
      <arglist>(const d2::Manifold &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>WorldManifold</type>
      <name>GetWorldManifold</name>
      <anchorfile>classplayrho_1_1d2_1_1Manifold.html</anchorfile>
      <anchor>a54c453e054f0b9692dc3300e5861f42c</anchor>
      <arglist>(const Manifold &amp;manifold, Transformation xfA, Length radiusA, Transformation xfB, Length radiusB)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::MassData</name>
    <filename>structplayrho_1_1detail_1_1MassData.html</filename>
    <templarg>N</templarg>
    <member kind="variable">
      <type>Vector&lt; Length, N &gt;</type>
      <name>center</name>
      <anchorfile>structplayrho_1_1detail_1_1MassData.html</anchorfile>
      <anchor>a95c432524989b39cbb1574548f53bf61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Mass &gt;</type>
      <name>mass</name>
      <anchorfile>structplayrho_1_1detail_1_1MassData.html</anchorfile>
      <anchor>ad30925834c09f1179332797ce4ce4f47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; RotInertia &gt;</type>
      <name>I</name>
      <anchorfile>structplayrho_1_1detail_1_1MassData.html</anchorfile>
      <anchor>abc772e841838fddea807268d27dddb55</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1detail_1_1MassData.html</anchorfile>
      <anchor>af4a0970bf5a0f7b37eeb21d6301a75e2</anchor>
      <arglist>(MassData&lt; N &gt; lhs, MassData&lt; N &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1detail_1_1MassData.html</anchorfile>
      <anchor>a64050b6fc27058d98f7e504d4a3eacab</anchor>
      <arglist>(MassData&lt; N &gt; lhs, MassData&lt; N &gt; rhs)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::Shape::Model</name>
    <filename>structplayrho_1_1d2_1_1Shape_1_1Model.html</filename>
    <templarg></templarg>
    <base>playrho::d2::Shape::Concept</base>
    <member kind="typedef">
      <type>T</type>
      <name>data_type</name>
      <anchorfile>structplayrho_1_1d2_1_1Shape_1_1Model.html</anchorfile>
      <anchor>a02d91452eb5cb1b556aff30c934aceea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Model</name>
      <anchorfile>structplayrho_1_1d2_1_1Shape_1_1Model.html</anchorfile>
      <anchor>ae8b7e23f17e4e19eefe90eed03068519</anchor>
      <arglist>(T arg)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Concept &gt;</type>
      <name>Clone_</name>
      <anchorfile>structplayrho_1_1d2_1_1Shape_1_1Model.html</anchorfile>
      <anchor>adced4b89c79f938286ece46243937d30</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetChildCount_</name>
      <anchorfile>structplayrho_1_1d2_1_1Shape_1_1Model.html</anchorfile>
      <anchor>a44e7fc4b6dd5660bcfb11414f288c94f</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>DistanceProxy</type>
      <name>GetChild_</name>
      <anchorfile>structplayrho_1_1d2_1_1Shape_1_1Model.html</anchorfile>
      <anchor>a8dfe5bc2e335cd35c9ea5f5d32dfcc9c</anchor>
      <arglist>(ChildCounter index) const override</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData_</name>
      <anchorfile>structplayrho_1_1d2_1_1Shape_1_1Model.html</anchorfile>
      <anchor>a37d395a1bce1c10d82aeef07d94c4273</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius_</name>
      <anchorfile>structplayrho_1_1d2_1_1Shape_1_1Model.html</anchorfile>
      <anchor>a005f9550517d42ae20fa72b90e69f200</anchor>
      <arglist>(ChildCounter idx) const override</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; AreaDensity &gt;</type>
      <name>GetDensity_</name>
      <anchorfile>structplayrho_1_1d2_1_1Shape_1_1Model.html</anchorfile>
      <anchor>aed2ff471344e2b88b54f5ac98083fcd8</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetFriction_</name>
      <anchorfile>structplayrho_1_1d2_1_1Shape_1_1Model.html</anchorfile>
      <anchor>a74dba1ac19345274dd2bbc8a2052fba5</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetRestitution_</name>
      <anchorfile>structplayrho_1_1d2_1_1Shape_1_1Model.html</anchorfile>
      <anchor>a0294e853ae87bae114509d48e0fda45f</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transform_</name>
      <anchorfile>structplayrho_1_1d2_1_1Shape_1_1Model.html</anchorfile>
      <anchor>a1c9c6a6d9dcb8d314f36cdd6e7216d59</anchor>
      <arglist>(const Mat22 &amp;m) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEqual_</name>
      <anchorfile>structplayrho_1_1d2_1_1Shape_1_1Model.html</anchorfile>
      <anchor>a87f7b8779ca32813f32864187ac4bdd0</anchor>
      <arglist>(const Concept &amp;other) const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>TypeID</type>
      <name>GetType_</name>
      <anchorfile>structplayrho_1_1d2_1_1Shape_1_1Model.html</anchorfile>
      <anchor>aa907f27217583221569c5faf0516a983</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>GetData_</name>
      <anchorfile>structplayrho_1_1d2_1_1Shape_1_1Model.html</anchorfile>
      <anchor>acdb83b02edddc59a919e7231fe6818b4</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="variable">
      <type>data_type</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1d2_1_1Shape_1_1Model.html</anchorfile>
      <anchor>a2d9a4367538834b751884590e97c21c3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::Joint::Model</name>
    <filename>structplayrho_1_1d2_1_1Joint_1_1Model.html</filename>
    <templarg></templarg>
    <base>playrho::d2::Joint::Concept</base>
    <member kind="typedef">
      <type>T</type>
      <name>data_type</name>
      <anchorfile>structplayrho_1_1d2_1_1Joint_1_1Model.html</anchorfile>
      <anchor>a692d8bc2728d6428bb47ce1c5b65ef9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Model</name>
      <anchorfile>structplayrho_1_1d2_1_1Joint_1_1Model.html</anchorfile>
      <anchor>a5e373f0d7b3a6ca09f701acd2772549e</anchor>
      <arglist>(const T &amp;arg) noexcept(std::is_nothrow_copy_constructible_v&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Model</name>
      <anchorfile>structplayrho_1_1d2_1_1Joint_1_1Model.html</anchorfile>
      <anchor>ac4a57239e420e8d147d3699285ab2a07</anchor>
      <arglist>(T &amp;&amp;arg) noexcept(std::is_nothrow_move_constructible_v&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Concept &gt;</type>
      <name>Clone_</name>
      <anchorfile>structplayrho_1_1d2_1_1Joint_1_1Model.html</anchorfile>
      <anchor>a12a0f9bf6a7c2b83b00dce6a1c2476ae</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>TypeID</type>
      <name>GetType_</name>
      <anchorfile>structplayrho_1_1d2_1_1Joint_1_1Model.html</anchorfile>
      <anchor>a2e625884f5d79423a66bdde8d92e6a22</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>GetData_</name>
      <anchorfile>structplayrho_1_1d2_1_1Joint_1_1Model.html</anchorfile>
      <anchor>a548dfd242a7d9bb051a0f18b5df7d973</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>GetData_</name>
      <anchorfile>structplayrho_1_1d2_1_1Joint_1_1Model.html</anchorfile>
      <anchor>aa86e32ce29035b1bd241f52b5be968a8</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEqual_</name>
      <anchorfile>structplayrho_1_1d2_1_1Joint_1_1Model.html</anchorfile>
      <anchor>ab9ef9905ed72f66e42b9d4f6d0be40fc</anchor>
      <arglist>(const Concept &amp;other) const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>GetBodyA_</name>
      <anchorfile>structplayrho_1_1d2_1_1Joint_1_1Model.html</anchorfile>
      <anchor>a54602046dcada5d0fcb1d38f7f71ece1</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>GetBodyB_</name>
      <anchorfile>structplayrho_1_1d2_1_1Joint_1_1Model.html</anchorfile>
      <anchor>a0a40d146cc208ef04cf5d345dceddb09</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetCollideConnected_</name>
      <anchorfile>structplayrho_1_1d2_1_1Joint_1_1Model.html</anchorfile>
      <anchor>a89c669a5776db8ecfd88bd8e54885d92</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ShiftOrigin_</name>
      <anchorfile>structplayrho_1_1d2_1_1Joint_1_1Model.html</anchorfile>
      <anchor>afc132f0ed4b9742e35ff784d60a2bf82</anchor>
      <arglist>(Length2 value) noexcept override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity_</name>
      <anchorfile>structplayrho_1_1d2_1_1Joint_1_1Model.html</anchorfile>
      <anchor>afc05c90150269264477f915b28698482</anchor>
      <arglist>(BodyConstraintsMap &amp;bodies, const playrho::StepConf &amp;step, const ConstraintSolverConf &amp;conf) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity_</name>
      <anchorfile>structplayrho_1_1d2_1_1Joint_1_1Model.html</anchorfile>
      <anchor>ac2dacee0484554a039ffadaa85213c72</anchor>
      <arglist>(BodyConstraintsMap &amp;bodies, const playrho::StepConf &amp;step) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition_</name>
      <anchorfile>structplayrho_1_1d2_1_1Joint_1_1Model.html</anchorfile>
      <anchor>a0161d4a1c8ddb22dff00f0d349b6fa9d</anchor>
      <arglist>(BodyConstraintsMap &amp;bodies, const ConstraintSolverConf &amp;conf) const override</arglist>
    </member>
    <member kind="variable">
      <type>data_type</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1d2_1_1Joint_1_1Model.html</anchorfile>
      <anchor>a8367dc448e5ab4bc460e640f97e09945</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::MotorJointConf</name>
    <filename>structplayrho_1_1d2_1_1MotorJointConf.html</filename>
    <base>JointBuilder&lt; MotorJointConf &gt;</base>
    <member kind="typedef">
      <type>JointBuilder&lt; MotorJointConf &gt;</type>
      <name>super</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a9905449d772cb2f70edb5a7acea4b8e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>MotorJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>ae537300150f05493b163a0da29a9b1aa</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MotorJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>aeb1f8123857d54a0f44770fd9dbbc51a</anchor>
      <arglist>(BodyID bA, BodyID bB, Length2 lo=Length2{}, Angle ao=0_deg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseLinearOffset</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a2ef1a980b29a4f28657085ac5d85e24c</anchor>
      <arglist>(Length2 v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseAngularOffset</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>aa035716c032de08b3ec89db7d4e21a54</anchor>
      <arglist>(Angle v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseMaxForce</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>aa701b1b478a7102f74c8e3ea09dc2125</anchor>
      <arglist>(NonNegative&lt; Force &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseMaxTorque</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>adefaf8d5f0a45fa0a3ffc2ece20101c0</anchor>
      <arglist>(NonNegative&lt; Torque &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseCorrectionFactor</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a0d13e109e0d61ee76169dd3fbda75725</anchor>
      <arglist>(Real v) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>linearOffset</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a7f1eb7d88f969a24a4c3f33f4bfa9e04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Angle</type>
      <name>angularOffset</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>aece1946de51fb38a8720af6b22c8abe0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum2</type>
      <name>linearImpulse</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a455d814b008d6a30c6f14c7bd25f9801</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AngularMomentum</type>
      <name>angularImpulse</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a12c448ac1def55001f7531ebaab6d4c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Force &gt;</type>
      <name>maxForce</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>ae72dd67a4e667a4543e9b58bc5279a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Torque &gt;</type>
      <name>maxTorque</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>ac9a7dcf98f31d2247acbb35332520396</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>correctionFactor</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a32ca8e0a69670cf39621f908965d1a01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>rA</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>ab23486d7f6ef04ced0f78c6e1fe8f81f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>rB</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a611619fe88143bb25227d4939349865f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>linearError</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>ae0605aebaae32332fd11633606328568</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Angle</type>
      <name>angularError</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>ae8f686c8a36e9e90d221bede7929a885</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Mass22</type>
      <name>linearMass</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a8bb05be5e15cc16f82afb04b17cdbbb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RotInertia</type>
      <name>angularMass</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a295c8c1e683042afd71a9eeab26604f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLocalAnchorA</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a6bff2eef6c3ab00e21a7a497dfa69b02</anchor>
      <arglist>(const MotorJointConf &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLocalAnchorB</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>aff7518dbaba68503c8534f3aa1bc1baf</anchor>
      <arglist>(const MotorJointConf &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>ShiftOrigin</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a859dc8dd3001dc7aa23033f6de17bf97</anchor>
      <arglist>(MotorJointConf &amp;, Length2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>ad18731b5658f790c5810919e63661ca0</anchor>
      <arglist>(MotorJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>adf8336f65644600ba5c8c8aff756409e</anchor>
      <arglist>(MotorJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>ac8c6b476d51a5fcd897ca16754a841ba</anchor>
      <arglist>(const MotorJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetMaxForce</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a2316866330d122410cad54477dea24c9</anchor>
      <arglist>(const MotorJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetMaxForce</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a309119086874940563a7e3a4b91c9cc2</anchor>
      <arglist>(MotorJointConf &amp;object, NonNegative&lt; Force &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetMaxTorque</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>addea3c1c41374755038085922785f96d</anchor>
      <arglist>(const MotorJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetMaxTorque</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a740454a9bdb11a84bfc34bad37908030</anchor>
      <arglist>(MotorJointConf &amp;object, NonNegative&lt; Torque &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLinearError</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>ab1e80b7fb2a127c7bef5388890d3ee0e</anchor>
      <arglist>(const MotorJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetAngularError</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>ac3f517e88d5b384e337d3322881c5886</anchor>
      <arglist>(const MotorJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLinearOffset</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a53e7afd4eb1bc197703f3d68c4ffd934</anchor>
      <arglist>(const MotorJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetLinearOffset</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a442a2ab7e9ce36a0ea28941056bc8d02</anchor>
      <arglist>(MotorJointConf &amp;object, Length2 value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetAngularOffset</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a75db6ad844d4be5361364e49907b24f8</anchor>
      <arglist>(const MotorJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetAngularOffset</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>ab185fa3719432e9026a44e602279f8d1</anchor>
      <arglist>(MotorJointConf &amp;object, Angle value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetCorrectionFactor</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>aa5e4489f264227f6c20010c1838248db</anchor>
      <arglist>(const MotorJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetCorrectionFactor</name>
      <anchorfile>structplayrho_1_1d2_1_1MotorJointConf.html</anchorfile>
      <anchor>a5f373e05ffdf359e2f995aec4e5489c0</anchor>
      <arglist>(MotorJointConf &amp;object, Real value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::MovementConf</name>
    <filename>structplayrho_1_1MovementConf.html</filename>
    <member kind="variable">
      <type>Length</type>
      <name>maxTranslation</name>
      <anchorfile>structplayrho_1_1MovementConf.html</anchorfile>
      <anchor>aa685b405a15189fe13d7982846f83dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Angle</type>
      <name>maxRotation</name>
      <anchorfile>structplayrho_1_1MovementConf.html</anchorfile>
      <anchor>a2021570112ff2beb19a7ce9ea96d53b7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::MultiShapeConf</name>
    <filename>structplayrho_1_1d2_1_1MultiShapeConf.html</filename>
    <base>ShapeBuilder&lt; MultiShapeConf &gt;</base>
    <member kind="function">
      <type>MultiShapeConf &amp;</type>
      <name>AddConvexHull</name>
      <anchorfile>structplayrho_1_1d2_1_1MultiShapeConf.html</anchorfile>
      <anchor>a8129502b37cd4a1e82fc7f82fb3e3c5e</anchor>
      <arglist>(const VertexSet &amp;pointSet, NonNegative&lt; Length &gt; vertexRadius=GetDefaultVertexRadius()) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MultiShapeConf &amp;</type>
      <name>Transform</name>
      <anchorfile>structplayrho_1_1d2_1_1MultiShapeConf.html</anchorfile>
      <anchor>a0182d08b91c3a8c3e2d7096cdc016db2</anchor>
      <arglist>(const Mat22 &amp;m) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr NonNegative&lt; Length &gt;</type>
      <name>GetDefaultVertexRadius</name>
      <anchorfile>structplayrho_1_1d2_1_1MultiShapeConf.html</anchorfile>
      <anchor>a3cb8f8d56c034235091425bdf4fb7288</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MultiShapeConf</type>
      <name>GetDefaultConf</name>
      <anchorfile>structplayrho_1_1d2_1_1MultiShapeConf.html</anchorfile>
      <anchor>afb36a83892bfd4c7f2afe628ccad09f4</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; ConvexHull &gt;</type>
      <name>children</name>
      <anchorfile>structplayrho_1_1d2_1_1MultiShapeConf.html</anchorfile>
      <anchor>a8ce9bba8e17bdb910b906fdb9220e124</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::NegativeChecker</name>
    <filename>structplayrho_1_1NegativeChecker.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::invalid_argument</type>
      <name>exception_type</name>
      <anchorfile>structplayrho_1_1NegativeChecker.html</anchorfile>
      <anchor>a255537d4aa00c7e594e52f1c94b61799</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structplayrho_1_1NegativeChecker.html</anchorfile>
      <anchor>a25ad5976acbc5e7396df8cd08a561f28</anchor>
      <arglist>(const T &amp;v) -&gt; decltype(!(v&lt; static_cast&lt; T &gt;(0)), T</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::NonNegativeChecker</name>
    <filename>structplayrho_1_1NonNegativeChecker.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::invalid_argument</type>
      <name>exception_type</name>
      <anchorfile>structplayrho_1_1NonNegativeChecker.html</anchorfile>
      <anchor>aaec1409fa98f031ceb9497f2b0eb4285</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structplayrho_1_1NonNegativeChecker.html</anchorfile>
      <anchor>a3a516ab7ed75c6fea1456eb1d903ceb8</anchor>
      <arglist>() noexcept -&gt; decltype(static_cast&lt; T &gt;(0))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structplayrho_1_1NonNegativeChecker.html</anchorfile>
      <anchor>a48dc224b83948313823845478a100c45</anchor>
      <arglist>(const T &amp;v) -&gt; decltype(!(v &gt;=static_cast&lt; T &gt;(0)), T</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::NonPositiveChecker</name>
    <filename>structplayrho_1_1NonPositiveChecker.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::invalid_argument</type>
      <name>exception_type</name>
      <anchorfile>structplayrho_1_1NonPositiveChecker.html</anchorfile>
      <anchor>a07046e0e81c760ef5f5553977fe02a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structplayrho_1_1NonPositiveChecker.html</anchorfile>
      <anchor>abb753b1143dcbf9c329617b807ee218b</anchor>
      <arglist>() noexcept -&gt; decltype(static_cast&lt; T &gt;(0))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structplayrho_1_1NonPositiveChecker.html</anchorfile>
      <anchor>a71421efd8e673934746576a02551f499</anchor>
      <arglist>(const T &amp;v) -&gt; decltype(!(v&lt;=static_cast&lt; T &gt;(0)), T</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::NonZeroChecker</name>
    <filename>structplayrho_1_1NonZeroChecker.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::invalid_argument</type>
      <name>exception_type</name>
      <anchorfile>structplayrho_1_1NonZeroChecker.html</anchorfile>
      <anchor>acb2f16429fc505948b5ebc6bc030265d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structplayrho_1_1NonZeroChecker.html</anchorfile>
      <anchor>a92eea3a0a28802c29000e0f642ec7ac1</anchor>
      <arglist>(const T &amp;v) -&gt; decltype(!(v !=static_cast&lt; T &gt;(0)), T</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::NoOpChecker</name>
    <filename>structplayrho_1_1NoOpChecker.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structplayrho_1_1NoOpChecker.html</anchorfile>
      <anchor>a1b553920e30aec03fa96ed53a7c72e03</anchor>
      <arglist>() noexcept -&gt; decltype(T())</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structplayrho_1_1NoOpChecker.html</anchorfile>
      <anchor>a697a97ad27962527a8b0dcedb915e5c1</anchor>
      <arglist>(T v) noexcept -&gt; decltype(T(v))</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::not_equal_to&lt;::playrho::propagate_const&lt; T &gt; &gt;</name>
    <filename>structstd_1_1not__equal__to_3_1_1playrho_1_1propagate__const_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>::playrho::propagate_const&lt; T &gt;</type>
      <name>first_argument_type</name>
      <anchorfile>structstd_1_1not__equal__to_3_1_1playrho_1_1propagate__const_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a56f2926668731ec3e84fefc69c0ea4c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>::playrho::propagate_const&lt; T &gt;</type>
      <name>second_argument_type</name>
      <anchorfile>structstd_1_1not__equal__to_3_1_1playrho_1_1propagate__const_3_01T_01_4_01_4.html</anchorfile>
      <anchor>af2a4b5e29a01f56dd041bd4cc74039be</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structstd_1_1not__equal__to_3_1_1playrho_1_1propagate__const_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a3e01748b7b7baed768d30093b8a5082e</anchor>
      <arglist>(const ::playrho::propagate_const&lt; T &gt; &amp;pc1, const ::playrho::propagate_const&lt; T &gt; &amp;pc2) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::numeric_limits&lt; playrho::Fixed&lt; BT, FB &gt; &gt;</name>
    <filename>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>FB</templarg>
    <member kind="function" static="yes">
      <type>static constexpr playrho::Fixed&lt; BT, FB &gt;</type>
      <name>min</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>a7f2c95cb0320ae19586edf39ed8ab87a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr playrho::Fixed&lt; BT, FB &gt;</type>
      <name>max</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>ae14b63f9ce3f3cd64325017447d27c43</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr playrho::Fixed&lt; BT, FB &gt;</type>
      <name>lowest</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>a3d12a7d0a2975e2d7d7eb665ea93d8f6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr playrho::Fixed32</type>
      <name>epsilon</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>a054d190e6020f2cf8fdd1427c79a22ab</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr playrho::Fixed32</type>
      <name>round_error</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>a1bbb81b286f43c361e2c35b4ef69723f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr playrho::Fixed&lt; BT, FB &gt;</type>
      <name>infinity</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>af53e2f42daa7f296d1cc39a6341c0451</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr playrho::Fixed&lt; BT, FB &gt;</type>
      <name>quiet_NaN</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>a0f02dffbad038547d4b6f53f54a99651</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr playrho::Fixed&lt; BT, FB &gt;</type>
      <name>signaling_NaN</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>a4df0164e7b0757f76b4ace5a6904c0df</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr playrho::Fixed&lt; BT, FB &gt;</type>
      <name>denorm_min</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>a3252d781193f167f3fd562286a357d0c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>is_specialized</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>a06b0a031da348a77d90cf0aa75281486</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>digits</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>ae5fc4507c2566322d18d435fe37240bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>digits10</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>a5141907c55f43c158a0952e0fe54924a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>max_digits10</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>a7a7067198a9491520c8774121579ce86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>is_signed</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>a8fc3f40324f69d2baadf9227a063af49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>is_integer</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>a3a9606e5dceaf608b58b3ecd97eff6f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>is_exact</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>a22f748477ab8dd15e034e7fa042d8bb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>radix</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>a6bc0d5ddde5bd87d57c92d7b564c9c73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>min_exponent</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>a158785a472df322d1f206eb6c81a7abb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>min_exponent10</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>ac9b851846f6b610bbd844197bc70207d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>max_exponent</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>aaf5c7366be26bc0ae7a0d067242a5a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>max_exponent10</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>aae85ce79ec1fcbf26de004feeea25c20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>has_infinity</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>a0112163bf4acba951544b1284f476b32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>has_quiet_NaN</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>adace361d1eaa4ba5a64a3fbd7b596dd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>has_signaling_NaN</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>ab848c0ad3a1509d1bfd3ce1150a2c93d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr float_denorm_style</type>
      <name>has_denorm</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>aabd50003ad5c3a08aa73675095632de7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>has_denorm_loss</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>a7456dec892e85ee6d4718f67224342bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>is_iec559</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>a18899472bdcc4341d492277834754244</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>is_bounded</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>a8e94c3e8d13a233c34004ee5ada32167</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>is_modulo</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>a7caf9b64fe2b17c613683195e5835e6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>traps</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>af43511f39b6a9c6666c3dd67262ba835</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>tinyness_before</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>a65743d17befce2a3deefc2624045ead0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr float_round_style</type>
      <name>round_style</name>
      <anchorfile>classstd_1_1numeric__limits_3_01playrho_1_1Fixed_3_01BT_00_01FB_01_4_01_4.html</anchorfile>
      <anchor>a60f373787d57addea18463ca7856401d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::Manifold::Point</name>
    <filename>structplayrho_1_1d2_1_1Manifold_1_1Point.html</filename>
    <member kind="variable">
      <type>Length2</type>
      <name>localPoint</name>
      <anchorfile>structplayrho_1_1d2_1_1Manifold_1_1Point.html</anchorfile>
      <anchor>a5348993dcfb618cbd8b0fc90dceee8b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ContactFeature</type>
      <name>contactFeature</name>
      <anchorfile>structplayrho_1_1d2_1_1Manifold_1_1Point.html</anchorfile>
      <anchor>a7167ff28b5f0904bec2d23f896725f73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum</type>
      <name>normalImpulse</name>
      <anchorfile>structplayrho_1_1d2_1_1Manifold_1_1Point.html</anchorfile>
      <anchor>a30a0186139d64d835043d665cd832463</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum</type>
      <name>tangentImpulse</name>
      <anchorfile>structplayrho_1_1d2_1_1Manifold_1_1Point.html</anchorfile>
      <anchor>a8cb59ad4a08b8c95d54bb940eff1356f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1d2_1_1Manifold_1_1Point.html</anchorfile>
      <anchor>a30d3152820c6a35af37c2139d316d1da</anchor>
      <arglist>(const Manifold::Point &amp;lhs, const Manifold::Point &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1d2_1_1Manifold_1_1Point.html</anchorfile>
      <anchor>a72a1cdedaec111016d79f96aa4970cef</anchor>
      <arglist>(const Manifold::Point &amp;lhs, const Manifold::Point &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::VelocityConstraint::Point</name>
    <filename>structplayrho_1_1d2_1_1VelocityConstraint_1_1Point.html</filename>
    <member kind="variable">
      <type>Length2</type>
      <name>relA</name>
      <anchorfile>structplayrho_1_1d2_1_1VelocityConstraint_1_1Point.html</anchorfile>
      <anchor>afea6779d37d712bc631486e169375b86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>relB</name>
      <anchorfile>structplayrho_1_1d2_1_1VelocityConstraint_1_1Point.html</anchorfile>
      <anchor>ad8c383e7af738ac5cbfb1ece23f929bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum</type>
      <name>normalImpulse</name>
      <anchorfile>structplayrho_1_1d2_1_1VelocityConstraint_1_1Point.html</anchorfile>
      <anchor>a07214867dc5dbd761c7566e727d47165</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum</type>
      <name>tangentImpulse</name>
      <anchorfile>structplayrho_1_1d2_1_1VelocityConstraint_1_1Point.html</anchorfile>
      <anchor>a46981d0d52f8dd1c4e0d343ea0c6b789</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Mass</type>
      <name>normalMass</name>
      <anchorfile>structplayrho_1_1d2_1_1VelocityConstraint_1_1Point.html</anchorfile>
      <anchor>af86742c9f4bc34e8627e1a2e3abd9650</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Mass</type>
      <name>tangentMass</name>
      <anchorfile>structplayrho_1_1d2_1_1VelocityConstraint_1_1Point.html</anchorfile>
      <anchor>a2042c9c49d68f33fb1d14915aee92f3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinearVelocity</type>
      <name>velocityBias</name>
      <anchorfile>structplayrho_1_1d2_1_1VelocityConstraint_1_1Point.html</anchorfile>
      <anchor>a299776dd779c0df434dcf430a9702c75</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::Manifold::PointArray</name>
    <filename>structplayrho_1_1d2_1_1Manifold_1_1PointArray.html</filename>
    <member kind="function">
      <type>constexpr Point &amp;</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1d2_1_1Manifold_1_1PointArray.html</anchorfile>
      <anchor>ad39adbf78674ea515f623f5d640ce8f9</anchor>
      <arglist>(std::size_t i)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const Point &amp;</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1d2_1_1Manifold_1_1PointArray.html</anchorfile>
      <anchor>a6351bd27860930623f5e3076d7ed2928</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="variable">
      <type>Point</type>
      <name>elements</name>
      <anchorfile>structplayrho_1_1d2_1_1Manifold_1_1PointArray.html</anchorfile>
      <anchor>a9f7a83eb7ca7aaeaa75a60de5995ced6</anchor>
      <arglist>[MaxManifoldPoints]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::WorldManifold::PointData</name>
    <filename>structplayrho_1_1d2_1_1WorldManifold_1_1PointData.html</filename>
    <member kind="variable">
      <type>Length2</type>
      <name>location</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldManifold_1_1PointData.html</anchorfile>
      <anchor>aea6708ae9b1403f9945f268497ecc62c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum2</type>
      <name>impulse</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldManifold_1_1PointData.html</anchorfile>
      <anchor>a7f514ec10ce3a9610e5fd89cdb45eae6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>separation</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldManifold_1_1PointData.html</anchorfile>
      <anchor>a1790b3ac6bead0e07902e50b74fd3a66</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::PointStates</name>
    <filename>structplayrho_1_1PointStates.html</filename>
    <member kind="variable">
      <type>PointState</type>
      <name>state1</name>
      <anchorfile>structplayrho_1_1PointStates.html</anchorfile>
      <anchor>afdb16526dc8ff9695d14b2ca4f7abc0d</anchor>
      <arglist>[MaxManifoldPoints]</arglist>
    </member>
    <member kind="variable">
      <type>PointState</type>
      <name>state2</name>
      <anchorfile>structplayrho_1_1PointStates.html</anchorfile>
      <anchor>a94bc744b819fb153e5fefc1cf7e0a0c1</anchor>
      <arglist>[MaxManifoldPoints]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::PolygonShapeConf</name>
    <filename>classplayrho_1_1d2_1_1PolygonShapeConf.html</filename>
    <base>ShapeBuilder&lt; PolygonShapeConf &gt;</base>
    <member kind="function">
      <type></type>
      <name>PolygonShapeConf</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a42edb2fd063c171ba2808f41290dd2b2</anchor>
      <arglist>(Length hx, Length hy, const PolygonShapeConf &amp;conf=GetDefaultConf()) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolygonShapeConf</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a19d8dd9f7366d14ee1c7c2c3f2e16cde</anchor>
      <arglist>(Span&lt; const Length2 &gt; points, const PolygonShapeConf &amp;conf=GetDefaultConf()) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PolygonShapeConf &amp;</type>
      <name>UseVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a794190ea846c9740a083a138df49b53f</anchor>
      <arglist>(NonNegative&lt; Length &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PolygonShapeConf &amp;</type>
      <name>UseVertices</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a03c30734fb3bea61184cd60242292522</anchor>
      <arglist>(const std::vector&lt; Length2 &gt; &amp;verts) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PolygonShapeConf &amp;</type>
      <name>SetAsBox</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>aaccd7ca4c4e1fa493fe4dca42d200d33</anchor>
      <arglist>(Length hx, Length hy) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PolygonShapeConf &amp;</type>
      <name>SetAsBox</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a0418323b917825bf3c806d021326a8b6</anchor>
      <arglist>(Length hx, Length hy, Length2 center, Angle angle) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PolygonShapeConf &amp;</type>
      <name>Set</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a0f0f7f5c1e7813f0fddfbec61f67fab6</anchor>
      <arglist>(Span&lt; const Length2 &gt; verts) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PolygonShapeConf &amp;</type>
      <name>Set</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>ab8b2c8db9fce1f6ffeb54999ad470533</anchor>
      <arglist>(const VertexSet &amp;points) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PolygonShapeConf &amp;</type>
      <name>Transform</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>ad4f18191bdca333f5ae7a3bd72f55492</anchor>
      <arglist>(Transformation xfm) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PolygonShapeConf &amp;</type>
      <name>Transform</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a3d0ad326e4fe500df26659f2e2c911f5</anchor>
      <arglist>(const Mat22 &amp;m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>VertexCounter</type>
      <name>GetVertexCount</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>af8ebdeefc032af260648a6f22ef2d5d7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetVertex</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>ae8f44760bbca63a7d2f24e61ef0ae483</anchor>
      <arglist>(VertexCounter index) const</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetNormal</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a717c9833aa73b9c7ba8a831ac1ed849f</anchor>
      <arglist>(VertexCounter index) const</arglist>
    </member>
    <member kind="function">
      <type>Span&lt; const Length2 &gt;</type>
      <name>GetVertices</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>af204b554caf67699a0266a98283ad65d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Span&lt; const UnitVec &gt;</type>
      <name>GetNormals</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a5d8edab6a66d2fb2d4fe6f239778f996</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetCentroid</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>af7d3c5f204842ca4d69767a947967867</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr NonNegative&lt; Length &gt;</type>
      <name>GetDefaultVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a9805448b8c4a41d0f97f89b6f461eda3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PolygonShapeConf</type>
      <name>GetDefaultConf</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a9a88202e222078955d2489db3cd1a2ff</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Length &gt;</type>
      <name>vertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a85a22e05b0a08405afcd1e26b541dc04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Length2 &gt;</type>
      <name>m_vertices</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>aeda118cf5dcca79f787b18cdb67ae727</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; UnitVec &gt;</type>
      <name>m_normals</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>ab93dbe4acf0b1ae7d4e224f9dedcbfc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Length2</type>
      <name>m_centroid</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>ae8cc55c5b4b22753b6ad76a60aca4424</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a63cafb11d617b347c4a9b8b9c5d9f03b</anchor>
      <arglist>(const PolygonShapeConf &amp;lhs, const PolygonShapeConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a7702bc246ae38c520cea78d599de7493</anchor>
      <arglist>(const PolygonShapeConf &amp;lhs, const PolygonShapeConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetEdge</name>
      <anchorfile>classplayrho_1_1d2_1_1PolygonShapeConf.html</anchorfile>
      <anchor>a066828295fc1238756f5adf1f3502343</anchor>
      <arglist>(const PolygonShapeConf &amp;shape, VertexCounter index)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::Position</name>
    <filename>structplayrho_1_1d2_1_1Position.html</filename>
    <member kind="variable">
      <type>Length2</type>
      <name>linear</name>
      <anchorfile>structplayrho_1_1d2_1_1Position.html</anchorfile>
      <anchor>a0e1c6a8ff1b5c12185ed6d168168352d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Angle</type>
      <name>angular</name>
      <anchorfile>structplayrho_1_1d2_1_1Position.html</anchorfile>
      <anchor>a9736efa8287839f997bfe73a2cca5d19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1d2_1_1Position.html</anchorfile>
      <anchor>a5e0589100dc43e1301d6b8b945ccb37c</anchor>
      <arglist>(const Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1d2_1_1Position.html</anchorfile>
      <anchor>a920e4ebf45a599f01060d56b280adc74</anchor>
      <arglist>(const Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Position</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1d2_1_1Position.html</anchorfile>
      <anchor>acf4c47e7d8cba3a76dcdc9fa4b79d242</anchor>
      <arglist>(const Position &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Position</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1d2_1_1Position.html</anchorfile>
      <anchor>a8e75f2489f1991855f31108826613c6f</anchor>
      <arglist>(const Position &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Position &amp;</type>
      <name>operator+=</name>
      <anchorfile>structplayrho_1_1d2_1_1Position.html</anchorfile>
      <anchor>adad2c25d2579c31f2091a842e17fa2c3</anchor>
      <arglist>(Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Position</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1d2_1_1Position.html</anchorfile>
      <anchor>adc427276624c31301f4d2c3c202497d8</anchor>
      <arglist>(const Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Position &amp;</type>
      <name>operator-=</name>
      <anchorfile>structplayrho_1_1d2_1_1Position.html</anchorfile>
      <anchor>a3f8a057d7496ce6e5c72debd2361de5c</anchor>
      <arglist>(Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Position</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1d2_1_1Position.html</anchorfile>
      <anchor>ab4a62d780748e8a22c6fe64234f6d121</anchor>
      <arglist>(const Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Position</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1d2_1_1Position.html</anchorfile>
      <anchor>ab6cbd956958f8a1cd6726ad4e0cf2e43</anchor>
      <arglist>(const Real scalar, const Position &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>structplayrho_1_1d2_1_1Position.html</anchorfile>
      <anchor>ae5cbbddc6b8f2b557ba2e87f43c64802</anchor>
      <arglist>(const d2::Position &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Position</type>
      <name>GetPosition</name>
      <anchorfile>structplayrho_1_1d2_1_1Position.html</anchorfile>
      <anchor>aaf9f3a11a5c60b5832946d9fb0a43164</anchor>
      <arglist>(const Position pos0, const Position pos1, const Real beta) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::PositionConstraint</name>
    <filename>classplayrho_1_1d2_1_1PositionConstraint.html</filename>
    <member kind="function">
      <type></type>
      <name>PositionConstraint</name>
      <anchorfile>classplayrho_1_1d2_1_1PositionConstraint.html</anchorfile>
      <anchor>ac271b2f95cdfa54b71cd45733765f288</anchor>
      <arglist>(const Manifold &amp;m, BodyID bA, BodyID bB, Length radius)</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>GetBodyA</name>
      <anchorfile>classplayrho_1_1d2_1_1PositionConstraint.html</anchorfile>
      <anchor>a703910aec91fac2f608c3dc4ad03000c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>GetBodyB</name>
      <anchorfile>classplayrho_1_1d2_1_1PositionConstraint.html</anchorfile>
      <anchor>af0ac77b62a91c99a9f5b0763f083b41e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetTotalRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1PositionConstraint.html</anchorfile>
      <anchor>aaaa33e070076ac48b552cb7e2fb65c00</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Manifold</type>
      <name>manifold</name>
      <anchorfile>classplayrho_1_1d2_1_1PositionConstraint.html</anchorfile>
      <anchor>a5c075475304d221d85d788b1ed2044e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BodyID</type>
      <name>m_bodyA</name>
      <anchorfile>classplayrho_1_1d2_1_1PositionConstraint.html</anchorfile>
      <anchor>ab3bc98bbae1011daa7510eefd1b34867</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BodyID</type>
      <name>m_bodyB</name>
      <anchorfile>classplayrho_1_1d2_1_1PositionConstraint.html</anchorfile>
      <anchor>a1a6dd844c41e9c0242721eea119a52ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Length</type>
      <name>m_totalRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1PositionConstraint.html</anchorfile>
      <anchor>a5f4df9d1da834574fd3be3c23e594a1b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::PositionSolution</name>
    <filename>structplayrho_1_1d2_1_1PositionSolution.html</filename>
    <member kind="variable">
      <type>Position</type>
      <name>pos_a</name>
      <anchorfile>structplayrho_1_1d2_1_1PositionSolution.html</anchorfile>
      <anchor>a94dcd535a62f19ae0753dd1013a23f3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Position</type>
      <name>pos_b</name>
      <anchorfile>structplayrho_1_1d2_1_1PositionSolution.html</anchorfile>
      <anchor>a4a2eb9fb99af276f37080ed47ee29f1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>min_separation</name>
      <anchorfile>structplayrho_1_1d2_1_1PositionSolution.html</anchorfile>
      <anchor>a97ddb12bb40404b746000169247f3d07</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::PositionSolverManifold</name>
    <filename>structplayrho_1_1d2_1_1PositionSolverManifold.html</filename>
    <member kind="variable">
      <type>UnitVec</type>
      <name>m_normal</name>
      <anchorfile>structplayrho_1_1d2_1_1PositionSolverManifold.html</anchorfile>
      <anchor>ae2a97c6f55ca6b63af6d0ac5cb8051af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>m_point</name>
      <anchorfile>structplayrho_1_1d2_1_1PositionSolverManifold.html</anchorfile>
      <anchor>a815fb3af92df6eb9f46ab5ac45d69d7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>m_separation</name>
      <anchorfile>structplayrho_1_1d2_1_1PositionSolverManifold.html</anchorfile>
      <anchor>a3bfdfd3b788793b1a0f17dc99e72cdbe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::PositiveChecker</name>
    <filename>structplayrho_1_1PositiveChecker.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::invalid_argument</type>
      <name>exception_type</name>
      <anchorfile>structplayrho_1_1PositiveChecker.html</anchorfile>
      <anchor>a13142cfe96a444d3d9e31d1e816bfc78</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structplayrho_1_1PositiveChecker.html</anchorfile>
      <anchor>a9fb942252e3b29af6e22e467aa15bcdc</anchor>
      <arglist>(const T &amp;v) -&gt; decltype(!(v &gt; static_cast&lt; T &gt;(0)), T</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::PreStepStats</name>
    <filename>structplayrho_1_1PreStepStats.html</filename>
    <member kind="typedef">
      <type>std::uint32_t</type>
      <name>counter_type</name>
      <anchorfile>structplayrho_1_1PreStepStats.html</anchorfile>
      <anchor>a3d2ba1ef027e1612d7631cc1a3c0de33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>proxiesMoved</name>
      <anchorfile>structplayrho_1_1PreStepStats.html</anchorfile>
      <anchor>aa74721e50128fa65a1de046dbf368743</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>destroyed</name>
      <anchorfile>structplayrho_1_1PreStepStats.html</anchorfile>
      <anchor>a62ba523ddae45bd7f16766075b5d71ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>added</name>
      <anchorfile>structplayrho_1_1PreStepStats.html</anchorfile>
      <anchor>a9342f0dc6ecefd1d1519804f013cd164</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>ignored</name>
      <anchorfile>structplayrho_1_1PreStepStats.html</anchorfile>
      <anchor>a935bdc19edba8c3a8e4e83203d5ff534</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>updated</name>
      <anchorfile>structplayrho_1_1PreStepStats.html</anchorfile>
      <anchor>a0f7525eed88446bcb034e37bb8f51f94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>skipped</name>
      <anchorfile>structplayrho_1_1PreStepStats.html</anchorfile>
      <anchor>a4ac67155c97fe89e223375eb442ebfba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::PrismaticJointConf</name>
    <filename>structplayrho_1_1d2_1_1PrismaticJointConf.html</filename>
    <base>JointBuilder&lt; PrismaticJointConf &gt;</base>
    <member kind="typedef">
      <type>JointBuilder&lt; PrismaticJointConf &gt;</type>
      <name>super</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a97aa04eb737dafc20bd6b9c71cd08027</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>PrismaticJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a74422e5cddfb4e163999836fa271f905</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrismaticJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a59cea99dc54f1b0a3c1a21615ddfd7aa</anchor>
      <arglist>(const PrismaticJointConf &amp;copy)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrismaticJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a95b2b04a4c99918d3a45b2db6fc10a89</anchor>
      <arglist>(BodyID bA, BodyID bB, Length2 laA=Length2{}, Length2 laB=Length2{}, UnitVec axisA=UnitVec::GetRight(), Angle angle=0_deg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseEnableLimit</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>ab010c9604512cb79a09253482e9bd559</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseLowerLength</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a9b73c5bff4ea8bdaa5b42f8e882de767</anchor>
      <arglist>(Length v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseUpperLength</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a2d8a78fc77867eda7b72b72464edf701</anchor>
      <arglist>(Length v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseEnableMotor</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>ace422d036befc7e926efbadbeb3642e2</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseMotorSpeed</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a037f5b7765f9cafd69579aed3e954643</anchor>
      <arglist>(AngularVelocity v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseMaxMotorForce</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a91481b538e49b617523672325d920a28</anchor>
      <arglist>(Force v) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorA</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>acb27b85c4d08c968759d5d7796a1c029</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorB</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a5a48a83723f94a0b0cdc50db53f39863</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitVec</type>
      <name>localXAxisA</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>aedd5a22dbbb99341d5651ec2ea00b267</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitVec</type>
      <name>localYAxisA</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a0567ec7dc3cdc8dad075eedc919fccf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Angle</type>
      <name>referenceAngle</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>acf649fb9b1aa944fca93ce9a3aa0f35d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3</type>
      <name>impulse</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>ac3e92d1fcca2d855a50bcf71419747e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum</type>
      <name>motorImpulse</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>ab08a4f1fd8763ab6d9db6ff0ca5d8dad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enableLimit</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a1828f7c8df20ebd1a9dc9d7b7544683a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>lowerTranslation</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a1ffc6b4859a9124c61781fd10eea8ada</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>upperTranslation</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>aba43283e8cb93bca0a1aca2b6cd303a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enableMotor</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>aeb33a2ae730aed0a2100bdb9d582d0fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Force</type>
      <name>maxMotorForce</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a98ff45552fc5f8fe747626a43b4765da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AngularVelocity</type>
      <name>motorSpeed</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a5ac7078c1d1fe807b2597830995eede5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LimitState</type>
      <name>limitState</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>ab98364cefceb415295f3f15b2d908ef0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitVec</type>
      <name>axis</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a18db439953db54ad4bfd8e41e8540d61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitVec</type>
      <name>perp</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a5c6bb33262e82da581c459f95c503318</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>s1</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a6e98d931a2e1fcaaf58ea317ca0d3de6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>s2</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a1e976fff53b6b864da6d1796fc26f447</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>a1</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a8705d4670751de3ae963acbe28eafc0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>a2</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a2535fceb972bd87cfca65ee408553d6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Mat33</type>
      <name>K</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>af209b878a64342c846628b69acdf8d3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Mass</type>
      <name>motorMass</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>aa42ec51f663b5f2a09ff5dced64ec523</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLinearLowerLimit</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a2972598e6c903720d93d1aba138ec7b3</anchor>
      <arglist>(const PrismaticJointConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLinearUpperLimit</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a239db9ab5446fbb27eb532c45965cbe4</anchor>
      <arglist>(const PrismaticJointConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetLinearLimits</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>ab3e9cb2455b78052970feaabe8cf3b1b</anchor>
      <arglist>(PrismaticJointConf &amp;conf, Length lower, Length upper) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>ShiftOrigin</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>ab043518c6b8959a7d71cd6325cbf2491</anchor>
      <arglist>(PrismaticJointConf &amp;, Length2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a27fc45b373f9d4f6ff5fe190c9343649</anchor>
      <arglist>(const PrismaticJointConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>acf7e81444165613ee2710dfc8804a04a</anchor>
      <arglist>(const PrismaticJointConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a29933cccb0e4f22e8d05503443ac5997</anchor>
      <arglist>(PrismaticJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>ac45a3ba1b595baaeb87a5ec919615585</anchor>
      <arglist>(PrismaticJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a821a6b138deb8b47c6add793e3b8ea17</anchor>
      <arglist>(const PrismaticJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetMaxMotorForce</name>
      <anchorfile>structplayrho_1_1d2_1_1PrismaticJointConf.html</anchorfile>
      <anchor>a354d65b6b0cac0916b4788e0ce1a5470</anchor>
      <arglist>(PrismaticJointConf &amp;object, Force value)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::WorldImpl::ProcessContactsOutput</name>
    <filename>structplayrho_1_1d2_1_1WorldImpl_1_1ProcessContactsOutput.html</filename>
    <member kind="variable">
      <type>ContactCounter</type>
      <name>contactsUpdated</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldImpl_1_1ProcessContactsOutput.html</anchorfile>
      <anchor>a5c9a245f243122db2e2241ce89db3d03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ContactCounter</type>
      <name>contactsSkipped</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldImpl_1_1ProcessContactsOutput.html</anchorfile>
      <anchor>a53d816beea8550a1b927c68f162f6036</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::propagate_const</name>
    <filename>classplayrho_1_1propagate__const.html</filename>
    <templarg></templarg>
    <class kind="struct">playrho::propagate_const::detect_element_type</class>
    <class kind="struct">playrho::propagate_const::detect_element_type&lt; U * &gt;</class>
    <class kind="struct">playrho::propagate_const::is_propagate_const</class>
    <class kind="struct">playrho::propagate_const::is_propagate_const&lt; propagate_const&lt; U &gt; &gt;</class>
    <member kind="typedef">
      <type>typename detect_element_type&lt; T &gt;::type</type>
      <name>element_type</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a7fb5beea7a0903b717a57f253e77c508</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PROPAGATE_CONST_CONSTEXPR</type>
      <name>propagate_const</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a89dd6fbf50d4760d1efd3c7f1d36f43f</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>propagate_const</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a0993417a563f12abef1aa3d37014ece8</anchor>
      <arglist>(const propagate_const &amp;p)=delete</arglist>
    </member>
    <member kind="function">
      <type>PROPAGATE_CONST_CONSTEXPR</type>
      <name>propagate_const</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>ac5295006a918f1b3296ee71392c4e8b9</anchor>
      <arglist>(propagate_const &amp;&amp;p)=default</arglist>
    </member>
    <member kind="function">
      <type>PROPAGATE_CONST_CONSTEXPR</type>
      <name>propagate_const</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a53c295a245d8d0749d55f4be205a27d1</anchor>
      <arglist>(propagate_const&lt; U &gt; &amp;&amp;pu)</arglist>
    </member>
    <member kind="function">
      <type>PROPAGATE_CONST_CONSTEXPR</type>
      <name>propagate_const</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a53c295a245d8d0749d55f4be205a27d1</anchor>
      <arglist>(propagate_const&lt; U &gt; &amp;&amp;pu)</arglist>
    </member>
    <member kind="function">
      <type>PROPAGATE_CONST_CONSTEXPR</type>
      <name>propagate_const</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>ad8df1efeba704d4835b76008b040e498</anchor>
      <arglist>(U &amp;&amp;u)</arglist>
    </member>
    <member kind="function">
      <type>PROPAGATE_CONST_CONSTEXPR</type>
      <name>propagate_const</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>ad8df1efeba704d4835b76008b040e498</anchor>
      <arglist>(U &amp;&amp;u)</arglist>
    </member>
    <member kind="function">
      <type>propagate_const &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a7f96cbea6d722c4409b37e345028d5de</anchor>
      <arglist>(const propagate_const &amp;p)=delete</arglist>
    </member>
    <member kind="function">
      <type>PROPAGATE_CONST_CONSTEXPR propagate_const &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>ae685ddb2bcf070e4d71a3ef3a160f144</anchor>
      <arglist>(propagate_const &amp;&amp;p)=default</arglist>
    </member>
    <member kind="function">
      <type>PROPAGATE_CONST_CONSTEXPR propagate_const &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a9d1717b31dd9fa4068981b2bd0c126ba</anchor>
      <arglist>(propagate_const&lt; U &gt; &amp;&amp;pu)</arglist>
    </member>
    <member kind="function">
      <type>PROPAGATE_CONST_CONSTEXPR propagate_const &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a1f2601d2359c2a1733c362c9c37d8046</anchor>
      <arglist>(U &amp;&amp;u)</arglist>
    </member>
    <member kind="function">
      <type>PROPAGATE_CONST_CONSTEXPR</type>
      <name>operator bool</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a6c7d3e936466ce06c5d2db1ac25202f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PROPAGATE_CONST_CONSTEXPR const element_type *</type>
      <name>operator-&gt;</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>af852d4b19c0c08e919f5e0913c401486</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PROPAGATE_CONST_CONSTEXPR</type>
      <name>operator const element_type *</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>abc16484a71ba2587f9214987d0330bd2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PROPAGATE_CONST_CONSTEXPR const element_type &amp;</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a8840096652a73deaf0cb802e024be1c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PROPAGATE_CONST_CONSTEXPR const element_type *</type>
      <name>get</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a47e14f0db5b8e2e2b611aec69f5240d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PROPAGATE_CONST_CONSTEXPR element_type *</type>
      <name>operator-&gt;</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>adfe9add4a4a00f5eb5605150734820fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PROPAGATE_CONST_CONSTEXPR</type>
      <name>operator element_type *</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a1b22b8773d5bd1fbd085ecb668b37b25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PROPAGATE_CONST_CONSTEXPR element_type &amp;</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a109ab8d61a5348d1990944943776ead8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PROPAGATE_CONST_CONSTEXPR element_type *</type>
      <name>get</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a023b2dbd2442f88c81443df337f6d119</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PROPAGATE_CONST_CONSTEXPR void</type>
      <name>swap</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>abf8693b9748fd0e808f51635cbfdad07</anchor>
      <arglist>(propagate_const &amp;pt) noexcept(noexcept(swap(std::declval&lt; T &amp; &gt;(), std::declval&lt; T &amp; &gt;())))</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static element_type *</type>
      <name>get_pointer</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a04846dee7e9a596ab919ce8480010cd3</anchor>
      <arglist>(U *u)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static element_type *</type>
      <name>get_pointer</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>afde06ee03c28d1d6add5fd2ad0ab387d</anchor>
      <arglist>(U &amp;u)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static const element_type *</type>
      <name>get_pointer</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a47befe79ede275bf0ed2aa6bfd2c2b35</anchor>
      <arglist>(const U *u)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static const element_type *</type>
      <name>get_pointer</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a8ff48fe417d20c3ff30bfc2eb3ff2ede</anchor>
      <arglist>(const U &amp;u)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>t_</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a4e486057a8f7ad4b9ace920b9c08329a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend PROPAGATE_CONST_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>adc178dbef0e6b824c3125be1b4d31aeb</anchor>
      <arglist>(const propagate_const &amp;pt, std::nullptr_t)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend PROPAGATE_CONST_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>ad8f8f0f75cfcc16129a45a4f1a434498</anchor>
      <arglist>(std::nullptr_t, const propagate_const &amp;pu)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend PROPAGATE_CONST_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a7267544ab955ce83d8a8924d8ab443b3</anchor>
      <arglist>(const propagate_const &amp;pt, std::nullptr_t)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend PROPAGATE_CONST_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a2809ca4cdfb1451dea741514170db043</anchor>
      <arglist>(std::nullptr_t, const propagate_const &amp;pu)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend PROPAGATE_CONST_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>ad29068fc55c6ad6450626ea2b0be1dfc</anchor>
      <arglist>(const propagate_const &amp;pt, const propagate_const&lt; U &gt; &amp;pu)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend PROPAGATE_CONST_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a712b71dc43cfc0a3378f6eac2d1a9324</anchor>
      <arglist>(const propagate_const &amp;pt, const propagate_const&lt; U &gt; &amp;pu)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend PROPAGATE_CONST_CONSTEXPR bool</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a02b4d9e660b8ebfbdc3bce655b87431d</anchor>
      <arglist>(const propagate_const &amp;pt, const propagate_const&lt; U &gt; &amp;pu)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend PROPAGATE_CONST_CONSTEXPR bool</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a4cf48358b76db542b2984b67fc3b93d8</anchor>
      <arglist>(const propagate_const &amp;pt, const propagate_const&lt; U &gt; &amp;pu)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend PROPAGATE_CONST_CONSTEXPR bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a6d3ba7181fe850d3ffe05f67b71c2ca6</anchor>
      <arglist>(const propagate_const &amp;pt, const propagate_const&lt; U &gt; &amp;pu)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend PROPAGATE_CONST_CONSTEXPR bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>acb4ca25eb9b42a675126e56ec5a58641</anchor>
      <arglist>(const propagate_const &amp;pt, const propagate_const&lt; U &gt; &amp;pu)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend PROPAGATE_CONST_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a24db23f8bae872c2586ff5f7beaf9592</anchor>
      <arglist>(const propagate_const &amp;pt, const U &amp;u)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend PROPAGATE_CONST_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a3c5bf523cbee71c196f02d954667dee8</anchor>
      <arglist>(const propagate_const &amp;pt, const U &amp;u)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend PROPAGATE_CONST_CONSTEXPR bool</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a720da2b5b546d28f49faafb9eb7b446c</anchor>
      <arglist>(const propagate_const &amp;pt, const U &amp;u)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend PROPAGATE_CONST_CONSTEXPR bool</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a5569ced84823769be3a86367263a86ed</anchor>
      <arglist>(const propagate_const &amp;pt, const U &amp;u)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend PROPAGATE_CONST_CONSTEXPR bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a05946bbcf52c448d28a02291fd90d36d</anchor>
      <arglist>(const propagate_const &amp;pt, const U &amp;u)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend PROPAGATE_CONST_CONSTEXPR bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a0cffc090fd33aaacec4b5cf0f9a59787</anchor>
      <arglist>(const propagate_const &amp;pt, const U &amp;u)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend PROPAGATE_CONST_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a49207e49ab174ee374b58c49b135c651</anchor>
      <arglist>(const U &amp;u, const propagate_const &amp;pu)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend PROPAGATE_CONST_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a79601ba19c7da6f92b4bf1fc67d23565</anchor>
      <arglist>(const U &amp;u, const propagate_const &amp;pu)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend PROPAGATE_CONST_CONSTEXPR bool</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a0720b5b29cd78bd82c0cc06986d42c0a</anchor>
      <arglist>(const U &amp;u, const propagate_const &amp;pu)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend PROPAGATE_CONST_CONSTEXPR bool</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>adfac4acf24171f8ce65e921a4cf3eba6</anchor>
      <arglist>(const U &amp;u, const propagate_const &amp;pu)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend PROPAGATE_CONST_CONSTEXPR bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>aa4d1cc351ecdffc879bfbc7dc2cb80cd</anchor>
      <arglist>(const U &amp;u, const propagate_const &amp;pu)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend PROPAGATE_CONST_CONSTEXPR bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>ad8f54f9f2266b32999bf0d5e1dab5a10</anchor>
      <arglist>(const U &amp;u, const propagate_const &amp;pu)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>propagate_const&lt; std::unique_ptr&lt; playrho::d2::WorldImpl &gt; &gt;</name>
    <filename>classplayrho_1_1propagate__const.html</filename>
    <member kind="typedef">
      <type>typename detect_element_type&lt; std::unique_ptr&lt; playrho::d2::WorldImpl &gt; &gt;::type</type>
      <name>element_type</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a7fb5beea7a0903b717a57f253e77c508</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PROPAGATE_CONST_CONSTEXPR</type>
      <name>propagate_const</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a89dd6fbf50d4760d1efd3c7f1d36f43f</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>propagate_const</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a0993417a563f12abef1aa3d37014ece8</anchor>
      <arglist>(const propagate_const &amp;p)=delete</arglist>
    </member>
    <member kind="function">
      <type>PROPAGATE_CONST_CONSTEXPR</type>
      <name>propagate_const</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>ac5295006a918f1b3296ee71392c4e8b9</anchor>
      <arglist>(propagate_const &amp;&amp;p)=default</arglist>
    </member>
    <member kind="function">
      <type>PROPAGATE_CONST_CONSTEXPR</type>
      <name>propagate_const</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a53c295a245d8d0749d55f4be205a27d1</anchor>
      <arglist>(propagate_const&lt; U &gt; &amp;&amp;pu)</arglist>
    </member>
    <member kind="function">
      <type>PROPAGATE_CONST_CONSTEXPR</type>
      <name>propagate_const</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a53c295a245d8d0749d55f4be205a27d1</anchor>
      <arglist>(propagate_const&lt; U &gt; &amp;&amp;pu)</arglist>
    </member>
    <member kind="function">
      <type>PROPAGATE_CONST_CONSTEXPR</type>
      <name>propagate_const</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>ad8df1efeba704d4835b76008b040e498</anchor>
      <arglist>(U &amp;&amp;u)</arglist>
    </member>
    <member kind="function">
      <type>PROPAGATE_CONST_CONSTEXPR</type>
      <name>propagate_const</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>ad8df1efeba704d4835b76008b040e498</anchor>
      <arglist>(U &amp;&amp;u)</arglist>
    </member>
    <member kind="function">
      <type>propagate_const &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a7f96cbea6d722c4409b37e345028d5de</anchor>
      <arglist>(const propagate_const &amp;p)=delete</arglist>
    </member>
    <member kind="function">
      <type>PROPAGATE_CONST_CONSTEXPR propagate_const &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>ae685ddb2bcf070e4d71a3ef3a160f144</anchor>
      <arglist>(propagate_const &amp;&amp;p)=default</arglist>
    </member>
    <member kind="function">
      <type>PROPAGATE_CONST_CONSTEXPR propagate_const &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a9d1717b31dd9fa4068981b2bd0c126ba</anchor>
      <arglist>(propagate_const&lt; U &gt; &amp;&amp;pu)</arglist>
    </member>
    <member kind="function">
      <type>PROPAGATE_CONST_CONSTEXPR propagate_const &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a1f2601d2359c2a1733c362c9c37d8046</anchor>
      <arglist>(U &amp;&amp;u)</arglist>
    </member>
    <member kind="function">
      <type>PROPAGATE_CONST_CONSTEXPR</type>
      <name>operator bool</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a6c7d3e936466ce06c5d2db1ac25202f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PROPAGATE_CONST_CONSTEXPR const element_type *</type>
      <name>operator-&gt;</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>af852d4b19c0c08e919f5e0913c401486</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PROPAGATE_CONST_CONSTEXPR element_type *</type>
      <name>operator-&gt;</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>adfe9add4a4a00f5eb5605150734820fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PROPAGATE_CONST_CONSTEXPR</type>
      <name>operator const element_type *</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>abc16484a71ba2587f9214987d0330bd2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PROPAGATE_CONST_CONSTEXPR const element_type &amp;</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a8840096652a73deaf0cb802e024be1c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PROPAGATE_CONST_CONSTEXPR element_type &amp;</type>
      <name>operator*</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a109ab8d61a5348d1990944943776ead8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PROPAGATE_CONST_CONSTEXPR const element_type *</type>
      <name>get</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a47e14f0db5b8e2e2b611aec69f5240d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PROPAGATE_CONST_CONSTEXPR element_type *</type>
      <name>get</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a023b2dbd2442f88c81443df337f6d119</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PROPAGATE_CONST_CONSTEXPR</type>
      <name>operator element_type *</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a1b22b8773d5bd1fbd085ecb668b37b25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PROPAGATE_CONST_CONSTEXPR void</type>
      <name>swap</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>abf8693b9748fd0e808f51635cbfdad07</anchor>
      <arglist>(propagate_const &amp;pt) noexcept(noexcept(swap(std::declval&lt; std::unique_ptr&lt; playrho::d2::WorldImpl &gt; &amp; &gt;(), std::declval&lt; std::unique_ptr&lt; playrho::d2::WorldImpl &gt; &amp; &gt;())))</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static element_type *</type>
      <name>get_pointer</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a04846dee7e9a596ab919ce8480010cd3</anchor>
      <arglist>(U *u)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static element_type *</type>
      <name>get_pointer</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>afde06ee03c28d1d6add5fd2ad0ab387d</anchor>
      <arglist>(U &amp;u)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static const element_type *</type>
      <name>get_pointer</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a47befe79ede275bf0ed2aa6bfd2c2b35</anchor>
      <arglist>(const U *u)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static const element_type *</type>
      <name>get_pointer</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a8ff48fe417d20c3ff30bfc2eb3ff2ede</anchor>
      <arglist>(const U &amp;u)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unique_ptr&lt; playrho::d2::WorldImpl &gt;</type>
      <name>t_</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a4e486057a8f7ad4b9ace920b9c08329a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend PROPAGATE_CONST_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>adc178dbef0e6b824c3125be1b4d31aeb</anchor>
      <arglist>(const propagate_const &amp;pt, std::nullptr_t)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend PROPAGATE_CONST_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>ad8f8f0f75cfcc16129a45a4f1a434498</anchor>
      <arglist>(std::nullptr_t, const propagate_const &amp;pu)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend PROPAGATE_CONST_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>ad29068fc55c6ad6450626ea2b0be1dfc</anchor>
      <arglist>(const propagate_const &amp;pt, const propagate_const&lt; U &gt; &amp;pu)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend PROPAGATE_CONST_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a24db23f8bae872c2586ff5f7beaf9592</anchor>
      <arglist>(const propagate_const &amp;pt, const U &amp;u)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend PROPAGATE_CONST_CONSTEXPR bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a49207e49ab174ee374b58c49b135c651</anchor>
      <arglist>(const U &amp;u, const propagate_const &amp;pu)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend PROPAGATE_CONST_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a7267544ab955ce83d8a8924d8ab443b3</anchor>
      <arglist>(const propagate_const &amp;pt, std::nullptr_t)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend PROPAGATE_CONST_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a2809ca4cdfb1451dea741514170db043</anchor>
      <arglist>(std::nullptr_t, const propagate_const &amp;pu)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend PROPAGATE_CONST_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a712b71dc43cfc0a3378f6eac2d1a9324</anchor>
      <arglist>(const propagate_const &amp;pt, const propagate_const&lt; U &gt; &amp;pu)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend PROPAGATE_CONST_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a3c5bf523cbee71c196f02d954667dee8</anchor>
      <arglist>(const propagate_const &amp;pt, const U &amp;u)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend PROPAGATE_CONST_CONSTEXPR bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a79601ba19c7da6f92b4bf1fc67d23565</anchor>
      <arglist>(const U &amp;u, const propagate_const &amp;pu)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend PROPAGATE_CONST_CONSTEXPR bool</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a02b4d9e660b8ebfbdc3bce655b87431d</anchor>
      <arglist>(const propagate_const &amp;pt, const propagate_const&lt; U &gt; &amp;pu)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend PROPAGATE_CONST_CONSTEXPR bool</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a720da2b5b546d28f49faafb9eb7b446c</anchor>
      <arglist>(const propagate_const &amp;pt, const U &amp;u)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend PROPAGATE_CONST_CONSTEXPR bool</type>
      <name>operator&lt;</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a0720b5b29cd78bd82c0cc06986d42c0a</anchor>
      <arglist>(const U &amp;u, const propagate_const &amp;pu)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend PROPAGATE_CONST_CONSTEXPR bool</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a4cf48358b76db542b2984b67fc3b93d8</anchor>
      <arglist>(const propagate_const &amp;pt, const propagate_const&lt; U &gt; &amp;pu)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend PROPAGATE_CONST_CONSTEXPR bool</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a5569ced84823769be3a86367263a86ed</anchor>
      <arglist>(const propagate_const &amp;pt, const U &amp;u)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend PROPAGATE_CONST_CONSTEXPR bool</type>
      <name>operator&gt;</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>adfac4acf24171f8ce65e921a4cf3eba6</anchor>
      <arglist>(const U &amp;u, const propagate_const &amp;pu)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend PROPAGATE_CONST_CONSTEXPR bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a6d3ba7181fe850d3ffe05f67b71c2ca6</anchor>
      <arglist>(const propagate_const &amp;pt, const propagate_const&lt; U &gt; &amp;pu)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend PROPAGATE_CONST_CONSTEXPR bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a05946bbcf52c448d28a02291fd90d36d</anchor>
      <arglist>(const propagate_const &amp;pt, const U &amp;u)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend PROPAGATE_CONST_CONSTEXPR bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>aa4d1cc351ecdffc879bfbc7dc2cb80cd</anchor>
      <arglist>(const U &amp;u, const propagate_const &amp;pu)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend PROPAGATE_CONST_CONSTEXPR bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>acb4ca25eb9b42a675126e56ec5a58641</anchor>
      <arglist>(const propagate_const &amp;pt, const propagate_const&lt; U &gt; &amp;pu)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend PROPAGATE_CONST_CONSTEXPR bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>a0cffc090fd33aaacec4b5cf0f9a59787</anchor>
      <arglist>(const propagate_const &amp;pt, const U &amp;u)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend PROPAGATE_CONST_CONSTEXPR bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classplayrho_1_1propagate__const.html</anchorfile>
      <anchor>ad8f54f9f2266b32999bf0d5e1dab5a10</anchor>
      <arglist>(const U &amp;u, const propagate_const &amp;pu)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::PulleyJointConf</name>
    <filename>structplayrho_1_1d2_1_1PulleyJointConf.html</filename>
    <base>JointBuilder&lt; PulleyJointConf &gt;</base>
    <member kind="typedef">
      <type>JointBuilder&lt; PulleyJointConf &gt;</type>
      <name>super</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>a1919cd604668a09cab637428f1860840</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PulleyJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>a8259ee38c23914223b018750df2c27c0</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PulleyJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>a3df22bf891d9391e1f3b5343fec0117b</anchor>
      <arglist>(BodyID bodyA, BodyID bodyB, Length2 groundAnchorA=DefaultGroundAnchorA, Length2 groundAnchorB=DefaultGroundAnchorB, Length2 anchorA=DefaultLocalAnchorA, Length2 anchorB=DefaultLocalAnchorB, Length lA=0_m, Length lB=0_m)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>a487ae923af494e25a655fb41dca87d92</anchor>
      <arglist>(Real v) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>groundAnchorA</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>ae871b9f7f4170ab3c5d8649b105be628</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>groundAnchorB</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>abad43cab21334c27e18eddbcd29a307d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorA</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>a5654e8eb83ec564fd4e13bc78c508ad7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorB</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>a812dd6e228eee80b1ae52345f80bff79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>lengthA</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>acff474ab17b3eef88979384619ca35e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>lengthB</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>a4f166e163524dd6342f9a4e8dcbdabbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>ratio</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>af58f34604aac5e68a092cc8a14ac3170</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum</type>
      <name>impulse</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>a3227b4d84ed9ed030294e6b2a59e97f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitVec</type>
      <name>uA</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>a69c38d72cd597598dd50941abd3c16ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitVec</type>
      <name>uB</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>a7da6f6cf80cd196bd2c223fabe5d72cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>rA</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>a81701da4d08879ed645570c8249e8c0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>rB</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>ac4ec4a50941868a13a27b1a4cb2bb385</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Mass</type>
      <name>mass</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>aaf3ced4d8560e9cd3c06e7c1db092cce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Length2</type>
      <name>DefaultGroundAnchorA</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>a41075cd6efbcadb66a18f637da481eec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Length2</type>
      <name>DefaultGroundAnchorB</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>a339e04304f259e0e6ed66adf5c19314d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Length2</type>
      <name>DefaultLocalAnchorA</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>a8482f925cae8e66cf13cbba4eda7b920</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Length2</type>
      <name>DefaultLocalAnchorB</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>af3fbe0b06f27ea75c47d9dece43ced46</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>a587b3fc0018a0aba1d156dcd26147d1d</anchor>
      <arglist>(const PulleyJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>ad042f7000a43ec5b29154a07465005f6</anchor>
      <arglist>(const PulleyJointConf &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ShiftOrigin</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>a900c2f617828c3a70f6b988ac4419b55</anchor>
      <arglist>(PulleyJointConf &amp;object, Length2 newOrigin) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>abe82c29ec29b06dd5d6d2fb5a16c557e</anchor>
      <arglist>(PulleyJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>aa584b0160581b9ab6777d0ccbd694a34</anchor>
      <arglist>(PulleyJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>a79e70e2b529615d0765783788b065904</anchor>
      <arglist>(const PulleyJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLengthA</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>a94c0bc2a8291d96ff45e0d157a9d5bf3</anchor>
      <arglist>(const PulleyJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLengthB</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>aac6b715e0df3e5be4be5ccae4ac4fa36</anchor>
      <arglist>(const PulleyJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1PulleyJointConf.html</anchorfile>
      <anchor>abe7de7c24d8d14d4dd2a34e2ecc386b3</anchor>
      <arglist>(PulleyJointConf &amp;object, Real value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::Range</name>
    <filename>classplayrho_1_1Range.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>IT</type>
      <name>iterator_type</name>
      <anchorfile>classplayrho_1_1Range.html</anchorfile>
      <anchor>ac6c98bebce9a665a4c0039726f25f79b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(*std::declval&lt; iterator_type &gt;())</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1Range.html</anchorfile>
      <anchor>ac75a93328041121935176e99fcd5d7f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Range</name>
      <anchorfile>classplayrho_1_1Range.html</anchorfile>
      <anchor>afe1ad020df709351e94e3414e39fa7eb</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Range</name>
      <anchorfile>classplayrho_1_1Range.html</anchorfile>
      <anchor>a0cfa633b705fdb7d1f54fd04ebf9b983</anchor>
      <arglist>(iterator_type iter_begin, iterator_type iter_end) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator_type</type>
      <name>begin</name>
      <anchorfile>classplayrho_1_1Range.html</anchorfile>
      <anchor>ab6859c821bfb1d06c24fae46f08f897b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator_type</type>
      <name>end</name>
      <anchorfile>classplayrho_1_1Range.html</anchorfile>
      <anchor>ae95746b5ac3bd672d9f7c2a798f24473</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classplayrho_1_1Range.html</anchorfile>
      <anchor>ae5bd463c3e9212fa906ec6fb249d9034</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>iterator_type</type>
      <name>m_begin</name>
      <anchorfile>classplayrho_1_1Range.html</anchorfile>
      <anchor>afe994ccbc4fce4d74a4a4006e11ba5ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>iterator_type</type>
      <name>m_end</name>
      <anchorfile>classplayrho_1_1Range.html</anchorfile>
      <anchor>ab6a658a01b5850892838f5a9b5860c7c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::RayCastHit</name>
    <filename>structplayrho_1_1d2_1_1RayCastHit.html</filename>
    <member kind="variable">
      <type>UnitVec</type>
      <name>normal</name>
      <anchorfile>structplayrho_1_1d2_1_1RayCastHit.html</anchorfile>
      <anchor>a2a993f3e785fc0929c42d5cfe3efeb31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitInterval&lt; Real &gt;</type>
      <name>fraction</name>
      <anchorfile>structplayrho_1_1d2_1_1RayCastHit.html</anchorfile>
      <anchor>ad58f1dad1048538e82f9716b6e1b09d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::RayCastInput</name>
    <filename>structplayrho_1_1detail_1_1RayCastInput.html</filename>
    <templarg>N</templarg>
    <member kind="variable">
      <type>Vector&lt; Length, N &gt;</type>
      <name>p1</name>
      <anchorfile>structplayrho_1_1detail_1_1RayCastInput.html</anchorfile>
      <anchor>ae704520881afed2dde9ad52c23466250</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; Length, N &gt;</type>
      <name>p2</name>
      <anchorfile>structplayrho_1_1detail_1_1RayCastInput.html</anchorfile>
      <anchor>ac2bf0abf53cc75c30d40e38440688dbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitInterval&lt; Real &gt;</type>
      <name>maxFraction</name>
      <anchorfile>structplayrho_1_1detail_1_1RayCastInput.html</anchorfile>
      <anchor>aa0b141435d73218cda9930d7cc723ef7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>GetAABB</name>
      <anchorfile>structplayrho_1_1detail_1_1RayCastInput.html</anchorfile>
      <anchor>a5c551f67d9d86f42a5518cc7cc69a2ff</anchor>
      <arglist>(const playrho::detail::RayCastInput&lt; 2 &gt; &amp;input) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::RegStepStats</name>
    <filename>structplayrho_1_1RegStepStats.html</filename>
    <member kind="typedef">
      <type>std::uint32_t</type>
      <name>counter_type</name>
      <anchorfile>structplayrho_1_1RegStepStats.html</anchorfile>
      <anchor>a28c54150b3b815b281bf5edeeea9a531</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>minSeparation</name>
      <anchorfile>structplayrho_1_1RegStepStats.html</anchorfile>
      <anchor>a81e12bb435f7cefe9879cca393b246fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum</type>
      <name>maxIncImpulse</name>
      <anchorfile>structplayrho_1_1RegStepStats.html</anchorfile>
      <anchor>ade610bd3954daebf0c1ade2b7d04a69e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BodyCounter</type>
      <name>islandsFound</name>
      <anchorfile>structplayrho_1_1RegStepStats.html</anchorfile>
      <anchor>ab7d450a02ef4369564d88a69b53cc915</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BodyCounter</type>
      <name>islandsSolved</name>
      <anchorfile>structplayrho_1_1RegStepStats.html</anchorfile>
      <anchor>a47e17195aadb3418bab41d74262f0358</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>contactsAdded</name>
      <anchorfile>structplayrho_1_1RegStepStats.html</anchorfile>
      <anchor>a4072966f53fbc8629e9ca20f80fbdc3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>bodiesSlept</name>
      <anchorfile>structplayrho_1_1RegStepStats.html</anchorfile>
      <anchor>ae8a6352918620a06c09a7801badc8f74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>proxiesMoved</name>
      <anchorfile>structplayrho_1_1RegStepStats.html</anchorfile>
      <anchor>aad48bb0799fbca241b0fe72b71a9ad85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>sumPosIters</name>
      <anchorfile>structplayrho_1_1RegStepStats.html</anchorfile>
      <anchor>a617e466c8bed191b228829b18436c0f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>sumVelIters</name>
      <anchorfile>structplayrho_1_1RegStepStats.html</anchorfile>
      <anchor>acf9a3a63b6c0c7182005ff7ae6d381c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>RegStepStats &amp;</type>
      <name>Update</name>
      <anchorfile>structplayrho_1_1RegStepStats.html</anchorfile>
      <anchor>a3129f24959327f2ae255de4d0b2badba</anchor>
      <arglist>(RegStepStats &amp;lhs, const IslandStats &amp;rhs) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::RevoluteJointConf</name>
    <filename>structplayrho_1_1d2_1_1RevoluteJointConf.html</filename>
    <base>JointBuilder&lt; RevoluteJointConf &gt;</base>
    <member kind="typedef">
      <type>JointBuilder&lt; RevoluteJointConf &gt;</type>
      <name>super</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a65d0db4433a486e5e210757ba4b3c95f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>RevoluteJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>aeb5127ac34a0bb3b34db982261c928b2</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RevoluteJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a5749e154dcf2532e1d1bef17ed927e50</anchor>
      <arglist>(BodyID bA, BodyID bB, Length2 laA=Length2{}, Length2 laB=Length2{}, Angle ra=0_deg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseEnableLimit</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a5497df64cd4353899fb0e4f193cd5ae4</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseLowerAngle</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a5683e696ea5b45aaa9e95db47852c175</anchor>
      <arglist>(Angle v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseUpperAngle</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a3fd01969e76c450d4eb251f0c2157017</anchor>
      <arglist>(Angle v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseEnableMotor</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>af050ebf56be26fd58c1487ccd039a179</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseMotorSpeed</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a3627767a065767618571ce350dff633d</anchor>
      <arglist>(AngularVelocity v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseMaxMotorTorque</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a5a154078f81c967a0c0023bc5fce353a</anchor>
      <arglist>(Torque v) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorA</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a2fcc05a844f7b23c1f6436a14ddc6b9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorB</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>ae121b11f06c2846c9c21f6bb859b41a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3</type>
      <name>impulse</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a553d6dfaae6e30f193e3a5f281975e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AngularMomentum</type>
      <name>angularMotorImpulse</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>af2a98bbc7424fe8a5d9d7ddb949dc6cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Angle</type>
      <name>referenceAngle</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>ae12fcb14448e24409280a4b2d680862f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enableLimit</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>abb607270b510bd784d929c9338377987</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Angle</type>
      <name>lowerAngle</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a0ccc513b9e7cb2de2e69dc3ddafaa5d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Angle</type>
      <name>upperAngle</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a48178eb3386b21661b50428ad01a83a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enableMotor</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>ac3dad8b2ed239ab461f6f46f02a91d31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AngularVelocity</type>
      <name>motorSpeed</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>ad4ade0ad13e33db6ff8ac1d7dc2a95f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Torque</type>
      <name>maxMotorTorque</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a06214676ef7b5c1bde90398241c69f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>rA</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>ac32a2aa5fabef213cfa88fcc64492f04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>rB</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a56ecc3e9e21f7ddd82d62bd57139fd2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Mat33</type>
      <name>mass</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a552eaed98a8f72e184f299c64e1ac8bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RotInertia</type>
      <name>angularMass</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>abfd11f99eb34bb03fdcd63378ec6fb19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LimitState</type>
      <name>limitState</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>ac03368c87b9686e5be982b5b8b6eca55</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>ShiftOrigin</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>ac0a763d149b879a45044edf3c0e513f8</anchor>
      <arglist>(RevoluteJointConf &amp;, Length2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Angle</type>
      <name>GetAngularLowerLimit</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>afd8850ec299f0679c41ca58081408de8</anchor>
      <arglist>(const RevoluteJointConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Angle</type>
      <name>GetAngularUpperLimit</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a0f475e87122dc3f396a975f55b1c70d0</anchor>
      <arglist>(const RevoluteJointConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a2cae96cc4b8f16e7a9ce6abd543f09c1</anchor>
      <arglist>(const RevoluteJointConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a4ee40ca4a9dbe09390f0ff493f276dac</anchor>
      <arglist>(const RevoluteJointConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a2fad23f6f66a16325e21b0faadf26d9b</anchor>
      <arglist>(RevoluteJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a87db3ef3ad61289604c8085c1b330e67</anchor>
      <arglist>(RevoluteJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>a24000d24706fa8d93f028b3b8b970a17</anchor>
      <arglist>(const RevoluteJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetAngularLimits</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>ae5635ff98f64bcbf6a31cba670913afc</anchor>
      <arglist>(RevoluteJointConf &amp;object, Angle lower, Angle upper) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetMaxMotorTorque</name>
      <anchorfile>structplayrho_1_1d2_1_1RevoluteJointConf.html</anchorfile>
      <anchor>ac5613ecd1ba9cd47dcfa45191c137dbd</anchor>
      <arglist>(RevoluteJointConf &amp;object, Torque value)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::RopeJointConf</name>
    <filename>structplayrho_1_1d2_1_1RopeJointConf.html</filename>
    <base>JointBuilder&lt; RopeJointConf &gt;</base>
    <member kind="typedef">
      <type>JointBuilder&lt; RopeJointConf &gt;</type>
      <name>super</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>a8602b4d23d1f5952bf35c6cdb4c4885f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>RopeJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>a4325e764e8e48a837b1603f9b550a2e7</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>RopeJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>ab220ffc4a01507438ba00dcd491baa41</anchor>
      <arglist>(BodyID bodyA, BodyID bodyB) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseMaxLength</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>a8665e7bae650f9d04c8fa2d9edf97026</anchor>
      <arglist>(Length v) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorA</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>acd5e67cc48836a7f923bc80919896665</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorB</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>ae118b073aebd3f30cc2305ab98a00e3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>maxLength</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>a99f6e04f43dec401dd2428001f67339a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>length</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>ab87366b4a26de4915c78d9575c0bbcfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum</type>
      <name>impulse</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>a6e5e59377727a518a6946cc6b830625f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitVec</type>
      <name>u</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>a1ab89591502601289dea1121f89af556</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>rA</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>a7a1174bb5af831f04e94ff983a6aa642</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>rB</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>af61dcf4e43d6354a70f942f9769d1560</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Mass</type>
      <name>mass</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>accff532beebf0e6ea538a5d714fb8f49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LimitState</type>
      <name>limitState</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>ae485076c7c97334431e7bc8d9118fad6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>ac7acc7a694d7729620e48300eb157d7b</anchor>
      <arglist>(const RopeJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>af3c61329399916ae2b063e6ba94ffb6e</anchor>
      <arglist>(const RopeJointConf &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>ShiftOrigin</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>a1259b960c0c0112346fa02785107cdc9</anchor>
      <arglist>(RopeJointConf &amp;, Length2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>a94620f1488d0e8115ed0b21d89da11e2</anchor>
      <arglist>(RopeJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>a180620d4fdb4c36cd2a47944af21ba71</anchor>
      <arglist>(RopeJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>a14231e4629e5a1cc642aba42a35245a4</anchor>
      <arglist>(const RopeJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetMaxLength</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>ad5cf9d398d3e370e806a070fdbb8d685</anchor>
      <arglist>(const RopeJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetMaxLength</name>
      <anchorfile>structplayrho_1_1d2_1_1RopeJointConf.html</anchorfile>
      <anchor>aeeffd09d05131a961e0d3bd87f94c889</anchor>
      <arglist>(RopeJointConf &amp;object, Length value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::Fixed::scalar_type</name>
    <filename>structplayrho_1_1Fixed_1_1scalar__type.html</filename>
    <member kind="variable">
      <type>value_type</type>
      <name>value</name>
      <anchorfile>structplayrho_1_1Fixed_1_1scalar__type.html</anchorfile>
      <anchor>ad1ed9c46aa1fcc780488e4d2d3408c2d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::detail::SeparationInfo</name>
    <filename>structplayrho_1_1detail_1_1SeparationInfo.html</filename>
    <templarg>N</templarg>
    <member kind="variable">
      <type>Length</type>
      <name>distance</name>
      <anchorfile>structplayrho_1_1detail_1_1SeparationInfo.html</anchorfile>
      <anchor>a52e9b815b891868dea807e7163cb62cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VertexCounter</type>
      <name>firstShape</name>
      <anchorfile>structplayrho_1_1detail_1_1SeparationInfo.html</anchorfile>
      <anchor>afa2a42c94308c4343111fff4d7880dab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VertexCounterArray&lt; N &gt;</type>
      <name>secondShape</name>
      <anchorfile>structplayrho_1_1detail_1_1SeparationInfo.html</anchorfile>
      <anchor>a889ca2d038a15d1243ed8d7c56eee94c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::SeparationScenario</name>
    <filename>structplayrho_1_1d2_1_1SeparationScenario.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>structplayrho_1_1d2_1_1SeparationScenario.html</anchorfile>
      <anchor>a7542a88cbda414a9a7fbca4ac6f3ad49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DistanceProxy &amp;</type>
      <name>proxyA</name>
      <anchorfile>structplayrho_1_1d2_1_1SeparationScenario.html</anchorfile>
      <anchor>a309380250dcb6439cfacdf252c4fbc0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DistanceProxy &amp;</type>
      <name>proxyB</name>
      <anchorfile>structplayrho_1_1d2_1_1SeparationScenario.html</anchorfile>
      <anchor>a412ef190f6f2e26770cb99f4289901cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const UnitVec</type>
      <name>axis</name>
      <anchorfile>structplayrho_1_1d2_1_1SeparationScenario.html</anchorfile>
      <anchor>a242beaf2d1fd0eae0775b8df33036657</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Length2</type>
      <name>localPoint</name>
      <anchorfile>structplayrho_1_1d2_1_1SeparationScenario.html</anchorfile>
      <anchor>a0a942b76e9bea03620d7eb56a200d408</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Type</type>
      <name>type</name>
      <anchorfile>structplayrho_1_1d2_1_1SeparationScenario.html</anchorfile>
      <anchor>ae70fb173f67515d4aee87831cb585b74</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::Shape</name>
    <filename>classplayrho_1_1d2_1_1Shape.html</filename>
    <class kind="struct">playrho::d2::Shape::Concept</class>
    <class kind="struct">playrho::d2::Shape::Model</class>
    <member kind="function">
      <type></type>
      <name>Shape</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>abb58ed48e6319ee154511d7cf777cc65</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Shape</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a4115a5df86a7d55dd2bc6b2a550ade6b</anchor>
      <arglist>(const Shape &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Shape</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a3b3e2bdf92a75c20cd217306b8eca737</anchor>
      <arglist>(Shape &amp;&amp;other) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Shape</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a62f403b88ce9b5418b70a1cafd83f327</anchor>
      <arglist>(T &amp;&amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>Shape &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>afae45d39c259d86a251a19183e56e703</anchor>
      <arglist>(const Shape &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>Shape &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>acbee1b56e39a192551950a196bb8b6be</anchor>
      <arglist>(Shape &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>Shape &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a08a076ce927458c2b43f6c3b21706cf3</anchor>
      <arglist>(T &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a63cf8a6770b252e74335895bc5e2cdcc</anchor>
      <arglist>(Shape &amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_value</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>aca717d0407529c53735c9b71df6a3b87</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::enable_if_t&lt;!std::is_same_v&lt; DecayedType, Shape &gt;, DecayedType &gt;</type>
      <name>DecayedTypeIfNotSelf</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>af291fdd001874a50febb300fcbed228f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::shared_ptr&lt; const Concept &gt;</type>
      <name>m_self</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>aed8187741a62d95d0d6e0ab657fed045</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend ChildCounter</type>
      <name>GetChildCount</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>ac04194136cade2a9cb3db0ce6234b3fc</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend DistanceProxy</type>
      <name>GetChild</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>aef5a495e8d68c39d47d049f51ec5452f</anchor>
      <arglist>(const Shape &amp;shape, ChildCounter index)</arglist>
    </member>
    <member kind="friend">
      <type>friend MassData</type>
      <name>GetMassData</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a1f9e8db270c93956369ac55920c462d7</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a9d425ca5951dc633c1a63d5449091871</anchor>
      <arglist>(const Shape &amp;shape, ChildCounter idx)</arglist>
    </member>
    <member kind="friend">
      <type>friend Real</type>
      <name>GetFriction</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a7391adc084afda958cdb54b10229990c</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend Real</type>
      <name>GetRestitution</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>ab731ba8dc3b08ed048d5348def3f0ab6</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend NonNegative&lt; AreaDensity &gt;</type>
      <name>GetDensity</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a154958fa91ee5653a279fc28e1472ab8</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>Transform</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a5affc9e0eb1efb455e629467b34f12fd</anchor>
      <arglist>(Shape &amp;shape, const Mat22 &amp;m)</arglist>
    </member>
    <member kind="friend">
      <type>friend const void *</type>
      <name>GetData</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a2b3ae4694d7e8995f4500e9a84e25046</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend TypeID</type>
      <name>GetType</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>aa0874edd64ea7ae7e3dc4a49f88cd15f</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend std::add_pointer_t&lt; std::add_const_t&lt; T &gt; &gt;</type>
      <name>TypeCast</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a26f0e014fb16e6493ff6fb297d6a726a</anchor>
      <arglist>(const Shape *value) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>aab78335ce5150860eca7156ef23cc6c4</anchor>
      <arglist>(const Shape &amp;lhs, const Shape &amp;rhs) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a8725ac7fabaac950fabc413b492da29e</anchor>
      <arglist>(const Shape &amp;lhs, const Shape &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeAABB</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a74afc15ef58efc35461a1580887e5363</anchor>
      <arglist>(const Shape &amp;shape, const Transformation &amp;xf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gaada5f6c5635166baaf1bc81636d8b93a</anchor>
      <arglist>(const Shape &amp;shape, ChildCounter childIndex, const RayCastInput &amp;input, const Transformation &amp;transform) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestPoint</name>
      <anchorfile>group__TestPointGroup.html</anchorfile>
      <anchor>gafcfbf811dc989043838f0a4c7c64b59b</anchor>
      <arglist>(const Shape &amp;shape, Length2 point) noexcept</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>TypeCast</name>
      <anchorfile>classplayrho_1_1d2_1_1Shape.html</anchorfile>
      <anchor>a2552f9d7b9b8d2c5cf4b5ef71140b709</anchor>
      <arglist>(const Shape &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::ShapeBuilder</name>
    <filename>structplayrho_1_1d2_1_1ShapeBuilder.html</filename>
    <templarg></templarg>
    <base>playrho::d2::BaseShapeConf</base>
    <member kind="function">
      <type>constexpr</type>
      <name>ShapeBuilder</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a558159d7ca933373babfd6b92833b6b1</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>ShapeBuilder</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a5a4e945ce53ed29bb8017fdbae4ebe38</anchor>
      <arglist>(const BaseShapeConf &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ConcreteConf &amp;</type>
      <name>UseFriction</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a178bb3a59366b17f0c122c32d4b0b8e3</anchor>
      <arglist>(NonNegative&lt; Real &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ConcreteConf &amp;</type>
      <name>UseRestitution</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a3d4e6ad77845a03047737cce3037fffe</anchor>
      <arglist>(Finite&lt; Real &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ConcreteConf &amp;</type>
      <name>UseDensity</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>ada5289c242c8db386aee2da38dc6e510</anchor>
      <arglist>(NonNegative&lt; AreaDensity &gt; value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeBuilder&lt; ChainShapeConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1ShapeBuilder.html</filename>
    <base>playrho::d2::BaseShapeConf</base>
    <member kind="function">
      <type>constexpr</type>
      <name>ShapeBuilder</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a558159d7ca933373babfd6b92833b6b1</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>ShapeBuilder</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a5a4e945ce53ed29bb8017fdbae4ebe38</anchor>
      <arglist>(const BaseShapeConf &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ChainShapeConf &amp;</type>
      <name>UseFriction</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a178bb3a59366b17f0c122c32d4b0b8e3</anchor>
      <arglist>(NonNegative&lt; Real &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ChainShapeConf &amp;</type>
      <name>UseRestitution</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a3d4e6ad77845a03047737cce3037fffe</anchor>
      <arglist>(Finite&lt; Real &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ChainShapeConf &amp;</type>
      <name>UseDensity</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>ada5289c242c8db386aee2da38dc6e510</anchor>
      <arglist>(NonNegative&lt; AreaDensity &gt; value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeBuilder&lt; DiskShapeConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1ShapeBuilder.html</filename>
    <base>playrho::d2::BaseShapeConf</base>
    <member kind="function">
      <type>constexpr</type>
      <name>ShapeBuilder</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a558159d7ca933373babfd6b92833b6b1</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>ShapeBuilder</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a5a4e945ce53ed29bb8017fdbae4ebe38</anchor>
      <arglist>(const BaseShapeConf &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr DiskShapeConf &amp;</type>
      <name>UseFriction</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a178bb3a59366b17f0c122c32d4b0b8e3</anchor>
      <arglist>(NonNegative&lt; Real &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr DiskShapeConf &amp;</type>
      <name>UseRestitution</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a3d4e6ad77845a03047737cce3037fffe</anchor>
      <arglist>(Finite&lt; Real &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr DiskShapeConf &amp;</type>
      <name>UseDensity</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>ada5289c242c8db386aee2da38dc6e510</anchor>
      <arglist>(NonNegative&lt; AreaDensity &gt; value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeBuilder&lt; EdgeShapeConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1ShapeBuilder.html</filename>
    <base>playrho::d2::BaseShapeConf</base>
    <member kind="function">
      <type>constexpr</type>
      <name>ShapeBuilder</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a558159d7ca933373babfd6b92833b6b1</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>ShapeBuilder</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a5a4e945ce53ed29bb8017fdbae4ebe38</anchor>
      <arglist>(const BaseShapeConf &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr EdgeShapeConf &amp;</type>
      <name>UseFriction</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a178bb3a59366b17f0c122c32d4b0b8e3</anchor>
      <arglist>(NonNegative&lt; Real &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr EdgeShapeConf &amp;</type>
      <name>UseRestitution</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a3d4e6ad77845a03047737cce3037fffe</anchor>
      <arglist>(Finite&lt; Real &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr EdgeShapeConf &amp;</type>
      <name>UseDensity</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>ada5289c242c8db386aee2da38dc6e510</anchor>
      <arglist>(NonNegative&lt; AreaDensity &gt; value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeBuilder&lt; MultiShapeConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1ShapeBuilder.html</filename>
    <base>playrho::d2::BaseShapeConf</base>
    <member kind="function">
      <type>constexpr</type>
      <name>ShapeBuilder</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a558159d7ca933373babfd6b92833b6b1</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>ShapeBuilder</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a5a4e945ce53ed29bb8017fdbae4ebe38</anchor>
      <arglist>(const BaseShapeConf &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr MultiShapeConf &amp;</type>
      <name>UseFriction</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a178bb3a59366b17f0c122c32d4b0b8e3</anchor>
      <arglist>(NonNegative&lt; Real &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr MultiShapeConf &amp;</type>
      <name>UseRestitution</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a3d4e6ad77845a03047737cce3037fffe</anchor>
      <arglist>(Finite&lt; Real &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr MultiShapeConf &amp;</type>
      <name>UseDensity</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>ada5289c242c8db386aee2da38dc6e510</anchor>
      <arglist>(NonNegative&lt; AreaDensity &gt; value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeBuilder&lt; PolygonShapeConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1ShapeBuilder.html</filename>
    <base>playrho::d2::BaseShapeConf</base>
    <member kind="function">
      <type>constexpr</type>
      <name>ShapeBuilder</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a558159d7ca933373babfd6b92833b6b1</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>ShapeBuilder</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a5a4e945ce53ed29bb8017fdbae4ebe38</anchor>
      <arglist>(const BaseShapeConf &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr PolygonShapeConf &amp;</type>
      <name>UseFriction</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a178bb3a59366b17f0c122c32d4b0b8e3</anchor>
      <arglist>(NonNegative&lt; Real &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr PolygonShapeConf &amp;</type>
      <name>UseRestitution</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a3d4e6ad77845a03047737cce3037fffe</anchor>
      <arglist>(Finite&lt; Real &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr PolygonShapeConf &amp;</type>
      <name>UseDensity</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>ada5289c242c8db386aee2da38dc6e510</anchor>
      <arglist>(NonNegative&lt; AreaDensity &gt; value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeBuilder&lt; ShapeConf &gt;</name>
    <filename>structplayrho_1_1d2_1_1ShapeBuilder.html</filename>
    <base>playrho::d2::BaseShapeConf</base>
    <member kind="function">
      <type>constexpr</type>
      <name>ShapeBuilder</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a558159d7ca933373babfd6b92833b6b1</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>ShapeBuilder</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a5a4e945ce53ed29bb8017fdbae4ebe38</anchor>
      <arglist>(const BaseShapeConf &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ShapeConf &amp;</type>
      <name>UseFriction</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a178bb3a59366b17f0c122c32d4b0b8e3</anchor>
      <arglist>(NonNegative&lt; Real &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ShapeConf &amp;</type>
      <name>UseRestitution</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>a3d4e6ad77845a03047737cce3037fffe</anchor>
      <arglist>(Finite&lt; Real &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ShapeConf &amp;</type>
      <name>UseDensity</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeBuilder.html</anchorfile>
      <anchor>ada5289c242c8db386aee2da38dc6e510</anchor>
      <arglist>(NonNegative&lt; AreaDensity &gt; value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::ShapeConf</name>
    <filename>structplayrho_1_1d2_1_1ShapeConf.html</filename>
    <base>ShapeBuilder&lt; ShapeConf &gt;</base>
    <member kind="function">
      <type>constexpr</type>
      <name>ShapeBuilder</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeConf.html</anchorfile>
      <anchor>a558159d7ca933373babfd6b92833b6b1</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>ShapeBuilder</name>
      <anchorfile>structplayrho_1_1d2_1_1ShapeConf.html</anchorfile>
      <anchor>a5a4e945ce53ed29bb8017fdbae4ebe38</anchor>
      <arglist>(const BaseShapeConf &amp;value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::Simplex</name>
    <filename>classplayrho_1_1d2_1_1Simplex.html</filename>
    <class kind="struct">playrho::d2::Simplex::Cache</class>
    <member kind="typedef">
      <type>SimplexEdges::size_type</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1d2_1_1Simplex.html</anchorfile>
      <anchor>aa09547ee35a1d556d336b39bb4e42f1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArrayList&lt; Real, MaxSimplexEdges, std::remove_const&lt; decltype(MaxSimplexEdges)&gt;::type &gt;</type>
      <name>Coefficients</name>
      <anchorfile>classplayrho_1_1d2_1_1Simplex.html</anchorfile>
      <anchor>a13182e4772a3721b437a06779bfd76f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr SimplexEdges</type>
      <name>GetEdges</name>
      <anchorfile>classplayrho_1_1d2_1_1Simplex.html</anchorfile>
      <anchor>a10ef4ae3f0939a14934d7d96dd78a4e1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const SimplexEdge &amp;</type>
      <name>GetSimplexEdge</name>
      <anchorfile>classplayrho_1_1d2_1_1Simplex.html</anchorfile>
      <anchor>a84c15cfdf23cccd81f1a3213b1557863</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Real</type>
      <name>GetCoefficient</name>
      <anchorfile>classplayrho_1_1d2_1_1Simplex.html</anchorfile>
      <anchor>a926797bdfce0464e1067ca352486dac1</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classplayrho_1_1d2_1_1Simplex.html</anchorfile>
      <anchor>a01271aa5f68e6c0360d1b5709128770f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Cache</type>
      <name>GetCache</name>
      <anchorfile>classplayrho_1_1d2_1_1Simplex.html</anchorfile>
      <anchor>ae4e2c906e65ba580c20f5b5fe6d1f37e</anchor>
      <arglist>(const SimplexEdges &amp;edges) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Real</type>
      <name>CalcMetric</name>
      <anchorfile>classplayrho_1_1d2_1_1Simplex.html</anchorfile>
      <anchor>a21f4fbe4f435a497f723ba4692745d13</anchor>
      <arglist>(const SimplexEdges &amp;simplexEdges)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Simplex</type>
      <name>Get</name>
      <anchorfile>classplayrho_1_1d2_1_1Simplex.html</anchorfile>
      <anchor>aa29f341b7742ae85f6a0650d8e495a6a</anchor>
      <arglist>(const SimplexEdge &amp;s0) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Simplex</type>
      <name>Get</name>
      <anchorfile>classplayrho_1_1d2_1_1Simplex.html</anchorfile>
      <anchor>a67974276b721135016f384f5475990ef</anchor>
      <arglist>(const SimplexEdge &amp;s0, const SimplexEdge &amp;s1) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Simplex</type>
      <name>Get</name>
      <anchorfile>classplayrho_1_1d2_1_1Simplex.html</anchorfile>
      <anchor>ab745b96a84c8e8340e8abf7efbfd3c69</anchor>
      <arglist>(const SimplexEdge &amp;s0, const SimplexEdge &amp;s1, const SimplexEdge &amp;s2) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Simplex</type>
      <name>Get</name>
      <anchorfile>classplayrho_1_1d2_1_1Simplex.html</anchorfile>
      <anchor>a9c422b7a3f95fe304c3d442350fe2301</anchor>
      <arglist>(const SimplexEdges &amp;edges) noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Simplex</name>
      <anchorfile>classplayrho_1_1d2_1_1Simplex.html</anchorfile>
      <anchor>abd14dc30e5f8a92ac04738ab63fce707</anchor>
      <arglist>(const SimplexEdges &amp;simplexEdges, const Coefficients &amp;normalizedWeights) noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SimplexEdges</type>
      <name>m_simplexEdges</name>
      <anchorfile>classplayrho_1_1d2_1_1Simplex.html</anchorfile>
      <anchor>a6b9fc441f6480d43e331c78123eaaf4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Coefficients</type>
      <name>m_normalizedWeights</name>
      <anchorfile>classplayrho_1_1d2_1_1Simplex.html</anchorfile>
      <anchor>a9c4a201ba6c5243dcd5ed03396ed4eaf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::SimplexEdge</name>
    <filename>classplayrho_1_1d2_1_1SimplexEdge.html</filename>
    <member kind="function">
      <type></type>
      <name>SimplexEdge</name>
      <anchorfile>classplayrho_1_1d2_1_1SimplexEdge.html</anchorfile>
      <anchor>a302d4590ff337587c2be97914585b990</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>SimplexEdge</name>
      <anchorfile>classplayrho_1_1d2_1_1SimplexEdge.html</anchorfile>
      <anchor>aa611a4974180fa84fdab11c080a50b1d</anchor>
      <arglist>(const SimplexEdge &amp;copy)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>SimplexEdge</name>
      <anchorfile>classplayrho_1_1d2_1_1SimplexEdge.html</anchorfile>
      <anchor>a4f20bca7d10fd4382a6006871bff9680</anchor>
      <arglist>(Length2 pA, VertexCounter iA, Length2 pB, VertexCounter iB) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetPointA</name>
      <anchorfile>classplayrho_1_1d2_1_1SimplexEdge.html</anchorfile>
      <anchor>a39f8f8045f66f2a391023c38d2f732d4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetPointB</name>
      <anchorfile>classplayrho_1_1d2_1_1SimplexEdge.html</anchorfile>
      <anchor>a237041927bcfca462c005529d21a13d2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetIndexA</name>
      <anchorfile>classplayrho_1_1d2_1_1SimplexEdge.html</anchorfile>
      <anchor>a8df75aba147bfcd60a777351a653903e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetIndexB</name>
      <anchorfile>classplayrho_1_1d2_1_1SimplexEdge.html</anchorfile>
      <anchor>a5b2d2fef45819121bdd387a56a44471a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetIndexPair</name>
      <anchorfile>classplayrho_1_1d2_1_1SimplexEdge.html</anchorfile>
      <anchor>aa6759d7ab3da8f2cdb271bf046031a82</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Length2</type>
      <name>m_wA</name>
      <anchorfile>classplayrho_1_1d2_1_1SimplexEdge.html</anchorfile>
      <anchor>ad0c2d6a5d9bf988834076ea0fee99518</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Length2</type>
      <name>m_wB</name>
      <anchorfile>classplayrho_1_1d2_1_1SimplexEdge.html</anchorfile>
      <anchor>ad5e412eeee8e20fb25ff55c652f1031e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexPair</type>
      <name>m_indexPair</name>
      <anchorfile>classplayrho_1_1d2_1_1SimplexEdge.html</anchorfile>
      <anchor>a8fb084da29bba4c6beb10c5c973adef8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::SizedRange</name>
    <filename>classplayrho_1_1SizedRange.html</filename>
    <templarg></templarg>
    <base>playrho::Range</base>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1SizedRange.html</anchorfile>
      <anchor>afb0d072ac67e66418f5d45ed63efaa30</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>SizedRange</name>
      <anchorfile>classplayrho_1_1SizedRange.html</anchorfile>
      <anchor>a131e4d9b4837b024b0a5ba132f7250a0</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>SizedRange</name>
      <anchorfile>classplayrho_1_1SizedRange.html</anchorfile>
      <anchor>a619387007f5445d8827ea303b62222f3</anchor>
      <arglist>(typename Range&lt; IT &gt;::iterator_type iter_begin, typename Range&lt; IT &gt;::iterator_type iter_end, size_type size) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classplayrho_1_1SizedRange.html</anchorfile>
      <anchor>a298683fd29c1b416eccc8d1543b0e87b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_type</type>
      <name>m_size</name>
      <anchorfile>classplayrho_1_1SizedRange.html</anchorfile>
      <anchor>a9f8ea354f35aef9e570f7cf3930ca17f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::Span</name>
    <filename>classplayrho_1_1Span.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>data_type</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>a71f2562f09ebcc2077d54844556707d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>data_type *</type>
      <name>pointer</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>a4ebcb51676a0de69e4a8e1ed2c389762</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const data_type *</type>
      <name>const_pointer</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>ad58b1f45f17cc2d44e9574e9fadc7271</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>ab168aaeaa6439758345a1ad6d2d3368e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Span</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>aa5b01aab6e08e9e68c837bc484783e60</anchor>
      <arglist>(const Span &amp;copy)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Span</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>ad851b25c4531c92389186dbe1814fe79</anchor>
      <arglist>(pointer array, size_type size) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Span</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>a7de1ab7b524515dce4cb659b64cb3881</anchor>
      <arglist>(data_type(&amp;array)[SIZE]) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Span</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>a436f5ebe163f794865951914d4bb3c7a</anchor>
      <arglist>(U &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Span</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>a92b02e6a1208189dc8d6af2a5ec84fc4</anchor>
      <arglist>(std::initializer_list&lt; T &gt; list) noexcept</arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>begin</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>a3a5b487c1f1bd3836229446ee1cbb5b8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_pointer</type>
      <name>cbegin</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>a801ea93ca0ecde35e3599a37b9d2e696</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>end</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>a6af40e1afd77999c87fe31260e13e0c3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_pointer</type>
      <name>cend</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>a99db26b218cd2950dfa0f2caf4594ce1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>data_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>af9975d64194fada4d335663c9b64ce8d</anchor>
      <arglist>(size_type index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const data_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>ac2bf69dc112d83f536622d2b0aa0294f</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>aface1cea0aaf8e6911a8f3473712285f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>data</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>a179f2bbfe30ddc06c2bb951d759f5666</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>a798828a0922d7a61c8005316cd80f76d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>pointer</type>
      <name>m_array</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>a38d3ec22cd9ab0117625c15ad18f624f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_type</type>
      <name>m_size</name>
      <anchorfile>classplayrho_1_1Span.html</anchorfile>
      <anchor>a7466573ff867023499d17992dea0f528</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::StackAllocator</name>
    <filename>classplayrho_1_1StackAllocator.html</filename>
    <class kind="struct">playrho::StackAllocator::AllocationRecord</class>
    <class kind="struct">playrho::StackAllocator::Conf</class>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>a0bafd291e17d9f128088d4bef621e9f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StackAllocator</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>ae4eae1341918e7a7e5a6ed3d10edc84b</anchor>
      <arglist>(Conf config=GetDefaultConf())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StackAllocator</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>a758d218aef5b2637acdf12bea4700b71</anchor>
      <arglist>(const StackAllocator &amp;copy)=delete</arglist>
    </member>
    <member kind="function">
      <type>StackAllocator &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>a8a48daabf0a431c13a008db54879b7cc</anchor>
      <arglist>(const StackAllocator &amp;other)=delete</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>Allocate</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>a1ecbcaa8d549ffa1522e7128fc8a684d</anchor>
      <arglist>(size_type size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Free</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>a74aadaded9475221a0ea343bff727df5</anchor>
      <arglist>(void *p) noexcept</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>AllocateArray</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>a1902b15365c55a19c21e9103565e3447</anchor>
      <arglist>(size_type size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>a42fcb9c0ff893451d417a7390a0779d8</anchor>
      <arglist>(void *p) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetMaxAllocation</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>a5dea6fdea4c280522c87c9971d309f6c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetEntryCount</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>a1d9b7f75f4b0e9f03723023a051196b2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetIndex</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>afdba831ecea6d5cc6d44a4051a65e6a4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetAllocation</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>a1c161fe331b7784d7139e6032dc754a1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetPreallocatedSize</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>ae9af1be801d148021936d83e00dccd1b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetMaxEntries</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>a2314cc547523157f10b1afe5e53105f6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr Conf</type>
      <name>GetDefaultConf</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>aa8e1777833bf1c2b10679acd4daa99ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *const</type>
      <name>m_data</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>a458a928fbff32f61a66e7a8438ecdb67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AllocationRecord *const</type>
      <name>m_entries</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>acab9e8a35f7776ae7f93b8db8672c61f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_type const</type>
      <name>m_size</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>a3082a61ad73398ed3a3232acc83647c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_type const</type>
      <name>m_max_entries</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>ae58859955642c27a2004d7dfb219dc42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_type</type>
      <name>m_index</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>aef1ebe7d943aad091475c131e9c73c61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_type</type>
      <name>m_allocation</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>a1d84c4b525f257c66cd389fa84325eb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_type</type>
      <name>m_maxAllocation</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>a333fdc39581d938b1b0dde6fc7a9bb66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_type</type>
      <name>m_entryCount</name>
      <anchorfile>classplayrho_1_1StackAllocator.html</anchorfile>
      <anchor>a1b4bf219f95344d27b77c3be4d1cf00a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::TOIOutput::Statistics</name>
    <filename>structplayrho_1_1TOIOutput_1_1Statistics.html</filename>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(DefaultMaxToiIters)&gt;::type</type>
      <name>toi_iter_type</name>
      <anchorfile>structplayrho_1_1TOIOutput_1_1Statistics.html</anchorfile>
      <anchor>a9c13fac3cddaab2929c7e3109231f7d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(DefaultMaxDistanceIters)&gt;::type</type>
      <name>dist_iter_type</name>
      <anchorfile>structplayrho_1_1TOIOutput_1_1Statistics.html</anchorfile>
      <anchor>a741a2e6921ede4b9845e2078e8089ec1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(DefaultMaxToiRootIters)&gt;::type</type>
      <name>root_iter_type</name>
      <anchorfile>structplayrho_1_1TOIOutput_1_1Statistics.html</anchorfile>
      <anchor>aeaef49f811b7603b236db6e5f4a44801</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Wider&lt; toi_iter_type &gt;::type</type>
      <name>toi_sum_type</name>
      <anchorfile>structplayrho_1_1TOIOutput_1_1Statistics.html</anchorfile>
      <anchor>a75c3a0c41935f0dc4dd43b97cc9d252f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Wider&lt; dist_iter_type &gt;::type</type>
      <name>dist_sum_type</name>
      <anchorfile>structplayrho_1_1TOIOutput_1_1Statistics.html</anchorfile>
      <anchor>a3ddf7cb3c9575ed71940027186d11378</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Wider&lt; root_iter_type &gt;::type</type>
      <name>root_sum_type</name>
      <anchorfile>structplayrho_1_1TOIOutput_1_1Statistics.html</anchorfile>
      <anchor>a8b34d9dcdde83b0f8c70edbc503a2e6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>toi_sum_type</type>
      <name>sum_finder_iters</name>
      <anchorfile>structplayrho_1_1TOIOutput_1_1Statistics.html</anchorfile>
      <anchor>a34c182fa1ac03ed52af67c48e3029fd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>dist_sum_type</type>
      <name>sum_dist_iters</name>
      <anchorfile>structplayrho_1_1TOIOutput_1_1Statistics.html</anchorfile>
      <anchor>a6cec2125783884456c9642ffb69aafc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>root_sum_type</type>
      <name>sum_root_iters</name>
      <anchorfile>structplayrho_1_1TOIOutput_1_1Statistics.html</anchorfile>
      <anchor>a92b3b857a6d3b0336c85ab388543528a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>toi_iter_type</type>
      <name>toi_iters</name>
      <anchorfile>structplayrho_1_1TOIOutput_1_1Statistics.html</anchorfile>
      <anchor>a9935def8ecce62156b6e864cec91ee24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>dist_iter_type</type>
      <name>max_dist_iters</name>
      <anchorfile>structplayrho_1_1TOIOutput_1_1Statistics.html</anchorfile>
      <anchor>a9e8238c810e61f665478d60375e3d307</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>root_iter_type</type>
      <name>max_root_iters</name>
      <anchorfile>structplayrho_1_1TOIOutput_1_1Statistics.html</anchorfile>
      <anchor>ae5860339700dac34b811c4aa06b95d2f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::StepConf</name>
    <filename>structplayrho_1_1StepConf.html</filename>
    <member kind="typedef">
      <type>TimestepIters</type>
      <name>iteration_type</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a8e5a2fa02589f5bdd860ce232242cdc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Time</type>
      <name>deltaTime</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>aa18cfd71f1a39e7dd9912d7038f6364e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>dtRatio</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a457b239d0d715ceab05b1c78425633a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Time</type>
      <name>minStillTimeToSleep</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a07971deda1d7a35d41eb9019721d13ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Positive&lt; Length &gt;</type>
      <name>linearSlop</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a0a8774f5c57ec70ec8b1ca0ad7073e4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Positive&lt; Angle &gt;</type>
      <name>angularSlop</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a7c61d899e596d1fb07b1cc80ada0efbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>regResolutionRate</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a5d582ba59086657963565e68978f10ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>regMinSeparation</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a7b18d37a3c6cd9b55ea0d17cbda2ec11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum</type>
      <name>regMinMomentum</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a31610ef1c5216ed2bf50e5229ef05470</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>toiResolutionRate</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>abbf7f5f8efc72c95dec494efcdec09e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>toiMinSeparation</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a35a04831d008075123c6c211b4ce12f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum</type>
      <name>toiMinMomentum</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a8a28be956ca4e2e4d9c0c626c9314e5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>targetDepth</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a2b76a2f94caee657304bbe29cf2091ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Length &gt;</type>
      <name>tolerance</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a74a6805a0aa494299d5dc1ef6f7666db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinearVelocity</type>
      <name>velocityThreshold</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a1df1b4fee721cf88f35fc08879027033</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>maxTranslation</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>ac3d3dd18627b28b89a94eb32bb0763f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Angle</type>
      <name>maxRotation</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a0ab48d76f772682e5d2d2d937eacdde4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>maxLinearCorrection</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a24913ef211ff767753c1eb318e0514da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Angle</type>
      <name>maxAngularCorrection</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a5eb64a27f2fb8884d6dd4565ed691f66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinearVelocity</type>
      <name>linearSleepTolerance</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a79e5be983b4eba45d408543271083682</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AngularVelocity</type>
      <name>angularSleepTolerance</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>afc71be34f8fdc86f38a743b939445747</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>displaceMultiplier</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>adf8c8af6cc3464d9d035d58ac27e9cbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>aabbExtension</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a2843eaacd8bc5a99f9764d734deb5399</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>maxCirclesRatio</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a46c9f8cd3881c7f65056c485110230ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iteration_type</type>
      <name>regVelocityIterations</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a1f5ec452297bda2078479948243fa9d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iteration_type</type>
      <name>regPositionIterations</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a03001af44bdce6e20979ccc98db4506b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iteration_type</type>
      <name>toiVelocityIterations</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>af40b741271dd2a22cb32603636f049c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iteration_type</type>
      <name>toiPositionIterations</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a86822faef8e85cdf0ec7e48a7a6b4721</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iteration_type</type>
      <name>maxToiRootIters</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a8add4646cce4ae296e2e129b074bc3d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iteration_type</type>
      <name>maxToiIters</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a75c4fdf3872c14c4fbdb2eac5c3cace4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iteration_type</type>
      <name>maxDistanceIters</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a6bf667a0a634c992cbe1c3f5112f50e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>iteration_type</type>
      <name>maxSubSteps</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>aa3a018f1176d9ab03b89d15090bdda7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>doWarmStart</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a15442afc3e0dc7b585a950938440f3eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>doToi</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a281a00a1aea4cd4a3390b16b4d49e881</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>doBlocksolve</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a628dca6d25124bf34e9c3c830b691c4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>InvalidIteration</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a50f4d886787a88a1e353637e78e0a8f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>MovementConf</type>
      <name>GetMovementConf</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a9f5227d01d6f7c75ac2399c3da7b5572</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetMaxRegLinearCorrection</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a396f543b42eadf60ef9e730edc77912c</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMaxTranslationWithinTolerance</name>
      <anchorfile>structplayrho_1_1StepConf.html</anchorfile>
      <anchor>a05d21c386ca6d39d5cc35cbad350a8c9</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::StepStats</name>
    <filename>structplayrho_1_1StepStats.html</filename>
    <member kind="variable">
      <type>PreStepStats</type>
      <name>pre</name>
      <anchorfile>structplayrho_1_1StepStats.html</anchorfile>
      <anchor>aaa9b52669cc1a5c973e02b0191fe3ad1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RegStepStats</type>
      <name>reg</name>
      <anchorfile>structplayrho_1_1StepStats.html</anchorfile>
      <anchor>aefbc7755ee10149deec23d10ab7de550</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ToiStepStats</type>
      <name>toi</name>
      <anchorfile>structplayrho_1_1StepStats.html</anchorfile>
      <anchor>a0d07c4b00bc71b0dc49c15ca0e1e8177</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::Sweep</name>
    <filename>classplayrho_1_1d2_1_1Sweep.html</filename>
    <member kind="function">
      <type></type>
      <name>Sweep</name>
      <anchorfile>classplayrho_1_1d2_1_1Sweep.html</anchorfile>
      <anchor>adb1aa8f6c8499543c3f4d3d66f41c772</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Sweep</name>
      <anchorfile>classplayrho_1_1d2_1_1Sweep.html</anchorfile>
      <anchor>acf1df6304ccecb14a24851247b7b4b95</anchor>
      <arglist>(const Sweep &amp;copy)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Sweep</name>
      <anchorfile>classplayrho_1_1d2_1_1Sweep.html</anchorfile>
      <anchor>ae1649f8ea4cb33ae29c42d360bb6ad18</anchor>
      <arglist>(const Position p0, const Position p1, const Length2 lc=Length2{0_m, 0_m}, Real a0=0) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Sweep</name>
      <anchorfile>classplayrho_1_1d2_1_1Sweep.html</anchorfile>
      <anchor>aa4b480968972751dbf46cfb31bb77974</anchor>
      <arglist>(const Position p, const Length2 lc=Length2{0_m, 0_m})</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalCenter</name>
      <anchorfile>classplayrho_1_1d2_1_1Sweep.html</anchorfile>
      <anchor>abd3fb7d9c09928fe51e69a769de06de0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetAlpha0</name>
      <anchorfile>classplayrho_1_1d2_1_1Sweep.html</anchorfile>
      <anchor>abd658cc8007c20e90bbc9cf765678a40</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Advance0</name>
      <anchorfile>classplayrho_1_1d2_1_1Sweep.html</anchorfile>
      <anchor>a3597bd76c2b89f3b7f217692071fde47</anchor>
      <arglist>(Real alpha) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetAlpha0</name>
      <anchorfile>classplayrho_1_1d2_1_1Sweep.html</anchorfile>
      <anchor>ae33673e4b1eb0ef92645e37d380c4af4</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Position</type>
      <name>pos0</name>
      <anchorfile>classplayrho_1_1d2_1_1Sweep.html</anchorfile>
      <anchor>afd1e30ab1f1cfc33d1cef14028815fcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Position</type>
      <name>pos1</name>
      <anchorfile>classplayrho_1_1d2_1_1Sweep.html</anchorfile>
      <anchor>ab5e2f463dbb73884d939921442975d70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Length2</type>
      <name>localCenter</name>
      <anchorfile>classplayrho_1_1d2_1_1Sweep.html</anchorfile>
      <anchor>a80a374190f6721da6e737805d85cfe4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>alpha0</name>
      <anchorfile>classplayrho_1_1d2_1_1Sweep.html</anchorfile>
      <anchor>a0eedb59adb18445b4e17d88bdf33e933</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Sweep</type>
      <name>GetNormalized</name>
      <anchorfile>classplayrho_1_1d2_1_1Sweep.html</anchorfile>
      <anchor>a09b21383c1a73afea37f11e0ba906a76</anchor>
      <arglist>(Sweep sweep) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>classplayrho_1_1d2_1_1Sweep.html</anchorfile>
      <anchor>af317b3462727e3832e11d157b7e0b7b4</anchor>
      <arglist>(const Sweep &amp;lhs, const Sweep &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>classplayrho_1_1d2_1_1Sweep.html</anchorfile>
      <anchor>af0f08a3cbef074f5f78272c205967888</anchor>
      <arglist>(const Sweep &amp;lhs, const Sweep &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>classplayrho_1_1d2_1_1Sweep.html</anchorfile>
      <anchor>afce9c1dea61c4ba26d5785f2f20c3bff</anchor>
      <arglist>(const d2::Sweep &amp;value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::TargetJointConf</name>
    <filename>structplayrho_1_1d2_1_1TargetJointConf.html</filename>
    <base>JointBuilder&lt; TargetJointConf &gt;</base>
    <member kind="typedef">
      <type>JointBuilder&lt; TargetJointConf &gt;</type>
      <name>super</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a6a8c5eb78f152275cb85f5663d90849a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>TargetJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>aad963dd6411270de852520890f4e5363</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>TargetJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>ad4446bba768db20d53a2c054dd607d4d</anchor>
      <arglist>(BodyID b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseTarget</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a094dd6124aa6fd379df2ecd1682bb2d2</anchor>
      <arglist>(Length2 v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseAnchor</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a38f364f283919567658b3adc73a82fd1</anchor>
      <arglist>(Length2 v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseMaxForce</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a23e362cd5938c66979a7a2e37d4e0fc2</anchor>
      <arglist>(NonNegative&lt; Force &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseFrequency</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a9e21a61026dba2ad7aa89a5cf894dbcb</anchor>
      <arglist>(NonNegative&lt; Frequency &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseDampingRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a60fb6c4ed8577f60ac2c761211e454eb</anchor>
      <arglist>(NonNegative&lt; Real &gt; v) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>target</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>aa959f11ea9a7a0bb34f26bddd23ac279</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorB</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a72b323ef7b13dbb4c938b3c1e52fdf05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Force &gt;</type>
      <name>maxForce</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a749a955e6dc7a4e5a7ded98234247e54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Frequency &gt;</type>
      <name>frequency</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>aec28fc57d68a4813f7ccffd86f9680de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Real &gt;</type>
      <name>dampingRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>ad29e45c3c35828dd86d1c7d6d7c0d7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InvMass</type>
      <name>gamma</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>af72b0470815ad15e5624fc446602113a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum2</type>
      <name>impulse</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a942a1aa3000753b79d28b278f6616b45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>rB</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a473831ba28c4809ec7410244b1a4749b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Mass22</type>
      <name>mass</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a29911e97b716ea01dd4e9e3f62300923</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinearVelocity2</type>
      <name>C</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>aa032969e3948762ea46f6560743e3d53</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLocalAnchorA</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a742f3193b44e8038c6e21455f2cc3630</anchor>
      <arglist>(const TargetJointConf &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a7ec73e83dfde52a4e59c7ef6099e5073</anchor>
      <arglist>(const TargetJointConf &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>constexpr AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>afa5cbad1175b924fab7ca3259d3ba8a9</anchor>
      <arglist>(const TargetJointConf &amp;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>ShiftOrigin</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>aa3c8c836af2b8a71674101a3ace0d1bf</anchor>
      <arglist>(TargetJointConf &amp;object, Length2 newOrigin)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetTarget</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a643e49fe049c3befd1f928e4d732493c</anchor>
      <arglist>(const TargetJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Mass22</type>
      <name>GetEffectiveMassMatrix</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a6cb7d8c6d0e8773c08196d43f14cc022</anchor>
      <arglist>(const TargetJointConf &amp;object, const BodyConstraint &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a346af89c324e945122ee42c65baae268</anchor>
      <arglist>(TargetJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a9cbea07928041f632c555303e34e7ef8</anchor>
      <arglist>(TargetJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a04c5b600eda74e0641524a3001e33888</anchor>
      <arglist>(const TargetJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetTarget</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a0d143822f59e9a0dec84d98dbffdb540</anchor>
      <arglist>(TargetJointConf &amp;object, Length2 value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetMaxForce</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a5433a140e014287406113e1ce6508dae</anchor>
      <arglist>(const TargetJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetMaxForce</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a26488bda71d5ddb9df78975b2f37cb03</anchor>
      <arglist>(TargetJointConf &amp;object, NonNegative&lt; Force &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetFrequency</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>ac9971494480e00e4c3fa99cba906339e</anchor>
      <arglist>(TargetJointConf &amp;object, NonNegative&lt; Frequency &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetDampingRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1TargetJointConf.html</anchorfile>
      <anchor>a93ccadc0666446729427c72fbdac4ad4</anchor>
      <arglist>(TargetJointConf &amp;object, Real value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::ToiConf</name>
    <filename>structplayrho_1_1ToiConf.html</filename>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(DefaultMaxToiRootIters)&gt;::type</type>
      <name>root_iter_type</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>a56e0a09ccf175d198fc9d666e38aeeda</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(DefaultMaxToiIters)&gt;::type</type>
      <name>toi_iter_type</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>ac94304792ddfaa28f2694fe481fe2672</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(DefaultMaxDistanceIters)&gt;::type</type>
      <name>dist_iter_type</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>a4f756e01422799774afa985e0d1015d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr ToiConf &amp;</type>
      <name>UseTimeMax</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>ad7b89507b38d9828517f9fe0a4a7f425</anchor>
      <arglist>(Real value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ToiConf &amp;</type>
      <name>UseTargetDepth</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>ac8ff8fa57b9b0feb94bcdb89338e8596</anchor>
      <arglist>(Length value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ToiConf &amp;</type>
      <name>UseTolerance</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>a51c195b71203089fe2fea9ee30afb0d0</anchor>
      <arglist>(NonNegative&lt; Length &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ToiConf &amp;</type>
      <name>UseMaxRootIters</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>a7964804fa919853789eb420fe0160562</anchor>
      <arglist>(root_iter_type value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ToiConf &amp;</type>
      <name>UseMaxToiIters</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>a95df3b9fec0fbf550e5be10b55008d28</anchor>
      <arglist>(toi_iter_type value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ToiConf &amp;</type>
      <name>UseMaxDistIters</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>a60e907eebd04753e4e439662d6173fc0</anchor>
      <arglist>(dist_iter_type value) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>tMax</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>adb4e539adcd8716874cde28d766e2c01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>targetDepth</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>a8b7f001e3a9ed75456e9c57a848adb8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Length &gt;</type>
      <name>tolerance</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>af3adc26131d9ff0ad07394050a9bed29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>root_iter_type</type>
      <name>maxRootIters</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>ae0b64b5021ec7955f14bd38a110da96d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>toi_iter_type</type>
      <name>maxToiIters</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>a650135a3a192ec27008d761829999a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>dist_iter_type</type>
      <name>maxDistIters</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>a888c7b7e3b1da157e13e5ffe3e8d2fc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetDefaultToiConf</name>
      <anchorfile>structplayrho_1_1ToiConf.html</anchorfile>
      <anchor>a4dd2e3047d7ac0836f8921a496e8d432</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::TOIOutput</name>
    <filename>structplayrho_1_1TOIOutput.html</filename>
    <class kind="struct">playrho::TOIOutput::Statistics</class>
    <member kind="enumeration">
      <type></type>
      <name>State</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a7387423560f6283896f1c6af1f938991</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_unknown</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a7387423560f6283896f1c6af1f938991a7277831fd743eb0b202caf6a2be37690</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_touching</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a7387423560f6283896f1c6af1f938991aa03eb76dce3674392a4997431bb983b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_separated</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a7387423560f6283896f1c6af1f938991a8f70064ad03a98b993560de73ed5fa1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_overlapped</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a7387423560f6283896f1c6af1f938991ab22bfc4f78b826eb32a0079a9f0338c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_maxRootIters</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a7387423560f6283896f1c6af1f938991a36362566a28d97af1009889591d3c832</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_nextAfter</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a7387423560f6283896f1c6af1f938991ad280465b4cd5e6dc5e5e3518d5eee177</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_maxToiIters</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a7387423560f6283896f1c6af1f938991a99fc075705e9cfc63a6104a677ce38a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_belowMinTarget</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a7387423560f6283896f1c6af1f938991a1f404aa403d419b5aef650f790bc2b84</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_maxDistIters</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a7387423560f6283896f1c6af1f938991a9c9984fcc437427ff3c0f63685198980</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_unknown</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a7387423560f6283896f1c6af1f938991a7277831fd743eb0b202caf6a2be37690</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_touching</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a7387423560f6283896f1c6af1f938991aa03eb76dce3674392a4997431bb983b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_separated</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a7387423560f6283896f1c6af1f938991a8f70064ad03a98b993560de73ed5fa1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_overlapped</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a7387423560f6283896f1c6af1f938991ab22bfc4f78b826eb32a0079a9f0338c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_maxRootIters</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a7387423560f6283896f1c6af1f938991a36362566a28d97af1009889591d3c832</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_nextAfter</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a7387423560f6283896f1c6af1f938991ad280465b4cd5e6dc5e5e3518d5eee177</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_maxToiIters</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a7387423560f6283896f1c6af1f938991a99fc075705e9cfc63a6104a677ce38a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_belowMinTarget</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a7387423560f6283896f1c6af1f938991a1f404aa403d419b5aef650f790bc2b84</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>e_maxDistIters</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a7387423560f6283896f1c6af1f938991a9c9984fcc437427ff3c0f63685198980</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TOIOutput</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a007d6e0e69c4ea61f3533f1e1620d28a</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TOIOutput</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>aa48d4a57b379e3d512de15e51b6b13b7</anchor>
      <arglist>(Real t, Statistics s, State z) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>time</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>ad5cf3c441ab46997872599dd9d36b7a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Statistics</type>
      <name>stats</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>a8e630aad9c1b2d327262ba234eef8e00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>State</type>
      <name>state</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>ad85a5dcc7114b7fbcfb7b4b47e13b1f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TOIOutput</type>
      <name>GetToiViaSat</name>
      <anchorfile>structplayrho_1_1TOIOutput.html</anchorfile>
      <anchor>acad38ef6ac1537641203f3eb15225235</anchor>
      <arglist>(const DistanceProxy &amp;proxyA, const Sweep &amp;sweepA, const DistanceProxy &amp;proxyB, const Sweep &amp;sweepB, ToiConf conf=GetDefaultToiConf())</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::ToiStepStats</name>
    <filename>structplayrho_1_1ToiStepStats.html</filename>
    <member kind="typedef">
      <type>std::uint32_t</type>
      <name>counter_type</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>ac6751bb15f4e9ac864f105551c2d6daa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(DefaultMaxDistanceIters)&gt;::type</type>
      <name>dist_iter_type</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>a0e184fb1dddfe85ed0f9a4005faf520f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(DefaultMaxToiIters)&gt;::type</type>
      <name>toi_iter_type</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>ad4b068c8d5c64784305225a5f0c216d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(DefaultMaxToiRootIters)&gt;::type</type>
      <name>root_iter_type</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>a726b6ee05b91f66b20971afb7e89209b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>minSeparation</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>a9596997026a847f921188645090d1663</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum</type>
      <name>maxIncImpulse</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>a3d086070f4bad6c7156e9e398092111a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>islandsFound</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>ae466af8e97bb15813097cec240589f44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>islandsSolved</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>aba23e37196c26b7b6afa20156e846727</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>contactsFound</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>a614585faa33479c9e38f256ca8b170ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>contactsAtMaxSubSteps</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>aed71e06c62e9d8d09d3a598d4cf82666</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>contactsUpdatedToi</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>a29e709023574e867b53672010c5c9fb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>contactsUpdatedTouching</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>ab0204469cd47268bd459ea7141ec26e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>contactsSkippedTouching</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>a58dfb912213be2db96c30613441e7f94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>contactsAdded</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>a8a4b932412bdcac28d1442b23be55955</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>proxiesMoved</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>ac63aa8851a42781c9150241e55aa93cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>sumPosIters</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>ab7c0a5025aa30d4aa806f630b686ce70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>sumVelIters</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>a3c428fa3b8f15202af3462dedb152451</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>counter_type</type>
      <name>maxSimulContacts</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>ac93c931d7375403054aa91d54f7e2429</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>dist_iter_type</type>
      <name>maxDistIters</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>ac02dc191dbd8b62af27ee8a8756b6950</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>toi_iter_type</type>
      <name>maxToiIters</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>abff84a9f2765a553fa7c015d4236a294</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>root_iter_type</type>
      <name>maxRootIters</name>
      <anchorfile>structplayrho_1_1ToiStepStats.html</anchorfile>
      <anchor>ac9684005b60da6251f1cc4add7cea2c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::Transformation</name>
    <filename>structplayrho_1_1d2_1_1Transformation.html</filename>
    <member kind="variable">
      <type>Length2</type>
      <name>p</name>
      <anchorfile>structplayrho_1_1d2_1_1Transformation.html</anchorfile>
      <anchor>ab2b20471f74fef015279a0bb396210e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitVec</type>
      <name>q</name>
      <anchorfile>structplayrho_1_1d2_1_1Transformation.html</anchorfile>
      <anchor>a1f21f610db905ad56edc7720dd8598f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1d2_1_1Transformation.html</anchorfile>
      <anchor>a9f366fc4f9a298d3dded719b628a9933</anchor>
      <arglist>(const Transformation &amp;lhs, const Transformation &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1d2_1_1Transformation.html</anchorfile>
      <anchor>ac100cc2e77031bd058367006ddd2ebe1</anchor>
      <arglist>(const Transformation &amp;lhs, const Transformation &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>structplayrho_1_1d2_1_1Transformation.html</anchorfile>
      <anchor>af76924a9aee97c42840a3867b3cb612c</anchor>
      <arglist>(const d2::Transformation &amp;value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::DynamicTree::TreeNode</name>
    <filename>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</filename>
    <member kind="function">
      <type>constexpr</type>
      <name>TreeNode</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>acfda0cebec26589b52bf3abe4c558a2b</anchor>
      <arglist>(const TreeNode &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>TreeNode</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a37aa8412243dcb10959e13bbc4162759</anchor>
      <arglist>(TreeNode &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>TreeNode</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a3fac557e91648e18349c9ba97d864217</anchor>
      <arglist>(Size other=DynamicTree::GetInvalidSize()) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>TreeNode</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a8e02e11ea6750d56b58c0b4e7a54f539</anchor>
      <arglist>(const LeafData &amp;value, AABB aabb, Size other=DynamicTree::GetInvalidSize()) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>TreeNode</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a0a8f1ccda85a2161a24b280d307c0939</anchor>
      <arglist>(const BranchData &amp;value, AABB aabb, Height height, Size other=DynamicTree::GetInvalidSize()) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TreeNode &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a31bdee8b0731760ab5754a994675d309</anchor>
      <arglist>(const TreeNode &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr Height</type>
      <name>GetHeight</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a1568672ba85575d567bb32c2e813a74d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Size</type>
      <name>GetOther</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>af5bf613443ef6a3dc8b19204fd4b5a69</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetOther</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a96b983ee96239e7fd46f6c7e47141d66</anchor>
      <arglist>(Size other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB</type>
      <name>GetAABB</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a9a68dec55589b5db9dee942e1d4f085a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetAABB</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a5e9077e10da5571c2030d35f95ddb940</anchor>
      <arglist>(AABB value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnusedData</type>
      <name>AsUnused</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a766500aaf1b3699d3e4c126c3dbf19d0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr LeafData</type>
      <name>AsLeaf</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a501e5ab1de6b3e493be3c0c4f1b0151e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BranchData</type>
      <name>AsBranch</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a31e5bcacd04b4b449ee35b49992cc61a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>Assign</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a0f56a85f45dc38e6f2f62b4e3f1e190c</anchor>
      <arglist>(const UnusedData &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>Assign</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>ae9a754a4726d26a0dfe2491c2c77fbee</anchor>
      <arglist>(const LeafData &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>Assign</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a1d6c1858942a72331c728be0981d54f1</anchor>
      <arglist>(const BranchData &amp;v, const AABB &amp;bb, Height h) noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AABB</type>
      <name>m_aabb</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>ae62f55f9a9d321c0ce733281db0c57a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>VariantData</type>
      <name>m_variant</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a36acd54b4bbccbe35d17a09499d2a3bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Height</type>
      <name>m_height</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a5778630746fbeb20c88fb9091a9d91ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Size</type>
      <name>m_other</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>ae96eeec24e8a28e98005cebdaefc57b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsUnused</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a3ad7a716e1b2bc2677ebf9ec441401f4</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsLeaf</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>aae0b95c4e9a195b7c6c5d64c8664ab35</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsBranch</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a7d5284fb35640d9a05b6b5346933c82a</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsUnused</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a3ad7a716e1b2bc2677ebf9ec441401f4</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsLeaf</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>aae0b95c4e9a195b7c6c5d64c8664ab35</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsBranch</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>a7d5284fb35640d9a05b6b5346933c82a</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB</type>
      <name>GetAABB</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>ab6f093bc8ffe077f0d5895bfc5b672a7</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr DynamicTree::Size</type>
      <name>GetNext</name>
      <anchorfile>classplayrho_1_1d2_1_1DynamicTree_1_1TreeNode.html</anchorfile>
      <anchor>acd3a93c79eb73866acfe12518491c2cd</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::tuple_element&lt; I, playrho::d2::UnitVec &gt;</name>
    <filename>classstd_1_1tuple__element_3_01I_00_01playrho_1_1d2_1_1UnitVec_01_4.html</filename>
    <templarg>I</templarg>
    <member kind="typedef">
      <type>playrho::Real</type>
      <name>type</name>
      <anchorfile>classstd_1_1tuple__element_3_01I_00_01playrho_1_1d2_1_1UnitVec_01_4.html</anchorfile>
      <anchor>a5bc886e515b6f24c8733d5e99d63c78d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::tuple_element&lt; I, playrho::Vector&lt; T, N &gt; &gt;</name>
    <filename>classstd_1_1tuple__element_3_01I_00_01playrho_1_1Vector_3_01T_00_01N_01_4_01_4.html</filename>
    <templarg>I</templarg>
    <templarg></templarg>
    <templarg>N</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>type</name>
      <anchorfile>classstd_1_1tuple__element_3_01I_00_01playrho_1_1Vector_3_01T_00_01N_01_4_01_4.html</anchorfile>
      <anchor>a8b0304c7b250c39300ab4ad96e299953</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::tuple_size&lt; playrho::ArrayList&lt; T, N, SIZE_TYPE &gt; &gt;</name>
    <filename>classstd_1_1tuple__size_3_01playrho_1_1ArrayList_3_01T_00_01N_00_01SIZE__TYPE_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>std::tuple_size&lt; playrho::d2::UnitVec &gt;</name>
    <filename>classstd_1_1tuple__size_3_01playrho_1_1d2_1_1UnitVec_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>std::tuple_size&lt; playrho::Vector&lt; T, N &gt; &gt;</name>
    <filename>classstd_1_1tuple__size_3_01playrho_1_1Vector_3_01T_00_01N_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::TypeInfo</name>
    <filename>structplayrho_1_1TypeInfo.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static constexpr const char *</type>
      <name>name</name>
      <anchorfile>structplayrho_1_1TypeInfo.html</anchorfile>
      <anchor>a4c186756c991fffde3ba0e7b22d3efb5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::TypeInfo&lt; d2::DistanceJointConf &gt;</name>
    <filename>structplayrho_1_1TypeInfo_3_01d2_1_1DistanceJointConf_01_4.html</filename>
    <member kind="variable" static="yes">
      <type>static constexpr const char *</type>
      <name>name</name>
      <anchorfile>structplayrho_1_1TypeInfo_3_01d2_1_1DistanceJointConf_01_4.html</anchorfile>
      <anchor>afc1c45b4860df2eab4e95808d828b6a7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::TypeInfo&lt; d2::FrictionJointConf &gt;</name>
    <filename>structplayrho_1_1TypeInfo_3_01d2_1_1FrictionJointConf_01_4.html</filename>
    <member kind="variable" static="yes">
      <type>static constexpr const char *</type>
      <name>name</name>
      <anchorfile>structplayrho_1_1TypeInfo_3_01d2_1_1FrictionJointConf_01_4.html</anchorfile>
      <anchor>ac94d9568a3ad5a8f78f87080904403b1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::TypeInfo&lt; d2::GearJointConf &gt;</name>
    <filename>structplayrho_1_1TypeInfo_3_01d2_1_1GearJointConf_01_4.html</filename>
    <member kind="variable" static="yes">
      <type>static constexpr const char *</type>
      <name>name</name>
      <anchorfile>structplayrho_1_1TypeInfo_3_01d2_1_1GearJointConf_01_4.html</anchorfile>
      <anchor>af8035034f57a67cdfefd39dca07f6b18</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::TypeInfo&lt; d2::MotorJointConf &gt;</name>
    <filename>structplayrho_1_1TypeInfo_3_01d2_1_1MotorJointConf_01_4.html</filename>
    <member kind="variable" static="yes">
      <type>static constexpr const char *</type>
      <name>name</name>
      <anchorfile>structplayrho_1_1TypeInfo_3_01d2_1_1MotorJointConf_01_4.html</anchorfile>
      <anchor>af838aa0a839a2bdeb91f72db9c584418</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::TypeInfo&lt; d2::PrismaticJointConf &gt;</name>
    <filename>structplayrho_1_1TypeInfo_3_01d2_1_1PrismaticJointConf_01_4.html</filename>
    <member kind="variable" static="yes">
      <type>static constexpr const char *</type>
      <name>name</name>
      <anchorfile>structplayrho_1_1TypeInfo_3_01d2_1_1PrismaticJointConf_01_4.html</anchorfile>
      <anchor>afeb3099a97872d6b52db94c6178ef05c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::TypeInfo&lt; d2::PulleyJointConf &gt;</name>
    <filename>structplayrho_1_1TypeInfo_3_01d2_1_1PulleyJointConf_01_4.html</filename>
    <member kind="variable" static="yes">
      <type>static constexpr const char *</type>
      <name>name</name>
      <anchorfile>structplayrho_1_1TypeInfo_3_01d2_1_1PulleyJointConf_01_4.html</anchorfile>
      <anchor>ac31b6e73fb62a4f9ed42e2b828cab072</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::TypeInfo&lt; d2::RevoluteJointConf &gt;</name>
    <filename>structplayrho_1_1TypeInfo_3_01d2_1_1RevoluteJointConf_01_4.html</filename>
    <member kind="variable" static="yes">
      <type>static constexpr const char *</type>
      <name>name</name>
      <anchorfile>structplayrho_1_1TypeInfo_3_01d2_1_1RevoluteJointConf_01_4.html</anchorfile>
      <anchor>a8c18dd545f0394ac1210f8735c216a7e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::TypeInfo&lt; d2::RopeJointConf &gt;</name>
    <filename>structplayrho_1_1TypeInfo_3_01d2_1_1RopeJointConf_01_4.html</filename>
    <member kind="variable" static="yes">
      <type>static constexpr const char *</type>
      <name>name</name>
      <anchorfile>structplayrho_1_1TypeInfo_3_01d2_1_1RopeJointConf_01_4.html</anchorfile>
      <anchor>a02004ec30df6b87c77beeec247ec4be6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::TypeInfo&lt; d2::TargetJointConf &gt;</name>
    <filename>structplayrho_1_1TypeInfo_3_01d2_1_1TargetJointConf_01_4.html</filename>
    <member kind="variable" static="yes">
      <type>static constexpr const char *</type>
      <name>name</name>
      <anchorfile>structplayrho_1_1TypeInfo_3_01d2_1_1TargetJointConf_01_4.html</anchorfile>
      <anchor>a27b9359cee1e86a9a23a702cd5871a50</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::TypeInfo&lt; d2::WeldJointConf &gt;</name>
    <filename>structplayrho_1_1TypeInfo_3_01d2_1_1WeldJointConf_01_4.html</filename>
    <member kind="variable" static="yes">
      <type>static constexpr const char *</type>
      <name>name</name>
      <anchorfile>structplayrho_1_1TypeInfo_3_01d2_1_1WeldJointConf_01_4.html</anchorfile>
      <anchor>ace157770448d10ec5c143ac224e4fa9a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::TypeInfo&lt; d2::WheelJointConf &gt;</name>
    <filename>structplayrho_1_1TypeInfo_3_01d2_1_1WheelJointConf_01_4.html</filename>
    <member kind="variable" static="yes">
      <type>static constexpr const char *</type>
      <name>name</name>
      <anchorfile>structplayrho_1_1TypeInfo_3_01d2_1_1WheelJointConf_01_4.html</anchorfile>
      <anchor>a1d9c41833b11d5049caa91f88be59e2c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::TypeInfo&lt; double &gt;</name>
    <filename>structplayrho_1_1TypeInfo_3_01double_01_4.html</filename>
    <member kind="variable" static="yes">
      <type>static constexpr const char *</type>
      <name>name</name>
      <anchorfile>structplayrho_1_1TypeInfo_3_01double_01_4.html</anchorfile>
      <anchor>a84820476c3b10690fd7a963fa2e35658</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::TypeInfo&lt; Fixed32 &gt;</name>
    <filename>structplayrho_1_1TypeInfo_3_01Fixed32_01_4.html</filename>
    <member kind="variable" static="yes">
      <type>static constexpr const char *</type>
      <name>name</name>
      <anchorfile>structplayrho_1_1TypeInfo_3_01Fixed32_01_4.html</anchorfile>
      <anchor>aca99f829ba102c7c40010f4dfd330e25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::TypeInfo&lt; float &gt;</name>
    <filename>structplayrho_1_1TypeInfo_3_01float_01_4.html</filename>
    <member kind="variable" static="yes">
      <type>static constexpr const char *</type>
      <name>name</name>
      <anchorfile>structplayrho_1_1TypeInfo_3_01float_01_4.html</anchorfile>
      <anchor>a619f40c49ae0cd51c49b046481debe23</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::TypeInfo&lt; long double &gt;</name>
    <filename>structplayrho_1_1TypeInfo_3_01long_01double_01_4.html</filename>
    <member kind="variable" static="yes">
      <type>static constexpr const char *</type>
      <name>name</name>
      <anchorfile>structplayrho_1_1TypeInfo_3_01long_01double_01_4.html</anchorfile>
      <anchor>a64a905a09d36e67c6a264439d7833da8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::underlying_type</name>
    <filename>structplayrho_1_1underlying__type.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::underlying_type&lt; detail::IndexingNamedType&lt; T, Tag &gt; &gt;</name>
    <filename>structplayrho_1_1underlying__type_3_01detail_1_1IndexingNamedType_3_01T_00_01Tag_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::underlying_type&lt; T, std::enable_if_t&lt; std::is_enum_v&lt; T &gt; &gt; &gt;</name>
    <filename>structplayrho_1_1underlying__type_3_01T_00_01std_1_1enable__if__t_3_01std_1_1is__enum__v_3_01T_01_4_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>playrho::UnitIntervalChecker</name>
    <filename>structplayrho_1_1UnitIntervalChecker.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::invalid_argument</type>
      <name>exception_type</name>
      <anchorfile>structplayrho_1_1UnitIntervalChecker.html</anchorfile>
      <anchor>ab6f889eefd2d058cfeb7b7f238a805ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structplayrho_1_1UnitIntervalChecker.html</anchorfile>
      <anchor>adf2c0abb5fc8ef659327602093e509af</anchor>
      <arglist>() noexcept -&gt; decltype(static_cast&lt; T &gt;(0))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>structplayrho_1_1UnitIntervalChecker.html</anchorfile>
      <anchor>a1b254e932bfd7daab71585738e2b0194</anchor>
      <arglist>(const T &amp;v) -&gt; decltype((v &gt;=static_cast&lt; T &gt;(0) &amp;&amp;v&lt;=static_cast&lt; T &gt;(1)), T(v))</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::UnitVec</name>
    <filename>classplayrho_1_1d2_1_1UnitVec.html</filename>
    <member kind="typedef">
      <type>Real</type>
      <name>value_type</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a1a7a18b4800feac830d4375c39889da2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a4c0ec8c437dcabe459480d31af35d31b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a3f9af7e3f3778be7c5397325fdfda6b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_pointer</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>ab01e2b6172ff17d8ef644c5915ac0ddc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_iterator</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a8768204b9d09d03c772c14967a925791</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a7913b334ce42e2e6dd740254e76cec64</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::enable_if_t&lt; IsArithmetic&lt; T &gt;::value, std::pair&lt; UnitVec, T &gt; &gt;</type>
      <name>PolarCoord</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>ab3503f1c480f004d65ee5562c1039140</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>af55450330386cf1cde58138e559bb39f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>ab2eb4e744f2d9576257c943eb33d31de</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>ad7db3fec687e84fa542b4658cc72acc1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a1daed0036c85f79db339d621bd821e7e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a51c92fd671c1aa855d11fc2270d27b8f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a05b457eb94056a8e3b3865024d9e7597</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>aa0a3a0f53320c3e0461bee2b2c8ea30b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crbegin</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>ab22cbe6daab96aee5c3c4117834b06c7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crend</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a8d44f8cbedd5f58a3a47ec217607e2cd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a2395f8349fa44e4705f22704a40b6603</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a0fc0438361d440f40960594f3c50e9d6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a1e6755e80f6737ff7823b135a1f47318</anchor>
      <arglist>(size_type pos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>at</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a7067c246d03f6de8a054b8ce3810b9b2</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_pointer</type>
      <name>data</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>ab20e84975636fb39972c50fb55251771</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetX</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a5b4a5ee8a7ab899d9dc87e948f0efbf9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetY</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>afd94abdf9e62bb60313227c20a5757d8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec</type>
      <name>FlipXY</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a292d9c273617a3ada4a20f53b0e22cbf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec</type>
      <name>FlipX</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a9383bbc355a8e001d1eda9fcc0f98aa2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec</type>
      <name>FlipY</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a939f4c4a3315818d7cdbb2475406cc41</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec</type>
      <name>Rotate</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>ab8759fd715e0db2fa7658a90aef100b2</anchor>
      <arglist>(UnitVec amount) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec</type>
      <name>GetRevPerpendicular</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a1d9cfdf4a1d77ff7f795f4208170a239</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec</type>
      <name>GetFwdPerpendicular</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a7b903c5d18da3007dad5d31d66ffa872</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec</type>
      <name>operator-</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a897c2964930d475d582c5ccfd8cee10f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec</type>
      <name>operator+</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>ab4d6bd9c4e747cc1f0118769269df628</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec</type>
      <name>Absolute</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>ad1bcbfce894d533d52b98c6032da9661</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr UnitVec</type>
      <name>GetRight</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a989ef293213c6b3a4d1901533445cd85</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr UnitVec</type>
      <name>GetTop</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>ad3f132b30c82d05c107a8d8231db244b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr UnitVec</type>
      <name>GetLeft</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a44b186e8e5faa989049dcb9fba7367c7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr UnitVec</type>
      <name>GetBottom</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a814ef2468f93f2785da36e6651840a14</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr UnitVec</type>
      <name>GetZero</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a36ae084e9c7c9e474738daa40674bf73</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr UnitVec</type>
      <name>GetTopRight</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a1e841cb8279292e8fbaf0d83b4cd0ddb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr UnitVec</type>
      <name>GetBottomRight</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>ad253c43a96160cfccf89cf650abd225e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr UnitVec</type>
      <name>GetDefaultFallback</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a9c0d12b9f3e418a49933c367305c01c0</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PolarCoord&lt; T &gt;</type>
      <name>Get</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>aef1ad009c9795d9efa1ab947ff9beeaa</anchor>
      <arglist>(const T x, const T y, const UnitVec fallback=GetDefaultFallback()) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UnitVec</type>
      <name>Get</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>ad9319728f9eadf0b10e667b3438e36bb</anchor>
      <arglist>(const Angle angle) noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>constexpr</type>
      <name>UnitVec</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a314880aa78a2001a00c4fa97a66bdfe8</anchor>
      <arglist>(value_type x, value_type y) noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>value_type</type>
      <name>m_elems</name>
      <anchorfile>classplayrho_1_1d2_1_1UnitVec.html</anchorfile>
      <anchor>a3a41af8f0b9b0c4cace05c3b81539b85</anchor>
      <arglist>[2]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::DynamicTree::UnusedData</name>
    <filename>structplayrho_1_1d2_1_1DynamicTree_1_1UnusedData.html</filename>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::WorldImpl::UpdateContactsData</name>
    <filename>structplayrho_1_1d2_1_1WorldImpl_1_1UpdateContactsData.html</filename>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(DefaultMaxDistanceIters)&gt;::type</type>
      <name>dist_iter_type</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldImpl_1_1UpdateContactsData.html</anchorfile>
      <anchor>a0763223506043c400899321fde8c44d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(DefaultMaxToiIters)&gt;::type</type>
      <name>toi_iter_type</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldImpl_1_1UpdateContactsData.html</anchorfile>
      <anchor>a56f94d6598620f055fbbac6c5a327778</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(DefaultMaxToiRootIters)&gt;::type</type>
      <name>root_iter_type</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldImpl_1_1UpdateContactsData.html</anchorfile>
      <anchor>abf7efb6122b625d7d2d80456a33ea84d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ContactCounter</type>
      <name>numAtMaxSubSteps</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldImpl_1_1UpdateContactsData.html</anchorfile>
      <anchor>a0bfdcfde0a56ee84e2c1ac19d7dc1468</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ContactCounter</type>
      <name>numUpdatedTOI</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldImpl_1_1UpdateContactsData.html</anchorfile>
      <anchor>a9744560008e378de72f925a2184dc6c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ContactCounter</type>
      <name>numValidTOI</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldImpl_1_1UpdateContactsData.html</anchorfile>
      <anchor>a23e40337ac8a993314492d8d01989bdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>dist_iter_type</type>
      <name>maxDistIters</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldImpl_1_1UpdateContactsData.html</anchorfile>
      <anchor>a86d1d965a26bbda793be812ec3df42d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>toi_iter_type</type>
      <name>maxToiIters</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldImpl_1_1UpdateContactsData.html</anchorfile>
      <anchor>a3f14bc1ec32ea0d2a5a73b715cc54ac1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>root_iter_type</type>
      <name>maxRootIters</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldImpl_1_1UpdateContactsData.html</anchorfile>
      <anchor>af7698910f7bdcdb898bd771ca156c82e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::WorldImpl::UpdateContactsStats</name>
    <filename>structplayrho_1_1d2_1_1WorldImpl_1_1UpdateContactsStats.html</filename>
    <member kind="variable">
      <type>ContactCounter</type>
      <name>ignored</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldImpl_1_1UpdateContactsStats.html</anchorfile>
      <anchor>a021530cf68f4ff9e409e966621ab086f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ContactCounter</type>
      <name>updated</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldImpl_1_1UpdateContactsStats.html</anchorfile>
      <anchor>a00fba43d1f34acb4b95dfc6a153f9f7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ContactCounter</type>
      <name>skipped</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldImpl_1_1UpdateContactsStats.html</anchorfile>
      <anchor>a6ff4341db0f4cea24b0787cd7cc84d66</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>playrho::d2::DynamicTree::VariantData</name>
    <filename>unionplayrho_1_1d2_1_1DynamicTree_1_1VariantData.html</filename>
    <member kind="function">
      <type></type>
      <name>VariantData</name>
      <anchorfile>unionplayrho_1_1d2_1_1DynamicTree_1_1VariantData.html</anchorfile>
      <anchor>ab9d7faa68c154e7ed37ca6e6c428d3c8</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>VariantData</name>
      <anchorfile>unionplayrho_1_1d2_1_1DynamicTree_1_1VariantData.html</anchorfile>
      <anchor>aa4e3f926c4854b91ab5c00cc82a88e82</anchor>
      <arglist>(UnusedData value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>VariantData</name>
      <anchorfile>unionplayrho_1_1d2_1_1DynamicTree_1_1VariantData.html</anchorfile>
      <anchor>a2654d1e7a9a27fe448b2f35f065733b2</anchor>
      <arglist>(LeafData value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>VariantData</name>
      <anchorfile>unionplayrho_1_1d2_1_1DynamicTree_1_1VariantData.html</anchorfile>
      <anchor>a4c7c06fb8d9c8c02d8780bd6c0ee2e83</anchor>
      <arglist>(BranchData value) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>UnusedData</type>
      <name>unused</name>
      <anchorfile>unionplayrho_1_1d2_1_1DynamicTree_1_1VariantData.html</anchorfile>
      <anchor>af0f6ddf4eff8e94dfcd39657d7e99184</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LeafData</type>
      <name>leaf</name>
      <anchorfile>unionplayrho_1_1d2_1_1DynamicTree_1_1VariantData.html</anchorfile>
      <anchor>af3306a67708a9a2a1ba3430bb6bd6067</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BranchData</type>
      <name>branch</name>
      <anchorfile>unionplayrho_1_1d2_1_1DynamicTree_1_1VariantData.html</anchorfile>
      <anchor>a3d88c008156bd9bffe05fd9f0cd24ddb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::Vector</name>
    <filename>structplayrho_1_1Vector.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a92ca95984a7bf625e8705b97245a7a8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0bb82780552c224e3736ed516d1c0dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0807d5f6ad7825293d92e8a6e0242734</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a1dac8a92ef859aec019358fed5b4badd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9da6840475f24afb0745263ad7a20314</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a55cf503243bd308dc9961ba0970ab6ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>adb95a88a8f0a112b81be5904979fd1c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a541212ea3d3edf87f5f1ced1a9d3fb84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a01d534d2b418dd90b646a4b9258efcfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; iterator &gt;</type>
      <name>reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a2134b5edd0c13e27350197a8a0268c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0ed34a0b33733cd906a69be2afeeeb1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa368db46827a37158002ac586f3f55c2</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a64e86fe825332bc262819c5edbc4115f</anchor>
      <arglist>(std::enable_if_t&lt; sizeof...(Tail)+1==N, T &gt; head, Tail... tail) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>abe95a16ab6212c279f33f263fbc41dcd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>afc4f9041bb89f865b7491149bf0991a5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a980a432612de0373e65255df5b1f86d2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a640fd6dd0af7123b6e8b47feceaf5375</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9b2981be03a89e12d9783d08d941c5bd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0e4e393aa9b3999b5e7bcd756c7ce88e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af101191765d6e6e8ea67d2365d190cc4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9bebd544f9cb7bb77c8f2600bd194c8f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae2cae3925bba1dc9890cb171491b5c8c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a820156d1e812484e5962b33ada91027a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0de188288645c01c7a0d5663f3ba1624</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab8f7823fbdb7a68dcc009294228f0b9f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7516a64e5f7a1463fb12f7b6f880ffb5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a324c2160a22774e96726fbaa148c552f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7e1b4d33490c25fd9f0c5a9031ebf823</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a4cf7068d7d3c4ea1a2c6859ffd7e749b</anchor>
      <arglist>(size_type pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa90e470ba330d396ba83db1dc29b9522</anchor>
      <arglist>(size_type pos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a96eefa7a8f43dddee954f5cda427d1f8</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ac4fa1827bdfc14cc0c2c1778394f7b70</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a88f495a57b2564bd76d45d515486617c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ac0ee63043ed80188d8e400b7de4668aa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>elements</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a439b81a4f7eb326deec945e632ec37b0</anchor>
      <arglist>[N? N:1]</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; T, N &gt;</type>
      <name>abs</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga901850dd04519b8e6d642ab96a10d9ea</anchor>
      <arglist>(const Vector&lt; T, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab0d92fceef8d7757ae713bd166391c21</anchor>
      <arglist>(const Vector&lt; T, N &gt; &amp;lhs, const Vector&lt; T, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0e16f08723028c63f043c1ad42891b11</anchor>
      <arglist>(const Vector&lt; T, N &gt; &amp;lhs, const Vector&lt; T, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; T, decltype(+T{})&gt;::value, Vector&lt; T, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a56e36a6e89835f4d0de7cc4bbc30004f</anchor>
      <arglist>(Vector&lt; T, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; T, decltype(-T{})&gt;::value, Vector&lt; T, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a581f6521190fcbbfc1aa0813a6f33c04</anchor>
      <arglist>(Vector&lt; T, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; T, decltype(T{}+T{})&gt;::value, Vector&lt; T, N &gt; &amp; &gt;</type>
      <name>operator+=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a85453187a044f3d22a4c9ffea440eeac</anchor>
      <arglist>(Vector&lt; T, N &gt; &amp;lhs, const Vector&lt; T, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; T, decltype(T{} - T{})&gt;::value, Vector&lt; T, N &gt; &amp; &gt;</type>
      <name>operator-=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a92dcbdea02307ed29e5dc13ea59f7655</anchor>
      <arglist>(Vector&lt; T, N &gt; &amp;lhs, const Vector&lt; T, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; T, decltype(T{}+T{})&gt;::value, Vector&lt; T, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aadc7b8a4526dd9380a689345a1dff9d4</anchor>
      <arglist>(Vector&lt; T, N &gt; lhs, const Vector&lt; T, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; T, decltype(T{} - T{})&gt;::value, Vector&lt; T, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a75d04501374b86e6de10706672bdc38d</anchor>
      <arglist>(Vector&lt; T, N &gt; lhs, const Vector&lt; T, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; T1, decltype(T1{} *T2{})&gt;::value, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator*=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af372c516420203fe11aa71d881d376e6</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; T1, decltype(T1{}/T2{})&gt;::value, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator/=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a86e53e0fc25f63401b26f557d4f0dc74</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value, Vector&lt; Vector&lt; OT, C &gt;, A &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab26c32a67232c258f6792be57799a485</anchor>
      <arglist>(const Vector&lt; Vector&lt; T1, B &gt;, A &gt; &amp;lhs, const Vector&lt; Vector&lt; T2, C &gt;, B &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T1 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab83592354f1ddb5b4c4a578b758e3b6f</anchor>
      <arglist>(const T1 s, Vector&lt; T2, N &gt; a) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T2 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>acd667ff0c1d11b44e9ad19b06db6713e</anchor>
      <arglist>(Vector&lt; T1, N &gt; a, const T2 s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsDivisable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T2 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab846bf628e71b3aeea2fc26d282143eb</anchor>
      <arglist>(Vector&lt; T1, N &gt; a, const T2 s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>get</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa10d9373a7aa5e3492fee0877900f738</anchor>
      <arglist>(Vector&lt; T, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af157a36bb1282e34b967881c199d15fa</anchor>
      <arglist>(::std::ostream &amp;os, const Vector&lt; T, N &gt; &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Vector&lt; InvMass &gt;</name>
    <filename>structplayrho_1_1Vector.html</filename>
    <member kind="typedef">
      <type>InvMass</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a92ca95984a7bf625e8705b97245a7a8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0bb82780552c224e3736ed516d1c0dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0807d5f6ad7825293d92e8a6e0242734</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a1dac8a92ef859aec019358fed5b4badd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9da6840475f24afb0745263ad7a20314</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a55cf503243bd308dc9961ba0970ab6ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>adb95a88a8f0a112b81be5904979fd1c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a541212ea3d3edf87f5f1ced1a9d3fb84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a01d534d2b418dd90b646a4b9258efcfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; iterator &gt;</type>
      <name>reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a2134b5edd0c13e27350197a8a0268c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0ed34a0b33733cd906a69be2afeeeb1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa368db46827a37158002ac586f3f55c2</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a64e86fe825332bc262819c5edbc4115f</anchor>
      <arglist>(std::enable_if_t&lt; sizeof...(Tail)+1==N, InvMass &gt; head, Tail... tail) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>abe95a16ab6212c279f33f263fbc41dcd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>afc4f9041bb89f865b7491149bf0991a5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a980a432612de0373e65255df5b1f86d2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a640fd6dd0af7123b6e8b47feceaf5375</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0e4e393aa9b3999b5e7bcd756c7ce88e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9b2981be03a89e12d9783d08d941c5bd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af101191765d6e6e8ea67d2365d190cc4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9bebd544f9cb7bb77c8f2600bd194c8f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae2cae3925bba1dc9890cb171491b5c8c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a820156d1e812484e5962b33ada91027a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a324c2160a22774e96726fbaa148c552f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0de188288645c01c7a0d5663f3ba1624</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7e1b4d33490c25fd9f0c5a9031ebf823</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab8f7823fbdb7a68dcc009294228f0b9f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7516a64e5f7a1463fb12f7b6f880ffb5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a4cf7068d7d3c4ea1a2c6859ffd7e749b</anchor>
      <arglist>(size_type pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa90e470ba330d396ba83db1dc29b9522</anchor>
      <arglist>(size_type pos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a96eefa7a8f43dddee954f5cda427d1f8</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ac4fa1827bdfc14cc0c2c1778394f7b70</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a88f495a57b2564bd76d45d515486617c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ac0ee63043ed80188d8e400b7de4668aa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>elements</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a439b81a4f7eb326deec945e632ec37b0</anchor>
      <arglist>[N? N:1]</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; InvMass, N &gt;</type>
      <name>abs</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga901850dd04519b8e6d642ab96a10d9ea</anchor>
      <arglist>(const Vector&lt; InvMass, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab0d92fceef8d7757ae713bd166391c21</anchor>
      <arglist>(const Vector&lt; InvMass, N &gt; &amp;lhs, const Vector&lt; InvMass, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0e16f08723028c63f043c1ad42891b11</anchor>
      <arglist>(const Vector&lt; InvMass, N &gt; &amp;lhs, const Vector&lt; InvMass, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; InvMass, decltype(+InvMass {})&gt;::value, Vector&lt; InvMass, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a56e36a6e89835f4d0de7cc4bbc30004f</anchor>
      <arglist>(Vector&lt; InvMass, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; InvMass, decltype(InvMass {}+InvMass {})&gt;::value, Vector&lt; InvMass, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aadc7b8a4526dd9380a689345a1dff9d4</anchor>
      <arglist>(Vector&lt; InvMass, N &gt; lhs, const Vector&lt; InvMass, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; InvMass, decltype(-InvMass {})&gt;::value, Vector&lt; InvMass, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a581f6521190fcbbfc1aa0813a6f33c04</anchor>
      <arglist>(Vector&lt; InvMass, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; InvMass, decltype(InvMass {} - InvMass {})&gt;::value, Vector&lt; InvMass, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a75d04501374b86e6de10706672bdc38d</anchor>
      <arglist>(Vector&lt; InvMass, N &gt; lhs, const Vector&lt; InvMass, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; InvMass, decltype(InvMass {}+InvMass {})&gt;::value, Vector&lt; InvMass, N &gt; &amp; &gt;</type>
      <name>operator+=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a85453187a044f3d22a4c9ffea440eeac</anchor>
      <arglist>(Vector&lt; InvMass, N &gt; &amp;lhs, const Vector&lt; InvMass, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; InvMass, decltype(InvMass {} - InvMass {})&gt;::value, Vector&lt; InvMass, N &gt; &amp; &gt;</type>
      <name>operator-=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a92dcbdea02307ed29e5dc13ea59f7655</anchor>
      <arglist>(Vector&lt; InvMass, N &gt; &amp;lhs, const Vector&lt; InvMass, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; T1, decltype(T1{} *T2{})&gt;::value, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator*=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af372c516420203fe11aa71d881d376e6</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; T1, decltype(T1{}/T2{})&gt;::value, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator/=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a86e53e0fc25f63401b26f557d4f0dc74</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value, Vector&lt; Vector&lt; OT, C &gt;, A &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab26c32a67232c258f6792be57799a485</anchor>
      <arglist>(const Vector&lt; Vector&lt; T1, B &gt;, A &gt; &amp;lhs, const Vector&lt; Vector&lt; T2, C &gt;, B &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T1 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab83592354f1ddb5b4c4a578b758e3b6f</anchor>
      <arglist>(const T1 s, Vector&lt; T2, N &gt; a) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T2 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>acd667ff0c1d11b44e9ad19b06db6713e</anchor>
      <arglist>(Vector&lt; T1, N &gt; a, const T2 s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsDivisable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T2 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab846bf628e71b3aeea2fc26d282143eb</anchor>
      <arglist>(Vector&lt; T1, N &gt; a, const T2 s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>get</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa10d9373a7aa5e3492fee0877900f738</anchor>
      <arglist>(Vector&lt; InvMass, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af157a36bb1282e34b967881c199d15fa</anchor>
      <arglist>(::std::ostream &amp;os, const Vector&lt; InvMass, N &gt; &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Vector&lt; Length &gt;</name>
    <filename>structplayrho_1_1Vector.html</filename>
    <member kind="typedef">
      <type>Length</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a92ca95984a7bf625e8705b97245a7a8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0bb82780552c224e3736ed516d1c0dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0807d5f6ad7825293d92e8a6e0242734</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a1dac8a92ef859aec019358fed5b4badd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9da6840475f24afb0745263ad7a20314</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a55cf503243bd308dc9961ba0970ab6ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>adb95a88a8f0a112b81be5904979fd1c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a541212ea3d3edf87f5f1ced1a9d3fb84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a01d534d2b418dd90b646a4b9258efcfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; iterator &gt;</type>
      <name>reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a2134b5edd0c13e27350197a8a0268c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0ed34a0b33733cd906a69be2afeeeb1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa368db46827a37158002ac586f3f55c2</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a64e86fe825332bc262819c5edbc4115f</anchor>
      <arglist>(std::enable_if_t&lt; sizeof...(Tail)+1==N, Length &gt; head, Tail... tail) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>abe95a16ab6212c279f33f263fbc41dcd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>afc4f9041bb89f865b7491149bf0991a5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a980a432612de0373e65255df5b1f86d2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a640fd6dd0af7123b6e8b47feceaf5375</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0e4e393aa9b3999b5e7bcd756c7ce88e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9b2981be03a89e12d9783d08d941c5bd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af101191765d6e6e8ea67d2365d190cc4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9bebd544f9cb7bb77c8f2600bd194c8f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae2cae3925bba1dc9890cb171491b5c8c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a820156d1e812484e5962b33ada91027a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a324c2160a22774e96726fbaa148c552f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0de188288645c01c7a0d5663f3ba1624</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7e1b4d33490c25fd9f0c5a9031ebf823</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab8f7823fbdb7a68dcc009294228f0b9f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7516a64e5f7a1463fb12f7b6f880ffb5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a4cf7068d7d3c4ea1a2c6859ffd7e749b</anchor>
      <arglist>(size_type pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa90e470ba330d396ba83db1dc29b9522</anchor>
      <arglist>(size_type pos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a96eefa7a8f43dddee954f5cda427d1f8</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ac4fa1827bdfc14cc0c2c1778394f7b70</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a88f495a57b2564bd76d45d515486617c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ac0ee63043ed80188d8e400b7de4668aa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>elements</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a439b81a4f7eb326deec945e632ec37b0</anchor>
      <arglist>[N? N:1]</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; Length, N &gt;</type>
      <name>abs</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga901850dd04519b8e6d642ab96a10d9ea</anchor>
      <arglist>(const Vector&lt; Length, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab0d92fceef8d7757ae713bd166391c21</anchor>
      <arglist>(const Vector&lt; Length, N &gt; &amp;lhs, const Vector&lt; Length, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0e16f08723028c63f043c1ad42891b11</anchor>
      <arglist>(const Vector&lt; Length, N &gt; &amp;lhs, const Vector&lt; Length, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; Length, decltype(+Length {})&gt;::value, Vector&lt; Length, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a56e36a6e89835f4d0de7cc4bbc30004f</anchor>
      <arglist>(Vector&lt; Length, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; Length, decltype(Length {}+Length {})&gt;::value, Vector&lt; Length, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aadc7b8a4526dd9380a689345a1dff9d4</anchor>
      <arglist>(Vector&lt; Length, N &gt; lhs, const Vector&lt; Length, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; Length, decltype(-Length {})&gt;::value, Vector&lt; Length, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a581f6521190fcbbfc1aa0813a6f33c04</anchor>
      <arglist>(Vector&lt; Length, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; Length, decltype(Length {} - Length {})&gt;::value, Vector&lt; Length, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a75d04501374b86e6de10706672bdc38d</anchor>
      <arglist>(Vector&lt; Length, N &gt; lhs, const Vector&lt; Length, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; Length, decltype(Length {}+Length {})&gt;::value, Vector&lt; Length, N &gt; &amp; &gt;</type>
      <name>operator+=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a85453187a044f3d22a4c9ffea440eeac</anchor>
      <arglist>(Vector&lt; Length, N &gt; &amp;lhs, const Vector&lt; Length, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; Length, decltype(Length {} - Length {})&gt;::value, Vector&lt; Length, N &gt; &amp; &gt;</type>
      <name>operator-=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a92dcbdea02307ed29e5dc13ea59f7655</anchor>
      <arglist>(Vector&lt; Length, N &gt; &amp;lhs, const Vector&lt; Length, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; T1, decltype(T1{} *T2{})&gt;::value, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator*=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af372c516420203fe11aa71d881d376e6</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; T1, decltype(T1{}/T2{})&gt;::value, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator/=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a86e53e0fc25f63401b26f557d4f0dc74</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value, Vector&lt; Vector&lt; OT, C &gt;, A &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab26c32a67232c258f6792be57799a485</anchor>
      <arglist>(const Vector&lt; Vector&lt; T1, B &gt;, A &gt; &amp;lhs, const Vector&lt; Vector&lt; T2, C &gt;, B &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T1 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab83592354f1ddb5b4c4a578b758e3b6f</anchor>
      <arglist>(const T1 s, Vector&lt; T2, N &gt; a) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T2 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>acd667ff0c1d11b44e9ad19b06db6713e</anchor>
      <arglist>(Vector&lt; T1, N &gt; a, const T2 s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsDivisable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T2 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab846bf628e71b3aeea2fc26d282143eb</anchor>
      <arglist>(Vector&lt; T1, N &gt; a, const T2 s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>get</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa10d9373a7aa5e3492fee0877900f738</anchor>
      <arglist>(Vector&lt; Length, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af157a36bb1282e34b967881c199d15fa</anchor>
      <arglist>(::std::ostream &amp;os, const Vector&lt; Length, N &gt; &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Vector&lt; Length, N &gt;</name>
    <filename>structplayrho_1_1Vector.html</filename>
    <member kind="typedef">
      <type>Length</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a92ca95984a7bf625e8705b97245a7a8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0bb82780552c224e3736ed516d1c0dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0807d5f6ad7825293d92e8a6e0242734</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a1dac8a92ef859aec019358fed5b4badd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9da6840475f24afb0745263ad7a20314</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a55cf503243bd308dc9961ba0970ab6ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>adb95a88a8f0a112b81be5904979fd1c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a541212ea3d3edf87f5f1ced1a9d3fb84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a01d534d2b418dd90b646a4b9258efcfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; iterator &gt;</type>
      <name>reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a2134b5edd0c13e27350197a8a0268c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0ed34a0b33733cd906a69be2afeeeb1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa368db46827a37158002ac586f3f55c2</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a64e86fe825332bc262819c5edbc4115f</anchor>
      <arglist>(std::enable_if_t&lt; sizeof...(Tail)+1==N, Length &gt; head, Tail... tail) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>abe95a16ab6212c279f33f263fbc41dcd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>afc4f9041bb89f865b7491149bf0991a5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a980a432612de0373e65255df5b1f86d2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a640fd6dd0af7123b6e8b47feceaf5375</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0e4e393aa9b3999b5e7bcd756c7ce88e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9b2981be03a89e12d9783d08d941c5bd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af101191765d6e6e8ea67d2365d190cc4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9bebd544f9cb7bb77c8f2600bd194c8f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae2cae3925bba1dc9890cb171491b5c8c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a820156d1e812484e5962b33ada91027a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a324c2160a22774e96726fbaa148c552f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0de188288645c01c7a0d5663f3ba1624</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7e1b4d33490c25fd9f0c5a9031ebf823</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab8f7823fbdb7a68dcc009294228f0b9f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7516a64e5f7a1463fb12f7b6f880ffb5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a4cf7068d7d3c4ea1a2c6859ffd7e749b</anchor>
      <arglist>(size_type pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa90e470ba330d396ba83db1dc29b9522</anchor>
      <arglist>(size_type pos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a96eefa7a8f43dddee954f5cda427d1f8</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ac4fa1827bdfc14cc0c2c1778394f7b70</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a88f495a57b2564bd76d45d515486617c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ac0ee63043ed80188d8e400b7de4668aa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>elements</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a439b81a4f7eb326deec945e632ec37b0</anchor>
      <arglist>[N? N:1]</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; Length, N &gt;</type>
      <name>abs</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga901850dd04519b8e6d642ab96a10d9ea</anchor>
      <arglist>(const Vector&lt; Length, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab0d92fceef8d7757ae713bd166391c21</anchor>
      <arglist>(const Vector&lt; Length, N &gt; &amp;lhs, const Vector&lt; Length, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0e16f08723028c63f043c1ad42891b11</anchor>
      <arglist>(const Vector&lt; Length, N &gt; &amp;lhs, const Vector&lt; Length, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; Length, decltype(+Length {})&gt;::value, Vector&lt; Length, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a56e36a6e89835f4d0de7cc4bbc30004f</anchor>
      <arglist>(Vector&lt; Length, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; Length, decltype(Length {}+Length {})&gt;::value, Vector&lt; Length, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aadc7b8a4526dd9380a689345a1dff9d4</anchor>
      <arglist>(Vector&lt; Length, N &gt; lhs, const Vector&lt; Length, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; Length, decltype(-Length {})&gt;::value, Vector&lt; Length, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a581f6521190fcbbfc1aa0813a6f33c04</anchor>
      <arglist>(Vector&lt; Length, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; Length, decltype(Length {} - Length {})&gt;::value, Vector&lt; Length, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a75d04501374b86e6de10706672bdc38d</anchor>
      <arglist>(Vector&lt; Length, N &gt; lhs, const Vector&lt; Length, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; Length, decltype(Length {}+Length {})&gt;::value, Vector&lt; Length, N &gt; &amp; &gt;</type>
      <name>operator+=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a85453187a044f3d22a4c9ffea440eeac</anchor>
      <arglist>(Vector&lt; Length, N &gt; &amp;lhs, const Vector&lt; Length, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; Length, decltype(Length {} - Length {})&gt;::value, Vector&lt; Length, N &gt; &amp; &gt;</type>
      <name>operator-=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a92dcbdea02307ed29e5dc13ea59f7655</anchor>
      <arglist>(Vector&lt; Length, N &gt; &amp;lhs, const Vector&lt; Length, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; T1, decltype(T1{} *T2{})&gt;::value, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator*=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af372c516420203fe11aa71d881d376e6</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; T1, decltype(T1{}/T2{})&gt;::value, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator/=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a86e53e0fc25f63401b26f557d4f0dc74</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value, Vector&lt; Vector&lt; OT, C &gt;, A &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab26c32a67232c258f6792be57799a485</anchor>
      <arglist>(const Vector&lt; Vector&lt; T1, B &gt;, A &gt; &amp;lhs, const Vector&lt; Vector&lt; T2, C &gt;, B &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T1 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab83592354f1ddb5b4c4a578b758e3b6f</anchor>
      <arglist>(const T1 s, Vector&lt; T2, N &gt; a) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T2 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>acd667ff0c1d11b44e9ad19b06db6713e</anchor>
      <arglist>(Vector&lt; T1, N &gt; a, const T2 s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsDivisable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T2 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab846bf628e71b3aeea2fc26d282143eb</anchor>
      <arglist>(Vector&lt; T1, N &gt; a, const T2 s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>get</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa10d9373a7aa5e3492fee0877900f738</anchor>
      <arglist>(Vector&lt; Length, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af157a36bb1282e34b967881c199d15fa</anchor>
      <arglist>(::std::ostream &amp;os, const Vector&lt; Length, N &gt; &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Vector&lt; LinearAcceleration &gt;</name>
    <filename>structplayrho_1_1Vector.html</filename>
    <member kind="typedef">
      <type>LinearAcceleration</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a92ca95984a7bf625e8705b97245a7a8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0bb82780552c224e3736ed516d1c0dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0807d5f6ad7825293d92e8a6e0242734</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a1dac8a92ef859aec019358fed5b4badd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9da6840475f24afb0745263ad7a20314</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a55cf503243bd308dc9961ba0970ab6ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>adb95a88a8f0a112b81be5904979fd1c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a541212ea3d3edf87f5f1ced1a9d3fb84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a01d534d2b418dd90b646a4b9258efcfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; iterator &gt;</type>
      <name>reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a2134b5edd0c13e27350197a8a0268c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0ed34a0b33733cd906a69be2afeeeb1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa368db46827a37158002ac586f3f55c2</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a64e86fe825332bc262819c5edbc4115f</anchor>
      <arglist>(std::enable_if_t&lt; sizeof...(Tail)+1==N, LinearAcceleration &gt; head, Tail... tail) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>abe95a16ab6212c279f33f263fbc41dcd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>afc4f9041bb89f865b7491149bf0991a5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a980a432612de0373e65255df5b1f86d2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a640fd6dd0af7123b6e8b47feceaf5375</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0e4e393aa9b3999b5e7bcd756c7ce88e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9b2981be03a89e12d9783d08d941c5bd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af101191765d6e6e8ea67d2365d190cc4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9bebd544f9cb7bb77c8f2600bd194c8f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae2cae3925bba1dc9890cb171491b5c8c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a820156d1e812484e5962b33ada91027a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a324c2160a22774e96726fbaa148c552f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0de188288645c01c7a0d5663f3ba1624</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7e1b4d33490c25fd9f0c5a9031ebf823</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab8f7823fbdb7a68dcc009294228f0b9f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7516a64e5f7a1463fb12f7b6f880ffb5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a4cf7068d7d3c4ea1a2c6859ffd7e749b</anchor>
      <arglist>(size_type pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa90e470ba330d396ba83db1dc29b9522</anchor>
      <arglist>(size_type pos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a96eefa7a8f43dddee954f5cda427d1f8</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ac4fa1827bdfc14cc0c2c1778394f7b70</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a88f495a57b2564bd76d45d515486617c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ac0ee63043ed80188d8e400b7de4668aa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>elements</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a439b81a4f7eb326deec945e632ec37b0</anchor>
      <arglist>[N? N:1]</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; LinearAcceleration, N &gt;</type>
      <name>abs</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga901850dd04519b8e6d642ab96a10d9ea</anchor>
      <arglist>(const Vector&lt; LinearAcceleration, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab0d92fceef8d7757ae713bd166391c21</anchor>
      <arglist>(const Vector&lt; LinearAcceleration, N &gt; &amp;lhs, const Vector&lt; LinearAcceleration, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0e16f08723028c63f043c1ad42891b11</anchor>
      <arglist>(const Vector&lt; LinearAcceleration, N &gt; &amp;lhs, const Vector&lt; LinearAcceleration, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; LinearAcceleration, decltype(+LinearAcceleration {})&gt;::value, Vector&lt; LinearAcceleration, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a56e36a6e89835f4d0de7cc4bbc30004f</anchor>
      <arglist>(Vector&lt; LinearAcceleration, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; LinearAcceleration, decltype(LinearAcceleration {}+LinearAcceleration {})&gt;::value, Vector&lt; LinearAcceleration, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aadc7b8a4526dd9380a689345a1dff9d4</anchor>
      <arglist>(Vector&lt; LinearAcceleration, N &gt; lhs, const Vector&lt; LinearAcceleration, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; LinearAcceleration, decltype(-LinearAcceleration {})&gt;::value, Vector&lt; LinearAcceleration, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a581f6521190fcbbfc1aa0813a6f33c04</anchor>
      <arglist>(Vector&lt; LinearAcceleration, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; LinearAcceleration, decltype(LinearAcceleration {} - LinearAcceleration {})&gt;::value, Vector&lt; LinearAcceleration, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a75d04501374b86e6de10706672bdc38d</anchor>
      <arglist>(Vector&lt; LinearAcceleration, N &gt; lhs, const Vector&lt; LinearAcceleration, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; LinearAcceleration, decltype(LinearAcceleration {}+LinearAcceleration {})&gt;::value, Vector&lt; LinearAcceleration, N &gt; &amp; &gt;</type>
      <name>operator+=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a85453187a044f3d22a4c9ffea440eeac</anchor>
      <arglist>(Vector&lt; LinearAcceleration, N &gt; &amp;lhs, const Vector&lt; LinearAcceleration, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; LinearAcceleration, decltype(LinearAcceleration {} - LinearAcceleration {})&gt;::value, Vector&lt; LinearAcceleration, N &gt; &amp; &gt;</type>
      <name>operator-=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a92dcbdea02307ed29e5dc13ea59f7655</anchor>
      <arglist>(Vector&lt; LinearAcceleration, N &gt; &amp;lhs, const Vector&lt; LinearAcceleration, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; T1, decltype(T1{} *T2{})&gt;::value, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator*=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af372c516420203fe11aa71d881d376e6</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; T1, decltype(T1{}/T2{})&gt;::value, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator/=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a86e53e0fc25f63401b26f557d4f0dc74</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value, Vector&lt; Vector&lt; OT, C &gt;, A &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab26c32a67232c258f6792be57799a485</anchor>
      <arglist>(const Vector&lt; Vector&lt; T1, B &gt;, A &gt; &amp;lhs, const Vector&lt; Vector&lt; T2, C &gt;, B &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T1 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab83592354f1ddb5b4c4a578b758e3b6f</anchor>
      <arglist>(const T1 s, Vector&lt; T2, N &gt; a) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T2 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>acd667ff0c1d11b44e9ad19b06db6713e</anchor>
      <arglist>(Vector&lt; T1, N &gt; a, const T2 s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsDivisable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T2 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab846bf628e71b3aeea2fc26d282143eb</anchor>
      <arglist>(Vector&lt; T1, N &gt; a, const T2 s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>get</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa10d9373a7aa5e3492fee0877900f738</anchor>
      <arglist>(Vector&lt; LinearAcceleration, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af157a36bb1282e34b967881c199d15fa</anchor>
      <arglist>(::std::ostream &amp;os, const Vector&lt; LinearAcceleration, N &gt; &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Vector&lt; LinearVelocity &gt;</name>
    <filename>structplayrho_1_1Vector.html</filename>
    <member kind="typedef">
      <type>LinearVelocity</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a92ca95984a7bf625e8705b97245a7a8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0bb82780552c224e3736ed516d1c0dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0807d5f6ad7825293d92e8a6e0242734</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a1dac8a92ef859aec019358fed5b4badd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9da6840475f24afb0745263ad7a20314</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a55cf503243bd308dc9961ba0970ab6ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>adb95a88a8f0a112b81be5904979fd1c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a541212ea3d3edf87f5f1ced1a9d3fb84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a01d534d2b418dd90b646a4b9258efcfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; iterator &gt;</type>
      <name>reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a2134b5edd0c13e27350197a8a0268c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0ed34a0b33733cd906a69be2afeeeb1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa368db46827a37158002ac586f3f55c2</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a64e86fe825332bc262819c5edbc4115f</anchor>
      <arglist>(std::enable_if_t&lt; sizeof...(Tail)+1==N, LinearVelocity &gt; head, Tail... tail) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>abe95a16ab6212c279f33f263fbc41dcd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>afc4f9041bb89f865b7491149bf0991a5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a980a432612de0373e65255df5b1f86d2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a640fd6dd0af7123b6e8b47feceaf5375</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0e4e393aa9b3999b5e7bcd756c7ce88e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9b2981be03a89e12d9783d08d941c5bd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af101191765d6e6e8ea67d2365d190cc4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9bebd544f9cb7bb77c8f2600bd194c8f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae2cae3925bba1dc9890cb171491b5c8c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a820156d1e812484e5962b33ada91027a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a324c2160a22774e96726fbaa148c552f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0de188288645c01c7a0d5663f3ba1624</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7e1b4d33490c25fd9f0c5a9031ebf823</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab8f7823fbdb7a68dcc009294228f0b9f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7516a64e5f7a1463fb12f7b6f880ffb5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a4cf7068d7d3c4ea1a2c6859ffd7e749b</anchor>
      <arglist>(size_type pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa90e470ba330d396ba83db1dc29b9522</anchor>
      <arglist>(size_type pos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a96eefa7a8f43dddee954f5cda427d1f8</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ac4fa1827bdfc14cc0c2c1778394f7b70</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a88f495a57b2564bd76d45d515486617c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ac0ee63043ed80188d8e400b7de4668aa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>elements</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a439b81a4f7eb326deec945e632ec37b0</anchor>
      <arglist>[N? N:1]</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; LinearVelocity, N &gt;</type>
      <name>abs</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga901850dd04519b8e6d642ab96a10d9ea</anchor>
      <arglist>(const Vector&lt; LinearVelocity, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab0d92fceef8d7757ae713bd166391c21</anchor>
      <arglist>(const Vector&lt; LinearVelocity, N &gt; &amp;lhs, const Vector&lt; LinearVelocity, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0e16f08723028c63f043c1ad42891b11</anchor>
      <arglist>(const Vector&lt; LinearVelocity, N &gt; &amp;lhs, const Vector&lt; LinearVelocity, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; LinearVelocity, decltype(+LinearVelocity {})&gt;::value, Vector&lt; LinearVelocity, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a56e36a6e89835f4d0de7cc4bbc30004f</anchor>
      <arglist>(Vector&lt; LinearVelocity, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; LinearVelocity, decltype(LinearVelocity {}+LinearVelocity {})&gt;::value, Vector&lt; LinearVelocity, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aadc7b8a4526dd9380a689345a1dff9d4</anchor>
      <arglist>(Vector&lt; LinearVelocity, N &gt; lhs, const Vector&lt; LinearVelocity, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; LinearVelocity, decltype(-LinearVelocity {})&gt;::value, Vector&lt; LinearVelocity, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a581f6521190fcbbfc1aa0813a6f33c04</anchor>
      <arglist>(Vector&lt; LinearVelocity, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; LinearVelocity, decltype(LinearVelocity {} - LinearVelocity {})&gt;::value, Vector&lt; LinearVelocity, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a75d04501374b86e6de10706672bdc38d</anchor>
      <arglist>(Vector&lt; LinearVelocity, N &gt; lhs, const Vector&lt; LinearVelocity, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; LinearVelocity, decltype(LinearVelocity {}+LinearVelocity {})&gt;::value, Vector&lt; LinearVelocity, N &gt; &amp; &gt;</type>
      <name>operator+=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a85453187a044f3d22a4c9ffea440eeac</anchor>
      <arglist>(Vector&lt; LinearVelocity, N &gt; &amp;lhs, const Vector&lt; LinearVelocity, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; LinearVelocity, decltype(LinearVelocity {} - LinearVelocity {})&gt;::value, Vector&lt; LinearVelocity, N &gt; &amp; &gt;</type>
      <name>operator-=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a92dcbdea02307ed29e5dc13ea59f7655</anchor>
      <arglist>(Vector&lt; LinearVelocity, N &gt; &amp;lhs, const Vector&lt; LinearVelocity, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; T1, decltype(T1{} *T2{})&gt;::value, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator*=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af372c516420203fe11aa71d881d376e6</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; T1, decltype(T1{}/T2{})&gt;::value, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator/=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a86e53e0fc25f63401b26f557d4f0dc74</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value, Vector&lt; Vector&lt; OT, C &gt;, A &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab26c32a67232c258f6792be57799a485</anchor>
      <arglist>(const Vector&lt; Vector&lt; T1, B &gt;, A &gt; &amp;lhs, const Vector&lt; Vector&lt; T2, C &gt;, B &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T1 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab83592354f1ddb5b4c4a578b758e3b6f</anchor>
      <arglist>(const T1 s, Vector&lt; T2, N &gt; a) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T2 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>acd667ff0c1d11b44e9ad19b06db6713e</anchor>
      <arglist>(Vector&lt; T1, N &gt; a, const T2 s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsDivisable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T2 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab846bf628e71b3aeea2fc26d282143eb</anchor>
      <arglist>(Vector&lt; T1, N &gt; a, const T2 s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>get</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa10d9373a7aa5e3492fee0877900f738</anchor>
      <arglist>(Vector&lt; LinearVelocity, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af157a36bb1282e34b967881c199d15fa</anchor>
      <arglist>(::std::ostream &amp;os, const Vector&lt; LinearVelocity, N &gt; &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Vector&lt; Mass &gt;</name>
    <filename>structplayrho_1_1Vector.html</filename>
    <member kind="typedef">
      <type>Mass</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a92ca95984a7bf625e8705b97245a7a8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0bb82780552c224e3736ed516d1c0dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0807d5f6ad7825293d92e8a6e0242734</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a1dac8a92ef859aec019358fed5b4badd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9da6840475f24afb0745263ad7a20314</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a55cf503243bd308dc9961ba0970ab6ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>adb95a88a8f0a112b81be5904979fd1c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a541212ea3d3edf87f5f1ced1a9d3fb84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a01d534d2b418dd90b646a4b9258efcfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; iterator &gt;</type>
      <name>reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a2134b5edd0c13e27350197a8a0268c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0ed34a0b33733cd906a69be2afeeeb1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa368db46827a37158002ac586f3f55c2</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a64e86fe825332bc262819c5edbc4115f</anchor>
      <arglist>(std::enable_if_t&lt; sizeof...(Tail)+1==N, Mass &gt; head, Tail... tail) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>abe95a16ab6212c279f33f263fbc41dcd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>afc4f9041bb89f865b7491149bf0991a5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a980a432612de0373e65255df5b1f86d2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a640fd6dd0af7123b6e8b47feceaf5375</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0e4e393aa9b3999b5e7bcd756c7ce88e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9b2981be03a89e12d9783d08d941c5bd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af101191765d6e6e8ea67d2365d190cc4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9bebd544f9cb7bb77c8f2600bd194c8f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae2cae3925bba1dc9890cb171491b5c8c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a820156d1e812484e5962b33ada91027a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a324c2160a22774e96726fbaa148c552f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0de188288645c01c7a0d5663f3ba1624</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7e1b4d33490c25fd9f0c5a9031ebf823</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab8f7823fbdb7a68dcc009294228f0b9f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7516a64e5f7a1463fb12f7b6f880ffb5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a4cf7068d7d3c4ea1a2c6859ffd7e749b</anchor>
      <arglist>(size_type pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa90e470ba330d396ba83db1dc29b9522</anchor>
      <arglist>(size_type pos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a96eefa7a8f43dddee954f5cda427d1f8</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ac4fa1827bdfc14cc0c2c1778394f7b70</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a88f495a57b2564bd76d45d515486617c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ac0ee63043ed80188d8e400b7de4668aa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>elements</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a439b81a4f7eb326deec945e632ec37b0</anchor>
      <arglist>[N? N:1]</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; Mass, N &gt;</type>
      <name>abs</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga901850dd04519b8e6d642ab96a10d9ea</anchor>
      <arglist>(const Vector&lt; Mass, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab0d92fceef8d7757ae713bd166391c21</anchor>
      <arglist>(const Vector&lt; Mass, N &gt; &amp;lhs, const Vector&lt; Mass, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0e16f08723028c63f043c1ad42891b11</anchor>
      <arglist>(const Vector&lt; Mass, N &gt; &amp;lhs, const Vector&lt; Mass, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; Mass, decltype(+Mass {})&gt;::value, Vector&lt; Mass, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a56e36a6e89835f4d0de7cc4bbc30004f</anchor>
      <arglist>(Vector&lt; Mass, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; Mass, decltype(Mass {}+Mass {})&gt;::value, Vector&lt; Mass, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aadc7b8a4526dd9380a689345a1dff9d4</anchor>
      <arglist>(Vector&lt; Mass, N &gt; lhs, const Vector&lt; Mass, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; Mass, decltype(-Mass {})&gt;::value, Vector&lt; Mass, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a581f6521190fcbbfc1aa0813a6f33c04</anchor>
      <arglist>(Vector&lt; Mass, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; Mass, decltype(Mass {} - Mass {})&gt;::value, Vector&lt; Mass, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a75d04501374b86e6de10706672bdc38d</anchor>
      <arglist>(Vector&lt; Mass, N &gt; lhs, const Vector&lt; Mass, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; Mass, decltype(Mass {}+Mass {})&gt;::value, Vector&lt; Mass, N &gt; &amp; &gt;</type>
      <name>operator+=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a85453187a044f3d22a4c9ffea440eeac</anchor>
      <arglist>(Vector&lt; Mass, N &gt; &amp;lhs, const Vector&lt; Mass, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; Mass, decltype(Mass {} - Mass {})&gt;::value, Vector&lt; Mass, N &gt; &amp; &gt;</type>
      <name>operator-=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a92dcbdea02307ed29e5dc13ea59f7655</anchor>
      <arglist>(Vector&lt; Mass, N &gt; &amp;lhs, const Vector&lt; Mass, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; T1, decltype(T1{} *T2{})&gt;::value, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator*=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af372c516420203fe11aa71d881d376e6</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; T1, decltype(T1{}/T2{})&gt;::value, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator/=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a86e53e0fc25f63401b26f557d4f0dc74</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value, Vector&lt; Vector&lt; OT, C &gt;, A &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab26c32a67232c258f6792be57799a485</anchor>
      <arglist>(const Vector&lt; Vector&lt; T1, B &gt;, A &gt; &amp;lhs, const Vector&lt; Vector&lt; T2, C &gt;, B &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T1 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab83592354f1ddb5b4c4a578b758e3b6f</anchor>
      <arglist>(const T1 s, Vector&lt; T2, N &gt; a) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T2 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>acd667ff0c1d11b44e9ad19b06db6713e</anchor>
      <arglist>(Vector&lt; T1, N &gt; a, const T2 s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsDivisable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T2 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab846bf628e71b3aeea2fc26d282143eb</anchor>
      <arglist>(Vector&lt; T1, N &gt; a, const T2 s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>get</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa10d9373a7aa5e3492fee0877900f738</anchor>
      <arglist>(Vector&lt; Mass, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af157a36bb1282e34b967881c199d15fa</anchor>
      <arglist>(::std::ostream &amp;os, const Vector&lt; Mass, N &gt; &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Vector&lt; Momentum &gt;</name>
    <filename>structplayrho_1_1Vector.html</filename>
    <member kind="typedef">
      <type>Momentum</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a92ca95984a7bf625e8705b97245a7a8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0bb82780552c224e3736ed516d1c0dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0807d5f6ad7825293d92e8a6e0242734</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a1dac8a92ef859aec019358fed5b4badd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9da6840475f24afb0745263ad7a20314</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a55cf503243bd308dc9961ba0970ab6ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>adb95a88a8f0a112b81be5904979fd1c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a541212ea3d3edf87f5f1ced1a9d3fb84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a01d534d2b418dd90b646a4b9258efcfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; iterator &gt;</type>
      <name>reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a2134b5edd0c13e27350197a8a0268c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0ed34a0b33733cd906a69be2afeeeb1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa368db46827a37158002ac586f3f55c2</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a64e86fe825332bc262819c5edbc4115f</anchor>
      <arglist>(std::enable_if_t&lt; sizeof...(Tail)+1==N, Momentum &gt; head, Tail... tail) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>abe95a16ab6212c279f33f263fbc41dcd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>afc4f9041bb89f865b7491149bf0991a5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a980a432612de0373e65255df5b1f86d2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a640fd6dd0af7123b6e8b47feceaf5375</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0e4e393aa9b3999b5e7bcd756c7ce88e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9b2981be03a89e12d9783d08d941c5bd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af101191765d6e6e8ea67d2365d190cc4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9bebd544f9cb7bb77c8f2600bd194c8f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae2cae3925bba1dc9890cb171491b5c8c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a820156d1e812484e5962b33ada91027a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a324c2160a22774e96726fbaa148c552f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0de188288645c01c7a0d5663f3ba1624</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7e1b4d33490c25fd9f0c5a9031ebf823</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab8f7823fbdb7a68dcc009294228f0b9f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7516a64e5f7a1463fb12f7b6f880ffb5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a4cf7068d7d3c4ea1a2c6859ffd7e749b</anchor>
      <arglist>(size_type pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa90e470ba330d396ba83db1dc29b9522</anchor>
      <arglist>(size_type pos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a96eefa7a8f43dddee954f5cda427d1f8</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ac4fa1827bdfc14cc0c2c1778394f7b70</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a88f495a57b2564bd76d45d515486617c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ac0ee63043ed80188d8e400b7de4668aa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>elements</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a439b81a4f7eb326deec945e632ec37b0</anchor>
      <arglist>[N? N:1]</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; Momentum, N &gt;</type>
      <name>abs</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga901850dd04519b8e6d642ab96a10d9ea</anchor>
      <arglist>(const Vector&lt; Momentum, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab0d92fceef8d7757ae713bd166391c21</anchor>
      <arglist>(const Vector&lt; Momentum, N &gt; &amp;lhs, const Vector&lt; Momentum, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0e16f08723028c63f043c1ad42891b11</anchor>
      <arglist>(const Vector&lt; Momentum, N &gt; &amp;lhs, const Vector&lt; Momentum, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; Momentum, decltype(+Momentum {})&gt;::value, Vector&lt; Momentum, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a56e36a6e89835f4d0de7cc4bbc30004f</anchor>
      <arglist>(Vector&lt; Momentum, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; Momentum, decltype(Momentum {}+Momentum {})&gt;::value, Vector&lt; Momentum, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aadc7b8a4526dd9380a689345a1dff9d4</anchor>
      <arglist>(Vector&lt; Momentum, N &gt; lhs, const Vector&lt; Momentum, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; Momentum, decltype(-Momentum {})&gt;::value, Vector&lt; Momentum, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a581f6521190fcbbfc1aa0813a6f33c04</anchor>
      <arglist>(Vector&lt; Momentum, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; Momentum, decltype(Momentum {} - Momentum {})&gt;::value, Vector&lt; Momentum, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a75d04501374b86e6de10706672bdc38d</anchor>
      <arglist>(Vector&lt; Momentum, N &gt; lhs, const Vector&lt; Momentum, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; Momentum, decltype(Momentum {}+Momentum {})&gt;::value, Vector&lt; Momentum, N &gt; &amp; &gt;</type>
      <name>operator+=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a85453187a044f3d22a4c9ffea440eeac</anchor>
      <arglist>(Vector&lt; Momentum, N &gt; &amp;lhs, const Vector&lt; Momentum, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; Momentum, decltype(Momentum {} - Momentum {})&gt;::value, Vector&lt; Momentum, N &gt; &amp; &gt;</type>
      <name>operator-=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a92dcbdea02307ed29e5dc13ea59f7655</anchor>
      <arglist>(Vector&lt; Momentum, N &gt; &amp;lhs, const Vector&lt; Momentum, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; T1, decltype(T1{} *T2{})&gt;::value, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator*=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af372c516420203fe11aa71d881d376e6</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; T1, decltype(T1{}/T2{})&gt;::value, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator/=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a86e53e0fc25f63401b26f557d4f0dc74</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value, Vector&lt; Vector&lt; OT, C &gt;, A &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab26c32a67232c258f6792be57799a485</anchor>
      <arglist>(const Vector&lt; Vector&lt; T1, B &gt;, A &gt; &amp;lhs, const Vector&lt; Vector&lt; T2, C &gt;, B &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T1 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab83592354f1ddb5b4c4a578b758e3b6f</anchor>
      <arglist>(const T1 s, Vector&lt; T2, N &gt; a) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T2 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>acd667ff0c1d11b44e9ad19b06db6713e</anchor>
      <arglist>(Vector&lt; T1, N &gt; a, const T2 s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsDivisable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T2 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab846bf628e71b3aeea2fc26d282143eb</anchor>
      <arglist>(Vector&lt; T1, N &gt; a, const T2 s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>get</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa10d9373a7aa5e3492fee0877900f738</anchor>
      <arglist>(Vector&lt; Momentum, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af157a36bb1282e34b967881c199d15fa</anchor>
      <arglist>(::std::ostream &amp;os, const Vector&lt; Momentum, N &gt; &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Vector&lt; Real &gt;</name>
    <filename>structplayrho_1_1Vector.html</filename>
    <member kind="typedef">
      <type>Real</type>
      <name>value_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a92ca95984a7bf625e8705b97245a7a8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0bb82780552c224e3736ed516d1c0dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0807d5f6ad7825293d92e8a6e0242734</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a1dac8a92ef859aec019358fed5b4badd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9da6840475f24afb0745263ad7a20314</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a55cf503243bd308dc9961ba0970ab6ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_pointer</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>adb95a88a8f0a112b81be5904979fd1c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a541212ea3d3edf87f5f1ced1a9d3fb84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type *</type>
      <name>const_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a01d534d2b418dd90b646a4b9258efcfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; iterator &gt;</type>
      <name>reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a2134b5edd0c13e27350197a8a0268c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0ed34a0b33733cd906a69be2afeeeb1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa368db46827a37158002ac586f3f55c2</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>Vector</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a64e86fe825332bc262819c5edbc4115f</anchor>
      <arglist>(std::enable_if_t&lt; sizeof...(Tail)+1==N, Real &gt; head, Tail... tail) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>abe95a16ab6212c279f33f263fbc41dcd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>afc4f9041bb89f865b7491149bf0991a5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a980a432612de0373e65255df5b1f86d2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a640fd6dd0af7123b6e8b47feceaf5375</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0e4e393aa9b3999b5e7bcd756c7ce88e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9b2981be03a89e12d9783d08d941c5bd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af101191765d6e6e8ea67d2365d190cc4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a9bebd544f9cb7bb77c8f2600bd194c8f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ae2cae3925bba1dc9890cb171491b5c8c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a820156d1e812484e5962b33ada91027a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a324c2160a22774e96726fbaa148c552f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0de188288645c01c7a0d5663f3ba1624</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7e1b4d33490c25fd9f0c5a9031ebf823</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crbegin</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab8f7823fbdb7a68dcc009294228f0b9f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crend</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a7516a64e5f7a1463fb12f7b6f880ffb5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a4cf7068d7d3c4ea1a2c6859ffd7e749b</anchor>
      <arglist>(size_type pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>operator[]</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa90e470ba330d396ba83db1dc29b9522</anchor>
      <arglist>(size_type pos) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a96eefa7a8f43dddee954f5cda427d1f8</anchor>
      <arglist>(size_type pos)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_reference</type>
      <name>at</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ac4fa1827bdfc14cc0c2c1778394f7b70</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a88f495a57b2564bd76d45d515486617c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_pointer</type>
      <name>data</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ac0ee63043ed80188d8e400b7de4668aa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>elements</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a439b81a4f7eb326deec945e632ec37b0</anchor>
      <arglist>[N? N:1]</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; Real, N &gt;</type>
      <name>abs</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga901850dd04519b8e6d642ab96a10d9ea</anchor>
      <arglist>(const Vector&lt; Real, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab0d92fceef8d7757ae713bd166391c21</anchor>
      <arglist>(const Vector&lt; Real, N &gt; &amp;lhs, const Vector&lt; Real, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a0e16f08723028c63f043c1ad42891b11</anchor>
      <arglist>(const Vector&lt; Real, N &gt; &amp;lhs, const Vector&lt; Real, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; Real, decltype(+Real {})&gt;::value, Vector&lt; Real, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a56e36a6e89835f4d0de7cc4bbc30004f</anchor>
      <arglist>(Vector&lt; Real, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; Real, decltype(Real {}+Real {})&gt;::value, Vector&lt; Real, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aadc7b8a4526dd9380a689345a1dff9d4</anchor>
      <arglist>(Vector&lt; Real, N &gt; lhs, const Vector&lt; Real, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; Real, decltype(-Real {})&gt;::value, Vector&lt; Real, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a581f6521190fcbbfc1aa0813a6f33c04</anchor>
      <arglist>(Vector&lt; Real, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; Real, decltype(Real {} - Real {})&gt;::value, Vector&lt; Real, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a75d04501374b86e6de10706672bdc38d</anchor>
      <arglist>(Vector&lt; Real, N &gt; lhs, const Vector&lt; Real, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; Real, decltype(Real {}+Real {})&gt;::value, Vector&lt; Real, N &gt; &amp; &gt;</type>
      <name>operator+=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a85453187a044f3d22a4c9ffea440eeac</anchor>
      <arglist>(Vector&lt; Real, N &gt; &amp;lhs, const Vector&lt; Real, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; Real, decltype(Real {} - Real {})&gt;::value, Vector&lt; Real, N &gt; &amp; &gt;</type>
      <name>operator-=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a92dcbdea02307ed29e5dc13ea59f7655</anchor>
      <arglist>(Vector&lt; Real, N &gt; &amp;lhs, const Vector&lt; Real, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; T1, decltype(T1{} *T2{})&gt;::value, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator*=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af372c516420203fe11aa71d881d376e6</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; T1, decltype(T1{}/T2{})&gt;::value, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator/=</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>a86e53e0fc25f63401b26f557d4f0dc74</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value, Vector&lt; Vector&lt; OT, C &gt;, A &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab26c32a67232c258f6792be57799a485</anchor>
      <arglist>(const Vector&lt; Vector&lt; T1, B &gt;, A &gt; &amp;lhs, const Vector&lt; Vector&lt; T2, C &gt;, B &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T1 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab83592354f1ddb5b4c4a578b758e3b6f</anchor>
      <arglist>(const T1 s, Vector&lt; T2, N &gt; a) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T2 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>acd667ff0c1d11b44e9ad19b06db6713e</anchor>
      <arglist>(Vector&lt; T1, N &gt; a, const T2 s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsDivisable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T2 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>ab846bf628e71b3aeea2fc26d282143eb</anchor>
      <arglist>(Vector&lt; T1, N &gt; a, const T2 s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>get</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>aa10d9373a7aa5e3492fee0877900f738</anchor>
      <arglist>(Vector&lt; Real, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structplayrho_1_1Vector.html</anchorfile>
      <anchor>af157a36bb1282e34b967881c199d15fa</anchor>
      <arglist>(::std::ostream &amp;os, const Vector&lt; Real, N &gt; &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::Velocity</name>
    <filename>structplayrho_1_1d2_1_1Velocity.html</filename>
    <member kind="variable">
      <type>LinearVelocity2</type>
      <name>linear</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>afc8399d7200b4299a0e21cc184db0f0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AngularVelocity</type>
      <name>angular</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>accc1d801801fb20a83fb5451ad8dd46d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>afe4f2bcd98877c4562293dfe2dbcfa8b</anchor>
      <arglist>(const Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>a50aa6c2021393ced745d056c34b3bc07</anchor>
      <arglist>(const Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity &amp;</type>
      <name>operator*=</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>a7083f8551c8713a94d38f614a7ebc3b5</anchor>
      <arglist>(Velocity &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity &amp;</type>
      <name>operator/=</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>afafe86dc357999a8933a71f73dcce818</anchor>
      <arglist>(Velocity &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity &amp;</type>
      <name>operator+=</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>a3be07a7714bf76d380af60fa8ef623d3</anchor>
      <arglist>(Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>a7608d9d4b5ffcc571a17bacf9faa411e</anchor>
      <arglist>(const Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity &amp;</type>
      <name>operator-=</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>ad2577d7502ee2442b81d0e6570c00d6f</anchor>
      <arglist>(Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>ab2f3370383aaf9a8443cacef7841c5a0</anchor>
      <arglist>(const Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity</type>
      <name>operator-</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>ab9cbc07fb71929600cae9ef2f69e35ac</anchor>
      <arglist>(const Velocity &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity</type>
      <name>operator+</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>acf1a262569fd1d300ef359200d514d6a</anchor>
      <arglist>(const Velocity &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>a5d52ed09352bfd1dd80dc6b138a19f55</anchor>
      <arglist>(const Velocity &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity</type>
      <name>operator*</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>a285d8d7bdef58a4c7210516b1060beef</anchor>
      <arglist>(const Real lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity</type>
      <name>operator/</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>aec5f4967a3c7e58ccf6c9fb4aafa90a1</anchor>
      <arglist>(const Velocity &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>Velocity</type>
      <name>Cap</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>a3d2551fe26d1aa448d4d4b337e5aa66c</anchor>
      <arglist>(Velocity velocity, Time h, const MovementConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>structplayrho_1_1d2_1_1Velocity.html</anchorfile>
      <anchor>a1735a28e0a25cc77e59fafe1d840c242</anchor>
      <arglist>(const d2::Velocity &amp;value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::VelocityConstraint</name>
    <filename>classplayrho_1_1d2_1_1VelocityConstraint.html</filename>
    <class kind="struct">playrho::d2::VelocityConstraint::Conf</class>
    <class kind="struct">playrho::d2::VelocityConstraint::Point</class>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(MaxManifoldPoints)&gt;::type</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a7ae0f6fbbc821ab29674ed9a8d3873c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VelocityConstraint</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a0c3f7e151e178001bf8bde596c4eaabd</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VelocityConstraint</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>acbc4406b84a48b4ad550f75fcc1fe496</anchor>
      <arglist>(const VelocityConstraint &amp;copy)=default</arglist>
    </member>
    <member kind="function">
      <type>VelocityConstraint &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a41f32b7118af764c0e2f4b10007b3812</anchor>
      <arglist>(const VelocityConstraint &amp;copy)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VelocityConstraint</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>acfe608b30b624ca60b7198725f566b31</anchor>
      <arglist>(Real friction, Real restitution, LinearVelocity tangentSpeed, const WorldManifold &amp;worldManifold, BodyID bA, BodyID bB, const std::vector&lt; BodyConstraint &gt; &amp;bodies, const Conf &amp;conf=GetDefaultConf())</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetNormal</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>ad5201366b8f451d9a90878ecdbb040ff</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetTangent</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a5770dc875b387fa5f557c0d49f30877b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>GetPointCount</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a8328fb8755ee63d4fc286122bb9a7a5c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>InvMass22</type>
      <name>GetK</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a7b7672fe3674a94c46c62b5840391286</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Mass22</type>
      <name>GetNormalMass</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a9606f1efd3c728bf4d0d589512034d95</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetFriction</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>ab4aa128a02dd806edc05d3d2cbe2071a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetRestitution</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a2cb4f41d6a645fabcf4e69b298547100</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity</type>
      <name>GetTangentSpeed</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>aa68c6da65b556cc282a0ec4455eddd1b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>GetBodyA</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>aeb754b07cd2f58c4eafcbd741c12a707</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>GetBodyB</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a1ccc0122d9b8ecaee49b5b3920d8a6ee</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Momentum</type>
      <name>GetNormalImpulseAtPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a6a5259904d3d85487c99a8dcf3871efb</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Momentum</type>
      <name>GetTangentImpulseAtPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>aed8f9f12932d039a598e993d6633c6ec</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity</type>
      <name>GetVelocityBiasAtPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>ad644e82e53d3a176cba7feead0de3225</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Mass</type>
      <name>GetNormalMassAtPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a0134eed6e1ce2d374b788e60260817fe</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Mass</type>
      <name>GetTangentMassAtPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a5f65c818d7969342f30b4fab4c5e6f56</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetPointRelPosA</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a573ec1fc0c8ab0000450972a2044b177</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetPointRelPosB</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a589e8910a29d0e55302f149f27a43945</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNormalImpulseAtPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>aa3f9e7f3833a2b0e25873d24d651285a</anchor>
      <arglist>(size_type index, Momentum value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTangentImpulseAtPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a704bed5b7edd9bb43be3a000d13cc6ac</anchor>
      <arglist>(size_type index, Momentum value)</arglist>
    </member>
    <member kind="function">
      <type>const Point &amp;</type>
      <name>GetPointAt</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a0522810720f80c9e976e069aaca09cf4</anchor>
      <arglist>(size_type index) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr Conf</type>
      <name>GetDefaultConf</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>acda9d12d13b5c85da4b395e7d94a96f4</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>AddPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>ab527a8be9240a5b922a87e4b3ebf91c3</anchor>
      <arglist>(Momentum normalImpulse, Momentum tangentImpulse, Length2 relA, Length2 relB, const std::vector&lt; BodyConstraint &gt; &amp;bodies, Conf conf)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>RemovePoint</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>ad3ea49d3d0e82c1e063a26382128e871</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Point</type>
      <name>GetPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>aeafd25182ffe4017f95e6098afc59528</anchor>
      <arglist>(Momentum normalImpulse, Momentum tangentImpulse, Length2 relA, Length2 relB, const std::vector&lt; BodyConstraint &gt; &amp;bodies, Conf conf) const noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Point &amp;</type>
      <name>PointAt</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a5087e20abce45986f04d23834de5f8f3</anchor>
      <arglist>(size_type index)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>m_points</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>abd690164d5c1b910090e9c006a067dc5</anchor>
      <arglist>[MaxManifoldPoints]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>InvMass3</type>
      <name>m_K</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a89ab8f380e7548ff7b8faa7fb668cf24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Mass3</type>
      <name>m_normalMass</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a7f49ba50c192319015f377ed570a62bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BodyID</type>
      <name>m_bodyA</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>aeb3c604841e018f6317bd4a18f5557cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BodyID</type>
      <name>m_bodyB</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a05c10ea3661a695f7fb024ffe761260d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>UnitVec</type>
      <name>m_normal</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>ada36cde7664b35e5c862c5dbfa2520c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>m_friction</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a829378345ea11577308fb0825acb6a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Real</type>
      <name>m_restitution</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a7b9a4ff4e3da3ffcdea88d7162b45f22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LinearVelocity</type>
      <name>m_tangentSpeed</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>a863e55f817d2d7c60a3ef5f613b25fc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_type</type>
      <name>m_pointCount</name>
      <anchorfile>classplayrho_1_1d2_1_1VelocityConstraint.html</anchorfile>
      <anchor>ab307b944c7dc0738c67f2a931f262633</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::Version</name>
    <filename>structplayrho_1_1Version.html</filename>
    <member kind="typedef">
      <type>std::int32_t</type>
      <name>Revnum</name>
      <anchorfile>structplayrho_1_1Version.html</anchorfile>
      <anchor>a23217efbacc179609b7be472819121ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Revnum</type>
      <name>major</name>
      <anchorfile>structplayrho_1_1Version.html</anchorfile>
      <anchor>a5e92cad7b20b19f8efc5ea4801bb6f53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Revnum</type>
      <name>minor</name>
      <anchorfile>structplayrho_1_1Version.html</anchorfile>
      <anchor>abb97e498445e0c35f20f37fbe82cf800</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Revnum</type>
      <name>revision</name>
      <anchorfile>structplayrho_1_1Version.html</anchorfile>
      <anchor>a44abbe204a839327b55036549ef3b7eb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::VertexSet</name>
    <filename>classplayrho_1_1d2_1_1VertexSet.html</filename>
    <member kind="typedef">
      <type>const Length2 *</type>
      <name>const_pointer</name>
      <anchorfile>classplayrho_1_1d2_1_1VertexSet.html</anchorfile>
      <anchor>a6975aa99493c5666ee93ba6c8a6d0d2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VertexSet</name>
      <anchorfile>classplayrho_1_1d2_1_1VertexSet.html</anchorfile>
      <anchor>add430fa9d90fffb18596d1f45a89b515</anchor>
      <arglist>(Area minSepSquared=GetDefaultMinSeparationSquared())</arglist>
    </member>
    <member kind="function">
      <type>Area</type>
      <name>GetMinSeparationSquared</name>
      <anchorfile>classplayrho_1_1d2_1_1VertexSet.html</anchorfile>
      <anchor>aab2c23f7f7344bc31409837dbd1946c3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add</name>
      <anchorfile>classplayrho_1_1d2_1_1VertexSet.html</anchorfile>
      <anchor>ade7534188a8fc91d9837b3e562347a82</anchor>
      <arglist>(Length2 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classplayrho_1_1d2_1_1VertexSet.html</anchorfile>
      <anchor>a2db75b4004bb99e8dcd5e275805d158a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classplayrho_1_1d2_1_1VertexSet.html</anchorfile>
      <anchor>aa5e49e3b445c8dd4d78f9fd72fb50a20</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_pointer</type>
      <name>data</name>
      <anchorfile>classplayrho_1_1d2_1_1VertexSet.html</anchorfile>
      <anchor>ad36911307335afc1a9b4e6ddcc33a29a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_pointer</type>
      <name>begin</name>
      <anchorfile>classplayrho_1_1d2_1_1VertexSet.html</anchorfile>
      <anchor>a3ab60237213bf69d476b637cd2437d57</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_pointer</type>
      <name>end</name>
      <anchorfile>classplayrho_1_1d2_1_1VertexSet.html</anchorfile>
      <anchor>a89f55e0a38a5a9d01c8fa5834f62919e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_pointer</type>
      <name>find</name>
      <anchorfile>classplayrho_1_1d2_1_1VertexSet.html</anchorfile>
      <anchor>a1ede2f852e19cf2156350aae630944d0</anchor>
      <arglist>(Length2 value) const</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>operator[]</name>
      <anchorfile>classplayrho_1_1d2_1_1VertexSet.html</anchorfile>
      <anchor>a6cd15a8277866afd8e620c0df9a2fc8d</anchor>
      <arglist>(std::size_t index) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Area</type>
      <name>GetDefaultMinSeparationSquared</name>
      <anchorfile>classplayrho_1_1d2_1_1VertexSet.html</anchorfile>
      <anchor>a5a33cdf5ac70599dfe9d1881b8d58484</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Length2 &gt;</type>
      <name>m_elements</name>
      <anchorfile>classplayrho_1_1d2_1_1VertexSet.html</anchorfile>
      <anchor>a5f77a68b83bb1bb1f0cca946e51bd153</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Area</type>
      <name>m_minSepSquared</name>
      <anchorfile>classplayrho_1_1d2_1_1VertexSet.html</anchorfile>
      <anchor>a14bb49edbcbc761587341bad45ea6804</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::WeldJointConf</name>
    <filename>structplayrho_1_1d2_1_1WeldJointConf.html</filename>
    <base>JointBuilder&lt; WeldJointConf &gt;</base>
    <member kind="typedef">
      <type>JointBuilder&lt; WeldJointConf &gt;</type>
      <name>super</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>a3b7a9abbeb1afe692eea673d5fee51e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>WeldJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>a5549db2d49cc1f84604b62aa5df6fb5d</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WeldJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>a032140b10616823467691706ddbb7d48</anchor>
      <arglist>(BodyID bodyA, BodyID bodyB, Length2 laA=Length2{}, Length2 laB=Length2{}, Angle ra=0_deg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseFrequency</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>a6659bb4e8d1bb440deeb0db686248139</anchor>
      <arglist>(NonNegative&lt; Frequency &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseDampingRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>ae12cf838d0ee610508effae6cd2bd6b0</anchor>
      <arglist>(Real v) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorA</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>ab3dde206619d336dfc9c9cf97f6fc5e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorB</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>a4e4abd2ed2af3a24f651acb7e5c93d5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Angle</type>
      <name>referenceAngle</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>ab389da792b6a560ef3d7d2d7e6fc706a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Frequency &gt;</type>
      <name>frequency</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>abe7eaa827e2ff98a2e326e52aaf4d1fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>dampingRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>afee42514df393a55d877e40e7029f272</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3</type>
      <name>impulse</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>af3c322fc61de6e984b5058c2830716a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InvRotInertia</type>
      <name>gamma</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>a1224276539bf5acefe7e72d649448ed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AngularVelocity</type>
      <name>bias</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>a3cac14436dd81909cc54a1281dad77c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>rA</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>a71a06cab23c166512d5c778a15d36c9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>rB</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>ad972744d99cee6c331a4b89f0d16be0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Mat33</type>
      <name>mass</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>ab7265d54adb75383a22a3fe513c48a3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>a2c609024f0b536db041b19c8f8869479</anchor>
      <arglist>(const WeldJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>a3739f4255fc019f68cd74d5c21867845</anchor>
      <arglist>(const WeldJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>ShiftOrigin</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>a1ca7cf4000562ae2b92cce70e2446dce</anchor>
      <arglist>(WeldJointConf &amp;, Length2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>a98ee92f3674bc81b7d523be4f41dd53c</anchor>
      <arglist>(WeldJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>a728a8e890e09c846ec97a08d81b2e426</anchor>
      <arglist>(WeldJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>a8866f1e40aceb9eb5d49d7b1031029cb</anchor>
      <arglist>(const WeldJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetFrequency</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>acafa97d5359a1791ded4ccbc48a0cfaa</anchor>
      <arglist>(WeldJointConf &amp;object, NonNegative&lt; Frequency &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetDampingRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1WeldJointConf.html</anchorfile>
      <anchor>a58977ddd709fa03560c34fcb92949f42</anchor>
      <arglist>(WeldJointConf &amp;object, Real value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::WheelJointConf</name>
    <filename>structplayrho_1_1d2_1_1WheelJointConf.html</filename>
    <base>JointBuilder&lt; WheelJointConf &gt;</base>
    <member kind="typedef">
      <type>JointBuilder&lt; WheelJointConf &gt;</type>
      <name>super</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a240852c6cb7436e2c7e53cc4573b1be6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>WheelJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>ae975a256f3b652d5a6a114b157fc6a32</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WheelJointConf</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>ada1e9a8491ff208d5f0cb7f1ba647691</anchor>
      <arglist>(BodyID bA, BodyID bB, Length2 laA=Length2{}, Length2 laB=Length2{}, UnitVec axis=UnitVec::GetRight()) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseEnableMotor</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a20131effb23d017c7c39d007a38ad1c4</anchor>
      <arglist>(bool v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseMaxMotorTorque</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a8b0b34635a62ab7d05e55f9d0d80f928</anchor>
      <arglist>(Torque v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseMotorSpeed</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>ac470c4d2636133430986fe5efe0d55aa</anchor>
      <arglist>(AngularVelocity v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseFrequency</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>aaeff1687b5f6680aea45e0dcbc85308f</anchor>
      <arglist>(NonNegative&lt; Frequency &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>UseDampingRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>acf3b1550db087e14a1c1f5bcd34f091a</anchor>
      <arglist>(Real v) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorA</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a4dc88db92528abe99f69a29a8eb8f827</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length2</type>
      <name>localAnchorB</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a8bcbb0908f80409feaa1ee94834f0204</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitVec</type>
      <name>localXAxisA</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a46e7ce6bff277ac8f735c202803e7184</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitVec</type>
      <name>localYAxisA</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>aa27ff21f996540548aee3217a64d0009</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enableMotor</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a5c928a9b40a91ca1b6f9a65ee7981f70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Torque</type>
      <name>maxMotorTorque</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>aaccd1864d05cc579ec3d01e7a9172334</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AngularVelocity</type>
      <name>motorSpeed</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a754cc95814f79f32891079314488da37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonNegative&lt; Frequency &gt;</type>
      <name>frequency</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>ac121e206ac0a526e5712f10f90cc5abb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>dampingRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a5f4a94799d991dc1c2de5697be080a77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum</type>
      <name>impulse</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>aa091de716ab5ac0b584c02affc2b6d85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AngularMomentum</type>
      <name>angularImpulse</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>ac9bc9f152829e8d2c233867a75ba02c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Momentum</type>
      <name>springImpulse</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>ab865f557cca6f3bb8777d3cde2e41afc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitVec</type>
      <name>ax</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a8f7e54ad163b00983f3aa66c5449d858</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitVec</type>
      <name>ay</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>aa31e5dc81abaec747c5af5b05f8d5cb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>sAx</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>ae9cdaace74bb65a9a85eb4759d4b72ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>sBx</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>ace11d1bea979d706daccc13b1bf6161b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>sAy</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a3d68dd4d683d9336b160a960e9867cde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Length</type>
      <name>sBy</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a6c65241ddfc34b459dd81a67956d2413</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Mass</type>
      <name>mass</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>ae5a173252ebf35be76b0f523ebb01de6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RotInertia</type>
      <name>angularMass</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>aca9eca3ea04a615d6f68b5497edf4287</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Mass</type>
      <name>springMass</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>ae44f1dcdd5b7f3341184892e8765e78a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinearVelocity</type>
      <name>bias</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a5a74133f44fa555fec8254234ada043a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InvMass</type>
      <name>gamma</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>ac7c9f433c088735f68efe4f9c6653e8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>aef25b1a360e19b38a39af5a4b776eceb</anchor>
      <arglist>(const WheelJointConf &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>ShiftOrigin</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a39aeb9ed40d5d141b57b0e2776a3f396</anchor>
      <arglist>(WheelJointConf &amp;, Length2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a1bf8a2c1bbd321faa6b6525186d3ffb8</anchor>
      <arglist>(WheelJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a0509df5cc17c5c91b0c05f54ffa10160</anchor>
      <arglist>(WheelJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a71acdf32b41c7fa92c981ca8dd2db6c6</anchor>
      <arglist>(const WheelJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetMaxMotorTorque</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>a7f82a394a8c0f5a020f8647ce0a34d39</anchor>
      <arglist>(WheelJointConf &amp;object, Torque value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetFrequency</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>adcd79908a087d2c25629aa14895bf49c</anchor>
      <arglist>(WheelJointConf &amp;object, NonNegative&lt; Frequency &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetDampingRatio</name>
      <anchorfile>structplayrho_1_1d2_1_1WheelJointConf.html</anchorfile>
      <anchor>ae7f1530d1c2de2df859dfae6eb23d141</anchor>
      <arglist>(WheelJointConf &amp;object, Real value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::Wider</name>
    <filename>structplayrho_1_1Wider.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Wider&lt; BodyCounter &gt;</name>
    <filename>structplayrho_1_1Wider.html</filename>
  </compound>
  <compound kind="class">
    <name>Wider&lt; dist_iter_type &gt;</name>
    <filename>structplayrho_1_1Wider.html</filename>
  </compound>
  <compound kind="struct">
    <name>playrho::Wider&lt; double &gt;</name>
    <filename>structplayrho_1_1Wider_3_01double_01_4.html</filename>
    <member kind="typedef">
      <type>long double</type>
      <name>type</name>
      <anchorfile>structplayrho_1_1Wider_3_01double_01_4.html</anchorfile>
      <anchor>a3abf6b48f56ed82b5bdfb24ac4e7cfd4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::Wider&lt; float &gt;</name>
    <filename>structplayrho_1_1Wider_3_01float_01_4.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>type</name>
      <anchorfile>structplayrho_1_1Wider_3_01float_01_4.html</anchorfile>
      <anchor>afd3c6d296462b7ee1b2c4348cd0ff150</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Wider&lt; root_iter_type &gt;</name>
    <filename>structplayrho_1_1Wider.html</filename>
  </compound>
  <compound kind="struct">
    <name>playrho::Wider&lt; std::int16_t &gt;</name>
    <filename>structplayrho_1_1Wider_3_01std_1_1int16__t_01_4.html</filename>
    <member kind="typedef">
      <type>std::int32_t</type>
      <name>type</name>
      <anchorfile>structplayrho_1_1Wider_3_01std_1_1int16__t_01_4.html</anchorfile>
      <anchor>a83fee8f34915725135a16533e757806b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::Wider&lt; std::int32_t &gt;</name>
    <filename>structplayrho_1_1Wider_3_01std_1_1int32__t_01_4.html</filename>
    <member kind="typedef">
      <type>std::int64_t</type>
      <name>type</name>
      <anchorfile>structplayrho_1_1Wider_3_01std_1_1int32__t_01_4.html</anchorfile>
      <anchor>a52190261934276cac51509b61d29398c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::Wider&lt; std::int8_t &gt;</name>
    <filename>structplayrho_1_1Wider_3_01std_1_1int8__t_01_4.html</filename>
    <member kind="typedef">
      <type>std::int16_t</type>
      <name>type</name>
      <anchorfile>structplayrho_1_1Wider_3_01std_1_1int8__t_01_4.html</anchorfile>
      <anchor>ac05b0ceb1dbf3c4a493e2048bb1c4d8f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::Wider&lt; std::uint16_t &gt;</name>
    <filename>structplayrho_1_1Wider_3_01std_1_1uint16__t_01_4.html</filename>
    <member kind="typedef">
      <type>std::uint32_t</type>
      <name>type</name>
      <anchorfile>structplayrho_1_1Wider_3_01std_1_1uint16__t_01_4.html</anchorfile>
      <anchor>ac01d08dda495229e948ebe61ebadaac6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::Wider&lt; std::uint32_t &gt;</name>
    <filename>structplayrho_1_1Wider_3_01std_1_1uint32__t_01_4.html</filename>
    <member kind="typedef">
      <type>std::uint64_t</type>
      <name>type</name>
      <anchorfile>structplayrho_1_1Wider_3_01std_1_1uint32__t_01_4.html</anchorfile>
      <anchor>ab20ea4ae63c1e07e92be233bf7dfdf0e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::Wider&lt; std::uint8_t &gt;</name>
    <filename>structplayrho_1_1Wider_3_01std_1_1uint8__t_01_4.html</filename>
    <member kind="typedef">
      <type>std::uint16_t</type>
      <name>type</name>
      <anchorfile>structplayrho_1_1Wider_3_01std_1_1uint8__t_01_4.html</anchorfile>
      <anchor>a16de7d2e1f85b0a6dbbcc1b960725d01</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Wider&lt; toi_iter_type &gt;</name>
    <filename>structplayrho_1_1Wider.html</filename>
  </compound>
  <compound kind="class">
    <name>playrho::d2::World</name>
    <filename>classplayrho_1_1d2_1_1World.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; BodyID &gt;</type>
      <name>Bodies</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aebd6506d4827836c8f37a32dced01611</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; KeyedContactPtr &gt;</type>
      <name>Contacts</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a58a45af85423cfe2472ded2960f9b526</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; JointID &gt;</type>
      <name>Joints</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a2864754cbd12fad7c569677209716763</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::pair&lt; BodyID, JointID &gt; &gt;</type>
      <name>BodyJoints</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a9f86d41eb102ef3188dc0973f8e168f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; FixtureID &gt;</type>
      <name>Fixtures</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>afdb990e6c0f6f60c6ede097f4d8e51c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(FixtureID)&gt;</type>
      <name>FixtureListener</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a5f8383073a4c2c032be45ec5c930fc8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(JointID)&gt;</type>
      <name>JointListener</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a583a6581909a8a228c973504315f37cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(ContactID)&gt;</type>
      <name>ContactListener</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ae500a7202003c7336aa675a31b69cdfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(ContactID, const Manifold &amp;)&gt;</type>
      <name>ManifoldContactListener</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a3617b6840119acf9e42afe9b42e5c788</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(ContactID, const ContactImpulsesList &amp;, unsigned)&gt;</type>
      <name>ImpulsesContactListener</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a9bb603cd42edf9f557e204e996977143</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>World</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aa89b7fd6debfc04e3f41018deab88d29</anchor>
      <arglist>(const WorldConf &amp;def=GetDefaultWorldConf())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>World</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ae0dbefcd9b9d640f7013360f040c392f</anchor>
      <arglist>(const World &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>World &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a4b2d37998661b12ac6ef32c46b59d81e</anchor>
      <arglist>(const World &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~World</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>acd12237b5cc3cdbaa791c6bf4730b48b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFixtureDestructionListener</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a4c8547da705ab903871ad3d2e5e546aa</anchor>
      <arglist>(const FixtureListener &amp;listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetJointDestructionListener</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ac75bfa1c4cb3c03edf6222a1741f14dc</anchor>
      <arglist>(const JointListener &amp;listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBeginContactListener</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ab91ffd7b86de2425628a581d957eb7ba</anchor>
      <arglist>(ContactListener listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEndContactListener</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a79664281b855babd5652b5cb8fd809e5</anchor>
      <arglist>(ContactListener listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPreSolveContactListener</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ae9455702c387515eceaf89c4ed5afac7</anchor>
      <arglist>(ManifoldContactListener listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPostSolveContactListener</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a8beec5336a45f7a37d4e1e25d10b1f18</anchor>
      <arglist>(ImpulsesContactListener listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ac86bef01f4d3d477fd57d62107a0a5c1</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>StepStats</type>
      <name>Step</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aa6773aff74b9341a9eb58c7bca925cda</anchor>
      <arglist>(const StepConf &amp;conf=StepConf{})</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsStepComplete</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ae11b95986545392904cfa45cdef13478</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetSubStepping</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a8799d82838efa9277f588dc0819c51dd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSubStepping</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a6eb2e6c5d518c12dcbcc26979f46a5ae</anchor>
      <arglist>(bool flag) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const DynamicTree &amp;</type>
      <name>GetTree</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a9e88ff1fed5897d1f35bdca45b0d3769</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLocked</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aabf20551c381368b2019b832b7c98119</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ShiftOrigin</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a810c702555c946c686e4062c7966008c</anchor>
      <arglist>(Length2 newOrigin)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetMinVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a95453e9c6c17e66fbb7e96256b2ca071</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetMaxVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a887bfd8eb8cbe735a9830c8a5aec2bce</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Frequency</type>
      <name>GetInvDeltaTime</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ae9a06df8bd96d7d7ade817dffff67351</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>GetBodyRange</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ac423e891b05839d03616cb46e16cfdb0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; Bodies::const_iterator &gt;</type>
      <name>GetBodies</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a27ef923d7f9f12cbede89dfd4c956847</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; Bodies::const_iterator &gt;</type>
      <name>GetBodiesForProxies</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>acdf003251b1066d6fc06a86c34664ba7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>CreateBody</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a06a02a3c719ec0f20c5d2c43f5894bd9</anchor>
      <arglist>(const BodyConf &amp;def=GetDefaultBodyConf())</arglist>
    </member>
    <member kind="function">
      <type>const Body &amp;</type>
      <name>GetBody</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a3320b3c2c866c90003eabfd00354c8d7</anchor>
      <arglist>(BodyID id) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBody</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a1645bbc3e8cf8a78f41f38cd7c5e953e</anchor>
      <arglist>(BodyID id, const Body &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Destroy</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a093fe75c15777dfd466fc98f7496ef4a</anchor>
      <arglist>(BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; Fixtures::const_iterator &gt;</type>
      <name>GetFixtures</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a2e42754f22a7b0f98f15970f336fdb13</anchor>
      <arglist>(BodyID id) const</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; World::BodyJoints::const_iterator &gt;</type>
      <name>GetJoints</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ae84632604a8a5712afeaec510ebeb1ca</anchor>
      <arglist>(BodyID id) const</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; World::Contacts::const_iterator &gt;</type>
      <name>GetContacts</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ae4666f5e4af331e62731cf71d91a0b4e</anchor>
      <arglist>(BodyID id) const</arglist>
    </member>
    <member kind="function">
      <type>FixtureCounter</type>
      <name>GetFixtureRange</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a978c65e9787a803f1153cee9708dd260</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>FixtureID</type>
      <name>CreateFixture</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a393eb225bc5bc87c1538d894843855c2</anchor>
      <arglist>(const FixtureConf &amp;def=FixtureConf{})</arglist>
    </member>
    <member kind="function">
      <type>const FixtureConf &amp;</type>
      <name>GetFixture</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a36e0a722a350bb050fb1fbaf4a240a19</anchor>
      <arglist>(FixtureID id) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFixture</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a2ca6f693c3bfd5ead732c14c3e07d048</anchor>
      <arglist>(FixtureID id, const FixtureConf &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Destroy</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ade8aa516e6338f48963952312e38397f</anchor>
      <arglist>(FixtureID id)</arglist>
    </member>
    <member kind="function">
      <type>JointCounter</type>
      <name>GetJointRange</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a487784093b52b20e25c62f291dd7a728</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; Joints::const_iterator &gt;</type>
      <name>GetJoints</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>acd41faec72cca3f9225fb389123d6801</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>JointID</type>
      <name>CreateJoint</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a88b81cc647667c20613706d08ef3f213</anchor>
      <arglist>(const Joint &amp;def)</arglist>
    </member>
    <member kind="function">
      <type>const Joint &amp;</type>
      <name>GetJoint</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a2c2f3f1424ba5a139e85b29688c59b76</anchor>
      <arglist>(JointID id) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetJoint</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a1bae1c66f5eacb368640d87da9c6c618</anchor>
      <arglist>(JointID id, const Joint &amp;def)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Destroy</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aa8bb1c42524152358896de8eb2a89cb2</anchor>
      <arglist>(JointID id)</arglist>
    </member>
    <member kind="function">
      <type>ContactCounter</type>
      <name>GetContactRange</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a7989e66de0e4cc3c3d6bb570b91fa4a8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; Contacts::const_iterator &gt;</type>
      <name>GetContacts</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a599c3903feb0a48673d9dc38758ae2bb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Contact &amp;</type>
      <name>GetContact</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a3c98acce7c7db7424044b9e29d198474</anchor>
      <arglist>(ContactID id) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetContact</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aaffdab67636a0117a8159117c5fec962</anchor>
      <arglist>(ContactID id, const Contact &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const Manifold &amp;</type>
      <name>GetManifold</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a9eed9c330f082b6918b222ee0cbcf8c1</anchor>
      <arglist>(ContactID id) const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>propagate_const&lt; std::unique_ptr&lt; WorldImpl &gt; &gt;</type>
      <name>m_impl</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a6a93eb070d285b6a65dbc4e1f3d70c14</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeAABB</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ace3a057073fad958bb614087dda58e99</anchor>
      <arglist>(const World &amp;world, FixtureID id)</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeAABB</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a37bb405e5a603696123a9cd9c6c8a376</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gae96eee6263453ce2250d79fd8beb88bd</anchor>
      <arglist>(const World &amp;world, const RayCastInput &amp;input, const FixtureRayCastCB &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>DistanceJointConf</type>
      <name>GetDistanceJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a6809a5b4f9ba4ad7957553a329fe1994</anchor>
      <arglist>(const World &amp;world, BodyID bodyA, BodyID bodyB, Length2 anchorA=Length2{}, Length2 anchorB=Length2{})</arglist>
    </member>
    <member kind="function">
      <type>FrictionJointConf</type>
      <name>GetFrictionJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a35e8c4e6880befb1f81a4caa3b7914eb</anchor>
      <arglist>(const World &amp;world, BodyID bodyA, BodyID bodyB, Length2 anchor)</arglist>
    </member>
    <member kind="function">
      <type>GearJointConf</type>
      <name>GetGearJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a2e2f7487e6bca2b26a9dc6779a9bc72b</anchor>
      <arglist>(const World &amp;world, JointID id1, JointID id2, Real ratio=Real{1})</arglist>
    </member>
    <member kind="function">
      <type>MotorJointConf</type>
      <name>GetMotorJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>abc10ead5563974d639870bb4c9955a51</anchor>
      <arglist>(const World &amp;world, BodyID bA, BodyID bB)</arglist>
    </member>
    <member kind="function">
      <type>PrismaticJointConf</type>
      <name>GetPrismaticJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aea5a3b058a514a9dac2a7670be4f37ad</anchor>
      <arglist>(const World &amp;world, BodyID bA, BodyID bB, const Length2 anchor, const UnitVec axis)</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity</type>
      <name>GetLinearVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ab7b59db43cee6a26c0433b69476b0c9b</anchor>
      <arglist>(const World &amp;world, const PrismaticJointConf &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PulleyJointConf</type>
      <name>GetPulleyJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a3addeb61645a20288e22687cbef5c6b3</anchor>
      <arglist>(const World &amp;world, BodyID bA, BodyID bB, Length2 groundA, Length2 groundB, Length2 anchorA, Length2 anchorB)</arglist>
    </member>
    <member kind="function">
      <type>RevoluteJointConf</type>
      <name>GetRevoluteJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aebf949d6443b1a6a85ff8a97b65d1b5b</anchor>
      <arglist>(const World &amp;world, BodyID bodyA, BodyID bodyB, Length2 anchor)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngle</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ab6330d5a0349c5c78357355a05815694</anchor>
      <arglist>(const World &amp;world, const RevoluteJointConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetAngularVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a2103c29612c27b521ec004b60c4b77e5</anchor>
      <arglist>(const World &amp;world, const RevoluteJointConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>WeldJointConf</type>
      <name>GetWeldJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a7a5a52a8c470433ddeb8e44616b0d28a</anchor>
      <arglist>(const World &amp;world, BodyID bodyA, BodyID bodyB, const Length2 anchor=Length2{})</arglist>
    </member>
    <member kind="function">
      <type>WheelJointConf</type>
      <name>GetWheelJointConf</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>afe5cfdb1c7cdce8f51cd5b5932d9059a</anchor>
      <arglist>(const World &amp;world, BodyID bodyA, BodyID bodyB, Length2 anchor, UnitVec axis=UnitVec::GetRight())</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetAngularVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a54073d6bb0b399295ab2b2ce105b02f4</anchor>
      <arglist>(const World &amp;world, const WheelJointConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>GetBodyRange</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>abe80bceeb031d85076c29f75f0241475</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; std::vector&lt; BodyID &gt;::const_iterator &gt;</type>
      <name>GetBodies</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a28f809f0951bfb0a97027eaefca55515</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; std::vector&lt; BodyID &gt;::const_iterator &gt;</type>
      <name>GetBodiesForProxies</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aa70eeb7b7e00b3920f4539f569be34d2</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>CreateBody</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a7a7b3314c3d17fbb49952bdf4fb4ff1a</anchor>
      <arglist>(World &amp;world, const BodyConf &amp;def=GetDefaultBodyConf())</arglist>
    </member>
    <member kind="function">
      <type>const Body &amp;</type>
      <name>GetBody</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ac59105439c7d4ed0b5e6af3c7dbc377e</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBody</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a96b67e48017d5525b014c82845ac8ddc</anchor>
      <arglist>(World &amp;world, BodyID id, const Body &amp;body)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Destroy</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a5220bddd2803e882d97dfbce54bdceda</anchor>
      <arglist>(World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; std::vector&lt; FixtureID &gt;::const_iterator &gt;</type>
      <name>GetFixtures</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ae475a107e192ce25ee57d10790805bfc</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>FixtureCounter</type>
      <name>GetFixtureCount</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a20944afa5f0709c73162e7f7bf56e408</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>LinearAcceleration2</type>
      <name>GetLinearAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ae8ca55fff3e787fcbc3d30fc8f39f49c</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>AngularAcceleration</type>
      <name>GetAngularAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a05620c9ad05a74b4cd9799d76f4df0ed</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>Acceleration</type>
      <name>GetAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a8c16a3a5c5a313873e82f2a5b3c5a444</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a418cd290b6a2d35b2e1714b8ad2b5977</anchor>
      <arglist>(World &amp;world, BodyID id, LinearAcceleration2 linear, AngularAcceleration angular)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ab55a73746131ce67978e1b6525ef2828</anchor>
      <arglist>(World &amp;world, BodyID id, LinearAcceleration2 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a7d38270de7497d14ebf2dfe48eb64699</anchor>
      <arglist>(World &amp;world, BodyID id, AngularAcceleration value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a38238366981a6ff670b61aef3ec738c0</anchor>
      <arglist>(World &amp;world, BodyID id, Acceleration value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTransformation</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ad01a8fe16bba00769e661ac6ea969389</anchor>
      <arglist>(World &amp;world, BodyID id, Transformation xfm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTransform</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>afe96807931f9815ed363951901508f8d</anchor>
      <arglist>(World &amp;world, BodyID id, Length2 location, Angle angle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLocation</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aa31cc6e0438fd8de38fe1eddab503121</anchor>
      <arglist>(World &amp;world, BodyID id, Length2 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngle</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a245759e710fc195c98621e6d1ceb4433</anchor>
      <arglist>(World &amp;world, BodyID id, Angle value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RotateAboutWorldPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a118f1cd558a4d51a5f7123fcfdcdf5b6</anchor>
      <arglist>(World &amp;world, BodyID id, Angle amount, Length2 worldPoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RotateAboutLocalPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a3d9fea50aa07339ec50b07d3673a1be7</anchor>
      <arglist>(World &amp;world, BodyID id, Angle amount, Length2 localPoint)</arglist>
    </member>
    <member kind="function">
      <type>Acceleration</type>
      <name>CalcGravitationalAcceleration</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a145bc2034162d0e6684d8d606211fb5e</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>GetWorldIndex</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a96cce8e8cf11bdfcb2d834f999744dd3</anchor>
      <arglist>(const World &amp;world, const BodyID id) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyType</type>
      <name>GetType</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a1d049ed1a0633d0c0a7138a2c79823b5</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetType</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>abe9472104a0c01207d97300925853ed3</anchor>
      <arglist>(World &amp;world, BodyID id, BodyType value, bool resetMassData=true)</arglist>
    </member>
    <member kind="function">
      <type>Transformation</type>
      <name>GetTransformation</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ae851807b71a13326be2635fb8af75ab6</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocation</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aabf27f5cfd9092be041a781d24cfa9a1</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetWorldPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ad52c5cffc4cd82e4cf533db1afcedc93</anchor>
      <arglist>(const World &amp;world, BodyID id, const Length2 localPoint)</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetLocalVector</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ac542518f1fbacb567e5b39778de863db</anchor>
      <arglist>(const World &amp;world, BodyID body, const UnitVec uv)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ad432f7c9779ee902b41cdfab944c8885</anchor>
      <arglist>(const World &amp;world, BodyID body, const Length2 worldPoint)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngle</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a65c0c4c3adb519277e5418ec800bb7b3</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetWorldVector</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>afb57be7efe663810331859b5e0c9a253</anchor>
      <arglist>(const World &amp;world, BodyID body, UnitVec localVector)</arglist>
    </member>
    <member kind="function">
      <type>Velocity</type>
      <name>GetVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>acc05b211fd414f80784e7250c1f0b173</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ad96f80e152c8b40ffb278dd171a018fc</anchor>
      <arglist>(World &amp;world, BodyID id, const Velocity &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAwake</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aa7a828e4da95fbbaffcfc14186e451a1</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAwake</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a67874514581554435fd8065942a33050</anchor>
      <arglist>(World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetAwake</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>abb9770df3b38d727d39b7ac13ba4c77b</anchor>
      <arglist>(World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity2</type>
      <name>GetLinearVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>afb257e46e441021d64884e95c400fa0f</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetAngularVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a116c82c48643c1ef6199d27e9b9dd882</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ad96f80e152c8b40ffb278dd171a018fc</anchor>
      <arglist>(World &amp;world, BodyID id, const Velocity &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ab57a90509099257c82af9931964780d0</anchor>
      <arglist>(World &amp;world, BodyID id, const LinearVelocity2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>abe9eb60684f92671b2acf31c20e7bfdb</anchor>
      <arglist>(World &amp;world, BodyID id, AngularVelocity value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DestroyFixtures</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aa70bf9eba0de4ea43c561231f6c51263</anchor>
      <arglist>(World &amp;world, BodyID id, bool resetMassData=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>acf3eb15a8221d495856fd34c831255a1</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a36fa18310477a7ab081e0b81425b5bad</anchor>
      <arglist>(World &amp;world, BodyID id, bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAwake</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aa7a828e4da95fbbaffcfc14186e451a1</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAwake</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a67874514581554435fd8065942a33050</anchor>
      <arglist>(World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetAwake</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>abb9770df3b38d727d39b7ac13ba4c77b</anchor>
      <arglist>(World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Awaken</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a4968cdffa51be385b42f978f3226901d</anchor>
      <arglist>(World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMassDataDirty</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a28c9e02154e09942576f0edc8297415c</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsFixedRotation</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a0a234fed595bbb7745f54c0820597260</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFixedRotation</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a1a11e67e4bda096d53e4c6a55272656b</anchor>
      <arglist>(World &amp;world, BodyID id, bool value)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetWorldCenter</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a32537729a6c93bba8c9ea99a3bcd737f</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>InvMass</type>
      <name>GetInvMass</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ae67b1e703960f2ac4bfefc9d38c7a164</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>InvRotInertia</type>
      <name>GetInvRotInertia</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>adbe356dc1eaa258248d26ba77fc8491f</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>Mass</type>
      <name>GetMass</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ad51a22660fa68bff534e3ae5bbcaba38</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>RotInertia</type>
      <name>GetRotInertia</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a8cc24a20ec1f33d8e51baf8bc435406a</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalCenter</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a0d96416fb8a1165678be1c50fce12cc6</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>RotInertia</type>
      <name>GetLocalRotInertia</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ad374df7cc8d1a5a9a186e0ae8a7c8cb3</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a873904ef02cab072a393ef4554c17ea3</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>ComputeMassData</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a0f6db19ca88cbfda1c130583c367b97e</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMassData</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>abe6b45c9a1aeec496d83c00a6f587740</anchor>
      <arglist>(World &amp;world, BodyID id, const MassData &amp;massData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetMassData</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a0f4a5600e14e8a21bdf50bfe3382cb55</anchor>
      <arglist>(World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; std::vector&lt; std::pair&lt; BodyID, JointID &gt; &gt;::const_iterator &gt;</type>
      <name>GetJoints</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a0eeb57c8beb84dfbfe470b9707b1fa92</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSpeedable</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a5a9a1e21b5e0f1b2200d902a3f577e6e</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAccelerable</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ac33af5ec304e45152ffb2d275ba5093c</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsImpenetrable</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a11893b06ac5c981fc1da435d2a07063f</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetImpenetrable</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>afb1332e63f530ca56d0efa14deb06bba</anchor>
      <arglist>(World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetImpenetrable</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a66f55f614954b3969e3fb94733834a61</anchor>
      <arglist>(World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetImpenetrable</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>adb8a3d49c66601ec5953d19714aa9759</anchor>
      <arglist>(World &amp;world, BodyID id, bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSleepingAllowed</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>abf1860a0b9cd6de8e35cf3ab3353db31</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSleepingAllowed</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a8f148aa57e72254d95694d31c7b4dbb1</anchor>
      <arglist>(World &amp;world, BodyID, bool value)</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; std::vector&lt; KeyedContactPtr &gt;::const_iterator &gt;</type>
      <name>GetContacts</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ae5ab8a5162315de2f340bf43b8243e5d</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>Force2</type>
      <name>GetCentripetalForce</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a63ff1a3d8b15fd8ab2fc36b475a6b643</anchor>
      <arglist>(const World &amp;world, BodyID id, Length2 axis)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyForceToCenter</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aff8c388b99a60c431d85dc649786562a</anchor>
      <arglist>(World &amp;world, BodyID id, Force2 force)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyForce</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>af2cf9255dec702ee772907123e23d889</anchor>
      <arglist>(World &amp;world, BodyID id, Force2 force, Length2 point)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyTorque</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a63de8f07f975cb055b0790364f2f6a69</anchor>
      <arglist>(World &amp;world, BodyID id, Torque torque)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyLinearImpulse</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a496ed2441dd8b38efd57ca94b2c74a17</anchor>
      <arglist>(World &amp;world, BodyID id, Momentum2 impulse, Length2 point)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyAngularImpulse</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a1b34b2cc77e2ef64a6155572fc589ead</anchor>
      <arglist>(World &amp;world, BodyID id, AngularMomentum impulse)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetForce</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>adca4e4bff8f8c98a0247a10e9551edca</anchor>
      <arglist>(World &amp;world, BodyID id, Force2 force, Length2 point) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTorque</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a5800108f6c4be7a8a49d5283aa881616</anchor>
      <arglist>(World &amp;world, BodyID id, Torque torque) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Frequency</type>
      <name>GetLinearDamping</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ad68f40e70485dd95d747d0531f2debad</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLinearDamping</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a9fd32bf6cda4a42e0b61db21fb7bfe5c</anchor>
      <arglist>(World &amp;world, BodyID id, NonNegative&lt; Frequency &gt; linearDamping)</arglist>
    </member>
    <member kind="function">
      <type>Frequency</type>
      <name>GetAngularDamping</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aec885dc5540478cf5ffef4e893e82fcd</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngularDamping</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a79dbcc9738c04b86acf653b8cab48971</anchor>
      <arglist>(World &amp;world, BodyID id, NonNegative&lt; Frequency &gt; angularDamping)</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>GetAwakeCount</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a0812de1607b6656927bc2ad724f1d7c3</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>Awaken</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a1539463268cf6db572823eb1a195dc70</anchor>
      <arglist>(World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>FindClosestBody</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a7c37ce126c86487bd78a0b8d6734e182</anchor>
      <arglist>(const World &amp;world, Length2 location) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>GetBodyCount</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a54933e742508cac5c0b219c653c67674</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAccelerations</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ad85bb4dfbf060d7d28668e4bc2d73a10</anchor>
      <arglist>(World &amp;world, Acceleration acceleration) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAccelerations</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ab9dc75916d003478c7004172110b58e2</anchor>
      <arglist>(World &amp;world, LinearAcceleration2 acceleration) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearForces</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aa8a757a3ee66fa157cbf1ffafdf556d4</anchor>
      <arglist>(World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAccelerations</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ae23446b68b07e35cff2b642c5573acfe</anchor>
      <arglist>(World &amp;world, F fn)</arglist>
    </member>
    <member kind="function">
      <type>ContactCounter</type>
      <name>GetContactRange</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aa69d38b444407e38b21ea8a4dd875678</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; std::vector&lt; KeyedContactPtr &gt;::const_iterator &gt;</type>
      <name>GetContacts</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a5ba0f1fe0a6e9a140c4d264f61f7440e</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Contact &amp;</type>
      <name>GetContact</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ac283a088c9613f5ac5470c1d2f6c94a7</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetContact</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>af66ef8ef333d03072a9a9fe66cc0309a</anchor>
      <arglist>(World &amp;world, ContactID id, const Contact &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsTouching</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a386a732d954a80f48e6a3ac7beca1237</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAwake</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a89c2757003061a1852f035d352ec68a5</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAwake</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aeaa33fbede9039afb79513b1a7432278</anchor>
      <arglist>(World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>GetBodyA</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aa8c24669bbb9850b21ef17c5217f0a45</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>GetBodyB</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a379c87f1276cec0f81e35942dc144b27</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>FixtureID</type>
      <name>GetFixtureA</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>afb6a01c31ef63559cf6c5d7892e863d5</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>FixtureID</type>
      <name>GetFixtureB</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a697b60b490bbcdae46d962c97d780e07</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetChildIndexA</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a24ba41bdcb80e48e4bfebac362eb23db</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetChildIndexB</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a708d52132fb3f4ffbd49bf09ebc64740</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>TimestepIters</type>
      <name>GetToiCount</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ab2cf2abf28efb6e6ba368648b49484f0</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>NeedsFiltering</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aadd14b7a073e106ee40d4488d131f673</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>NeedsUpdating</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aaada9701c50ea1607ecf3ae02c8f72c1</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasValidToi</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aae57c7aca1c8c840ea8eb1ba1d44ef07</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetToi</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ac62d6b0d4985566ff6e1ca9d3f1fa1e6</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetDefaultFriction</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ad4c197be0402b89a41342cfe51523d45</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetDefaultRestitution</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ad04dd80754bf974462c8796cd3c95b07</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetFriction</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a2ada1ba075b82b0e496f2a3a012ab495</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetRestitution</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ada6f0319b80bd4a62673f539e41d0b86</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFriction</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a0fbfbb5c2714aac231db6f9b3794d9e4</anchor>
      <arglist>(World &amp;world, ContactID id, Real friction)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRestitution</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a74f86083992d822f2b6376b98c8e8a79</anchor>
      <arglist>(World &amp;world, ContactID id, Real restitution)</arglist>
    </member>
    <member kind="function">
      <type>const Manifold &amp;</type>
      <name>GetManifold</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>af36b360b9ed9ff9e993a1c1a5655e46d</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>WorldManifold</type>
      <name>GetWorldManifold</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a9e4fddd252b20dfceb87d93f5ad11087</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetFriction</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a74979affb98f9307f121fd8f4f63910d</anchor>
      <arglist>(World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetRestitution</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>af23360c9130e209a06ae0c111f274876</anchor>
      <arglist>(World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity</type>
      <name>GetTangentSpeed</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a2a314b9568d6553aaac1df1a0054250e</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTangentSpeed</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>adaae6c7d046c05b5b2f79c2e0d3fedae</anchor>
      <arglist>(World &amp;world, ContactID id, LinearVelocity value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a10fdf8ef9cbd8b1ff7b51334e72a6ef5</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aaccb259506fe50452b035158ec12e47b</anchor>
      <arglist>(World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a6b1a2071021c814a1ee5bfe54c994287</anchor>
      <arglist>(World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>ContactCounter</type>
      <name>GetTouchingCount</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>af8aabfb6390fed1c549e81700b0cd80e</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ae6e78139be823080998e2cf046601977</anchor>
      <arglist>(World &amp;world, ContactID id, bool value)</arglist>
    </member>
    <member kind="function">
      <type>ContactCounter</type>
      <name>GetContactCount</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ac7b6c00fbd4fc40a4957bd082c9437b4</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>FixtureCounter</type>
      <name>GetFixtureRange</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a8c18ccec305798581941df7ef567123d</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>FixtureCounter</type>
      <name>GetFixtureCount</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ac30f61aacb499241e0bde575efc4b5b4</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>FixtureID</type>
      <name>CreateFixture</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a96ffed101b6adaeaf51d57ee17323c95</anchor>
      <arglist>(World &amp;world, FixtureConf def=FixtureConf{}, bool resetMassData=true)</arglist>
    </member>
    <member kind="function">
      <type>FixtureID</type>
      <name>CreateFixture</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aa76df465e73530b8f1026981e6471bd3</anchor>
      <arglist>(World &amp;world, BodyID id, const Shape &amp;shape, FixtureConf def=FixtureConf{}, bool resetMassData=true)</arglist>
    </member>
    <member kind="function">
      <type>FixtureID</type>
      <name>CreateFixture</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>acb365337e5b85b3b86f24d214eeb5840</anchor>
      <arglist>(World &amp;world, BodyID id, const T &amp;shapeConf, FixtureConf def=FixtureConf{}, bool resetMassData=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Destroy</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aee0269f0a023b2598e8b7286b35519d8</anchor>
      <arglist>(World &amp;world, FixtureID id, bool resetMassData=true)</arglist>
    </member>
    <member kind="function">
      <type>Filter</type>
      <name>GetFilterData</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a1dbda295266109b5cd1cb357124a1d4c</anchor>
      <arglist>(const World &amp;world, FixtureID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFilterData</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a5cda7cbb9a8e263bacaed250c1aea6cd</anchor>
      <arglist>(World &amp;world, FixtureID id, const Filter &amp;filter)</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>GetBody</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ae41d95c5b1ec79c36e344c95fa884bc1</anchor>
      <arglist>(const World &amp;world, FixtureID id)</arglist>
    </member>
    <member kind="function">
      <type>Transformation</type>
      <name>GetTransformation</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>acdfa023334becda826867586a581979d</anchor>
      <arglist>(const World &amp;world, FixtureID id)</arglist>
    </member>
    <member kind="function">
      <type>const Shape &amp;</type>
      <name>GetShape</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>adba78c797c56900392e14caa245032b7</anchor>
      <arglist>(const World &amp;world, FixtureID id)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetFriction</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a58dc7587cbd5da666f4501eb719b059e</anchor>
      <arglist>(const World &amp;world, FixtureID id)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetRestitution</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a7fe43c7b209c1aca69358206e4a7a9fa</anchor>
      <arglist>(const World &amp;world, FixtureID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSensor</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a191f8d94e1733aad171a69519a0ab49e</anchor>
      <arglist>(const World &amp;world, FixtureID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSensor</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ab61ecfbbe51f6e7f34db6b35ce15ac1b</anchor>
      <arglist>(World &amp;world, FixtureID id, bool value)</arglist>
    </member>
    <member kind="function">
      <type>AreaDensity</type>
      <name>GetDensity</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a965b984815574cb6d0ed9bf3824f59c4</anchor>
      <arglist>(const World &amp;world, FixtureID id)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a0f686d9e42eedbadcc373295b380dfa2</anchor>
      <arglist>(const World &amp;world, FixtureID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestPoint</name>
      <anchorfile>group__TestPointGroup.html</anchorfile>
      <anchor>gad0dda7c567b740e8ce2e4f04fa593a25</anchor>
      <arglist>(const World &amp;world, FixtureID id, Length2 p)</arglist>
    </member>
    <member kind="function">
      <type>JointCounter</type>
      <name>GetJointRange</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ade6a80b2e35e7e0a4a7374925497a2bd</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; std::vector&lt; JointID &gt;::const_iterator &gt;</type>
      <name>GetJoints</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ac8f6e0a116a71527f6671053e7f8e616</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JointID</type>
      <name>CreateJoint</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a306ddb4629a63298afd72f849a05bbe5</anchor>
      <arglist>(World &amp;world, const Joint &amp;def)</arglist>
    </member>
    <member kind="function">
      <type>JointID</type>
      <name>CreateJoint</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ae2daf9b23558da46e3662b2405f97156</anchor>
      <arglist>(World &amp;world, const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Destroy</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a806941861724bdba59cbcc6fc0cea61e</anchor>
      <arglist>(World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>TypeID</type>
      <name>GetType</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a27fd66901457a53162b0e900ca1b46a9</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>const Joint &amp;</type>
      <name>GetJoint</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a1107e6659ad32e836ad15e04758d15bf</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetJoint</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ac4b3a69acd5e4d6ccceda622fd2a3e9a</anchor>
      <arglist>(World &amp;world, JointID id, const Joint &amp;def)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetJoint</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ac07ce291e8ce59c988ee4bafca890059</anchor>
      <arglist>(World &amp;world, JointID id, const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetCollideConnected</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a3b869cbb8b5896ccdf15c66f1d00761a</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMotorEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a9f9bc9518243b79711cd0defe739671c</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnableMotor</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aec28b93da1c0c63493d4a9d05e95eff2</anchor>
      <arglist>(World &amp;world, JointID id, bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLimitEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aea48262785f5cc1a4efcb6856e8327f2</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnableLimit</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ae88a98bb1700968afaff9b143820e0d1</anchor>
      <arglist>(World &amp;world, JointID id, bool value)</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>GetBodyA</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a75920437a0a87a24443296f1191db23b</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>GetBodyB</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a3f6b43a34cbbdbc34530e5513820e2ac</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalAnchorA</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>acde3e0a71def1cfceb2c821288555155</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalAnchorB</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a1aebe08694e219bf5032c3c44c5cc5ab</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a3faa14e4c0188345c54d433a877ae01f</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a57bbf093e91c58e3bdf61479c561bee0</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetReferenceAngle</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a902c4e2db9331be98f4150759ed738bd</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetLocalXAxisA</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a35b304b54e47447d5277528ad2a9b469</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetLocalYAxisA</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>af6865d25a20091233c0f8b104c658df2</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetMotorSpeed</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a688c457d004db7df23965d2227f4124e</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMotorSpeed</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a900537131a6eb2dc318a7990d8c544b8</anchor>
      <arglist>(World &amp;world, JointID id, AngularVelocity value)</arglist>
    </member>
    <member kind="function">
      <type>Torque</type>
      <name>GetMaxMotorTorque</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>af1b821c24f62a16d978fcce0f6ed0375</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMaxMotorTorque</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aa4a8c62d8ac89a11ae8f6be2e8cded5a</anchor>
      <arglist>(World &amp;world, JointID id, Torque value)</arglist>
    </member>
    <member kind="function">
      <type>Momentum</type>
      <name>GetLinearMotorImpulse</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a1136742708ea7dc3cfd2ec1fc3435e1b</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>AngularMomentum</type>
      <name>GetAngularMotorImpulse</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a80c87366a9452f7ef76b5474a723e245</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>RotInertia</type>
      <name>GetAngularMass</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a69407c4afef863d09f490618aa390318</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Frequency</type>
      <name>GetFrequency</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a72d60d568707d6551e9dedb02c9e2724</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFrequency</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a23e2f1041c3b5a7cbc2c1b1d7f7ff689</anchor>
      <arglist>(World &amp;world, JointID id, Frequency value)</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetAngularVelocity</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>af0d81eef4bb9836cfc9afef270a17054</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEnabled</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ac628649081fe495f59e06aff27f3201d</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>JointCounter</type>
      <name>GetWorldIndex</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ae1416ad660edc4914c490c7ea156ab93</anchor>
      <arglist>(const World &amp;world, JointID id) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetAnchorA</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ad3c653a34c7a681dbc60ec447225e85f</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetAnchorB</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aa88982e1bd4c8bafe0160cdad5a68a71</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetRatio</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a7089b428b6ec35dc8b4d62396982bbd0</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetJointTranslation</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a0469ef558d7b14efb4792c7f24084d7e</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngle</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a488b1925795688fed10e2f506cda91c5</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Force</type>
      <name>GetMotorForce</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a3e6c752f15d341da441a3b7541bf8791</anchor>
      <arglist>(const World &amp;world, JointID id, Frequency inv_dt)</arglist>
    </member>
    <member kind="function">
      <type>Torque</type>
      <name>GetMotorTorque</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a2eb6880ff8f81a8555c092138e0c6759</anchor>
      <arglist>(const World &amp;world, JointID id, Frequency inv_dt)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLinearOffset</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a730510b6851cf86fdc29a007ff3b26f0</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLinearOffset</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a81d72e02a8cad05f27a97f52ab8fff3d</anchor>
      <arglist>(World &amp;world, JointID id, Length2 value)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngularOffset</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a1671b9e54818077d726f3f6cba342eb4</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngularOffset</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>abddeb217913218d82cfb1857fc14e12b</anchor>
      <arglist>(World &amp;world, JointID id, Angle value)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetGroundAnchorA</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a5e44d6db77292b823171b97df09a3cd8</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetGroundAnchorB</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a5011bee6db23c7f1d50cadf00674e692</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetCurrentLengthA</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>afd81bf06efee4b29f2490134f52baddc</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetCurrentLengthB</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a11679510e7348f8480d317a02ba3e2aa</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetTarget</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a74c3d7ede9ca7f67050e7ef5c109d212</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTarget</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a5c5030bdc9a0a22cf720f3b3b551c6e2</anchor>
      <arglist>(World &amp;world, JointID id, Length2 value)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngularLowerLimit</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a25c524e133872333f16ba15dec55a23d</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngularUpperLimit</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a16abb6c18ad6df80be85a69e6cef496c</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngularLimits</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aa07553452b8502796da81d8bb81b73d1</anchor>
      <arglist>(World &amp;world, JointID id, Angle lower, Angle upper)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ShiftOrigin</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a51154f75b56a864d6fd29682a5c16d8a</anchor>
      <arglist>(World &amp;world, JointID id, Length2 value)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetDampingRatio</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aeb5fc13ad106742d7189897e0a95c2de</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetLength</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a806d53a54ac5ef05308d51d87cdf0192</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>LimitState</type>
      <name>GetLimitState</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>af0dcaa1775e96d5b8014493d6e3dbc7d</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAwake</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a85c5cee4a3713d3ef248eab7b4d05926</anchor>
      <arglist>(World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>JointCounter</type>
      <name>GetJointCount</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a8902de592d92cefc72d2e984d591a27d</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFixtureDestructionListener</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>af41c649d4dd3ad38b1ea4345668123b3</anchor>
      <arglist>(World &amp;world, std::function&lt; void(FixtureID)&gt; listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetJointDestructionListener</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a6610b57bcd07b93a0aee57b1ee992b8c</anchor>
      <arglist>(World &amp;world, std::function&lt; void(JointID)&gt; listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBeginContactListener</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a653180033620e8c277350132bebfb55e</anchor>
      <arglist>(World &amp;world, std::function&lt; void(ContactID)&gt; listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEndContactListener</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a366fea84a0fee4e83888dc294dbd1454</anchor>
      <arglist>(World &amp;world, std::function&lt; void(ContactID)&gt; listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPreSolveContactListener</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a37ff0fa0aab9577c6da79333dfbd4cba</anchor>
      <arglist>(World &amp;world, std::function&lt; void(ContactID, const Manifold &amp;)&gt; listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPostSolveContactListener</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a128995c173435b41e5a7c1e7452a83ab</anchor>
      <arglist>(World &amp;world, std::function&lt; void(ContactID, const ContactImpulsesList &amp;, unsigned)&gt; listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a8811dc9edaaa6fa9aa10dc843bf4bb9a</anchor>
      <arglist>(World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>StepStats</type>
      <name>Step</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a7a6f95c38761b4ca2fcc284154f704c3</anchor>
      <arglist>(World &amp;world, const StepConf &amp;conf=StepConf{})</arglist>
    </member>
    <member kind="function">
      <type>StepStats</type>
      <name>Step</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a035ee60a3274619546a2cee7b982b894</anchor>
      <arglist>(World &amp;world, Time delta, TimestepIters velocityIterations=8, TimestepIters positionIterations=3)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetSubStepping</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ab8d7ece82bb9a60db3d1f1d98ac80b98</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSubStepping</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>abd11a65631c7b9dd009090492fe98874</anchor>
      <arglist>(World &amp;world, bool flag) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const DynamicTree &amp;</type>
      <name>GetTree</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ab314146b43aa31bdc72e5795b5f44659</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>FixtureCounter</type>
      <name>GetShapeCount</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a198704845b880c379966e5b79b297527</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetMinVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a37fe6b5dbdfa9f4e5b7a09bdcbd4485d</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetMaxVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a33c81759b720514f3666528e7d9f2688</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ShiftOrigin</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a262c7508b542fccad3e066c166a69ad2</anchor>
      <arglist>(World &amp;world, Length2 newOrigin)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>World</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aa89b7fd6debfc04e3f41018deab88d29</anchor>
      <arglist>(const WorldConf &amp;def=GetDefaultWorldConf())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>World</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ae0dbefcd9b9d640f7013360f040c392f</anchor>
      <arglist>(const World &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>World &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a4b2d37998661b12ac6ef32c46b59d81e</anchor>
      <arglist>(const World &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~World</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>acd12237b5cc3cdbaa791c6bf4730b48b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFixtureDestructionListener</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a4c8547da705ab903871ad3d2e5e546aa</anchor>
      <arglist>(const FixtureListener &amp;listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetJointDestructionListener</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ac75bfa1c4cb3c03edf6222a1741f14dc</anchor>
      <arglist>(const JointListener &amp;listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBeginContactListener</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ab91ffd7b86de2425628a581d957eb7ba</anchor>
      <arglist>(ContactListener listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEndContactListener</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a79664281b855babd5652b5cb8fd809e5</anchor>
      <arglist>(ContactListener listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPreSolveContactListener</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ae9455702c387515eceaf89c4ed5afac7</anchor>
      <arglist>(ManifoldContactListener listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPostSolveContactListener</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a8beec5336a45f7a37d4e1e25d10b1f18</anchor>
      <arglist>(ImpulsesContactListener listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ac86bef01f4d3d477fd57d62107a0a5c1</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>StepStats</type>
      <name>Step</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aa6773aff74b9341a9eb58c7bca925cda</anchor>
      <arglist>(const StepConf &amp;conf=StepConf{})</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsStepComplete</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ae11b95986545392904cfa45cdef13478</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetSubStepping</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a8799d82838efa9277f588dc0819c51dd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSubStepping</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a6eb2e6c5d518c12dcbcc26979f46a5ae</anchor>
      <arglist>(bool flag) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const DynamicTree &amp;</type>
      <name>GetTree</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a9e88ff1fed5897d1f35bdca45b0d3769</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLocked</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aabf20551c381368b2019b832b7c98119</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ShiftOrigin</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a810c702555c946c686e4062c7966008c</anchor>
      <arglist>(Length2 newOrigin)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetMinVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a95453e9c6c17e66fbb7e96256b2ca071</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetMaxVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a887bfd8eb8cbe735a9830c8a5aec2bce</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Frequency</type>
      <name>GetInvDeltaTime</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ae9a06df8bd96d7d7ade817dffff67351</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>GetBodyRange</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ac423e891b05839d03616cb46e16cfdb0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; Bodies::const_iterator &gt;</type>
      <name>GetBodies</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a27ef923d7f9f12cbede89dfd4c956847</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; Bodies::const_iterator &gt;</type>
      <name>GetBodiesForProxies</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>acdf003251b1066d6fc06a86c34664ba7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>CreateBody</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a06a02a3c719ec0f20c5d2c43f5894bd9</anchor>
      <arglist>(const BodyConf &amp;def=GetDefaultBodyConf())</arglist>
    </member>
    <member kind="function">
      <type>const Body &amp;</type>
      <name>GetBody</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a3320b3c2c866c90003eabfd00354c8d7</anchor>
      <arglist>(BodyID id) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBody</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a1645bbc3e8cf8a78f41f38cd7c5e953e</anchor>
      <arglist>(BodyID id, const Body &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Destroy</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a093fe75c15777dfd466fc98f7496ef4a</anchor>
      <arglist>(BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; Fixtures::const_iterator &gt;</type>
      <name>GetFixtures</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a2e42754f22a7b0f98f15970f336fdb13</anchor>
      <arglist>(BodyID id) const</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; World::BodyJoints::const_iterator &gt;</type>
      <name>GetJoints</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ae84632604a8a5712afeaec510ebeb1ca</anchor>
      <arglist>(BodyID id) const</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; World::Contacts::const_iterator &gt;</type>
      <name>GetContacts</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ae4666f5e4af331e62731cf71d91a0b4e</anchor>
      <arglist>(BodyID id) const</arglist>
    </member>
    <member kind="function">
      <type>FixtureCounter</type>
      <name>GetFixtureRange</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a978c65e9787a803f1153cee9708dd260</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>FixtureID</type>
      <name>CreateFixture</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a393eb225bc5bc87c1538d894843855c2</anchor>
      <arglist>(const FixtureConf &amp;def=FixtureConf{})</arglist>
    </member>
    <member kind="function">
      <type>const FixtureConf &amp;</type>
      <name>GetFixture</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a36e0a722a350bb050fb1fbaf4a240a19</anchor>
      <arglist>(FixtureID id) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFixture</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a2ca6f693c3bfd5ead732c14c3e07d048</anchor>
      <arglist>(FixtureID id, const FixtureConf &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Destroy</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>ade8aa516e6338f48963952312e38397f</anchor>
      <arglist>(FixtureID id)</arglist>
    </member>
    <member kind="function">
      <type>JointCounter</type>
      <name>GetJointRange</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a487784093b52b20e25c62f291dd7a728</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; Joints::const_iterator &gt;</type>
      <name>GetJoints</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>acd41faec72cca3f9225fb389123d6801</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>JointID</type>
      <name>CreateJoint</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a88b81cc647667c20613706d08ef3f213</anchor>
      <arglist>(const Joint &amp;def)</arglist>
    </member>
    <member kind="function">
      <type>const Joint &amp;</type>
      <name>GetJoint</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a2c2f3f1424ba5a139e85b29688c59b76</anchor>
      <arglist>(JointID id) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetJoint</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a1bae1c66f5eacb368640d87da9c6c618</anchor>
      <arglist>(JointID id, const Joint &amp;def)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Destroy</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aa8bb1c42524152358896de8eb2a89cb2</anchor>
      <arglist>(JointID id)</arglist>
    </member>
    <member kind="function">
      <type>ContactCounter</type>
      <name>GetContactRange</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a7989e66de0e4cc3c3d6bb570b91fa4a8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; Contacts::const_iterator &gt;</type>
      <name>GetContacts</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a599c3903feb0a48673d9dc38758ae2bb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Contact &amp;</type>
      <name>GetContact</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a3c98acce7c7db7424044b9e29d198474</anchor>
      <arglist>(ContactID id) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetContact</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>aaffdab67636a0117a8159117c5fec962</anchor>
      <arglist>(ContactID id, const Contact &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const Manifold &amp;</type>
      <name>GetManifold</name>
      <anchorfile>classplayrho_1_1d2_1_1World.html</anchorfile>
      <anchor>a9eed9c330f082b6918b222ee0cbcf8c1</anchor>
      <arglist>(ContactID id) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>playrho::d2::WorldConf</name>
    <filename>structplayrho_1_1d2_1_1WorldConf.html</filename>
    <member kind="function">
      <type>constexpr WorldConf &amp;</type>
      <name>UseMinVertexRadius</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldConf.html</anchorfile>
      <anchor>a58c42d0b4d3de1fb08a8c8afbc25ecd3</anchor>
      <arglist>(Positive&lt; Length &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr WorldConf &amp;</type>
      <name>UseMaxVertexRadius</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldConf.html</anchorfile>
      <anchor>a0f12a7a9f9a3f5c3044c51b0c1f89521</anchor>
      <arglist>(Positive&lt; Length &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr WorldConf &amp;</type>
      <name>UseInitialTreeSize</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldConf.html</anchorfile>
      <anchor>a93e43379749b28688158f23822a83e79</anchor>
      <arglist>(ContactCounter value) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Positive&lt; Length &gt;</type>
      <name>minVertexRadius</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldConf.html</anchorfile>
      <anchor>ac263a75e94581a0b37d4ff1f08984ce1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Positive&lt; Length &gt;</type>
      <name>maxVertexRadius</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldConf.html</anchorfile>
      <anchor>a3630c7407747eda7c5d97c43d771d815</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ContactCounter</type>
      <name>initialTreeSize</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldConf.html</anchorfile>
      <anchor>aa40a06645a5a4104e518d44c9716c2f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr WorldConf</type>
      <name>GetDefaultWorldConf</name>
      <anchorfile>structplayrho_1_1d2_1_1WorldConf.html</anchorfile>
      <anchor>a541672909a4b96348950519410fcd082</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::WorldImpl</name>
    <filename>classplayrho_1_1d2_1_1WorldImpl.html</filename>
    <class kind="struct">playrho::d2::WorldImpl::ContactToiData</class>
    <class kind="struct">playrho::d2::WorldImpl::ContactUpdateConf</class>
    <class kind="struct">playrho::d2::WorldImpl::DestroyContactsStats</class>
    <class kind="struct">playrho::d2::WorldImpl::ProcessContactsOutput</class>
    <class kind="struct">playrho::d2::WorldImpl::UpdateContactsData</class>
    <class kind="struct">playrho::d2::WorldImpl::UpdateContactsStats</class>
    <member kind="typedef">
      <type>std::vector&lt; BodyID &gt;</type>
      <name>Bodies</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>ad475269279ddb3b19812257a33d9cee5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; KeyedContactPtr &gt;</type>
      <name>Contacts</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>aed0f6a8b2a970747c6b81f992dfbb31f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; JointID &gt;</type>
      <name>Joints</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>af54727d76ddeacca7ecd918d85928547</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::pair&lt; BodyID, JointID &gt; &gt;</type>
      <name>BodyJoints</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>ab16f17dac6e9d4b5f063b542d4363a2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; FixtureID &gt;</type>
      <name>Fixtures</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a7785c383c9b089bfbc6ef75ba45ca8a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DynamicTree::Size</type>
      <name>ProxyId</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>ac3b5c9e29fc03e4a9e01240e646f2259</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; ProxyId &gt;</type>
      <name>Proxies</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a81c223170ec9f76d22ac728a3f81926f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(FixtureID)&gt;</type>
      <name>FixtureListener</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a611d52bd7b5ecbc2b3a0e671fe184605</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(JointID)&gt;</type>
      <name>JointListener</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a1559281e8fb0c6172b18167408cd132e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(ContactID)&gt;</type>
      <name>ContactListener</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a18728d8e5d91eac0fc58d9eec72cb029</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(ContactID, const Manifold &amp;)&gt;</type>
      <name>ManifoldContactListener</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a1a8aba1e4067c897655928d0ef56cbd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(ContactID, const ContactImpulsesList &amp;, unsigned)&gt;</type>
      <name>ImpulsesContactListener</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a5e2e64e4159ecd5d00eb59c257f932a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WorldImpl</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a76a2d0374678c7223e95eabf4ae49f5b</anchor>
      <arglist>(const WorldConf &amp;def=GetDefaultWorldConf())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WorldImpl</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a3a0af8343fb1f961d0ab9631629800b9</anchor>
      <arglist>(const WorldImpl &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>WorldImpl &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a168226503ad3736a83a08da5cd5fa625</anchor>
      <arglist>(const WorldImpl &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~WorldImpl</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a3dd7c0125be76395bcdcbc29237c2e3d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFixtureDestructionListener</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>ab1a6b14b7788d01925e27f99ffa73541</anchor>
      <arglist>(FixtureListener listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetJointDestructionListener</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a1c73bc4a6e2204e16a1c8b051246cacd</anchor>
      <arglist>(JointListener listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBeginContactListener</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a84dc9327c099bb6af83b777d69967b0e</anchor>
      <arglist>(ContactListener listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEndContactListener</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a263efe10c733e9a57c08a3d7157d1127</anchor>
      <arglist>(ContactListener listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPreSolveContactListener</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a587ec7d49af0a5fda200169540cb222a</anchor>
      <arglist>(ManifoldContactListener listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPostSolveContactListener</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>ab007b4ceee40248a4c9416219acf89cc</anchor>
      <arglist>(ImpulsesContactListener listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a45766f0643fca6561f909b896f02822e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>StepStats</type>
      <name>Step</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a221c003be264927ac01d690712b4551b</anchor>
      <arglist>(const StepConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsStepComplete</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a742823558ff8293abee726b329ccfacf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetSubStepping</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>aea1de488b1ed5f632f987a1c4b3013f0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSubStepping</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a700e5bd0048377abd5302b6008bfe8fa</anchor>
      <arglist>(bool flag) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const DynamicTree &amp;</type>
      <name>GetTree</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>aba21c1f96e9194e6c57b41ff2aee047c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLocked</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a5474046a12b119ef3a85e48cfe23094f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ShiftOrigin</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a1d280b15a6d77c374c2515363c16cf28</anchor>
      <arglist>(Length2 newOrigin)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetMinVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>aa5f71dd8e1b6da69dfe28ed242fad5f1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetMaxVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a7d0caff04631b8d5c03c876911a83366</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Frequency</type>
      <name>GetInvDeltaTime</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>ae40d0b25bdf854ee96e3e58acc700699</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Proxies &amp;</type>
      <name>GetProxies</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a4b18a1dac9b57e31b5d495a2a0a7793d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddProxies</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a8b8f64fdeaefb8c64a2f1ddf6c817a82</anchor>
      <arglist>(const Proxies &amp;proxies)</arglist>
    </member>
    <member kind="function">
      <type>ContactCounter</type>
      <name>FindNewContacts</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a670e49e479c383fbbac52e1817883864</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>GetBodyRange</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a8615c541cf6806d7d41d8729dadf9967</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; Bodies::const_iterator &gt;</type>
      <name>GetBodies</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a82e38f95aaeee42c0c678ab444650ff1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; Bodies::const_iterator &gt;</type>
      <name>GetBodiesForProxies</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a8567fde7dfecd3161c7a1d15dd1a6d1e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>CreateBody</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a56f095fe60a50b47f9aa2f3d6664e3f2</anchor>
      <arglist>(const BodyConf &amp;def=GetDefaultBodyConf())</arglist>
    </member>
    <member kind="function">
      <type>const Body &amp;</type>
      <name>GetBody</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a32fd07d852bd60f0ecfd793ea04bc2ba</anchor>
      <arglist>(BodyID id) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBody</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a41cc43a409194b7cbab845f8bae69f95</anchor>
      <arglist>(BodyID id, const Body &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Destroy</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a497b22f2480ab65cf01ad56a76143721</anchor>
      <arglist>(BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsDestroyed</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a9143a09221070b4ab01fb51460e2d63a</anchor>
      <arglist>(BodyID id) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; WorldImpl::Contacts::const_iterator &gt;</type>
      <name>GetContacts</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a7f85b891a2c3595523855ab218d9e5fd</anchor>
      <arglist>(BodyID id) const</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; WorldImpl::BodyJoints::const_iterator &gt;</type>
      <name>GetJoints</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>ad7be6bf064faf9d79d27284a92f36ad5</anchor>
      <arglist>(BodyID id) const</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; WorldImpl::Fixtures::const_iterator &gt;</type>
      <name>GetFixtures</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a042ecf583acbbc7911f6cc6cbc73dab3</anchor>
      <arglist>(BodyID id) const</arglist>
    </member>
    <member kind="function">
      <type>FixtureCounter</type>
      <name>GetFixtureRange</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>af8eecc5e4bfcc4846b67570113f544ef</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>FixtureID</type>
      <name>CreateFixture</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a5c2c258e0632e2daa11c2f5e042eaa99</anchor>
      <arglist>(const FixtureConf &amp;def=FixtureConf{})</arglist>
    </member>
    <member kind="function">
      <type>const FixtureConf &amp;</type>
      <name>GetFixture</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>ad78400b236d1d09294647aa8c3eab67c</anchor>
      <arglist>(FixtureID id) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFixture</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a6eddde22e7f0dbdb461a2c0a6c17fc21</anchor>
      <arglist>(FixtureID id, const FixtureConf &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Destroy</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a4b009dd0c35fffc89295648ee64ba898</anchor>
      <arglist>(FixtureID fixture)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsDestroyed</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a6673ea9a0b8b6bbbcc183fb831ee74b1</anchor>
      <arglist>(FixtureID id) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; Fixtures::const_iterator &gt;</type>
      <name>GetFixturesForProxies</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a4a983b70cb0418c8484c695503003158</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Proxies &amp;</type>
      <name>GetProxies</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a11ae988a8f6f65fbabc1f7cb05ae7512</anchor>
      <arglist>(FixtureID id) const</arglist>
    </member>
    <member kind="function">
      <type>JointCounter</type>
      <name>GetJointRange</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a8958c1124daec4ebfb790c97dac143d3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; Joints::const_iterator &gt;</type>
      <name>GetJoints</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a84704041d895884748cb013aa32c73c5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>JointID</type>
      <name>CreateJoint</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a3dbfa1501f8c3051e3cf96bc2304c3cb</anchor>
      <arglist>(const Joint &amp;def)</arglist>
    </member>
    <member kind="function">
      <type>const Joint &amp;</type>
      <name>GetJoint</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a11f1f4638eefbf9bb7a23b7c92fafaec</anchor>
      <arglist>(JointID id) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetJoint</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>ab2e58310b1aba79de5640ae920b2ebeb</anchor>
      <arglist>(JointID id, const Joint &amp;def)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Destroy</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a678535b796d004a332efbc117b380ef5</anchor>
      <arglist>(JointID joint)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsDestroyed</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>acfba7a5008ad3592810544417c16601b</anchor>
      <arglist>(JointID id) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ContactCounter</type>
      <name>GetContactRange</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>acd228c7601b2411dc554ee79420db658</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; Contacts::const_iterator &gt;</type>
      <name>GetContacts</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a08c96ab2b2645c6fd28c3ad77a840bba</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Contact &amp;</type>
      <name>GetContact</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a87742d5f6c76e4b5a53270f09b5c5909</anchor>
      <arglist>(ContactID id) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetContact</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a75f903a4325ba025c7dbf458c415a90d</anchor>
      <arglist>(ContactID id, const Contact &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const Manifold &amp;</type>
      <name>GetManifold</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a680d31c2afa68a9775bc9c993bbb3516</anchor>
      <arglist>(ContactID id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsDestroyed</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>aa53e19dbab5a16e87c17958fc60e8273</anchor>
      <arglist>(ContactID id) const noexcept</arglist>
    </member>
    <member kind="enumeration" protection="private">
      <type></type>
      <name>Flag</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a8dd8690abc540c4a4e24e2c1b1ca23d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>e_newFixture</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a8dd8690abc540c4a4e24e2c1b1ca23d0a01b39e7f5dfded70e9925f26819e7249</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>e_locked</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a8dd8690abc540c4a4e24e2c1b1ca23d0ad09af48d2809d3466f23ac18182f84d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>e_substepping</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a8dd8690abc540c4a4e24e2c1b1ca23d0a2f3c69d1032588089851a4747899f43f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>e_stepComplete</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a8dd8690abc540c4a4e24e2c1b1ca23d0a33f2caa2736f1f7d82118f7f1dab852b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::uint32_t</type>
      <name>FlagsType</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a3ffea0c6c7110720d4a0c3fb206fab12</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; ContactKey &gt;</type>
      <name>ContactKeyQueue</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>af5bee3369d6c11e5bbedd5424303af91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::stack&lt; BodyID, std::vector&lt; BodyID &gt; &gt;</type>
      <name>BodyStack</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>aafbc2560e7f91ee3eac6d3853f147c71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>e_newFixture</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a8dd8690abc540c4a4e24e2c1b1ca23d0a01b39e7f5dfded70e9925f26819e7249</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>e_locked</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a8dd8690abc540c4a4e24e2c1b1ca23d0ad09af48d2809d3466f23ac18182f84d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>e_substepping</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a8dd8690abc540c4a4e24e2c1b1ca23d0a2f3c69d1032588089851a4747899f43f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>e_stepComplete</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a8dd8690abc540c4a4e24e2c1b1ca23d0a33f2caa2736f1f7d82118f7f1dab852b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>RegStepStats</type>
      <name>SolveReg</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>ad713a4babfc5defee138076b69dc372d</anchor>
      <arglist>(const StepConf &amp;conf)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>IslandStats</type>
      <name>SolveRegIslandViaGS</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a78cad5bc045344c27000a93663cf36ae</anchor>
      <arglist>(const StepConf &amp;conf, const Island &amp;island)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>AddToIsland</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a0ee4c488eef9a3c16977b7fc06b5dceb</anchor>
      <arglist>(Island &amp;island, BodyID seed, BodyCounter &amp;remNumBodies, ContactCounter &amp;remNumContacts, JointCounter &amp;remNumJoints)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>AddToIsland</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>ac7e354e519f2c41c2080d8f7f9e47177</anchor>
      <arglist>(Island &amp;island, BodyStack &amp;stack, BodyCounter &amp;remNumBodies, ContactCounter &amp;remNumContacts, JointCounter &amp;remNumJoints)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>AddContactsToIsland</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>ac9241a3a232d68e75e21f35113801a5e</anchor>
      <arglist>(Island &amp;island, BodyStack &amp;stack, const Contacts &amp;contacts, BodyID bodyID)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>AddJointsToIsland</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a79152907de292bae25ebb6416163c161</anchor>
      <arglist>(Island &amp;island, BodyStack &amp;stack, const BodyJoints &amp;joints)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ToiStepStats</type>
      <name>SolveToi</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a470ba039f845cd981e31584f37c1f1bf</anchor>
      <arglist>(const StepConf &amp;conf)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>IslandStats</type>
      <name>SolveToi</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a210eeeb89b4ff7264efa8b687da8b8d0</anchor>
      <arglist>(ContactID contactID, const StepConf &amp;conf)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>IslandStats</type>
      <name>SolveToiViaGS</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a8bdf8dc97f575361394a47d4f53c0146</anchor>
      <arglist>(const Island &amp;island, const StepConf &amp;conf)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ProcessContactsOutput</type>
      <name>ProcessContactsForTOI</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>ac04cfc5657ac89627f1fef0a700f385b</anchor>
      <arglist>(BodyID id, Island &amp;island, Real toi, const StepConf &amp;conf)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>Remove</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>aca772cb9784a4d8e72f876441314f996</anchor>
      <arglist>(BodyID id) noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>AddFixture</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a90ea4abd1ebff7927eeb6902e6ca5111</anchor>
      <arglist>(BodyID id, FixtureID fixture)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>RemoveFixture</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a56c74cc1b1f084b2d2c9e7fa139b1bc9</anchor>
      <arglist>(BodyID id, FixtureID fixture)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a00e1689252447eae1fc374d630695a6a</anchor>
      <arglist>(JointID j, bool flagForFiltering=false)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>Remove</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a5c3ee14a928683440620ab4d01d95c7f</anchor>
      <arglist>(JointID id) noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>SetStepComplete</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a6cf891c8a523010b8a75c4b5228fda34</anchor>
      <arglist>(bool value) noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>SetAllowSleeping</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a7ce070e831f3b53d4b201535d6fa23cd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>UnsetAllowSleeping</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a9816edbf68350eb8e86f5e387a190195</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>HasNewFixtures</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a6889a7352eecc803037df24b4094b7f0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>UnsetNewFixtures</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a45dc4d354ed387ffb06d499ea5e48525</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" protection="private">
      <type>DestroyContactsStats</type>
      <name>DestroyContacts</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a202439718913778688275f902686b76b</anchor>
      <arglist>(Contacts &amp;contacts)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>UpdateContactsStats</type>
      <name>UpdateContacts</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>ae196693ff57c316f63922e0ab78f1f4b</anchor>
      <arglist>(const StepConf &amp;conf)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>Destroy</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a16d79d6bcaf6a2c59f269d8587b83c72</anchor>
      <arglist>(ContactID contact, const Body *from)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>Add</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a7ef29daf86837d7a5db8333064299230</anchor>
      <arglist>(ContactKey key)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>InternalDestroy</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>ae007d8ebcdf237028b261cd99053f54a</anchor>
      <arglist>(ContactID contact, const Body *from=nullptr)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ContactCounter</type>
      <name>Synchronize</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a61684b789cd63a2f0293c9caae9db832</anchor>
      <arglist>(const Fixtures &amp;fixtures, const Transformation &amp;xfm1, const Transformation &amp;xfm2, Real multiplier, Length extension)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>CreateAndDestroyProxies</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>ae5fe49982bfae5ec82d52e1a895fbd49</anchor>
      <arglist>(Length extension)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>PreStepStats::counter_type</type>
      <name>SynchronizeProxies</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>aa30a33558a9a9753b84fe65fca9068ba</anchor>
      <arglist>(const StepConf &amp;conf)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>Update</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>aebd7935e321a9f4beaabe0dc49e56641</anchor>
      <arglist>(ContactID id, const ContactUpdateConf &amp;conf)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static Bodies::size_type</type>
      <name>RemoveUnspeedablesFromIslanded</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>af8ea7267009619b52281753e5eae0c29</anchor>
      <arglist>(const std::vector&lt; BodyID &gt; &amp;bodies, const ArrayAllocator&lt; Body &gt; &amp;buffer, std::vector&lt; bool &gt; &amp;islanded)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static bool</type>
      <name>UpdateBody</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>acb80b2ba6380510777cbf95efa83b9de</anchor>
      <arglist>(Body &amp;body, const Position &amp;pos)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static UpdateContactsData</type>
      <name>UpdateContactTOIs</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a5c38917b15d28c3a98a2b84d121dbbb2</anchor>
      <arglist>(ArrayAllocator&lt; Contact &gt; &amp;contactBuffer, ArrayAllocator&lt; Body &gt; &amp;bodyBuffer, const ArrayAllocator&lt; FixtureConf &gt; &amp;fixtureBuffer, const Contacts &amp;contacts, const StepConf &amp;conf)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static ContactToiData</type>
      <name>GetSoonestContact</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a94672b3b074267dea80f38ea49cba7e2</anchor>
      <arglist>(const Contacts &amp;contacts, const ArrayAllocator&lt; Contact &gt; &amp;buffer) noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ArrayAllocator&lt; Body &gt;</type>
      <name>m_bodyBuffer</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a34b4dd064dd1b448b7a834d6a5a593bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ArrayAllocator&lt; Contacts &gt;</type>
      <name>m_bodyContacts</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>af88d27e01cbbd344eeceee3a90cfc0e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ArrayAllocator&lt; BodyJoints &gt;</type>
      <name>m_bodyJoints</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a1c4e3262db2805ab5681f3bd6aa99a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ArrayAllocator&lt; Fixtures &gt;</type>
      <name>m_bodyFixtures</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a388cda0fac67167420bff3741c320bb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ArrayAllocator&lt; FixtureConf &gt;</type>
      <name>m_fixtureBuffer</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a5d24441f604998e08b4373c6dd4ebfd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ArrayAllocator&lt; Proxies &gt;</type>
      <name>m_fixtureProxies</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a67848aec74587572edb8a10f1cbcefce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ArrayAllocator&lt; Joint &gt;</type>
      <name>m_jointBuffer</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>ac90ea3d482f4c35fba781b083c1fe185</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ArrayAllocator&lt; Contact &gt;</type>
      <name>m_contactBuffer</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>ae9764640271cdc798e6e95aea8d18c4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ArrayAllocator&lt; Manifold &gt;</type>
      <name>m_manifoldBuffer</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>ad0a65b14e827e9f796907d9a2e309019</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DynamicTree</type>
      <name>m_tree</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a793771b3dfd51a4477fcd82d530269ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ContactKeyQueue</type>
      <name>m_proxyKeys</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a8291c572e12eed5936bdce2fb683920d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Proxies</type>
      <name>m_proxies</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a3bade38d4ea70716e9fbb89dd5642252</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Fixtures</type>
      <name>m_fixturesForProxies</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>ae2589a588a3fcba0f9f4dfb4cca9632a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Bodies</type>
      <name>m_bodiesForProxies</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a402462f87f691e60bdff2c2c2ed6324b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Bodies</type>
      <name>m_bodies</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a8fcf6c398ce36be9dbba79194de118a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Joints</type>
      <name>m_joints</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a89560ceee4d1af67c4797bd7065ceffa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Contacts</type>
      <name>m_contacts</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>af5965e05342bfdb48a9a417b99103c3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Island</type>
      <name>m_island</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>ae2409b1374bfe483344522467dd2e564</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; bool &gt;</type>
      <name>m_islandedBodies</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a24fe6ed7edd493857c2a928aa53917bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; bool &gt;</type>
      <name>m_islandedContacts</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a5f14c8e23b60422358b2afa9759fc9d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; bool &gt;</type>
      <name>m_islandedJoints</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>ac7238ab18b77f9306e97f300aa833635</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FixtureListener</type>
      <name>m_fixtureDestructionListener</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>aa61ea985837ff1692ddcbf5a266de765</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>JointListener</type>
      <name>m_jointDestructionListener</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a2b503294f65a3d3eb8aad75b96bf437e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ContactListener</type>
      <name>m_beginContactListener</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>aa870d3acab74d901ee2cf9a6636f7dae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ContactListener</type>
      <name>m_endContactListener</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>ae42d7bfa6d434a7e87cf4817bc6a2c7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ManifoldContactListener</type>
      <name>m_preSolveContactListener</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a1d68e62cdbe6dc273148b5977b13ca80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ImpulsesContactListener</type>
      <name>m_postSolveContactListener</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>ac7cb17fe8baf9ad8d88dacc85a0c1b9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FlagsType</type>
      <name>m_flags</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a3e7baaa45caf6816e329ee6c9ec9dd5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Frequency</type>
      <name>m_inv_dt0</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a70ca21ce4447f46f1be18cde40928c7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Positive&lt; Length &gt;</type>
      <name>m_minVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a5031115be7f03d8aa9f74dad3897420c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Positive&lt; Length &gt;</type>
      <name>m_maxVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>ade6f0c27f67d86e11f86281a5c177916</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>GetBodyRange</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>af1f54963f89ffa91d31fc57260d4ac8c</anchor>
      <arglist>(const WorldImpl &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>CreateBody</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>aa60c2cfd2b38cdfc416aca0cc1cb4282</anchor>
      <arglist>(WorldImpl &amp;world, const BodyConf &amp;def=GetDefaultBodyConf())</arglist>
    </member>
    <member kind="function">
      <type>const Body &amp;</type>
      <name>GetBody</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a0d08d623ac10313556747b49a49dbb4a</anchor>
      <arglist>(const WorldImpl &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBody</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a0f1ee37d3ab61133b09736ac0a37de6b</anchor>
      <arglist>(WorldImpl &amp;world, BodyID id, const Body &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Destroy</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a27fe25ca313f7d6953e4a1c55b8827d4</anchor>
      <arglist>(WorldImpl &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; std::vector&lt; std::pair&lt; BodyID, JointID &gt; &gt;::const_iterator &gt;</type>
      <name>GetJoints</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a2a1806882b555f6b9573b9c812f5a149</anchor>
      <arglist>(const WorldImpl &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; std::vector&lt; FixtureID &gt;::const_iterator &gt;</type>
      <name>GetFixtures</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a476a114f99e23630b4fa1cdcd86df976</anchor>
      <arglist>(const WorldImpl &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; std::vector&lt; KeyedContactPtr &gt;::const_iterator &gt;</type>
      <name>GetContacts</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a592fb5e510f53e11c60b73f452164e47</anchor>
      <arglist>(const WorldImpl &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>ContactCounter</type>
      <name>GetContactRange</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a0e1eb87fd5e77d8c8f8aee47da70f01c</anchor>
      <arglist>(const WorldImpl &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Contact &amp;</type>
      <name>GetContact</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a91773d69ef6d97322fa7ea65a34bb4d8</anchor>
      <arglist>(const WorldImpl &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetContact</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a70a5652ade1a86cbc36372da0d9512af</anchor>
      <arglist>(WorldImpl &amp;world, ContactID id, const Contact &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>FixtureCounter</type>
      <name>GetFixtureRange</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a87a2b2161fea37eb8aeec03069126f2b</anchor>
      <arglist>(const WorldImpl &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>FixtureID</type>
      <name>CreateFixture</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a495fdb19d5ffc0602211bebda2c2e58c</anchor>
      <arglist>(WorldImpl &amp;world, const FixtureConf &amp;def)</arglist>
    </member>
    <member kind="function">
      <type>const FixtureConf &amp;</type>
      <name>GetFixture</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>ae4fd169656cf635ab80ca7e640ab46b6</anchor>
      <arglist>(const WorldImpl &amp;world, FixtureID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFixture</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>ace6f407b50019144c9e6c6790fc95f48</anchor>
      <arglist>(WorldImpl &amp;world, FixtureID id, const FixtureConf &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Destroy</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a893d7b988a30a4a56c4c8f0805018316</anchor>
      <arglist>(WorldImpl &amp;world, FixtureID id)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; ContactCounter &gt; &amp;</type>
      <name>GetProxies</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a42e566b3ebd11a079b52b2b2783eae1f</anchor>
      <arglist>(const WorldImpl &amp;world, FixtureID id)</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetProxyCount</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a50f34d73a3d42dedb30272462a986816</anchor>
      <arglist>(const WorldImpl &amp;world, FixtureID id)</arglist>
    </member>
    <member kind="function">
      <type>ContactCounter</type>
      <name>GetProxy</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a207c061fc4a4cf2aa0af2431d5be1aa0</anchor>
      <arglist>(const WorldImpl &amp;world, FixtureID id, ChildCounter child)</arglist>
    </member>
    <member kind="function">
      <type>JointCounter</type>
      <name>GetJointRange</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>aafd03bdc701b63cfdb6ffe81c7096631</anchor>
      <arglist>(const WorldImpl &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JointID</type>
      <name>CreateJoint</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a27fad602d38bef0ded44254b7066695e</anchor>
      <arglist>(WorldImpl &amp;world, const Joint &amp;def)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Destroy</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>ad11049091ca60e7a0a56f16d7c5c4e35</anchor>
      <arglist>(WorldImpl &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>const Joint &amp;</type>
      <name>GetJoint</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a1b24751e62a84dd90abd86f67a3226cc</anchor>
      <arglist>(const WorldImpl &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetJoint</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a66bba438f6edc5eb9c6bb55f7caa8202</anchor>
      <arglist>(WorldImpl &amp;world, JointID id, const Joint &amp;def)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a317ad010847421750166838cede7bcfa</anchor>
      <arglist>(WorldImpl &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFixtureDestructionListener</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a2c29a7b215e94a078dac19a738130c1d</anchor>
      <arglist>(WorldImpl &amp;world, std::function&lt; void(FixtureID)&gt; listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetJointDestructionListener</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>acff18a22b02f78222a56f6a14dcbfa90</anchor>
      <arglist>(WorldImpl &amp;world, std::function&lt; void(JointID)&gt; listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBeginContactListener</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a7f75137a01725df9036e87f9447d62b8</anchor>
      <arglist>(WorldImpl &amp;world, std::function&lt; void(ContactID)&gt; listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEndContactListener</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a8c04058f6a200a2804fbb428a7be9630</anchor>
      <arglist>(WorldImpl &amp;world, std::function&lt; void(ContactID)&gt; listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPreSolveContactListener</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a7209065d048d81a3bba79b000683bf97</anchor>
      <arglist>(WorldImpl &amp;world, std::function&lt; void(ContactID, const Manifold &amp;)&gt; listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPostSolveContactListener</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a04becf4f4af1f6e8b8c5ba66f200dffc</anchor>
      <arglist>(WorldImpl &amp;world, std::function&lt; void(ContactID, const ContactImpulsesList &amp;, unsigned)&gt; listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>StepStats</type>
      <name>Step</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>aa25253387bf26e86389e48ae89e2f0d8</anchor>
      <arglist>(WorldImpl &amp;world, const StepConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ShiftOrigin</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>af96a54f5afb3a967e0ef397c0beceba8</anchor>
      <arglist>(WorldImpl &amp;world, Length2 newOrigin)</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; std::vector&lt; BodyID &gt;::const_iterator &gt;</type>
      <name>GetBodies</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a3011d97673613dced0ff483a59cbdde9</anchor>
      <arglist>(const WorldImpl &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; std::vector&lt; BodyID &gt;::const_iterator &gt;</type>
      <name>GetBodiesForProxies</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>ad0d6997a55f534b37394b53bbecd8b91</anchor>
      <arglist>(const WorldImpl &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; std::vector&lt; FixtureID &gt;::const_iterator &gt;</type>
      <name>GetFixturesForProxies</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>ae0548905239581e1b5de261dc7e3dbeb</anchor>
      <arglist>(const WorldImpl &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; std::vector&lt; JointID &gt;::const_iterator &gt;</type>
      <name>GetJoints</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>ae575bb139a5db8094e954d44ebe26648</anchor>
      <arglist>(const WorldImpl &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; std::vector&lt; KeyedContactPtr &gt;::const_iterator &gt;</type>
      <name>GetContacts</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>aab22950c2b077f1dcb8ca254111757a0</anchor>
      <arglist>(const WorldImpl &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLocked</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a9f6e06ae5d756249d2d948e3a11d4d20</anchor>
      <arglist>(const WorldImpl &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsStepComplete</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a29d79bc60866034a46ee93cef089306d</anchor>
      <arglist>(const WorldImpl &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetSubStepping</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>ab956952cfa59979aef58175119efc46b</anchor>
      <arglist>(const WorldImpl &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSubStepping</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>ae2e1393346f2feb9e6cd1261194cd52a</anchor>
      <arglist>(WorldImpl &amp;world, bool value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetMinVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a3dc85a3fd79661b17f225819fc61ca0c</anchor>
      <arglist>(const WorldImpl &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetMaxVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a85a5c5aa03607543a1d1dea2a31520af</anchor>
      <arglist>(const WorldImpl &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Frequency</type>
      <name>GetInvDeltaTime</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a21dff1f3172e2ee11f203920bf62ba28</anchor>
      <arglist>(const WorldImpl &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const DynamicTree &amp;</type>
      <name>GetTree</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a74860eba448f1106cdc81246a25d29fe</anchor>
      <arglist>(const WorldImpl &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WorldImpl</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a76a2d0374678c7223e95eabf4ae49f5b</anchor>
      <arglist>(const WorldConf &amp;def=GetDefaultWorldConf())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WorldImpl</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a3a0af8343fb1f961d0ab9631629800b9</anchor>
      <arglist>(const WorldImpl &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>WorldImpl &amp;</type>
      <name>operator=</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a168226503ad3736a83a08da5cd5fa625</anchor>
      <arglist>(const WorldImpl &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~WorldImpl</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a3dd7c0125be76395bcdcbc29237c2e3d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFixtureDestructionListener</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>ab1a6b14b7788d01925e27f99ffa73541</anchor>
      <arglist>(FixtureListener listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetJointDestructionListener</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a1c73bc4a6e2204e16a1c8b051246cacd</anchor>
      <arglist>(JointListener listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBeginContactListener</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a84dc9327c099bb6af83b777d69967b0e</anchor>
      <arglist>(ContactListener listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEndContactListener</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a263efe10c733e9a57c08a3d7157d1127</anchor>
      <arglist>(ContactListener listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPreSolveContactListener</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a587ec7d49af0a5fda200169540cb222a</anchor>
      <arglist>(ManifoldContactListener listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPostSolveContactListener</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>ab007b4ceee40248a4c9416219acf89cc</anchor>
      <arglist>(ImpulsesContactListener listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a45766f0643fca6561f909b896f02822e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>StepStats</type>
      <name>Step</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a221c003be264927ac01d690712b4551b</anchor>
      <arglist>(const StepConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsStepComplete</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a742823558ff8293abee726b329ccfacf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetSubStepping</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>aea1de488b1ed5f632f987a1c4b3013f0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSubStepping</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a700e5bd0048377abd5302b6008bfe8fa</anchor>
      <arglist>(bool flag) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const DynamicTree &amp;</type>
      <name>GetTree</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>aba21c1f96e9194e6c57b41ff2aee047c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLocked</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a5474046a12b119ef3a85e48cfe23094f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ShiftOrigin</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a1d280b15a6d77c374c2515363c16cf28</anchor>
      <arglist>(Length2 newOrigin)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetMinVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>aa5f71dd8e1b6da69dfe28ed242fad5f1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetMaxVertexRadius</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a7d0caff04631b8d5c03c876911a83366</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Frequency</type>
      <name>GetInvDeltaTime</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>ae40d0b25bdf854ee96e3e58acc700699</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Proxies &amp;</type>
      <name>GetProxies</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a4b18a1dac9b57e31b5d495a2a0a7793d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddProxies</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a8b8f64fdeaefb8c64a2f1ddf6c817a82</anchor>
      <arglist>(const Proxies &amp;proxies)</arglist>
    </member>
    <member kind="function">
      <type>ContactCounter</type>
      <name>FindNewContacts</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a670e49e479c383fbbac52e1817883864</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>GetBodyRange</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a8615c541cf6806d7d41d8729dadf9967</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; Bodies::const_iterator &gt;</type>
      <name>GetBodies</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a82e38f95aaeee42c0c678ab444650ff1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; Bodies::const_iterator &gt;</type>
      <name>GetBodiesForProxies</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a8567fde7dfecd3161c7a1d15dd1a6d1e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>CreateBody</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a56f095fe60a50b47f9aa2f3d6664e3f2</anchor>
      <arglist>(const BodyConf &amp;def=GetDefaultBodyConf())</arglist>
    </member>
    <member kind="function">
      <type>const Body &amp;</type>
      <name>GetBody</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a32fd07d852bd60f0ecfd793ea04bc2ba</anchor>
      <arglist>(BodyID id) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBody</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a41cc43a409194b7cbab845f8bae69f95</anchor>
      <arglist>(BodyID id, const Body &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Destroy</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a497b22f2480ab65cf01ad56a76143721</anchor>
      <arglist>(BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsDestroyed</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a9143a09221070b4ab01fb51460e2d63a</anchor>
      <arglist>(BodyID id) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; WorldImpl::Contacts::const_iterator &gt;</type>
      <name>GetContacts</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a7f85b891a2c3595523855ab218d9e5fd</anchor>
      <arglist>(BodyID id) const</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; WorldImpl::BodyJoints::const_iterator &gt;</type>
      <name>GetJoints</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>ad7be6bf064faf9d79d27284a92f36ad5</anchor>
      <arglist>(BodyID id) const</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; WorldImpl::Fixtures::const_iterator &gt;</type>
      <name>GetFixtures</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a042ecf583acbbc7911f6cc6cbc73dab3</anchor>
      <arglist>(BodyID id) const</arglist>
    </member>
    <member kind="function">
      <type>FixtureCounter</type>
      <name>GetFixtureRange</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>af8eecc5e4bfcc4846b67570113f544ef</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>FixtureID</type>
      <name>CreateFixture</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a5c2c258e0632e2daa11c2f5e042eaa99</anchor>
      <arglist>(const FixtureConf &amp;def=FixtureConf{})</arglist>
    </member>
    <member kind="function">
      <type>const FixtureConf &amp;</type>
      <name>GetFixture</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>ad78400b236d1d09294647aa8c3eab67c</anchor>
      <arglist>(FixtureID id) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFixture</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a6eddde22e7f0dbdb461a2c0a6c17fc21</anchor>
      <arglist>(FixtureID id, const FixtureConf &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Destroy</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a4b009dd0c35fffc89295648ee64ba898</anchor>
      <arglist>(FixtureID fixture)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsDestroyed</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a6673ea9a0b8b6bbbcc183fb831ee74b1</anchor>
      <arglist>(FixtureID id) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; Fixtures::const_iterator &gt;</type>
      <name>GetFixturesForProxies</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a4a983b70cb0418c8484c695503003158</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Proxies &amp;</type>
      <name>GetProxies</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a11ae988a8f6f65fbabc1f7cb05ae7512</anchor>
      <arglist>(FixtureID id) const</arglist>
    </member>
    <member kind="function">
      <type>JointCounter</type>
      <name>GetJointRange</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a8958c1124daec4ebfb790c97dac143d3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; Joints::const_iterator &gt;</type>
      <name>GetJoints</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a84704041d895884748cb013aa32c73c5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>JointID</type>
      <name>CreateJoint</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a3dbfa1501f8c3051e3cf96bc2304c3cb</anchor>
      <arglist>(const Joint &amp;def)</arglist>
    </member>
    <member kind="function">
      <type>const Joint &amp;</type>
      <name>GetJoint</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a11f1f4638eefbf9bb7a23b7c92fafaec</anchor>
      <arglist>(JointID id) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetJoint</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>ab2e58310b1aba79de5640ae920b2ebeb</anchor>
      <arglist>(JointID id, const Joint &amp;def)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Destroy</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a678535b796d004a332efbc117b380ef5</anchor>
      <arglist>(JointID joint)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsDestroyed</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>acfba7a5008ad3592810544417c16601b</anchor>
      <arglist>(JointID id) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ContactCounter</type>
      <name>GetContactRange</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>acd228c7601b2411dc554ee79420db658</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; Contacts::const_iterator &gt;</type>
      <name>GetContacts</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a08c96ab2b2645c6fd28c3ad77a840bba</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Contact &amp;</type>
      <name>GetContact</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a87742d5f6c76e4b5a53270f09b5c5909</anchor>
      <arglist>(ContactID id) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetContact</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a75f903a4325ba025c7dbf458c415a90d</anchor>
      <arglist>(ContactID id, const Contact &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const Manifold &amp;</type>
      <name>GetManifold</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>a680d31c2afa68a9775bc9c993bbb3516</anchor>
      <arglist>(ContactID id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsDestroyed</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldImpl.html</anchorfile>
      <anchor>aa53e19dbab5a16e87c17958fc60e8273</anchor>
      <arglist>(ContactID id) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::d2::WorldManifold</name>
    <filename>classplayrho_1_1d2_1_1WorldManifold.html</filename>
    <class kind="struct">playrho::d2::WorldManifold::PointData</class>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(MaxManifoldPoints)&gt;::type</type>
      <name>size_type</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldManifold.html</anchorfile>
      <anchor>afdc1a8297a445dfd8192a71dc816ed5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WorldManifold</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldManifold.html</anchorfile>
      <anchor>a82f1ad79d18712eb0a8ad4692c063083</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>WorldManifold</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldManifold.html</anchorfile>
      <anchor>aef3c462873a9aab49c83cd778abd0738</anchor>
      <arglist>(UnitVec normal) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>WorldManifold</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldManifold.html</anchorfile>
      <anchor>a1d62b3f2bbc2d918985cc5c4fc6e96a0</anchor>
      <arglist>(UnitVec normal, PointData ps0) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>WorldManifold</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldManifold.html</anchorfile>
      <anchor>a9f3f8e8412fe851d3828e4e5a69f7e6e</anchor>
      <arglist>(UnitVec normal, PointData ps0, PointData ps1) noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>GetPointCount</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldManifold.html</anchorfile>
      <anchor>ae1cb8e651628460be908ba768c7d3883</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetNormal</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldManifold.html</anchorfile>
      <anchor>a2ce12d689aa54e581abdc238fe95d2cc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetPoint</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldManifold.html</anchorfile>
      <anchor>a4872f3b8f5ec291a4e2d8324829f82b6</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetSeparation</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldManifold.html</anchorfile>
      <anchor>a0e20bfa57459aa27c74c57043b822bd0</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>Momentum2</type>
      <name>GetImpulses</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldManifold.html</anchorfile>
      <anchor>a82d672d8bf598bf27a746423392b72b3</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>UnitVec</type>
      <name>m_normal</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldManifold.html</anchorfile>
      <anchor>aef9a76e9be45d6b033d1d21714b48097</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Length2</type>
      <name>m_points</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldManifold.html</anchorfile>
      <anchor>a76b278ec7820d93ebb99cc87d2c746f8</anchor>
      <arglist>[MaxManifoldPoints]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Momentum2</type>
      <name>m_impulses</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldManifold.html</anchorfile>
      <anchor>ad650da52805bb00d2b3735373b226b29</anchor>
      <arglist>[MaxManifoldPoints]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Length</type>
      <name>m_separations</name>
      <anchorfile>classplayrho_1_1d2_1_1WorldManifold.html</anchorfile>
      <anchor>a50630f4a76cc1611f14356f83d195526</anchor>
      <arglist>[MaxManifoldPoints]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>playrho::WrongState</name>
    <filename>classplayrho_1_1WrongState.html</filename>
  </compound>
  <compound kind="namespace">
    <name>playrho</name>
    <filename>namespaceplayrho.html</filename>
    <namespace>playrho::d2</namespace>
    <namespace>playrho::detail</namespace>
    <class kind="class">playrho::AllocatedArray</class>
    <class kind="class">playrho::ArrayAllocator</class>
    <class kind="class">playrho::ArrayList</class>
    <class kind="class">playrho::BlockAllocator</class>
    <class kind="struct">playrho::BlockDeallocator</class>
    <class kind="class">playrho::CheckedValue</class>
    <class kind="struct">playrho::ConstraintSolverConf</class>
    <class kind="struct">playrho::ContactFeature</class>
    <class kind="class">playrho::ContactKey</class>
    <class kind="struct">playrho::Filter</class>
    <class kind="struct">playrho::FiniteChecker</class>
    <class kind="class">playrho::Fixed</class>
    <class kind="class">playrho::FlagGuard</class>
    <class kind="class">playrho::GrowableStack</class>
    <class kind="struct">playrho::HasFunctor</class>
    <class kind="struct">playrho::HasFunctor&lt; Type, Return(Args...)&gt;</class>
    <class kind="struct">playrho::HasType</class>
    <class kind="struct">playrho::HasType&lt; T, std::tuple&lt; T, Ts... &gt; &gt;</class>
    <class kind="struct">playrho::HasType&lt; T, std::tuple&lt; U, Ts... &gt; &gt;</class>
    <class kind="struct">playrho::HasType&lt; T, std::tuple&lt;&gt; &gt;</class>
    <class kind="class">playrho::Interval</class>
    <class kind="class">playrho::InvalidArgument</class>
    <class kind="struct">playrho::IsAddable</class>
    <class kind="struct">playrho::IsAddable&lt; T1, T2, std::void_t&lt; decltype(T1{}+T2{})&gt; &gt;</class>
    <class kind="struct">playrho::IsArithmetic</class>
    <class kind="struct">playrho::IsArithmetic&lt; T, std::void_t&lt; decltype(T{}+T{}), decltype(T{} - T{}), decltype(T{} *T{}), decltype(T{}/T{})&gt; &gt;</class>
    <class kind="struct">playrho::IsDivisable</class>
    <class kind="struct">playrho::IsDivisable&lt; T1, T2, std::void_t&lt; decltype(T1{}/T2{})&gt; &gt;</class>
    <class kind="struct">playrho::IsEqualityComparable</class>
    <class kind="struct">playrho::IsEqualityComparable&lt; T1, T2, std::void_t&lt; decltype(T1{}==T2{})&gt; &gt;</class>
    <class kind="struct">playrho::IsInequalityComparable</class>
    <class kind="struct">playrho::IsInequalityComparable&lt; T1, T2, std::void_t&lt; decltype(T1{} !=T2{})&gt; &gt;</class>
    <class kind="struct">playrho::IslandStats</class>
    <class kind="struct">playrho::IsMatrix</class>
    <class kind="struct">playrho::IsMatrix&lt; Vector&lt; Vector&lt; T, N &gt;, M &gt; &gt;</class>
    <class kind="struct">playrho::IsMultipliable</class>
    <class kind="struct">playrho::IsMultipliable&lt; T1, T2, std::void_t&lt; decltype(T1{} *T2{})&gt; &gt;</class>
    <class kind="struct">playrho::IsSquareMatrix</class>
    <class kind="struct">playrho::IsSquareMatrix&lt; Vector&lt; Vector&lt; T, M &gt;, M &gt; &gt;</class>
    <class kind="struct">playrho::IsVector</class>
    <class kind="struct">playrho::IsVector&lt; Vector&lt; T, N &gt; &gt;</class>
    <class kind="class">playrho::LengthError</class>
    <class kind="struct">playrho::LengthIndexPair</class>
    <class kind="struct">playrho::LexicographicalGreater</class>
    <class kind="struct">playrho::LexicographicalGreaterEqual</class>
    <class kind="struct">playrho::LexicographicalLess</class>
    <class kind="struct">playrho::LexicographicalLessEqual</class>
    <class kind="struct">playrho::MovementConf</class>
    <class kind="struct">playrho::NegativeChecker</class>
    <class kind="struct">playrho::NonNegativeChecker</class>
    <class kind="struct">playrho::NonPositiveChecker</class>
    <class kind="struct">playrho::NonZeroChecker</class>
    <class kind="struct">playrho::NoOpChecker</class>
    <class kind="struct">playrho::PointStates</class>
    <class kind="struct">playrho::PositiveChecker</class>
    <class kind="struct">playrho::PreStepStats</class>
    <class kind="class">playrho::propagate_const</class>
    <class kind="class">playrho::Range</class>
    <class kind="struct">playrho::RegStepStats</class>
    <class kind="class">playrho::SizedRange</class>
    <class kind="class">playrho::Span</class>
    <class kind="class">playrho::StackAllocator</class>
    <class kind="struct">playrho::StepConf</class>
    <class kind="struct">playrho::StepStats</class>
    <class kind="struct">playrho::ToiConf</class>
    <class kind="struct">playrho::TOIOutput</class>
    <class kind="struct">playrho::ToiStepStats</class>
    <class kind="struct">playrho::TypeInfo</class>
    <class kind="struct">playrho::TypeInfo&lt; d2::DistanceJointConf &gt;</class>
    <class kind="struct">playrho::TypeInfo&lt; d2::FrictionJointConf &gt;</class>
    <class kind="struct">playrho::TypeInfo&lt; d2::GearJointConf &gt;</class>
    <class kind="struct">playrho::TypeInfo&lt; d2::MotorJointConf &gt;</class>
    <class kind="struct">playrho::TypeInfo&lt; d2::PrismaticJointConf &gt;</class>
    <class kind="struct">playrho::TypeInfo&lt; d2::PulleyJointConf &gt;</class>
    <class kind="struct">playrho::TypeInfo&lt; d2::RevoluteJointConf &gt;</class>
    <class kind="struct">playrho::TypeInfo&lt; d2::RopeJointConf &gt;</class>
    <class kind="struct">playrho::TypeInfo&lt; d2::TargetJointConf &gt;</class>
    <class kind="struct">playrho::TypeInfo&lt; d2::WeldJointConf &gt;</class>
    <class kind="struct">playrho::TypeInfo&lt; d2::WheelJointConf &gt;</class>
    <class kind="struct">playrho::TypeInfo&lt; double &gt;</class>
    <class kind="struct">playrho::TypeInfo&lt; Fixed32 &gt;</class>
    <class kind="struct">playrho::TypeInfo&lt; float &gt;</class>
    <class kind="struct">playrho::TypeInfo&lt; long double &gt;</class>
    <class kind="struct">playrho::underlying_type</class>
    <class kind="struct">playrho::underlying_type&lt; detail::IndexingNamedType&lt; T, Tag &gt; &gt;</class>
    <class kind="struct">playrho::underlying_type&lt; T, std::enable_if_t&lt; std::is_enum_v&lt; T &gt; &gt; &gt;</class>
    <class kind="struct">playrho::UnitIntervalChecker</class>
    <class kind="struct">playrho::Vector</class>
    <class kind="struct">playrho::Version</class>
    <class kind="struct">playrho::Wider</class>
    <class kind="struct">playrho::Wider&lt; double &gt;</class>
    <class kind="struct">playrho::Wider&lt; float &gt;</class>
    <class kind="struct">playrho::Wider&lt; std::int16_t &gt;</class>
    <class kind="struct">playrho::Wider&lt; std::int32_t &gt;</class>
    <class kind="struct">playrho::Wider&lt; std::int8_t &gt;</class>
    <class kind="struct">playrho::Wider&lt; std::uint16_t &gt;</class>
    <class kind="struct">playrho::Wider&lt; std::uint32_t &gt;</class>
    <class kind="struct">playrho::Wider&lt; std::uint8_t &gt;</class>
    <class kind="class">playrho::WrongState</class>
    <member kind="typedef">
      <type>std::pair&lt; Length2, Length2 &gt;</type>
      <name>PairLength2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ae444a62491fcb2b10f0f06a41b1ac406</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; VertexCounter, VertexCounter &gt;</type>
      <name>IndexPair</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a7d449e0a1528c10ae0f241713fb69b40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::array&lt; IndexPair, MaxSimplexEdges &gt;</type>
      <name>IndexPair3</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a704da3b24d9b1f9135e140dcd5420518</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::array&lt; VertexCounter, N &gt;</type>
      <name>VertexCounterArray</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a0a8c8047429035c030e233c9503cbec9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VertexCounterArray&lt; 2 &gt;</type>
      <name>VertexCounter2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ae2ea03f9c65d074dfd1aa21b6352f293</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CheckedValue&lt; T &gt;</type>
      <name>DefaultCheckedValue</name>
      <anchorfile>group__CheckedValues.html</anchorfile>
      <anchor>gae37a2881e65f48db22b37ebdf8a2075e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CheckedValue&lt; T, FiniteChecker&lt; T &gt; &gt;</type>
      <name>Finite</name>
      <anchorfile>group__CheckedValues.html</anchorfile>
      <anchor>ga46783d843137ba60b696139078119dec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Fixed&lt; std::int32_t, 9 &gt;</type>
      <name>Fixed32</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a51e61fee8a0be399ed24773ebc3135f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename underlying_type&lt; T &gt;::type</type>
      <name>underlying_type_t</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a79f10d34cd7e0d7f7cbbafb638373818</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; Vector&lt; T, N &gt;, M &gt;</type>
      <name>Matrix</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>acbf97bd8e3f0f2ce4588735388f4089a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; T, 2, 2 &gt;</type>
      <name>Matrix22</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a26aabbb6723402cb9e12cf32e17beebc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; T, 3, 3 &gt;</type>
      <name>Matrix33</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a92e228aada1d7ca23d9f6c2c9ce3b415</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix22&lt; Real &gt;</type>
      <name>Mat22</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a02c09bb6556e3168c0085871358d2f71</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix22&lt; Mass &gt;</type>
      <name>Mass22</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a358c8036b278316ab41b3f35b56342a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix22&lt; InvMass &gt;</type>
      <name>InvMass22</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a507cf0b47bd41371f90aa8f78f1d7c8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix33&lt; Real &gt;</type>
      <name>Mat33</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aabd44d74c5bc530c9b6676c6a61e6b31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CheckedValue&lt; T, NegativeChecker&lt; T &gt; &gt;</type>
      <name>Negative</name>
      <anchorfile>group__CheckedValues.html</anchorfile>
      <anchor>gab69142355b498ed0ff7ec9ee8aec5d7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CheckedValue&lt; T, NonNegativeChecker&lt; T &gt; &gt;</type>
      <name>NonNegative</name>
      <anchorfile>group__CheckedValues.html</anchorfile>
      <anchor>gac74ec9c65c8f22cefed941aa486af9e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CheckedValue&lt; T, NonPositiveChecker&lt; T &gt; &gt;</type>
      <name>NonPositive</name>
      <anchorfile>group__CheckedValues.html</anchorfile>
      <anchor>gae7595073697fcf149a7828d5ea96c23d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::enable_if_t&lt;!std::is_pointer&lt; T &gt;::value, CheckedValue&lt; T, NonZeroChecker&lt; T &gt; &gt;&gt;</type>
      <name>NonZero</name>
      <anchorfile>group__CheckedValues.html</anchorfile>
      <anchor>ga78bf6648df130b547bb5e79e3dcb9a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::enable_if_t&lt; std::is_pointer&lt; T &gt;::value, CheckedValue&lt; T, NonZeroChecker&lt; T &gt; &gt;&gt;</type>
      <name>NonNull</name>
      <anchorfile>group__CheckedValues.html</anchorfile>
      <anchor>ga6765653a298365f410348651dff5b088</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CheckedValue&lt; T, PositiveChecker&lt; T &gt; &gt;</type>
      <name>Positive</name>
      <anchorfile>group__CheckedValues.html</anchorfile>
      <anchor>ga68f6ae626f30553fcc05b6d944bae742</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>float</type>
      <name>Real</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a1fc125070a08100d083a1360f7167f87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(MaxChildCount)&gt;::type</type>
      <name>ChildCounter</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aed352724e203ca09595faf0dc6a76e5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::uint8_t</type>
      <name>TimestepIters</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a3898807006fd29cd5c4fc2e1a9cf5536</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(MaxShapeVertices)&gt;::type</type>
      <name>VertexCounter</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a16da705f1b3c51c7fd1b9b1162c258b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(MaxFixtures)&gt;::type</type>
      <name>FixtureCounter</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a15fb4e1b050424d59666b3b2b7b6c935</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(MaxBodies)&gt;::type</type>
      <name>BodyCounter</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4106d8a0e998a2485196534514527a5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Wider&lt; BodyCounter &gt;::type</type>
      <name>ContactCounter</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2bf0674233f83e8b83b30db98332e129</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; decltype(MaxJoints)&gt;::type</type>
      <name>JointCounter</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aeb8ea60dc388d1e92e2e6fa277a32495</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename detail::IsIterableImpl&lt; T &gt;</type>
      <name>IsIterable</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4708d38a866c6ebc70da3939d5edc8dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename HasType&lt; T, Tuple &gt;::type</type>
      <name>TupleContainsType</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a592a9fb888eae63605b73b61c61ccd17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HasFunctor&lt; Type, Return()&gt;</type>
      <name>HasNullaryFunctor</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad9c300db3a063bd5b4c1d947cc302577</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HasFunctor&lt; Type, Return(Arg)&gt;</type>
      <name>HasUnaryFunctor</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>acbd75892346a971d244693bb9d97a33e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::IndexingNamedType&lt; const char *const *, struct TypeIdentifier &gt;</type>
      <name>TypeID</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a922c3472852863ed46d7551b1dd8ba9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CheckedValue&lt; T, UnitIntervalChecker&lt; T &gt; &gt;</type>
      <name>UnitInterval</name>
      <anchorfile>group__CheckedValues.html</anchorfile>
      <anchor>gabdc100fb69df2f2d3726be076c6b9501</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::time)</type>
      <name>Time</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga250898c9929b0e6eaf56a1967c568888</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::frequency)</type>
      <name>Frequency</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gad39135cf298be76964c70829ec84a51e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::length)</type>
      <name>Length</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga7361ef2e10e7853a05b64aa433651014</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::velocity)</type>
      <name>LinearVelocity</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga6e944c18ed210626b5829b8ad2813fde</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::acceleration)</type>
      <name>LinearAcceleration</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gadf7de472e7f4a6fa26bff6a655f100e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::mass)</type>
      <name>Mass</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga5edfc295416b7690b4f949223b551bc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(playrho::units::si::inverse_mass)</type>
      <name>InvMass</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga9b387148008099ec9d37dbcf1f1a1571</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::area)</type>
      <name>Area</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga3ea2a7de91fdafccb2e49c3a84117ab5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::surface_density)</type>
      <name>AreaDensity</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga534c92a63631b49d1e80119a68af8a4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::plane_angle)</type>
      <name>Angle</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gab999341c050df340ff56a65816a63da9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::angular_velocity)</type>
      <name>AngularVelocity</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gac33f92018f7e8821550296aece465028</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::angular_acceleration)</type>
      <name>AngularAcceleration</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gafcce543a0d59f313adb801e2e18ede86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::force)</type>
      <name>Force</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gabdbf955ed1cafec5062f074511ee4829</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::torque)</type>
      <name>Torque</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gaa13e620479b6e4a34fae5a90bcaf9355</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(playrho::units::si::second_moment_of_area)</type>
      <name>SecondMomentOfArea</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga9ded7e1044d55beb1ca2957d671ece44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::moment_of_inertia)</type>
      <name>RotInertia</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga67bbb3e4938321efec8d939636bf988e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(playrho::units::si::inverse_moment_of_inertia)</type>
      <name>InvRotInertia</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gad5941a3d5c4b22ba991887772a3744de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::momentum)</type>
      <name>Momentum</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga1d281ffd7cf8e2c8897d03a1cae9f1f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::angular_momentum)</type>
      <name>AngularMomentum</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga3537d441743bb2f96c612296424f1e43</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; T, 2 &gt;</type>
      <name>Vector2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a97243f194a9406d0fdcf5f6f833851ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector2&lt; Real &gt;</type>
      <name>Vec2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad93c0cd83df090aba6593ffac4b628ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector2&lt; Length &gt;</type>
      <name>Length2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a7dc68cd0ce177e175ae0bb6c39db158d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector2&lt; LinearVelocity &gt;</type>
      <name>LinearVelocity2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2faa31bff8794a0c4191d8b042f7deeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector2&lt; LinearAcceleration &gt;</type>
      <name>LinearAcceleration2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a5822921028100052d4c6dfb43c7f6c4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector2&lt; Force &gt;</type>
      <name>Force2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2d09dc7b51321c052b071485357ca1f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector2&lt; Mass &gt;</type>
      <name>Mass2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>acfba2b26f22dcc026361ed5a0ccf3966</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector2&lt; InvMass &gt;</type>
      <name>InvMass2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab4f2424eab18780894e83bbc4127fe67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector2&lt; Momentum &gt;</type>
      <name>Momentum2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a1fa6ffb2e67c2e2f620eed088412b146</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; T, 3 &gt;</type>
      <name>Vector3</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad07b44f811ac4c7551067fb1d3554ec5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector3&lt; Real &gt;</type>
      <name>Vec3</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a63f6dcdf3763052ea25099973c7c00ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector3&lt; Mass &gt;</type>
      <name>Mass3</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a996c0271f83c70e94b485ff59bb468a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector3&lt; InvMass &gt;</type>
      <name>InvMass3</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9d3b57b56d804cd09ae743e670e866d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::IndexingNamedType&lt; BodyCounter, struct BodyIdentifier &gt;</type>
      <name>BodyID</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9d094e8b19ea714a079a48c336abad92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::IndexingNamedType&lt; ContactCounter, struct ContactIdentifier &gt;</type>
      <name>ContactID</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>abe7a48a3a0e57fa1a9dd9e396b6b24f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::IndexingNamedType&lt; FixtureCounter, struct FixtureIdentifier &gt;</type>
      <name>FixtureID</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aeb0ae1f76104ef8214134a5be96027f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::IndexingNamedType&lt; JointCounter, struct JointIdentifier &gt;</type>
      <name>JointID</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a8e3114be8fb50493389d7991db4f2b3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>PointState</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a06f67e158a928ef59e4263facac8fb0b</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceplayrho.html" anchor="a06f67e158a928ef59e4263facac8fb0ba5ac8cf2fb7a90ff2d0829f5fca4db5b8">NullState</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a06f67e158a928ef59e4263facac8fb0ba494a3e62657370358107e2edf3fca5a0">AddState</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a06f67e158a928ef59e4263facac8fb0ba60a7f32dd91e5f33a4ca2bc7b7255343">PersistState</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a06f67e158a928ef59e4263facac8fb0ba3500ff358c0521359118fe519bd8f605">RemoveState</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>RayCastOpcode</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a66189f1fe36ac717e284ab1099171106</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceplayrho.html" anchor="a66189f1fe36ac717e284ab1099171106a056fa3d840f48b7bfbbd68c19a4797b3">Terminate</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a66189f1fe36ac717e284ab1099171106aaf8767ee039cdc51717435bb815da593">IgnoreFixture</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a66189f1fe36ac717e284ab1099171106a8dcfe18b6245b17c9cd69d5af7ef1847">ClipRay</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a66189f1fe36ac717e284ab1099171106a4592f28dc9d11de3ce507bebafd9de16">ResetRay</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BodyType</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a098b0ef528e3b728af8e3e17873963f7</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceplayrho.html" anchor="a098b0ef528e3b728af8e3e17873963f7a84a8921b25f505d0d2077aeb5db4bc16">Static</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a098b0ef528e3b728af8e3e17873963f7a40c78b58b86002ee38fad2d3c9dd787e">Kinematic</enumvalue>
      <enumvalue file="namespaceplayrho.html" anchor="a098b0ef528e3b728af8e3e17873963f7a971fd8cc345d8bd9f92e9f7d88fdf20c">Dynamic</enumvalue>
    </member>
    <member kind="function">
      <type>constexpr d2::AABB</type>
      <name>GetInvalid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aa4c22718accfc68e3baba71b3747a4ba</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ContactFeature</type>
      <name>GetVertexVertexContactFeature</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad0c8c86c92d71e89dd707af00b1de6a8</anchor>
      <arglist>(ContactFeature::Index a, ContactFeature::Index b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ContactFeature</type>
      <name>GetVertexFaceContactFeature</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a525adfccea1a81ce8311751fc90d0614</anchor>
      <arglist>(ContactFeature::Index a, ContactFeature::Index b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ContactFeature</type>
      <name>GetFaceVertexContactFeature</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a874b42008ce4794858edc982ba13534a</anchor>
      <arglist>(ContactFeature::Index a, ContactFeature::Index b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ContactFeature</type>
      <name>GetFaceFaceContactFeature</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aa64fefdeb5b40b3ee00c30dc263397b9</anchor>
      <arglist>(ContactFeature::Index a, ContactFeature::Index b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ContactFeature</type>
      <name>Flip</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a43951f69f7ead57450bac66cbb76b0e1</anchor>
      <arglist>(ContactFeature val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac19a825ed22691eab1981a616b6bf539</anchor>
      <arglist>(ContactFeature lhs, ContactFeature rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9bcf95269c48c96b8af0854d24894e3d</anchor>
      <arglist>(ContactFeature lhs, ContactFeature rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetName</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a6cc5c3f8bdf0fe8001ba1d2e3f7b2eea</anchor>
      <arglist>(ContactFeature::Type type) noexcept</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad3ec58bed15fb00ea00af6a52e5a7e3e</anchor>
      <arglist>(::std::ostream &amp;os, const ContactFeature &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::size_t</type>
      <name>GetNumValidIndices</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad136f8db9fd6c0c583c1890b8a3cc504</anchor>
      <arglist>(IndexPair3 pairs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a98ab78cb47da6f6d872d617cc66040a6</anchor>
      <arglist>(IndexPair3 pairs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>size</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>af33cf35b33c93168aedcbf5a986a3472</anchor>
      <arglist>(IndexPair3 pairs) -&gt; decltype(GetNumValidIndices(pairs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>max_size</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac32367e964a575ebee3ed45c8ddb0afe</anchor>
      <arglist>(IndexPair3 pairs) -&gt; decltype(pairs.max_size())</arglist>
    </member>
    <member kind="function">
      <type>VertexCounter</type>
      <name>GetFirstShapeVertexIdx</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a24de24fa4d8c10dea7826ce11c81ff36</anchor>
      <arglist>(const detail::SeparationInfo&lt; N &gt; &amp;info) noexcept</arglist>
    </member>
    <member kind="function">
      <type>VertexCounter</type>
      <name>GetSecondShapeVertexIdx</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a435b2e5c84e285bf7f0ac9486c2512d3</anchor>
      <arglist>(const detail::SeparationInfo&lt; N &gt; &amp;info) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab903c93dd80fcff6148a66dbc7c89687</anchor>
      <arglist>(const d2::Manifold &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetName</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>acb29c9575dd4eeac1ff13136d9a56494</anchor>
      <arglist>(TOIOutput::State state) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ToiConf</type>
      <name>GetToiConf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9864179cb9a35cb6665d429656ad0e9b</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetDefaultToiConf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4dd2e3047d7ac0836f8921a496e8d432</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a299c547b3a13504426688a0c968e2891</anchor>
      <arglist>(const d2::Acceleration &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ArrayAllocator&lt; T &gt;::size_type</type>
      <name>used</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a8d1619f9e02f66414371891d25a1275f</anchor>
      <arglist>(const ArrayAllocator&lt; T &gt; &amp;array) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ArrayList&lt; T, S &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>afe9da6ff11f4a2c1b7d0df8f513bc217</anchor>
      <arglist>(ArrayList&lt; T, S &gt; &amp;lhs, const typename ArrayList&lt; T, S &gt;::data_type &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ArrayList&lt; T, S &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2410eb16decdbb7ed8ce34c06327161b</anchor>
      <arglist>(ArrayList&lt; T, S &gt; lhs, const typename ArrayList&lt; T, S &gt;::data_type &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Delete</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a02f6b57cf0f7bc53f9339381007d9b84</anchor>
      <arglist>(const T *p, BlockAllocator &amp;allocator)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab5692e54289c87c156bd7455763082a9</anchor>
      <arglist>(const BlockAllocator &amp;a, const BlockAllocator &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a425d26025dffe3901caa095b9fa19682</anchor>
      <arglist>(const BlockAllocator &amp;a, const BlockAllocator &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>acc045bd4bbb560077978ce21cd20c49f</anchor>
      <arglist>(::std::ostream &amp;os, const CheckedValue&lt; ValueType, CheckerType &gt; &amp;value) -&gt; decltype(os&lt;&lt; ValueType(value))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab21e9430d6c13f5645a8a5af6a64a23a</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;()==std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs)==RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a0878dcd8f25150f77ebea43e908e3023</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) noexcept(noexcept(std::declval&lt; LhsValueType &gt;() !=std::declval&lt; RhsValueType &gt;())) -&gt; decltype(LhsValueType(lhs) !=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a17f5c3cf62f38463edf89ddc5bf05b80</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a5c18729fd53f4bb5275874c8cd1eb644</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt;=RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4e50b7f361b27adaf57e0b275b849cb2</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)&lt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aab6a70eaafe3d414d9ebb561150a5ae0</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) &gt; RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab695c5da4298cd1267ccb84710dc5dc4</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) *RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a5a5b28003deb87e06a3c9e51f44fb096</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)/RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ace19087d3c9f0e9cf7b83eb131626bee</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs)+RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aa918349e3179ab2f97d04b41085d0a48</anchor>
      <arglist>(const CheckedValue&lt; LhsValueType, LhsCheckerType &gt; &amp;lhs, const CheckedValue&lt; RhsValueType, RhsCheckerType &gt; &amp;rhs) -&gt; decltype(LhsValueType(lhs) - RhsValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>adafba64613de79315803f30e1c800aad</anchor>
      <arglist>(const CheckedValue&lt; ValueType, CheckerType &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(ValueType(lhs)==rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aa8fc70d9f3c91ab4c9afb7730f920243</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; ValueType, CheckerType &gt; &amp;rhs) -&gt; decltype(lhs==ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>af25888243d04857183fbff9a515bcbfd</anchor>
      <arglist>(const CheckedValue&lt; ValueType, CheckerType &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(ValueType(lhs) !=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2a6bef32507b31e3d1ae0935a6719e71</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; ValueType, CheckerType &gt; &amp;rhs) -&gt; decltype(lhs !=ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a3e696d4bb8a0294762be3428301ebbec</anchor>
      <arglist>(const CheckedValue&lt; ValueType, CheckerType &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(ValueType(lhs)&lt;=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a55fa5e47ada221e269711dbbf90eedd7</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; ValueType, CheckerType &gt; &amp;rhs) -&gt; decltype(lhs&lt;=ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>abcb14439b5fd9f3daf2b518c786865b7</anchor>
      <arglist>(const CheckedValue&lt; ValueType, CheckerType &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(ValueType(lhs) &gt;=rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a092ab700ddc3c1dba9a60a49ce75cf6e</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; ValueType, CheckerType &gt; &amp;rhs) -&gt; decltype(lhs &gt;=ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab9f2a8be4da1677e412b8eabc2146873</anchor>
      <arglist>(const CheckedValue&lt; ValueType, CheckerType &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(ValueType(lhs)&lt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a6f64d5e0d888eb6813af5fa103a16b16</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; ValueType, CheckerType &gt; &amp;rhs) -&gt; decltype(lhs&lt; ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a3b2ff344394e8157985fe636a85f18d9</anchor>
      <arglist>(const CheckedValue&lt; ValueType, CheckerType &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(ValueType(lhs) &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a6ea68ce25d18cda2a9a333fa224f0558</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; ValueType, CheckerType &gt; &amp;rhs) -&gt; decltype(lhs &gt; ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a344c62fec7ff32c28d2a98fb3eff0cee</anchor>
      <arglist>(const CheckedValue&lt; ValueType, CheckerType &gt; &amp;lhs, const Other &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliable&lt; CheckedValue&lt; ValueType, CheckerType &gt;, Other &gt;::value, decltype(ValueType() *Other())&gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a14860a28f9b31d3c16987c19762c227a</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; ValueType, CheckerType &gt; &amp;rhs) -&gt; std::enable_if_t&lt;!IsMultipliable&lt; Other, CheckedValue&lt; ValueType, CheckerType &gt;&gt;::value, decltype(Other() *ValueType())&gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a21a68e7bc007582c16847ed8615d8c26</anchor>
      <arglist>(const CheckedValue&lt; ValueType, CheckerType &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(ValueType(lhs)/rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator/</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a740ddde1b6038fc20e0e763e0eabac6a</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; ValueType, CheckerType &gt; &amp;rhs) -&gt; decltype(lhs/ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a687d59516f156855de42eea778eccc49</anchor>
      <arglist>(const CheckedValue&lt; ValueType, CheckerType &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(ValueType(lhs)+rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a75202d7d29b1ce5418c1ae4e32c95a08</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; ValueType, CheckerType &gt; &amp;rhs) -&gt; decltype(lhs+ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>acf1adc96b8c69fa7bb0ce08582f93de7</anchor>
      <arglist>(const CheckedValue&lt; ValueType, CheckerType &gt; &amp;lhs, const Other &amp;rhs) -&gt; decltype(ValueType(lhs) - rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a5783466a0028f61a1e70076f410ac4ee</anchor>
      <arglist>(const Other &amp;lhs, const CheckedValue&lt; ValueType, CheckerType &gt; &amp;rhs) -&gt; decltype(lhs - ValueType(rhs))</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>Alloc</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a516a3bbb73371cdc53f348b67f43bb1f</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>Realloc</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>adb651f620aefb4ee65ec0cc8c10b27b0</anchor>
      <arglist>(void *ptr, std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Free</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a62c138018c11ab3c255b410f2dedd7d2</anchor>
      <arglist>(void *mem)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>AllocArray</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2943dd9a79b7fc1fa196af1208b00388</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>ReallocArray</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a197482cbffdd702c8926a00f42a76e62</anchor>
      <arglist>(T *ptr, std::size_t count)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aaf5fcbbad444f151c1665cecb75f381f</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; lhs, Fixed&lt; BT, FB &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9a1feb96b1bc5f0678758df12f93fe3b</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; lhs, Fixed&lt; BT, FB &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a310dd6a59f071ee86430f5162368f61c</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; lhs, Fixed&lt; BT, FB &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab7f2c871930a05238a02a3581b2dbcc9</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; lhs, Fixed&lt; BT, FB &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a70f7c32a47415d5005673852344009eb</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; lhs, Fixed&lt; BT, FB &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac52ee51315f92b6463bab76317603a8d</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; lhs, Fixed&lt; BT, FB &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Fixed&lt; BT, FB &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>adf379d2d8f3a5aacdaf5fb871c935237</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; lhs, Fixed&lt; BT, FB &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Fixed&lt; BT, FB &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9468719501f7a5cf7747569ef71acc33</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; lhs, Fixed&lt; BT, FB &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Fixed&lt; BT, FB &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2eb53a11e4a467306c79d44056b59bc3</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; lhs, Fixed&lt; BT, FB &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Fixed&lt; BT, FB &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>adce07a22f20a1fe265a0ca72a3a0a3cd</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; lhs, Fixed&lt; BT, FB &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Fixed&lt; BT, FB &gt;</type>
      <name>operator%</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac69f9fcc19f63ecf57e549bedb3792e4</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; lhs, Fixed&lt; BT, FB &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>AlmostZero</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a87b5e301c1a03179e49ed7ee3a9408d9</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>AlmostEqual</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a6aaf4879371df30246226867c121a9ad</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; x, Fixed&lt; BT, FB &gt; y, int ulp=2)</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a598d4f1182411b5db1d2c445b16fc5fd</anchor>
      <arglist>(::std::ostream &amp;os, const Fixed&lt; BT, FB &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Fixed32</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad4dbd342566c29d766d910388cfac25e</anchor>
      <arglist>(Fixed32 lhs, Fixed32 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Fixed32</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a95c382ba441e52b8730b18d38dfd5771</anchor>
      <arglist>(Fixed32 lhs, Fixed32 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Fixed32</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2bbd048b74cca661af851475f3a32f03</anchor>
      <arglist>(Fixed32 lhs, Fixed32 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Fixed32</type>
      <name>operator/</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>acb66724eaf58f719874fe12e5fa78eae</anchor>
      <arglist>(Fixed32 lhs, Fixed32 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Fixed32</type>
      <name>operator%</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a34f36791292a3de7d109592d5271e025</anchor>
      <arglist>(Fixed32 lhs, Fixed32 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a436c8f6a752a984295b46dc3c24256a1</anchor>
      <arglist>(Fixed32 lhs, Fixed32 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a468fcfdd8d9f35d55aff3d2b2d05cd69</anchor>
      <arglist>(Fixed32 lhs, Fixed32 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aff78b36b8b4533aeb308283f8557c657</anchor>
      <arglist>(Fixed32 lhs, Fixed32 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a2b5c7c5e333c08e00e17f1809c4b5eb6</anchor>
      <arglist>(Fixed32 lhs, Fixed32 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aeef6e842dc811739f58a6e2b4b1d95ae</anchor>
      <arglist>(Fixed32 lhs, Fixed32 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a041ad90997561d20e0c3b4265c4f2f90</anchor>
      <arglist>(Fixed32 lhs, Fixed32 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Fixed&lt; BT, FB &gt;</type>
      <name>abs</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>gad5766364e4f6e29b62f20216a25a678f</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Fixed&lt; BT, FB &gt;</type>
      <name>pow</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>gae62c436656c3c2a2e0d46d83fe1ea3ae</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; value, int n)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Fixed&lt; BT, FB &gt;</type>
      <name>trunc</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga55adeaba7e08eb415e6437f709b62c0f</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>nextafter</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga935fa93a69f58baf20b00e14461d51e7</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; from, Fixed&lt; BT, FB &gt; to) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>fmod</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>gaae59d507ab3b0f722d4d22b3e4969f4a</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; dividend, Fixed&lt; BT, FB &gt; divisor) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>sqrt</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga7a9d7e9855b45a3b4103632a47ccd6f4</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isnormal</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga4ab479ab854291e9d03a25cc0986deca</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>sin</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga0daabd6eacf8702561639d394e3efe6e</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>cos</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>gaf6191f040980675d9a5c71bd53c79060</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>atan</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>gaa5670d26d229424278268189beb541f5</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>atan2</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>gaad3e4450a30d08eceda4225bd26c312b</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; y, Fixed&lt; BT, FB &gt; x)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>log</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga661c3590b9b618ac14194bf25a70f1d6</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>exp</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga7ddb9c067c645bded41aafe75cfecd02</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>pow</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga85dfc7d7d071b22f80179a86e5544237</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; base, Fixed&lt; BT, FB &gt; exponent)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>hypot</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>gafff5f9018a9088992be3c922926aee56</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; x, Fixed&lt; BT, FB &gt; y)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>round</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga1e3ca7fb2626886c5920bbc5f570a525</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signbit</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga8445167791eb53f1e8eb0dbf318293a1</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>isnan</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>gab57c92b7d96634ba24fa1f6c25647799</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isfinite</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>gab8fa73692143466ca4d584aacf5749f1</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>to_underlying</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>abcf5bea73a392ad1b2be520e79fb9b4a</anchor>
      <arglist>(T value) noexcept -&gt; underlying_type_t&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>GetSize</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a0f5ae61330e0553509baa283129e8e53</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>GetCenter</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a6ddf94310b3145c842e6365e3ec69226</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsIntersecting</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a3eff0342e8a7b5e15dcf232d7f28f961</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;a, const Interval&lt; T &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Interval&lt; T &gt;</type>
      <name>GetIntersection</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4baf1dd76711ae5151d0ee07a8b345d0</anchor>
      <arglist>(Interval&lt; T &gt; a, const Interval&lt; T &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsEntirelyBefore</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a537b76dc4bd198e60d148282e032533c</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;a, const Interval&lt; T &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsEntirelyAfter</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>abc6f0d8de107567baafd2ff6770ded72</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;a, const Interval&lt; T &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsEntirelyEnclosing</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a32133337daeb0dd2b8b5a78f42a8a526</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;a, const Interval&lt; T &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac1b97d7e2f5894048236948061068fb5</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;a, const Interval&lt; T &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a861fb100d29d58d6f26f3767017886b3</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;a, const Interval&lt; T &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a815e65e38974a8bb60ef0a096bea0241</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;lhs, const Interval&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>adbf50e7e086182f69dc09e011aef6345</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;lhs, const Interval&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>acc58a55aab3f8bdd7ea411a6b2a4ddfb</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;lhs, const Interval&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>acca7f35c089808652f6c5d6c06a85ae7</anchor>
      <arglist>(const Interval&lt; T &gt; &amp;lhs, const Interval&lt; T &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>acd5053c1cb8807f6296852e4a8c657d2</anchor>
      <arglist>(::std::ostream &amp;os, const Interval&lt; T &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetDelta</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga8c036532db1260373b97c1d85360894c</anchor>
      <arglist>(Angle a1, Angle a2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>ComputeCentroid</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gae769785f0540a4b8960b282f6b105c14</anchor>
      <arglist>(const Span&lt; const Length2 &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Length2 &gt;</type>
      <name>GetCircleVertices</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga3b8e8abc999b0c63cf1921b0edcf0b36</anchor>
      <arglist>(Length radius, unsigned slices, Angle start=0_deg, Real turns=Real{1})</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Area &gt;</type>
      <name>GetAreaOfCircle</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga0eb57dabfe8d3db9e509a6b493173358</anchor>
      <arglist>(Length radius)</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Area &gt;</type>
      <name>GetAreaOfPolygon</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga118f8284073d2638e48ef8f13177e1d9</anchor>
      <arglist>(Span&lt; const Length2 &gt; vertices)</arglist>
    </member>
    <member kind="function">
      <type>SecondMomentOfArea</type>
      <name>GetPolarMoment</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga760adfdd1cb30bdae8cd37c1ae5da485</anchor>
      <arglist>(Span&lt; const Length2 &gt; vertices)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>GetX</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a8fd37c6d7e9a46ee2138492ccd17165e</anchor>
      <arglist>(T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>GetY</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>af29239cb64970d1f73cd92e104940e7e</anchor>
      <arglist>(T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>GetZ</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac5f3bfa45db75276f0b40ec3b44c9b6c</anchor>
      <arglist>(T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetX</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a25f3dd3774eb0c4f476a0a50aea52e4a</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetY</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a1b1883fdee56ab469902384a088a9f25</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetZ</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a8874a6f34a63c318d36f8e90e2280543</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_signed&lt; T &gt;::value, std::make_unsigned_t&lt; T &gt; &gt;</type>
      <name>MakeUnsigned</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a49e0e4246787f364251d07688fea46e5</anchor>
      <arglist>(const T &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>StripUnit</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a7aad07dca595ebb37551e793171c2cfa</anchor>
      <arglist>(const T &amp;v) -&gt; decltype(StripUnit(v.get()))</arglist>
    </member>
    <member kind="function">
      <type>constexpr U</type>
      <name>Secant</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga9cf6fb58c36515834217c6b150b43772</anchor>
      <arglist>(T target, U a1, T s1, U a2, T s2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>Bisect</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga8ccc71ac7ccd063fd81a31d78c3d2c90</anchor>
      <arglist>(T a1, T a2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsOdd</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga76721557b2b677d24efa2d0415954be5</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Square</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga948ebcbc9ef959d24546e6c8ff848fa6</anchor>
      <arglist>(TYPE t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>Atan2</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gab870a9188fcc77c905807fa718a8268d</anchor>
      <arglist>(T y, T x)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>Average</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga8b2133f1c2e5299035bb059d2d2706cd</anchor>
      <arglist>(const T &amp;span)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; IsArithmetic&lt; T &gt;::value, T &gt;</type>
      <name>RoundOff</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gab8f24574b8a0ca458ec2fe9d691364ff</anchor>
      <arglist>(T value, unsigned precision=100000)</arglist>
    </member>
    <member kind="function">
      <type>Vec2</type>
      <name>RoundOff</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga812ea5eaf66fb9d1bffa799886b2eee3</anchor>
      <arglist>(Vec2 value, std::uint32_t precision=100000)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; T, N &gt;</type>
      <name>abs</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga901850dd04519b8e6d642ab96a10d9ea</anchor>
      <arglist>(const Vector&lt; T, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>d2::UnitVec</type>
      <name>abs</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gac862a8609b82126d0683ecb38a498087</anchor>
      <arglist>(const d2::UnitVec &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_arithmetic&lt; T &gt;::value, bool &gt;</type>
      <name>AlmostZero</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gafd0270fbd098406a8cf4496d1de8a155</anchor>
      <arglist>(T value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_floating_point&lt; T &gt;::value, bool &gt;</type>
      <name>AlmostEqual</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga00c5f66dc1a40a727a7983aab1d92929</anchor>
      <arglist>(T x, T y, int ulp=2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>ModuloViaFmod</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga25b52facf9e28f05e5e41f4e7b7ff54e</anchor>
      <arglist>(T dividend, T divisor) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>ModuloViaTrunc</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga84e7cb2a415fcb956202c8d7e1b1d200</anchor>
      <arglist>(T dividend, T divisor) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetNormalized</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga156a2abff11f978a8df25efbf0c10147</anchor>
      <arglist>(Angle value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngle</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga56785e4c60180ef416fe29f68ccf525a</anchor>
      <arglist>(const Vector2&lt; T &gt; value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetMagnitudeSquared</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga1ac00e661c653f21ddbd0693bbb039ac</anchor>
      <arglist>(T value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetMagnitude</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga85c114f129eeee63e60ec7d4703bbd65</anchor>
      <arglist>(T value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Dot</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga451c8554a408d41df85a41650e0ada93</anchor>
      <arglist>(const T1 a, const T2 b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Cross</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga804d55e7545685ee9841c239bdac7c8f</anchor>
      <arglist>(T1 a, T2 b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Solve</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga3846333746b73978c91e250c6f239ce3</anchor>
      <arglist>(const Matrix22&lt; U &gt; mat, const Vector2&lt; T &gt; b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Invert</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga00cc9646bab6ce84d6b4704f8c1e0ade</anchor>
      <arglist>(const Matrix22&lt; IN_TYPE &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vec3</type>
      <name>Solve33</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gab4795a90a377c5335ce5b1900caf6d24</anchor>
      <arglist>(const Mat33 &amp;mat, const Vec3 b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>Solve22</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga0a0606abee6bd0cc122578a2a640f044</anchor>
      <arglist>(const Mat33 &amp;mat, const T b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mat33</type>
      <name>GetInverse22</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gaeaceaa1218e1f86e27e6678db247bc79</anchor>
      <arglist>(const Mat33 &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mat33</type>
      <name>GetSymInverse33</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gae7a513e105038f6425bfc83180a69cd3</anchor>
      <arglist>(const Mat33 &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetRevPerpendicular</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga6aa0aece94173885da01b5e3a6737af7</anchor>
      <arglist>(const T vector) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetFwdPerpendicular</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga87b57d633b625c58f9200a201e4664a7</anchor>
      <arglist>(const T vector) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Transform</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gac898f9ba1986f3886cb93c0668613c41</anchor>
      <arglist>(const Vector&lt; T1, M &gt; v, const Matrix&lt; T2, M, N &gt; &amp;m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vec2</type>
      <name>Transform</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga52a7716aaab729705e73d4d533e81672</anchor>
      <arglist>(const Vec2 v, const Mat33 &amp;A) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vec2</type>
      <name>InverseTransform</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga819a9ef6f9c3d492b5177ca25077618e</anchor>
      <arglist>(const Vec2 v, const Mat22 &amp;A) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mat22</type>
      <name>MulT</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gab471bae6413067374ab8d8262533e402</anchor>
      <arglist>(const Mat22 &amp;A, const Mat22 &amp;B) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Mat22</type>
      <name>abs</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga94fee43efb2fa412b816e9e0a7df87f8</anchor>
      <arglist>(const Mat22 &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>NextPowerOfTwo</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga2e157fe9f9288debcd4be111a2485991</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>Normalize</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga0c7d2525a406c1f83c0574e46a2cee32</anchor>
      <arglist>(Vec2 &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>GetModuloNext</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gaf9689e93a5538424dfb54bbbb78ad217</anchor>
      <arglist>(T value, T count) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>GetModuloPrev</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga37e627f196ec102af9dd855d05611a6e</anchor>
      <arglist>(T value, T count) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Angle</type>
      <name>GetRevRotationalAngle</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga07dcf271b85b501cd2d7188902066e55</anchor>
      <arglist>(Angle a1, Angle a2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt;!IsVector&lt; T &gt;::value, Matrix&lt; T, N, N &gt; &gt;</type>
      <name>GetIdentityMatrix</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9e64649a393ae84ea092662d18089732</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsSquareMatrix&lt; T &gt;::value, T &gt;</type>
      <name>GetIdentity</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a982dd137f465f53dd7c84e6d6286a3ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt;!IsVector&lt; T &gt;::value, Vector&lt; Vector&lt; T, N &gt;, 1 &gt; &gt;</type>
      <name>GetRowMatrix</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a02258b390c2e52afd55c14ae9fb21556</anchor>
      <arglist>(Vector&lt; T, N &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt;!IsVector&lt; T &gt;::value, Vector&lt; Vector&lt; T, 1 &gt;, N &gt; &gt;</type>
      <name>GetColumnMatrix</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a93a775c6e97cd4708fe5e9f58860a53d</anchor>
      <arglist>(Vector&lt; T, N &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a41f0c49a750ed51bb02cef10158e8d7f</anchor>
      <arglist>(const Matrix&lt; T, M, N &gt; &amp;lhs, const Matrix&lt; T, M, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a89118d71eeeffa541c76f6d566a8546d</anchor>
      <arglist>(const Matrix&lt; T, M, N &gt; &amp;lhs, const Matrix&lt; T, M, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a0fa02e6b0d55e9363ad4afb89a755fc1</anchor>
      <arglist>(const Mat22 &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aa4eafabdd97553a750feb39943d629da</anchor>
      <arglist>(const d2::Position &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PROPAGATE_CONST_CONSTEXPR void</type>
      <name>swap</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>abbaf30d44caa739e24d21d763b90030c</anchor>
      <arglist>(propagate_const&lt; T &gt; &amp;pt, propagate_const&lt; T &gt; &amp;pu) noexcept(noexcept(swap(std::declval&lt; T &amp; &gt;(), std::declval&lt; T &amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4eebf111910b8b036f4caca5e01fcab3</anchor>
      <arglist>(const d2::Sweep &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NOT_USED</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a465a2b892f4effbc98c1b2468d6eb56a</anchor>
      <arglist>(T &amp;&amp;...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a7dde95b5e9b50eb6552368d0c57cfc88</anchor>
      <arglist>(const T &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a048e0ad2c0fac1472430520c115466eb</anchor>
      <arglist>(const std::size_t &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>EraseFirst</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad559996a9d085eb07a18b5b88525761f</anchor>
      <arglist>(T &amp;container, const U &amp;value) -&gt; decltype(container.erase(find(begin(container), end(container), value)) !=end(container))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>EraseAll</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aa5b77298f0fc2a2ae88ececbc3fb23d1</anchor>
      <arglist>(T &amp;container, const U &amp;value) -&gt; decltype(distance(container.erase(remove(begin(container), end(container), value), end(container)), end(container)))</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>abdecea4e39775053f705ca921b5080fe</anchor>
      <arglist>(const d2::Transformation &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a31f58fd1d245f78d15f4415f5cef57c6</anchor>
      <arglist>(const TypeID &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr TypeID</type>
      <name>GetTypeID</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad45e948cf36b820a949cc0a915e12c6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr TypeID</type>
      <name>GetTypeID</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9958a9d60c4d64c45260d4b0971f314e</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const char *</type>
      <name>GetName</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a470dc644f20793cbc54ed79ad49fb491</anchor>
      <arglist>(TypeID id) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const char *</type>
      <name>GetTypeName</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a267edfe760bf1c787ca0487b93e0c719</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mass</type>
      <name>operator&quot;&quot;_g</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga6ce86132eda24d9d313987cba6a40c16</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mass</type>
      <name>operator&quot;&quot;_g</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gab99c0b153cdb012f8093f047b1e3b13a</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mass</type>
      <name>operator&quot;&quot;_kg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga4275b8597bcf1f8a32e4ac63d15e8c2e</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mass</type>
      <name>operator&quot;&quot;_kg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga0583d00d5cfbd6ebafb90513fb2e8716</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mass</type>
      <name>operator&quot;&quot;_Pg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gac5ea7c8025fab0245e701dd6b8d007e3</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mass</type>
      <name>operator&quot;&quot;_Pg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gaaac22c102dd87d993148b80a1eee53f5</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mass</type>
      <name>operator&quot;&quot;_Yg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga33cea28a3e64ca1c6d99f7f8faf94fce</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mass</type>
      <name>operator&quot;&quot;_Yg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gae72c48eb6e122d69ef30a66c46097e4d</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_m</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gac44de43c674315e6fbd85b6e5ddfdaf2</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_m</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga7d89f0cf5e3cfca6baca44e120dca07e</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_dm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gae82c9c088bc93622218a1badc9d03b5a</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_dm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga0d299ad14289355c2f342e05e73e1b20</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_cm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga04dc851fdae513e0f9b14f8a4b74c9a1</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_cm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gadbf7524233f643e271fc50aa6d2a4401</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_Gm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gaf479ecbf0200f8bd8e17e29f731a4382</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_Gm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gad6bac94ca61f289cd740eee1cc43457a</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_Mm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga96ba59041cd8bad1d0d9cfa25849e83c</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_Mm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga28f21b0a602e2254b1262f893afec589</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_km</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gaec4a5ced37bf0be5d99290b2d849ba7c</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_km</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gafb2666059c4896c7f4ee37638f200f92</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Time</type>
      <name>operator&quot;&quot;_s</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gad8e688fefbc6a775e54e3007452ffb31</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Time</type>
      <name>operator&quot;&quot;_s</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gad3c7c61bf90f4d1d293c0e21a6b91e6c</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Time</type>
      <name>operator&quot;&quot;_min</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gaf76dd9ba5e10ec5fff19e862c6eb6233</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Time</type>
      <name>operator&quot;&quot;_min</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga18e617896083abcb8613740cccb0256f</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Time</type>
      <name>operator&quot;&quot;_h</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga600eebec225b23a712127c7abc6fcc7f</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Time</type>
      <name>operator&quot;&quot;_h</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga8a7e67e9f6f6ce9afd6b5dd838d403ed</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Time</type>
      <name>operator&quot;&quot;_d</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gab5a3c470d8b4526200a1d2624ddab62e</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Time</type>
      <name>operator&quot;&quot;_d</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gac162fd06cbec0dd5f6139bbe9a84a6af</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Angle</type>
      <name>operator&quot;&quot;_rad</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gaab9f386c8751e2883dddc4893dc0182c</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Angle</type>
      <name>operator&quot;&quot;_rad</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga508a82478f814f16e0a59d960ae70590</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Angle</type>
      <name>operator&quot;&quot;_deg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gaf8c63e873b437f0cb242bc4bdc6f8af6</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Angle</type>
      <name>operator&quot;&quot;_deg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gab6f526d13a814b761e72261aff8f2f57</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Force</type>
      <name>operator&quot;&quot;_N</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga930727b91c3eb0546d44b7ae6618222c</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Force</type>
      <name>operator&quot;&quot;_N</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga571aff9a2615a7a0bed40f9e054b66a7</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Area</type>
      <name>operator&quot;&quot;_m2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gac6c8357df9fe338a73682102308ecca7</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Area</type>
      <name>operator&quot;&quot;_m2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga39c8b53142a362994deef473436686e5</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr LinearVelocity</type>
      <name>operator&quot;&quot;_mps</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gac5523ffa4958cae83ead5ca14aed1d3e</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr LinearVelocity</type>
      <name>operator&quot;&quot;_mps</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gaebbde261f2aeea6755fb870a29530438</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr LinearVelocity</type>
      <name>operator&quot;&quot;_kps</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gac876272e650fa5949583536207e8d047</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr LinearVelocity</type>
      <name>operator&quot;&quot;_kps</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gaa92eb53b542247ea1a4546ea5d296a7e</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr LinearAcceleration</type>
      <name>operator&quot;&quot;_mps2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga29fd0c08001cd86d9fffaeba8db0bad2</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr LinearAcceleration</type>
      <name>operator&quot;&quot;_mps2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga4dcac2c8c0ba41800377dfa7fc1396d9</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Frequency</type>
      <name>operator&quot;&quot;_Hz</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga0e1f5fa0f1ce0785ae11f789eb69a2f4</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Frequency</type>
      <name>operator&quot;&quot;_Hz</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga6b528013add62057edbddb11c79c8a36</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Torque</type>
      <name>operator&quot;&quot;_Nm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gad274f795522e2b024bac4ce6b4a1636d</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Torque</type>
      <name>operator&quot;&quot;_Nm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gaf44dd10192e584c1ff4094a3b1035732</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum</type>
      <name>operator&quot;&quot;_Ns</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga4e4af46280404d4cb71047dd34d67097</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum</type>
      <name>operator&quot;&quot;_Ns</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga4efb2b2f16bc784b7d57ca46ed3f6a13</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AreaDensity</type>
      <name>operator&quot;&quot;_kgpm2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga948148b4234cf1f7030a336d64868129</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AreaDensity</type>
      <name>operator&quot;&quot;_kgpm2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gacb329e2432dd4b9d459faf7a89501847</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AngularVelocity</type>
      <name>operator&quot;&quot;_rpm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga9ca4e4146c562c10b7b630bb5e84f791</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AngularVelocity</type>
      <name>operator&quot;&quot;_rpm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga7fba9a464320ef807425a9696f4af414</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Real</type>
      <name>StripUnit</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aac9c2dd1eed20474efacf71573727d31</anchor>
      <arglist>(const Real value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a5351f2762c5c98b723679795e0a79287</anchor>
      <arglist>(const d2::UnitVec &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab0d92fceef8d7757ae713bd166391c21</anchor>
      <arglist>(const Vector&lt; T, N &gt; &amp;lhs, const Vector&lt; T, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a0e16f08723028c63f043c1ad42891b11</anchor>
      <arglist>(const Vector&lt; T, N &gt; &amp;lhs, const Vector&lt; T, N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; T, decltype(+T{})&gt;::value, Vector&lt; T, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a56e36a6e89835f4d0de7cc4bbc30004f</anchor>
      <arglist>(Vector&lt; T, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; T, decltype(-T{})&gt;::value, Vector&lt; T, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a581f6521190fcbbfc1aa0813a6f33c04</anchor>
      <arglist>(Vector&lt; T, N &gt; v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; T, decltype(T{}+T{})&gt;::value, Vector&lt; T, N &gt; &amp; &gt;</type>
      <name>operator+=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a85453187a044f3d22a4c9ffea440eeac</anchor>
      <arglist>(Vector&lt; T, N &gt; &amp;lhs, const Vector&lt; T, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; T, decltype(T{} - T{})&gt;::value, Vector&lt; T, N &gt; &amp; &gt;</type>
      <name>operator-=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a92dcbdea02307ed29e5dc13ea59f7655</anchor>
      <arglist>(Vector&lt; T, N &gt; &amp;lhs, const Vector&lt; T, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; T, decltype(T{}+T{})&gt;::value, Vector&lt; T, N &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aadc7b8a4526dd9380a689345a1dff9d4</anchor>
      <arglist>(Vector&lt; T, N &gt; lhs, const Vector&lt; T, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; T, decltype(T{} - T{})&gt;::value, Vector&lt; T, N &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a75d04501374b86e6de10706672bdc38d</anchor>
      <arglist>(Vector&lt; T, N &gt; lhs, const Vector&lt; T, N &gt; rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; T1, decltype(T1{} *T2{})&gt;::value, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator*=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>af372c516420203fe11aa71d881d376e6</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_same&lt; T1, decltype(T1{}/T2{})&gt;::value, Vector&lt; T1, N &gt; &amp; &gt;</type>
      <name>operator/=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a86e53e0fc25f63401b26f557d4f0dc74</anchor>
      <arglist>(Vector&lt; T1, N &gt; &amp;lhs, const T2 rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value, Vector&lt; Vector&lt; OT, C &gt;, A &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab26c32a67232c258f6792be57799a485</anchor>
      <arglist>(const Vector&lt; Vector&lt; T1, B &gt;, A &gt; &amp;lhs, const Vector&lt; Vector&lt; T2, C &gt;, B &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T1 &gt;::value, Vector&lt; OT, B &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a026460fcdfec17743564ddb912641b32</anchor>
      <arglist>(const Vector&lt; T1, A &gt; &amp;lhs, const Vector&lt; Vector&lt; T2, B &gt;, A &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T2 &gt;::value, Vector&lt; OT, B &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a5954c938ca0d2ec534a155f7c1ea692d</anchor>
      <arglist>(const Vector&lt; Vector&lt; T1, A &gt;, B &gt; &amp;lhs, const Vector&lt; T2, A &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T1 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab83592354f1ddb5b4c4a578b758e3b6f</anchor>
      <arglist>(const T1 s, Vector&lt; T2, N &gt; a) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsMultipliable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T2 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>acd667ff0c1d11b44e9ad19b06db6713e</anchor>
      <arglist>(Vector&lt; T1, N &gt; a, const T2 s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; IsDivisable&lt; T1, T2 &gt;::value &amp;&amp;!IsVector&lt; T2 &gt;::value, Vector&lt; OT, N &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab846bf628e71b3aeea2fc26d282143eb</anchor>
      <arglist>(Vector&lt; T1, N &gt; a, const T2 s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto &amp;</type>
      <name>get</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aa10d9373a7aa5e3492fee0877900f738</anchor>
      <arglist>(Vector&lt; T, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>get</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a32a27488878deb0db4face63ec9749b1</anchor>
      <arglist>(const Vector&lt; T, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a6bda91572806860fa512fff0f01a001b</anchor>
      <arglist>(::std::ostream &amp;os, const Vector&lt; T, N &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vec2</type>
      <name>GetVec2</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a1095a7a1708bef4b32bc0f6cc44a58f2</anchor>
      <arglist>(const Vector2&lt; Real &gt; value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab698eb521c2d14d3d88ee3ac4cacd7c6</anchor>
      <arglist>(const Vector2&lt; TYPE &gt; &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a904477c2aa4c83f49b1c55f393bd79d2</anchor>
      <arglist>(const d2::Velocity &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Version</type>
      <name>GetVersion</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>af43ad5413c876b34dcf8430c045986cc</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetBuildDetails</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a66e36c723d641ea2e8dad6e8653f6ffd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a7b564ef69823dc4c3faaa8cbc3268040</anchor>
      <arglist>(Version lhs, Version rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a0a4bec997d1e880aac48a69ca41c656c</anchor>
      <arglist>(Version lhs, Version rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab7404128f6225cf6915219bb784c7843</anchor>
      <arglist>(const BodyID &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSpeedable</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a76e2dcc5aeb221351e51ad965e9de893</anchor>
      <arglist>(BodyType type)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAccelerable</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a6514752c0838613cfaf76ea7e03581cd</anchor>
      <arglist>(BodyType type)</arglist>
    </member>
    <member kind="function">
      <type>ConstraintSolverConf</type>
      <name>GetRegConstraintSolverConf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aacaf6573afe5f3fb0803faa353dc9c65</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ConstraintSolverConf</type>
      <name>GetToiConstraintSolverConf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>afdb8daa84d36ac948934ee05eb4cb242</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ConstraintSolverConf</type>
      <name>GetDefaultPositionSolverConf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a081dbfc95d4d3139eb2817a1f11a5af3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ConstraintSolverConf</type>
      <name>GetDefaultToiPositionSolverConf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a56b5137ea90045d15dfb2279d5773b46</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>MixFriction</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a50d46e6e45df1f7049decee120ce9922</anchor>
      <arglist>(Real friction1, Real friction2)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>MixRestitution</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>abdd2574637d4c8869ae345d3975829cc</anchor>
      <arglist>(Real restitution1, Real restitution2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>adc42b14180314ff41872c38c5596970c</anchor>
      <arglist>(const ContactID &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a0addcd9e78acfcc5f23418814f2a8f57</anchor>
      <arglist>(const ContactKey lhs, const ContactKey rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ae970f7a9e7fa198ddadce868c1116325</anchor>
      <arglist>(const ContactKey lhs, const ContactKey rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>af80c31195a04b4af5891934d0ed1ed3c</anchor>
      <arglist>(const ContactKey lhs, const ContactKey rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a225f691c1b9ee3969221ae49170ba178</anchor>
      <arglist>(const ContactKey lhs, const ContactKey rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a7ef072ea2c5a69df2050c1a1557206ef</anchor>
      <arglist>(const ContactKey lhs, const ContactKey rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ae75f2a5fe81c028b473be52b47b7c7e9</anchor>
      <arglist>(const ContactKey lhs, const ContactKey rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9cecc5b25e8e89a47a552caf672bd69c</anchor>
      <arglist>(const Filter lhs, const Filter rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab71806508440416ef208f51580a6c50c</anchor>
      <arglist>(const Filter lhs, const Filter rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ShouldCollide</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a223329721a8138f316898ed9a4877250</anchor>
      <arglist>(const Filter filterA, const Filter filterB) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>af39223a08030d99fb1c58ca8635e8cc3</anchor>
      <arglist>(const FixtureID &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsValid</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a7144be2e84f00033cbbadfae783092ed</anchor>
      <arglist>(const JointID &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MovementConf</type>
      <name>GetMovementConf</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a9f5227d01d6f7c75ac2399c3da7b5572</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMaxTranslationWithinTolerance</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a05d21c386ca6d39d5cc35cbad350a8c9</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetMaxRegLinearCorrection</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a396f543b42eadf60ef9e730edc77912c</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RegStepStats &amp;</type>
      <name>Update</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a3129f24959327f2ae255de4d0b2badba</anchor>
      <arglist>(RegStepStats &amp;lhs, const IslandStats &amp;rhs) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>InvalidIndexPair</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a6fb9d11a6fadb62b0e68aee9797059ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>InvalidIndexPair3</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ae6388dedf49acce87859ad2e9bd3e2cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Pi</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a3fe0bdbb0ea9c449b7504f7c75840993</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>SquareRootTwo</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aae1bd392cbafcb91d60633c893ff0742</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Centi</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>ga0367ca8edd23b32c868e3fe5f79082ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Deci</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>ga5a49a7e54c1b478f5b1cc882aa55f2d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Kilo</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>gae537180a6f4ceb3a3192ee623fc2c8bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Mega</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>gad7b2132b6101f0d7f6b3658147025168</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Giga</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>ga66ca2124fd143e2433bb2f409dc83f92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Tera</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>gaf30f732f080ece0b4e695da15e9da2a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Peta</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>ga590efc6f9c2013056da85de7ab4e84ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Yotta</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>ga57179cfbd588c3d24609ad449a94bb0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>MaxSimplexEdges</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a95591102a273a4d301f3f795d463b9ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>MaxChildCount</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>af33623a59b7c701aead6d06e88dc2cc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>MaxFloat</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a527c4658d275e6c04ba4b4c9f28d688b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>MaxManifoldPoints</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aae670387c8f37f8812082b1838e18863</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>MaxShapeVertices</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a0774f630ff2e5b9ed9e5f322700d44e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>InvalidVertex</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a49c511e18a6b72260126cf763c1cd8df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultLinearSlop</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad91e53ba44755653e34147d39695a0a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultMinVertexRadius</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a174cfa632eb92c15bc2e48e7d09d216a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultMaxVertexRadius</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a7beadf6067bdf66f48ee9b94c337d252</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultAabbExtension</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a3dd06178e859667c8f65b26c4e91972e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultDistanceMultiplier</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab2898b34e4bf5fe5af48939ec34e48f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultAngularSlop</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>adfccbc3cd8cc0bb78701f62e041acdba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultMaxLinearCorrection</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aa7d2cfbedb9200e2ed973eb18cc3b23b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultMaxAngularCorrection</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac8fea4a93f741aa800e943957fd23656</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultMaxTranslation</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a6b71ffce08877ce941d29616eb907114</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultMaxRotation</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a36c3a1adc34421b07e930a06ce905db1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultMaxToiIters</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab6c87be197db81dde7d9f64ddd888bae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultMaxToiRootIters</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad369e106022da8a461ed8a515014ee17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultMaxDistanceIters</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>adea893c840466088049edc292dcc9dcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultMaxSubSteps</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>aa678e38c906502e06a90f31e2acc952a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultVelocityThreshold</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a6497dbff92f4140c03fb29f7dc80093d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultRegMinMomentum</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab8eb622479d2ffb28ce1a4e88e8a211f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultToiMinMomentum</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a88e51d5b5ce397624e803df05ff1c013</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>MaxFixtures</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>af36288c4602f14acd96242145a546980</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>MaxBodies</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a7b821c4b23566defba0fd2917d95f0ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>InvalidContactIndex</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a4ecc8cc059a2a3fa056888a1d405e4bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>MaxContacts</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a5ac18ab5fe22782c56d7ab92b397468e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>MaxJoints</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a69cde8c9e938d138a9a4ae8355501684</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultStepTime</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a51e5b3bf0a53f853c75244a15b08caee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultStepFrequency</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a65202bedf970d0db4ad0d3e22ab3a0dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultMinStillTimeToSleep</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a0e76508577c61a5bc9cc3107d60f3c1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultLinearSleepTolerance</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a490b0d336b7a74ae18cf57632eeb7aa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultAngularSleepTolerance</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a31907e80be5889667f03ef86ee3bbf0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DefaultCirclesRatio</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ac12a28e4c1a2b9138c79d895d3ccb3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>InvalidTypeID</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ab8f0b15d8cf3a0f200c50fc8bc6c4e08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Second</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga6dacec03532687e9bac4ac6a882b35ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>SquareSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga64467fca61de8c359a4e019f977ff320</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Hertz</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gadef54036b9480e0cf730100688e20570</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Meter</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gab5d1d9c70d11cff5fb552e939de39b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>MeterPerSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga9d80fc94ec9d5990d2fa6b9e4b67267d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>MeterPerSquareSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga0bc87db1f0fbc1b5f1ae9b44c66b6e82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Kilogram</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gad4ca745853415c1b3df906848978df9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>SquareMeter</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga1fb0acbda4409a1a132baf7df83b9870</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>CubicMeter</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga0107011ec7329a9ac267119f7ff941bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>KilogramPerSquareMeter</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga64416f646855741c31802eb689760ba8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Radian</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gaebbe3f5282db32af8292500e505e21e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Degree</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gaf0840a4c6fcfa4ed0f1e25820fea0ca3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>SquareRadian</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga941b3913fd0dd86a33e695cd9b73318f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>RadianPerSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga446e46852ff69dee446aadc44635865c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DegreePerSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga987ba57899c87b7d6734d046d1c854b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>RadianPerSquareSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga0da7c45fe3ebc86d397e684154033742</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DegreePerSquareSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga7a7cdea552b0f98a011b3287850433a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Newton</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gac88db74a1ddb390655f0837d9c970f76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>NewtonMeter</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gab920bd1046410474258f9e8630e557a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>NewtonSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga64db6556e1824d11178c3d68301c2adc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>NewtonMeterSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gae55524173aec32daa74def2b8dddc0bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>RevolutionsPerMinute</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga46b97afc56560699033e7c3fb480a4f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>EarthlyLinearAcceleration</name>
      <anchorfile>group__UnitConstants.html</anchorfile>
      <anchor>ga770e7e3c14510e96d5115b36988e5dde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>BigG</name>
      <anchorfile>group__UnitConstants.html</anchorfile>
      <anchor>ga4435a07d3cb65258172c132b134c02fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>InvalidBodyID</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a38fa6c4a45ec8fd218dc962396685c3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>InvalidContactID</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a1a7a2c4f0ce447813c94060e1ea4c0f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>InvalidFixtureID</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>ad7fdab88f7f4e1fdf64360e3d9501fa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>InvalidJointID</name>
      <anchorfile>namespaceplayrho.html</anchorfile>
      <anchor>a67d10419efd6effdd41617992a76cbcd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>playrho::d2</name>
    <filename>namespaceplayrho_1_1d2.html</filename>
    <class kind="struct">playrho::d2::Acceleration</class>
    <class kind="struct">playrho::d2::BaseShapeConf</class>
    <class kind="class">playrho::d2::Body</class>
    <class kind="struct">playrho::d2::BodyConf</class>
    <class kind="class">playrho::d2::BodyConstraint</class>
    <class kind="class">playrho::d2::ChainShapeConf</class>
    <class kind="struct">playrho::d2::ClipVertex</class>
    <class kind="class">playrho::d2::Contact</class>
    <class kind="class">playrho::d2::ContactImpulsesList</class>
    <class kind="class">playrho::d2::ConvexHull</class>
    <class kind="struct">playrho::d2::DiskShapeConf</class>
    <class kind="struct">playrho::d2::DistanceConf</class>
    <class kind="struct">playrho::d2::DistanceJointConf</class>
    <class kind="struct">playrho::d2::DistanceOutput</class>
    <class kind="class">playrho::d2::DistanceProxy</class>
    <class kind="class">playrho::d2::DynamicTree</class>
    <class kind="class">playrho::d2::EdgeShapeConf</class>
    <class kind="struct">playrho::d2::FixtureConf</class>
    <class kind="struct">playrho::d2::FrictionJointConf</class>
    <class kind="struct">playrho::d2::GearJointConf</class>
    <class kind="struct">playrho::d2::Island</class>
    <class kind="struct">playrho::d2::IsValidJointType</class>
    <class kind="struct">playrho::d2::IsValidJointType&lt; T, std::void_t&lt; decltype(GetBodyA(std::declval&lt; T &gt;())), decltype(GetBodyB(std::declval&lt; T &gt;())), decltype(GetCollideConnected(std::declval&lt; T &gt;())), decltype(ShiftOrigin(std::declval&lt; T &amp; &gt;(), std::declval&lt; Length2 &gt;())), decltype(InitVelocity(std::declval&lt; T &amp; &gt;(), std::declval&lt; std::vector&lt; BodyConstraint &gt; &amp; &gt;(), std::declval&lt; StepConf &gt;(), std::declval&lt; ConstraintSolverConf &gt;())), decltype(SolveVelocity(std::declval&lt; T &amp; &gt;(), std::declval&lt; std::vector&lt; BodyConstraint &gt; &amp; &gt;(), std::declval&lt; StepConf &gt;())), decltype(SolvePosition(std::declval&lt; T &gt;(), std::declval&lt; std::vector&lt; BodyConstraint &gt; &amp; &gt;(), std::declval&lt; ConstraintSolverConf &gt;())), decltype(std::declval&lt; T &gt;()==std::declval&lt; T &gt;()), decltype(Joint{std::declval&lt; T &gt;()})&gt; &gt;</class>
    <class kind="struct">playrho::d2::IsValidShapeType</class>
    <class kind="struct">playrho::d2::IsValidShapeType&lt; T, std::void_t&lt; decltype(GetChildCount(std::declval&lt; T &gt;())), decltype(GetChild(std::declval&lt; T &gt;(), std::declval&lt; ChildCounter &gt;())), decltype(GetMassData(std::declval&lt; T &gt;())), decltype(GetVertexRadius(std::declval&lt; T &gt;(), std::declval&lt; ChildCounter &gt;())), decltype(GetDensity(std::declval&lt; T &gt;())), decltype(GetFriction(std::declval&lt; T &gt;())), decltype(GetRestitution(std::declval&lt; T &gt;())), decltype(Transform(std::declval&lt; T &amp; &gt;(), std::declval&lt; Mat22 &gt;())), decltype(std::declval&lt; T &gt;()==std::declval&lt; T &gt;()), decltype(Shape{std::declval&lt; T &gt;()})&gt; &gt;</class>
    <class kind="class">playrho::d2::Joint</class>
    <class kind="struct">playrho::d2::JointBuilder</class>
    <class kind="struct">playrho::d2::JointConf</class>
    <class kind="class">playrho::d2::JointKey</class>
    <class kind="class">playrho::d2::Manifold</class>
    <class kind="struct">playrho::d2::MotorJointConf</class>
    <class kind="struct">playrho::d2::MultiShapeConf</class>
    <class kind="class">playrho::d2::PolygonShapeConf</class>
    <class kind="struct">playrho::d2::Position</class>
    <class kind="class">playrho::d2::PositionConstraint</class>
    <class kind="struct">playrho::d2::PositionSolution</class>
    <class kind="struct">playrho::d2::PositionSolverManifold</class>
    <class kind="struct">playrho::d2::PrismaticJointConf</class>
    <class kind="struct">playrho::d2::PulleyJointConf</class>
    <class kind="struct">playrho::d2::RayCastHit</class>
    <class kind="struct">playrho::d2::RevoluteJointConf</class>
    <class kind="struct">playrho::d2::RopeJointConf</class>
    <class kind="struct">playrho::d2::SeparationScenario</class>
    <class kind="class">playrho::d2::Shape</class>
    <class kind="struct">playrho::d2::ShapeBuilder</class>
    <class kind="struct">playrho::d2::ShapeConf</class>
    <class kind="class">playrho::d2::Simplex</class>
    <class kind="class">playrho::d2::SimplexEdge</class>
    <class kind="class">playrho::d2::Sweep</class>
    <class kind="struct">playrho::d2::TargetJointConf</class>
    <class kind="struct">playrho::d2::Transformation</class>
    <class kind="class">playrho::d2::UnitVec</class>
    <class kind="struct">playrho::d2::Velocity</class>
    <class kind="class">playrho::d2::VelocityConstraint</class>
    <class kind="class">playrho::d2::VertexSet</class>
    <class kind="struct">playrho::d2::WeldJointConf</class>
    <class kind="struct">playrho::d2::WheelJointConf</class>
    <class kind="class">playrho::d2::World</class>
    <class kind="struct">playrho::d2::WorldConf</class>
    <class kind="class">playrho::d2::WorldImpl</class>
    <class kind="class">playrho::d2::WorldManifold</class>
    <member kind="typedef">
      <type>::playrho::detail::AABB&lt; 2 &gt;</type>
      <name>AABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abfb3031d97cbdac7eb72cccf26e3c694</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArrayList&lt; ClipVertex, MaxManifoldPoints &gt;</type>
      <name>ClipList</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab02c685f9b6933b73418fb3223e2e433</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; DynamicTreeOpcode(DynamicTree::Size)&gt;</type>
      <name>DynamicTreeSizeCB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a50dec3f5f2b2d5add65db48633593967</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; bool(FixtureID fixture, ChildCounter child)&gt;</type>
      <name>QueryFixtureCallback</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa4f88103a4970685b473216410d7b427</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>::playrho::detail::LengthIndices&lt; 2 &gt;</type>
      <name>LengthIndices</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a71fc9bb2c15145fe17188b4bc918cf2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>::playrho::detail::SeparationInfo&lt; 2 &gt;</type>
      <name>SeparationInfo</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a92b6287401a1537b2a61ccf00ef46fc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>::playrho::detail::MassData&lt; 2 &gt;</type>
      <name>MassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1afff43f96a91b8c26b8f0de7b9a71da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>playrho::detail::RayCastInput&lt; 2 &gt;</type>
      <name>RayCastInput</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adf053dc4cae3fabb24f6e3c8b8697ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::optional&lt; RayCastHit &gt;</type>
      <name>RayCastOutput</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a44ee8d7d4fd7ea935b7d952f7834027f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; Real(BodyID body, FixtureID fixture, ChildCounter child, const RayCastInput &amp;input)&gt;</type>
      <name>DynamicTreeRayCastCB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a073001772b6888a7a1aa752b01d30ff9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; RayCastOpcode(BodyID body, FixtureID fixture, ChildCounter child, Length2 point, UnitVec normal)&gt;</type>
      <name>FixtureRayCastCB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1530c6584de8944fe2f0b19adae6da3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArrayList&lt; SimplexEdge, MaxSimplexEdges, std::remove_const&lt; decltype(MaxSimplexEdges)&gt;::type &gt;</type>
      <name>SimplexEdges</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a364eb782cd9cf5659e0a8bfcd63faa63</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; Velocity, Velocity &gt;</type>
      <name>VelocityPair</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa577189e0996ba8d7897fa12b80726c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; ContactKey, ContactID &gt;</type>
      <name>KeyedContactPtr</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acd3332ed6985dc65c60e8e6ea41c898b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; BodyConstraint &gt;</type>
      <name>BodyConstraints</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a58893cfe2113f284d5b33f56ab16b9ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; PositionConstraint &gt;</type>
      <name>PositionConstraints</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5b277cfe94a59545766adb762e7c10d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; VelocityConstraint &gt;</type>
      <name>VelocityConstraints</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a675cd1218b4df675b34193bd55a6fd33</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DynamicTreeOpcode</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a04c475376564975c7ff4c357e88bdf16</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceplayrho_1_1d2.html" anchor="a04c475376564975c7ff4c357e88bdf16a87557f11575c0ad78e4e28abedc13b6e">End</enumvalue>
      <enumvalue file="namespaceplayrho_1_1d2.html" anchor="a04c475376564975c7ff4c357e88bdf16aa0bfb8e59e6c13fc8d990781f77694fe">Continue</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LimitState</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab84776203d1fea7dff2004752c36d5fc</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceplayrho_1_1d2.html" anchor="ab84776203d1fea7dff2004752c36d5fca1f7b8a0fe66401e83219c7a6b7271e77">e_inactiveLimit</enumvalue>
      <enumvalue file="namespaceplayrho_1_1d2.html" anchor="ab84776203d1fea7dff2004752c36d5fcab5be4dc895bc396de7129733217d2d1d">e_atLowerLimit</enumvalue>
      <enumvalue file="namespaceplayrho_1_1d2.html" anchor="ab84776203d1fea7dff2004752c36d5fca719db30ca9dc11b4ef7229efab6efb59">e_atUpperLimit</enumvalue>
      <enumvalue file="namespaceplayrho_1_1d2.html" anchor="ab84776203d1fea7dff2004752c36d5fca4737f7baf9c11f81fc69998ca490edab">e_equalLimits</enumvalue>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a44cc65808fd89570707b3af1bc87eb36</anchor>
      <arglist>(const DistanceProxy &amp;proxy, const Transformation &amp;xf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa67cf0c4b074e5c10a793cb2f16a0860</anchor>
      <arglist>(const DistanceProxy &amp;proxy, const Transformation &amp;xfm0, const Transformation &amp;xfm1) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a74afc15ef58efc35461a1580887e5363</anchor>
      <arglist>(const Shape &amp;shape, const Transformation &amp;xf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ace3a057073fad958bb614087dda58e99</anchor>
      <arglist>(const World &amp;world, FixtureID id)</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a37bb405e5a603696123a9cd9c6c8a376</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeIntersectingAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0000d7128d04839a7952245b25be017e</anchor>
      <arglist>(const World &amp;world, FixtureID fA, ChildCounter iA, FixtureID fB, ChildCounter iB) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>ComputeIntersectingAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a58da6fd8e2c8f3ad974474ce7983dbf4</anchor>
      <arglist>(const World &amp;world, const Contact &amp;contact)</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>GetAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>add2ef460cb524b34a3ad4feea71dc41f</anchor>
      <arglist>(const playrho::detail::RayCastInput&lt; 2 &gt; &amp;input) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>GetPerimeter</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ace87984d1541a40a6c850825acb43742</anchor>
      <arglist>(const AABB &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PointStates</type>
      <name>GetPointStates</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae48de2e5ef109c667912e5db7b170d94</anchor>
      <arglist>(const Manifold &amp;manifold1, const Manifold &amp;manifold2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ClipList</type>
      <name>ClipSegmentToLine</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a073a93c54a20aa68f2c56e759b7976ab</anchor>
      <arglist>(const ClipList &amp;vIn, const UnitVec &amp;normal, Length offset, ContactFeature::Index indexA)</arglist>
    </member>
    <member kind="function">
      <type>DistanceConf</type>
      <name>GetDistanceConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac19f21bdad4b0722921c971c3cab85d1</anchor>
      <arglist>(const ToiConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DistanceConf</type>
      <name>GetDistanceConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0955c2cf9e582ac1e1e6e8f2dd8ce317</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PairLength2</type>
      <name>GetWitnessPoints</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af23dfb97190555d582956bfe1b7624fb</anchor>
      <arglist>(const Simplex &amp;simplex) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DistanceOutput</type>
      <name>Distance</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad01443fd4ea346d550ece90f7f92b1f4</anchor>
      <arglist>(const DistanceProxy &amp;proxyA, const Transformation &amp;transformA, const DistanceProxy &amp;proxyB, const Transformation &amp;transformB, DistanceConf conf=DistanceConf{})</arglist>
    </member>
    <member kind="function">
      <type>Area</type>
      <name>TestOverlap</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad5a1ff6589dc30ed3f9f7ee881f17bb2</anchor>
      <arglist>(const DistanceProxy &amp;proxyA, const Transformation &amp;xfA, const DistanceProxy &amp;proxyB, const Transformation &amp;xfB, DistanceConf conf=DistanceConf{})</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length2</type>
      <name>GetDelta</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abd82b1e34a0b75b0f1a1da6eb741f741</anchor>
      <arglist>(PairLength2 arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1311c8979a6d955fa240491cbf239e99</anchor>
      <arglist>(const DistanceProxy &amp;lhs, const DistanceProxy &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>FindLowestRightMostVertex</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8a76c0389e1d7343fb8ad93543d3138f</anchor>
      <arglist>(Span&lt; const Length2 &gt; vertices)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Length2 &gt;</type>
      <name>GetConvexHullAsVector</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae1538594ce2f0d86da70bf832c0327bb</anchor>
      <arglist>(Span&lt; const Length2 &gt; vertices)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestPoint</name>
      <anchorfile>group__TestPointGroup.html</anchorfile>
      <anchor>gac9da7b3dd9e1dc5532a0f3c47f31f22e</anchor>
      <arglist>(const DistanceProxy &amp;proxy, Length2 point) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1c65d94d98dea8f68c3dd32e90b888bb</anchor>
      <arglist>(const DistanceProxy &amp;lhs, const DistanceProxy &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8d29a87b8865a1e42c35360ddc2bb6bf</anchor>
      <arglist>(const DistanceProxy &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>VertexCounter</type>
      <name>GetSupportIndex</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6cfc27f1644f9c4d6da229b5eba07e51</anchor>
      <arglist>(const DistanceProxy &amp;proxy, T dir) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a69bff32e0251d31f1ab3613f2f8f4459</anchor>
      <arglist>(DynamicTree &amp;lhs, DynamicTree &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Query</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a52ca8acb99e3c3591d13ca912282470e</anchor>
      <arglist>(const DynamicTree &amp;tree, const AABB &amp;aabb, const DynamicTreeSizeCB &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Query</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a387361206b47016fdadec182c37852a1</anchor>
      <arglist>(const DynamicTree &amp;tree, const AABB &amp;aabb, QueryFixtureCallback callback)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>ComputeTotalPerimeter</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aaab37fd533a1ec17e12c6798e42a21b3</anchor>
      <arglist>(const DynamicTree &amp;tree) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>ComputePerimeterRatio</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7daf9650f36f8d172678d1398034a516</anchor>
      <arglist>(const DynamicTree &amp;tree) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DynamicTree::Height</type>
      <name>ComputeHeight</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af0e796616b3e92f4b7b34ffdc73e4942</anchor>
      <arglist>(const DynamicTree &amp;tree, DynamicTree::Size index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DynamicTree::Height</type>
      <name>GetMaxImbalance</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab2389e08997d0d0e0ba03697eec17936</anchor>
      <arglist>(const DynamicTree &amp;tree) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ValidateStructure</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ababba0a1b926e9aa793afe44044f204b</anchor>
      <arglist>(const DynamicTree &amp;tree, DynamicTree::Size index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ValidateMetrics</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a22c9cd17bd9080414ab77b1d3e433dca</anchor>
      <arglist>(const DynamicTree &amp;tree, DynamicTree::Size index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8f179e80df6ce247f31faeeacb45de79</anchor>
      <arglist>(const DynamicTree::LeafData &amp;lhs, const DynamicTree::LeafData &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae1ed888f691a2a52ae7a8a2b09f31652</anchor>
      <arglist>(const DynamicTree::LeafData &amp;lhs, const DynamicTree::LeafData &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsUnused</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3ad7a716e1b2bc2677ebf9ec441401f4</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsLeaf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aae0b95c4e9a195b7c6c5d64c8664ab35</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsBranch</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7d5284fb35640d9a05b6b5346933c82a</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr DynamicTree::BranchData</type>
      <name>ReplaceChild</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aae3f4ed15632b400f861564607fc1cf6</anchor>
      <arglist>(DynamicTree::BranchData bd, DynamicTree::Size oldChild, DynamicTree::Size newChild)</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB</type>
      <name>GetAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab6f093bc8ffe077f0d5895bfc5b672a7</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr DynamicTree::Size</type>
      <name>GetNext</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acd3a93c79eb73866acfe12518491c2cd</anchor>
      <arglist>(const DynamicTree::TreeNode &amp;node) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DynamicTree::Height</type>
      <name>GetHeight</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a72265a3c2d4511e74df6ab4d13112f6d</anchor>
      <arglist>(const DynamicTree &amp;tree) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>GetAABB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adebb4dfdc038631f8b24ee19a0b29713</anchor>
      <arglist>(const DynamicTree &amp;tree) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestOverlap</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a905424c61ac9933179b91eb12ac0d537</anchor>
      <arglist>(const DynamicTree &amp;tree, DynamicTree::Size leafIdA, DynamicTree::Size leafIdB) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DynamicTree::Height</type>
      <name>ComputeHeight</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9130244ba8964592f654cf473e4979ed</anchor>
      <arglist>(const DynamicTree &amp;tree) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0f207924edd9511c1d56c03933928fa8</anchor>
      <arglist>(const DynamicTree &amp;tree) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Manifold::Conf</type>
      <name>GetManifoldConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa8f1bf295c7fdae2783dfc6368f39a95</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Manifold</type>
      <name>GetManifold</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a01cc67c9aa01c505ed34fe9cdf0f6242</anchor>
      <arglist>(bool flipped, const DistanceProxy &amp;shape0, const Transformation &amp;xf0, const VertexCounter idx0, const DistanceProxy &amp;shape1, const Transformation &amp;xf1, const VertexCounter2 indices1, const Manifold::Conf conf)</arglist>
    </member>
    <member kind="function">
      <type>Manifold</type>
      <name>GetManifold</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abea23b69385cc004b20710a775130a98</anchor>
      <arglist>(bool flipped, Length totalRadius, const DistanceProxy &amp;shape, const Transformation &amp;sxf, Length2 point, const Transformation &amp;xfm)</arglist>
    </member>
    <member kind="function">
      <type>Manifold</type>
      <name>GetManifold</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af4f5f297912760f73d6135f46ba2c355</anchor>
      <arglist>(Length2 locationA, const Transformation &amp;xfA, Length2 locationB, const Transformation &amp;xfB, Length totalRadius) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Manifold</type>
      <name>CollideShapes</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a05380ac6609b4f7b27e4c1ae9e9e7535</anchor>
      <arglist>(const DistanceProxy &amp;shapeA, const Transformation &amp;xfA, const DistanceProxy &amp;shapeB, const Transformation &amp;xfB, Manifold::Conf conf=GetDefaultManifoldConf())</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>GetName</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afe0be704277b108db26e28108c610174</anchor>
      <arglist>(Manifold::Type type) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a30d3152820c6a35af37c2139d316d1da</anchor>
      <arglist>(const Manifold::Point &amp;lhs, const Manifold::Point &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a72a1cdedaec111016d79f96aa4970cef</anchor>
      <arglist>(const Manifold::Point &amp;lhs, const Manifold::Point &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a18bbc8e12d21c4ae260d0bb333e0eed5</anchor>
      <arglist>(const Manifold &amp;lhs, const Manifold &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab7261adb2e0ccb0b3db58fc194d50614</anchor>
      <arglist>(const Manifold &amp;lhs, const Manifold &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Manifold::Conf</type>
      <name>GetDefaultManifoldConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acaf37db0f0fc4d474c6a447b1032d73f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9b3b93dcaddc83a77e35b87b54960d5e</anchor>
      <arglist>(Length r, NonNegative&lt; AreaDensity &gt; density, Length2 location)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4dab8e154250f9c2698059b6d28f75eb</anchor>
      <arglist>(Length r, NonNegative&lt; AreaDensity &gt; density, Length2 v0, Length2 v1)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7304da106cfaa394b4d0179ded468aa6</anchor>
      <arglist>(Length vertexRadius, NonNegative&lt; AreaDensity &gt; density, Span&lt; const Length2 &gt; vertices)</arglist>
    </member>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gad7a1b955a57a2bb043750bf32cde2549</anchor>
      <arglist>(Length radius, Length2 location, const RayCastInput &amp;input) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>ga425e9dc1c0e263bf7484ef6ef2cde86b</anchor>
      <arglist>(const ::playrho::detail::AABB&lt; 2 &gt; &amp;aabb, const RayCastInput &amp;input) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gabc2e992343e201f48c1956753a530247</anchor>
      <arglist>(const DistanceProxy &amp;proxy, const RayCastInput &amp;input, const Transformation &amp;transform) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gaada5f6c5635166baaf1bc81636d8b93a</anchor>
      <arglist>(const Shape &amp;shape, ChildCounter childIndex, const RayCastInput &amp;input, const Transformation &amp;transform) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gadf0ec62e1852e3bc9b017eae4a5616b4</anchor>
      <arglist>(const DynamicTree &amp;tree, RayCastInput input, const DynamicTreeRayCastCB &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gae96eee6263453ce2250d79fd8beb88bd</anchor>
      <arglist>(const World &amp;world, const RayCastInput &amp;input, const FixtureRayCastCB &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>SeparationScenario</type>
      <name>GetSeparationScenario</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0ae59f7bcf03f75dd6aa405683e455b9</anchor>
      <arglist>(IndexPair3 indices, const DistanceProxy &amp;proxyA, const Transformation &amp;xfA, const DistanceProxy &amp;proxyB, const Transformation &amp;xfB)</arglist>
    </member>
    <member kind="function">
      <type>LengthIndexPair</type>
      <name>FindMinSeparation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aecc08eba57f4b6facb11ebf84d1403b4</anchor>
      <arglist>(const SeparationScenario &amp;scenario, const Transformation &amp;xfA, const Transformation &amp;xfB)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>Evaluate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adf52c893075c61a92f299f872b0d3c9e</anchor>
      <arglist>(const SeparationScenario &amp;scenario, const Transformation &amp;xfA, const Transformation &amp;xfB, IndexPair indexPair)</arglist>
    </member>
    <member kind="function">
      <type>ChainShapeConf</type>
      <name>GetChainShapeConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3eb20e81c294774bd8f9fd0ccc136943</anchor>
      <arglist>(Length2 dimensions)</arglist>
    </member>
    <member kind="function">
      <type>ChainShapeConf</type>
      <name>GetChainShapeConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab25320e8b45be5e1730e39c9fc26a103</anchor>
      <arglist>(const AABB &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetChildCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afeeb64f8bbd439af0e350288e16da2e7</anchor>
      <arglist>(const ChainShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DistanceProxy</type>
      <name>GetChild</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8cdbec96d1a3f30b8c5705b602aeb8df</anchor>
      <arglist>(const ChainShapeConf &amp;arg, ChildCounter index)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abbe831388c11e3234692938bb354fe9f</anchor>
      <arglist>(const ChainShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLooped</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a435d2dc5439f69826450d3bac84b35c5</anchor>
      <arglist>(const ChainShapeConf &amp;shape) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetNextIndex</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac7d699f052c62efd80ce28f0190d70af</anchor>
      <arglist>(const ChainShapeConf &amp;shape, ChildCounter index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac418033043025956949e012aaf112b86</anchor>
      <arglist>(const ChainShapeConf &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aeeb7245d0354a4222600d611f3ddb16d</anchor>
      <arglist>(const ChainShapeConf &amp;arg, ChildCounter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transform</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad440be3d207e29e72aaa75b72054c610</anchor>
      <arglist>(ChainShapeConf &amp;arg, const Mat22 &amp;m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ChainShapeConf</type>
      <name>GetChainShapeConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ade70545e6c2bf848f87657114a111d11</anchor>
      <arglist>(Length dimension)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a85d3074f854445b9ec458b0d6ba6aa80</anchor>
      <arglist>(const DiskShapeConf &amp;lhs, const DiskShapeConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae54dffb8788232936ee10689ab0296cd</anchor>
      <arglist>(const DiskShapeConf &amp;lhs, const DiskShapeConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ChildCounter</type>
      <name>GetChildCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acfcf513079d544b6e0e64dc79b6e3381</anchor>
      <arglist>(const DiskShapeConf &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DistanceProxy</type>
      <name>GetChild</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab2edb0ada2177d0b9f078f49069f4810</anchor>
      <arglist>(const DiskShapeConf &amp;arg, ChildCounter index)</arglist>
    </member>
    <member kind="function">
      <type>constexpr NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aea6cd8aa55bd2f15a1e04e6ac08f46fe</anchor>
      <arglist>(const DiskShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a94a41528ae369c2a77c31e7280b9cb22</anchor>
      <arglist>(const DiskShapeConf &amp;arg, ChildCounter) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a93562fbd5d63e2fbcf34b87065834c6a</anchor>
      <arglist>(const DiskShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transform</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab84a4599861cbdaa32fcf6b7fed6f156</anchor>
      <arglist>(DiskShapeConf &amp;arg, const Mat22 &amp;m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af86100a70f9250d51c3c76a103edb8e4</anchor>
      <arglist>(const EdgeShapeConf &amp;lhs, const EdgeShapeConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6db183fd84981136da63e62d3a767d9c</anchor>
      <arglist>(const EdgeShapeConf &amp;lhs, const EdgeShapeConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr ChildCounter</type>
      <name>GetChildCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5821b2f4d9cef13bc998b92a02687663</anchor>
      <arglist>(const EdgeShapeConf &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DistanceProxy</type>
      <name>GetChild</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a65056ce7e0d413a4beeb818ad0ab9f4b</anchor>
      <arglist>(const EdgeShapeConf &amp;arg, ChildCounter index)</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a179e4a68b183074106cc54a88b46a68f</anchor>
      <arglist>(const EdgeShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a04c3bbe42dd7c5fd9e5c758ed67ddab2</anchor>
      <arglist>(const EdgeShapeConf &amp;arg, ChildCounter) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a075e981c13e3f9a9eb9648a701263e62</anchor>
      <arglist>(const EdgeShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transform</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a45cb9635e70a5139b52d7def2ec4eeed</anchor>
      <arglist>(EdgeShapeConf &amp;arg, const Mat22 &amp;m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8de782378ec5fefb3f1087a76a7721eb</anchor>
      <arglist>(const MultiShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ada69d48759a92fa8273e98b7e0bb69c5</anchor>
      <arglist>(const MultiShapeConf &amp;lhs, const MultiShapeConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abad1906bf9f008e1519d6e2ce95c792b</anchor>
      <arglist>(const MultiShapeConf &amp;lhs, const MultiShapeConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetChildCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6da28327ee2857e706b89789d56a3598</anchor>
      <arglist>(const MultiShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DistanceProxy</type>
      <name>GetChild</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a20acfdc5ce307d90cfef42908be8720b</anchor>
      <arglist>(const MultiShapeConf &amp;arg, ChildCounter index)</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a520079de7cf100a20a169fc57b77b5c0</anchor>
      <arglist>(const MultiShapeConf &amp;arg, ChildCounter index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transform</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a74a1971e9d0c04da5f9cb9645a872b07</anchor>
      <arglist>(MultiShapeConf &amp;arg, const Mat22 &amp;m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetEdge</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a066828295fc1238756f5adf1f3502343</anchor>
      <arglist>(const PolygonShapeConf &amp;shape, VertexCounter index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Validate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>addc5596ccd04947074f583cc62146991</anchor>
      <arglist>(const Span&lt; const Length2 &gt; verts)</arglist>
    </member>
    <member kind="function">
      <type>constexpr ChildCounter</type>
      <name>GetChildCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac02407ad96b7b302106c88f9ac3edf22</anchor>
      <arglist>(const PolygonShapeConf &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DistanceProxy</type>
      <name>GetChild</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8724a7f055248bd5f3ba5103fdcc6901</anchor>
      <arglist>(const PolygonShapeConf &amp;arg, ChildCounter index)</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0d3ad2448351d19b6acd69d6c46b05ae</anchor>
      <arglist>(const PolygonShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af9bfa558aa89b2c7c747545ac4d5fb44</anchor>
      <arglist>(const PolygonShapeConf &amp;arg, ChildCounter) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5971604948898d23c918c7430bf9da3e</anchor>
      <arglist>(const PolygonShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transform</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8bc20d0b7d315340914bfde7f538bdcc</anchor>
      <arglist>(PolygonShapeConf &amp;arg, const Mat22 &amp;m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestPoint</name>
      <anchorfile>group__TestPointGroup.html</anchorfile>
      <anchor>gafcfbf811dc989043838f0a4c7c64b59b</anchor>
      <arglist>(const Shape &amp;shape, Length2 point) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetChildCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a84eab47d880f50ed7b191c2bce198d00</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DistanceProxy</type>
      <name>GetChild</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af3e0b1a42f4c103d313a46942536b2ba</anchor>
      <arglist>(const Shape &amp;shape, ChildCounter index)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8fb5dbe67d6d7ab8ee34e98e114d1df5</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetFriction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9280854f98c5d8557ca57847171de630</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetRestitution</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a73fdd9b13d08d04db4ad170afac115b7</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; AreaDensity &gt;</type>
      <name>GetDensity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1e3ed738b9082f9bfd3358a19d9aa97d</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Length &gt;</type>
      <name>GetVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2b940ecf05bfbf8ae3910cacbc7e2264</anchor>
      <arglist>(const Shape &amp;shape, ChildCounter idx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transform</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae30c4c3496122b9bc6087d44d1db9ec5</anchor>
      <arglist>(Shape &amp;shape, const Mat22 &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>GetData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9d716987feab31bac7d07bb19cb89599</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TypeID</type>
      <name>GetType</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a175816624556bf32f41f1c3b248495de</anchor>
      <arglist>(const Shape &amp;shape) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::add_pointer_t&lt; std::add_const_t&lt; T &gt; &gt;</type>
      <name>TypeCast</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a732fa5d1da2c5d3292bdbcfaab4f971d</anchor>
      <arglist>(const Shape *value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a511146553469b7cac8c01113002718e6</anchor>
      <arglist>(const Shape &amp;lhs, const Shape &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a531eec1b236203c64a6618a44c94eb59</anchor>
      <arglist>(const Shape &amp;lhs, const Shape &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>TypeCast</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2552f9d7b9b8d2c5cf4b5ef71140b709</anchor>
      <arglist>(const Shape &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr NonNegative&lt; AreaDensity &gt;</type>
      <name>GetDensity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a068874264280d5dcdc0b549689ff5925</anchor>
      <arglist>(const BaseShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Finite&lt; Real &gt;</type>
      <name>GetRestitution</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6f9b72c17bf8d4bcfc48df04c5984ced</anchor>
      <arglist>(const BaseShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr NonNegative&lt; Real &gt;</type>
      <name>GetFriction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa364bed25b2887f6285b9328793fb955</anchor>
      <arglist>(const BaseShapeConf &amp;arg) noexcept</arglist>
    </member>
    <member kind="function">
      <type>SeparationInfo</type>
      <name>GetMaxSeparation4x4</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aaceaa2cf5095365ef74c07ccdb0c78ae</anchor>
      <arglist>(const DistanceProxy &amp;proxy1, Transformation xf1, const DistanceProxy &amp;proxy2, Transformation xf2)</arglist>
    </member>
    <member kind="function">
      <type>SeparationInfo</type>
      <name>GetMaxSeparation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a60080a2f269e3c48461f3a9ec0883a3b</anchor>
      <arglist>(const DistanceProxy &amp;proxy1, Transformation xf1, const DistanceProxy &amp;proxy2, Transformation xf2)</arglist>
    </member>
    <member kind="function">
      <type>SeparationInfo</type>
      <name>GetMaxSeparation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3486ba5050c32c4a72fbaf0bcf6a17de</anchor>
      <arglist>(const DistanceProxy &amp;proxy1, Transformation xf1, const DistanceProxy &amp;proxy2, Transformation xf2, Length stop)</arglist>
    </member>
    <member kind="function">
      <type>SeparationInfo</type>
      <name>GetMaxSeparation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a34f0c915ede8384f426009fe246d2db4</anchor>
      <arglist>(const DistanceProxy &amp;proxy1, const DistanceProxy &amp;proxy2, Length stop=MaxFloat *Meter)</arglist>
    </member>
    <member kind="function">
      <type>IndexPair3</type>
      <name>GetIndexPairs</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a70613779e152f647af4f80dce352d83c</anchor>
      <arglist>(const SimplexEdges &amp;collection) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>CalcSearchDirection</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8eafa8c052954d863e81d00251d51194</anchor>
      <arglist>(const SimplexEdges &amp;simplexEdges) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetScaledDelta</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9695b1513472b0c245d4f98b97090efd</anchor>
      <arglist>(const Simplex &amp;simplex, Simplex::size_type index)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length2</type>
      <name>GetClosestPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af47d53841069d289b59d6de41551f45c</anchor>
      <arglist>(const Simplex &amp;simplex)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length2</type>
      <name>GetPointDelta</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aec59914613f2974127f04b9eca11ae27</anchor>
      <arglist>(const SimplexEdge &amp;sv) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa893e8793d5802697a38d73e4939834d</anchor>
      <arglist>(const SimplexEdge &amp;lhs, const SimplexEdge &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af4e2940f5d62d022276ae74c8b8eab7c</anchor>
      <arglist>(const SimplexEdge &amp;lhs, const SimplexEdge &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TOIOutput</type>
      <name>GetToiViaSat</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad3851d0c3b764c9fe4dbaad8268ea201</anchor>
      <arglist>(const DistanceProxy &amp;proxyA, const Sweep &amp;sweepA, const DistanceProxy &amp;proxyB, const Sweep &amp;sweepB, ToiConf conf=GetDefaultToiConf())</arglist>
    </member>
    <member kind="function">
      <type>WorldManifold</type>
      <name>GetWorldManifold</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a54c453e054f0b9692dc3300e5861f42c</anchor>
      <arglist>(const Manifold &amp;manifold, Transformation xfA, Length radiusA, Transformation xfB, Length radiusB)</arglist>
    </member>
    <member kind="function">
      <type>WorldManifold</type>
      <name>GetWorldManifold</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a53c028875bbee1fffcd3fc497bee2dc5</anchor>
      <arglist>(const World &amp;world, const Contact &amp;contact, const Manifold &amp;manifold)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4e08ccbbdba321adad44c940d95c52fb</anchor>
      <arglist>(const Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4442cd95fcdc4e62463d3e294fc7a303</anchor>
      <arglist>(const Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration &amp;</type>
      <name>operator*=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a381123f80f2c54ad37576e703eeb68a4</anchor>
      <arglist>(Acceleration &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration &amp;</type>
      <name>operator/=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a80f242d8a02779e3c73ebb380a7476c1</anchor>
      <arglist>(Acceleration &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration &amp;</type>
      <name>operator+=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aae7afb9157770b54dde00ee05cc3f586</anchor>
      <arglist>(Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af1ae3bcd38f85eedaab9cfb290de1ba2</anchor>
      <arglist>(const Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration &amp;</type>
      <name>operator-=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a66e903f6e66753963a1bd82295759ddb</anchor>
      <arglist>(Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af4082a55e3d2a0600855a5b626f19f41</anchor>
      <arglist>(const Acceleration &amp;lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af2f8aaffda4163a6733ef5aff24414e0</anchor>
      <arglist>(const Acceleration &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a33f1fdc4c279009a88f064ca1dd3ff59</anchor>
      <arglist>(const Acceleration &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a69bd254b1dac7999ffb0d0a8cb73f64e</anchor>
      <arglist>(const Acceleration &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a19e063d352181298469b751c99cad684</anchor>
      <arglist>(const Real lhs, const Acceleration &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Acceleration</type>
      <name>operator/</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9b895b5b826bc5349fbd007bd6e9683b</anchor>
      <arglist>(const Acceleration &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity2</type>
      <name>GetContactRelVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0ec0d91d72476f3b381c5a3aee92ec21</anchor>
      <arglist>(const Velocity velA, const Length2 relA, const Velocity velB, const Length2 relB) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vec2</type>
      <name>GetVec2</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8d6ed75d97525ecd8b9e086a1b1b7d93</anchor>
      <arglist>(const UnitVec value)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngle</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ade290c2d810216ce9b13924b10e748cd</anchor>
      <arglist>(const UnitVec value)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngle</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a01ec0848cea0c5b1730736cd1b75b156</anchor>
      <arglist>(const Transformation &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector2&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5dd45608f0f773f837e0d861a5d40f92</anchor>
      <arglist>(CheckedValue&lt; T, U &gt; s, UnitVec u) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector2&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6ad19020aa321607991e6968821cc7bf</anchor>
      <arglist>(const T s, const UnitVec u) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector2&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af82924285af9fb3b8310cc0db87e7af1</anchor>
      <arglist>(UnitVec u, CheckedValue&lt; T, U &gt; s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector2&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6388baa7edd4c123f1a4fe64781ac67f</anchor>
      <arglist>(const UnitVec u, const T s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vec2</type>
      <name>operator/</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa76933551e3e30127f996b6fde9c6a43</anchor>
      <arglist>(const UnitVec u, const UnitVec::value_type s) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Rotate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae66614a0b733ce9092928e3b30f16cfe</anchor>
      <arglist>(const Vector2&lt; T &gt; vector, const UnitVec &amp;angle) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>InverseRotate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2e0aebd6a2aa7682a091698b5012df16</anchor>
      <arglist>(const Vector2&lt; T &gt; vector, const UnitVec &amp;angle) noexcept</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetUnitVector</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8286b06c48b4fc12a5addb7cc3528b07</anchor>
      <arglist>(Vector2&lt; T &gt; value, UnitVec fallback=UnitVec::GetDefaultFallback())</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>GetNormalized</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5955bf7b1c0cdfa36d11adea236d9af4</anchor>
      <arglist>(const Position &amp;val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Sweep</type>
      <name>GetNormalized</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a09b21383c1a73afea37f11e0ba906a76</anchor>
      <arglist>(Sweep sweep) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length2</type>
      <name>Transform</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acd968f8e09dbaf5c00467e6149d1ffc1</anchor>
      <arglist>(const Length2 v, const Transformation xfm) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length2</type>
      <name>InverseTransform</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8e23993b858f2137ae78dc5f1025da42</anchor>
      <arglist>(const Length2 v, const Transformation xfm) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Transformation</type>
      <name>Mul</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2ee12b6e0f384806e2dbb27a90a6cd7f</anchor>
      <arglist>(const Transformation &amp;A, const Transformation &amp;B) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Transformation</type>
      <name>MulT</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad9854545199d1abb2a6521895bf63831</anchor>
      <arglist>(const Transformation &amp;A, const Transformation &amp;B) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Transformation</type>
      <name>GetTransformation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7470c7f509ec02d51adcc2e96a37d2fe</anchor>
      <arglist>(const Length2 ctr, const UnitVec rot, const Length2 localCtr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Transformation</type>
      <name>GetTransformation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acfafb2a85ece528e8bf2a7a46a9c1612</anchor>
      <arglist>(const Position pos, const Length2 local_ctr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Transformation</type>
      <name>GetTransformation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a42dd24b646d220e52b8cb79f0d8cd50d</anchor>
      <arglist>(const Sweep &amp;sweep, const Real beta) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Transformation</type>
      <name>GetTransform0</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8128f59808ffb8ab56cc4d9528422b16</anchor>
      <arglist>(const Sweep &amp;sweep) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Transformation</type>
      <name>GetTransform1</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3047f53ab4e594f414832db427f03d6c</anchor>
      <arglist>(const Sweep &amp;sweep) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsUnderActive</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9be9a0a2f7a01c1e06d84cd092778883</anchor>
      <arglist>(Velocity velocity, LinearVelocity linSleepTol, AngularVelocity angSleepTol) noexcept</arglist>
    </member>
    <member kind="function">
      <type>InvMass</type>
      <name>GetEffectiveInvMass</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac9b46924bad23425a7abd1eb39f28451</anchor>
      <arglist>(const InvRotInertia invRotI, const Length2 p, const UnitVec q)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetReflectionMatrix</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae12dde8e8ddf2de54e6b4fb63ddf9778</anchor>
      <arglist>(UnitVec axis)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5e0589100dc43e1301d6b8b945ccb37c</anchor>
      <arglist>(const Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a920e4ebf45a599f01060d56b280adc74</anchor>
      <arglist>(const Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Position</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acf4c47e7d8cba3a76dcdc9fa4b79d242</anchor>
      <arglist>(const Position &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Position</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8e75f2489f1991855f31108826613c6f</anchor>
      <arglist>(const Position &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Position &amp;</type>
      <name>operator+=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adad2c25d2579c31f2091a842e17fa2c3</anchor>
      <arglist>(Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Position</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adc427276624c31301f4d2c3c202497d8</anchor>
      <arglist>(const Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Position &amp;</type>
      <name>operator-=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3f8a057d7496ce6e5c72debd2361de5c</anchor>
      <arglist>(Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Position</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab4a62d780748e8a22c6fe64234f6d121</anchor>
      <arglist>(const Position &amp;lhs, const Position &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Position</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af31710833f717897050fa1e9981ebb95</anchor>
      <arglist>(const Position &amp;pos, const Real scalar)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Position</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab6cbd956958f8a1cd6726ad4e0cf2e43</anchor>
      <arglist>(const Real scalar, const Position &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Position</type>
      <name>GetPosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aaf9f3a11a5c60b5832946d9fb0a43164</anchor>
      <arglist>(const Position pos0, const Position pos1, const Real beta) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af317b3462727e3832e11d157b7e0b7b4</anchor>
      <arglist>(const Sweep &amp;lhs, const Sweep &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af0f08a3cbef074f5f78272c205967888</anchor>
      <arglist>(const Sweep &amp;lhs, const Sweep &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9f366fc4f9a298d3dded719b628a9933</anchor>
      <arglist>(const Transformation &amp;lhs, const Transformation &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac100cc2e77031bd058367006ddd2ebe1</anchor>
      <arglist>(const Transformation &amp;lhs, const Transformation &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length2</type>
      <name>GetLocation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad3978702132a5caf87ad3cbec808b116</anchor>
      <arglist>(const Transformation &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec</type>
      <name>GetDirection</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a850723b278d7e003b0be5f2c0f7435f1</anchor>
      <arglist>(const Transformation &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec</type>
      <name>GetXAxis</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab54e46ffcc4d47cab7dc7194690357c0</anchor>
      <arglist>(UnitVec rot) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec</type>
      <name>GetYAxis</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa30dcf70f9f07cbfd26e897823a43948</anchor>
      <arglist>(UnitVec rot) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad33b69f10a83f25ec56a520ecdaf5197</anchor>
      <arglist>(const UnitVec a, const UnitVec b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a80895a6660b816171be5198f566cd867</anchor>
      <arglist>(const UnitVec a, const UnitVec b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec</type>
      <name>GetRevPerpendicular</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae4e2af42e9c6e9d5413f99eb0da246fd</anchor>
      <arglist>(const UnitVec vector) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec</type>
      <name>GetFwdPerpendicular</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a349428868dd3c61bdd24052f7d809472</anchor>
      <arglist>(const UnitVec vector) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec</type>
      <name>Rotate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>add59f66b3f4a79e797c378f516bada81</anchor>
      <arglist>(const UnitVec vector, const UnitVec &amp;angle) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec</type>
      <name>InverseRotate</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0822c6471a0683d126eb36acc0b69bab</anchor>
      <arglist>(const UnitVec vector, const UnitVec &amp;angle) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec::value_type</type>
      <name>get</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7f255d17276c91c754f80427ab5b0fe5</anchor>
      <arglist>(UnitVec v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec::value_type</type>
      <name>get&lt; 0 &gt;</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a121348e66a018e39470850e228a32325</anchor>
      <arglist>(UnitVec v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr UnitVec::value_type</type>
      <name>get&lt; 1 &gt;</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a67bf6af0b317839a31e92ef6d6f5ba52</anchor>
      <arglist>(UnitVec v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4f49bd881fdc6418565529a072b91d54</anchor>
      <arglist>(::std::ostream &amp;os, const UnitVec &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Velocity</type>
      <name>Cap</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3d2551fe26d1aa448d4d4b337e5aa66c</anchor>
      <arglist>(Velocity velocity, Time h, const MovementConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afe4f2bcd98877c4562293dfe2dbcfa8b</anchor>
      <arglist>(const Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a50aa6c2021393ced745d056c34b3bc07</anchor>
      <arglist>(const Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity &amp;</type>
      <name>operator*=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7083f8551c8713a94d38f614a7ebc3b5</anchor>
      <arglist>(Velocity &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity &amp;</type>
      <name>operator/=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afafe86dc357999a8933a71f73dcce818</anchor>
      <arglist>(Velocity &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity &amp;</type>
      <name>operator+=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3be07a7714bf76d380af60fa8ef623d3</anchor>
      <arglist>(Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7608d9d4b5ffcc571a17bacf9faa411e</anchor>
      <arglist>(const Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity &amp;</type>
      <name>operator-=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad2577d7502ee2442b81d0e6570c00d6f</anchor>
      <arglist>(Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab2f3370383aaf9a8443cacef7841c5a0</anchor>
      <arglist>(const Velocity &amp;lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab9cbc07fb71929600cae9ef2f69e35ac</anchor>
      <arglist>(const Velocity &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acf1a262569fd1d300ef359200d514d6a</anchor>
      <arglist>(const Velocity &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5d52ed09352bfd1dd80dc6b138a19f55</anchor>
      <arglist>(const Velocity &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity</type>
      <name>operator*</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a285d8d7bdef58a4c7210516b1060beef</anchor>
      <arglist>(const Real lhs, const Velocity &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Velocity</type>
      <name>operator/</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aec5f4967a3c7e58ccf6c9fb4aafa90a1</anchor>
      <arglist>(const Velocity &amp;lhs, const Real rhs)</arglist>
    </member>
    <member kind="function">
      <type>Velocity</type>
      <name>GetVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab873f18f1e540da43881e7f2dadeb7b1</anchor>
      <arglist>(const Body &amp;body, Time h) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyLinearImpulse</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a07f50b8133debf454d50f491d196dc24</anchor>
      <arglist>(Body &amp;body, Momentum2 impulse, Length2 point) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyAngularImpulse</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5d1467095e23488ca1344a26336aae8f</anchor>
      <arglist>(Body &amp;body, AngularMomentum impulse) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2e61d578b8ec391d98178299024b5c4f</anchor>
      <arglist>(const Body &amp;lhs, const Body &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>BodyType</type>
      <name>GetType</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a421d2110404320428fd02b2d0b70a062</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetType</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2a12afea1828cb69ef94cbfa86018069</anchor>
      <arglist>(Body &amp;body, BodyType value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSpeedable</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a81c7a4d7696e9cb367f241afdbbe2727</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAccelerable</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad1f05a05c6dd9eb2a1564cc10032f16c</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsImpenetrable</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8c4170f49badbf1881f371cfb5f466a7</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetImpenetrable</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aaf57ca63655e6eaeac4d9e65a8e7be4a</anchor>
      <arglist>(Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetImpenetrable</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2ba4e5cbd12444be971a3ef0a09e9931</anchor>
      <arglist>(Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSleepingAllowed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1cde4db895479e9ddd34c70425811699</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSleepingAllowed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a54802d32ec837cdf5669744c20dca3df</anchor>
      <arglist>(Body &amp;body, bool value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab930c47cedb9dc4fe0d6e178e7651d54</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abfae76ec0240c61e85bed996119d130e</anchor>
      <arglist>(Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5f8f4bd2d2daa7bbd38dbe9b0919f08e</anchor>
      <arglist>(Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a88826de33b9ad1fe847120458fe3a836</anchor>
      <arglist>(Body &amp;body, bool value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAwake</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a139df81757401545db36e6fc6f030d75</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAwake</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a60201ffd45e0d810ff5d4fb90fd0bc4b</anchor>
      <arglist>(Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetAwake</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afce7db62d828a84a94e8c6222d9111a6</anchor>
      <arglist>(Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Transformation</type>
      <name>GetTransformation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6a06b90c7f93f0e33be41db39562af4d</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTransformation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af681bc41595979454a24df12369e97a9</anchor>
      <arglist>(Body &amp;body, Transformation value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8a6f694cab71d0db91049dc0908de63f</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Sweep &amp;</type>
      <name>GetSweep</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a83c03ab97ee5e1a0cdb1a41a62050ccc</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSweep</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1f30cb6266cb2f950ea5fdb5aae58d1b</anchor>
      <arglist>(Body &amp;body, const Sweep &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>GetPosition1</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a77de45b3fab735d0f87a0978a622a9c0</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngle</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a93f21ae0c92245d912cb91a99e756946</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetWorldCenter</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1d38f917cdf715b50222fe39fe1a22c3</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalCenter</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8d99adba0a8c68b083bb765ef9f1c1f0</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>GetPosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1ee2be09f607ec37050c91dc3a5d0f92</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Time</type>
      <name>GetUnderActiveTime</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1192c89bb1512e70b1fb878c1b29a452</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsFixedRotation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a91940e85abf08596f625348315452e3d</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFixedRotation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a546de4c838854e1d2bee174a4cf264e5</anchor>
      <arglist>(Body &amp;body, bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMassDataDirty</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af3540987384e881f23e28f5a9c710ae1</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>InvMass</type>
      <name>GetInvMass</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a628126b03bd99f5df5f08a047692b9da</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>InvRotInertia</type>
      <name>GetInvRotInertia</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af4fac5901e03845d72a94de4e7bb92d0</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Frequency</type>
      <name>GetLinearDamping</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aada2f9ed5beeb4a88ec917bf1c7d70df</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLinearDamping</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9901b5b3ddb898a60f216007adace0de</anchor>
      <arglist>(Body &amp;body, NonNegative&lt; Frequency &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Frequency</type>
      <name>GetAngularDamping</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abf0e49b67ddcd89f15a4224e0acf10a3</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngularDamping</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a344a9753e8cd6fb046a57e82d2206d60</anchor>
      <arglist>(Body &amp;body, NonNegative&lt; Frequency &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Acceleration</type>
      <name>GetAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acafaac4ef15f7416f464dff9b19780fa</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a438e172db303ae0ab53263bc6af419ad</anchor>
      <arglist>(Body &amp;body, Acceleration value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearAcceleration2</type>
      <name>GetLinearAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aef76fc5d7813af886e28e8033e9d019d</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AngularAcceleration</type>
      <name>GetAngularAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a986b11edba421b23879fa363c557f1e5</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Awaken</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4834708af29bcc9ae39ebfc2b9f580f6</anchor>
      <arglist>(Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Unawaken</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abdfbff06306e4ecb71f6d4b2136eea7c</anchor>
      <arglist>(Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Mass</type>
      <name>GetMass</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3c355eb58981b97e5901fa7d04052507</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMass</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af26ae548ac842dfc9c1da2230b224870</anchor>
      <arglist>(Body &amp;body, Mass mass)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aeb983c0ee834bdbf4f969e6bd23be27e</anchor>
      <arglist>(Body &amp;body, LinearAcceleration2 linear, AngularAcceleration angular) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2e3e03457d4d04d1aa19e5f850caee4a</anchor>
      <arglist>(Body &amp;body, LinearAcceleration2 value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5907db10db49a1e6d7f8b8bc59dfa8e8</anchor>
      <arglist>(Body &amp;body, AngularAcceleration value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RotInertia</type>
      <name>GetRotInertia</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4c4c855f042444d0122919f8c1559ccb</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RotInertia</type>
      <name>GetLocalRotInertia</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>accc0736257251f381353661320af972e</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Velocity</type>
      <name>GetVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a13ee26a73a0987dbb7c825539590719d</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adddd763be5890fad18f5a3dd9d2b4d38</anchor>
      <arglist>(Body &amp;body, const Velocity &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity2</type>
      <name>GetLinearVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3802163b90f631b001eaa0201be419c9</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetAngularVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a306635dbd11f92ad1020a386fce7b7c2</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0ed659e8f39ec9b4215123dc0a2b8581</anchor>
      <arglist>(Body &amp;body, LinearVelocity2 value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adc771e5dfb30f44b8b71f15cd9e5f950</anchor>
      <arglist>(Body &amp;body, AngularVelocity value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetWorldPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abdbcfc8a43696b1e7136db073fbe09ad</anchor>
      <arglist>(const Body &amp;body, const Length2 localPoint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetWorldVector</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0ccc8fe53ed54beba80db7046ab8ddf0</anchor>
      <arglist>(const Body &amp;body, const Length2 localVector) noexcept</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetWorldVector</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7544d24c890820e7f5a6d355c0ad4406</anchor>
      <arglist>(const Body &amp;body, const UnitVec localVector) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab029ce2fdf891e9d4a5705e2c4e0564a</anchor>
      <arglist>(const Body &amp;body, const Length2 worldPoint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetLocalVector</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a560083bf40b9f3936b549e841d8338ba</anchor>
      <arglist>(const Body &amp;body, const UnitVec uv) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity2</type>
      <name>GetLinearVelocityFromWorldPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab7217cc5275bc5d8c2f2407ee20fb958</anchor>
      <arglist>(const Body &amp;body, const Length2 worldPoint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity2</type>
      <name>GetLinearVelocityFromLocalPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a47196aab3f4386da954b565a6a0fce7c</anchor>
      <arglist>(const Body &amp;body, const Length2 localPoint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Force2</type>
      <name>GetForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a82eaa61b6bddf682fe315f09830e2bfc</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Torque</type>
      <name>GetTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a18e2ece8e057b22c240cf681aca400b5</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad57faa5642b6526d57f2f066cb74c3a9</anchor>
      <arglist>(const Body &amp;lhs, const Body &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>BodyConf</type>
      <name>GetBodyConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0e940544a56fe840424f880106fcd842</anchor>
      <arglist>(const Body &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Transformation</type>
      <name>GetTransformation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a178733ef87c116856614750d49785cd5</anchor>
      <arglist>(const BodyConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyConf</type>
      <name>GetDefaultBodyConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af6c1034a2366e6ef466253aea8a13829</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Angle</type>
      <name>GetAngle</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aad6493c0704a18da5f611717a6aff844</anchor>
      <arglist>(const BodyConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0106f5ff990330d8e8afcd906cefa75a</anchor>
      <arglist>(const BodyConf &amp;lhs, const BodyConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a50e186f203ad0d5f7c851058802978fd</anchor>
      <arglist>(const BodyConf &amp;lhs, const BodyConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ContactImpulsesList</type>
      <name>GetContactImpulses</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3952e6392470f39a6236a5d144df88fe</anchor>
      <arglist>(const VelocityConstraint &amp;vc)</arglist>
    </member>
    <member kind="function">
      <type>Momentum</type>
      <name>GetMaxNormalImpulse</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a07f0d8f5fce9556590d8e7e40289ae33</anchor>
      <arglist>(const ContactImpulsesList &amp;impulses) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyConstraint</type>
      <name>GetBodyConstraint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9ef1dfe4410cde28beb3f03e2ef368f4</anchor>
      <arglist>(const Body &amp;body, Time time, MovementConf conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>GetBodyA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a22da41d3ff9c82d608633673612b8821</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>GetBodyB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a232909af8c24e7a01804a0278c6cfef0</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>FixtureID</type>
      <name>GetFixtureA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a71b1470647c9973caf24c8d5ac40b009</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>FixtureID</type>
      <name>GetFixtureB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ace25c4282f503f8529992e268aad8494</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetChildIndexA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afb78a950ed55c8058f6beffd7b26a180</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetChildIndexB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abf62df2b59a399644e24938289aa3dd1</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsImpenetrable</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aae0a081f37037b2a2efb245676ace55b</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsActive</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a679c4d673a6ea2890e0d39a7b6fdb0f7</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7bd725e3bea38730e3dc56b76bf320ad</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1890684cdc24a786e5e703c2632dbd90</anchor>
      <arglist>(Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae8a8d53322edf3aac6d2ca2e2af1d694</anchor>
      <arglist>(Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsTouching</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac70b242a3771bc7c98861f09c13685e4</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSensor</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae84693232344232e2644fdf1fef53ab1</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetToiCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae72fc7cccfb35eb5f62fc8b68a52a899</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>NeedsFiltering</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aeb26e3b4f404e518ab43f5bb375044f3</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>NeedsUpdating</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa8a1257667c2de5ef78011edb9b207bc</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>HasValidToi</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad1892c3cba1a2956c9b812b72c704793</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetToi</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a81d39ed1266907d4ef7cb7ebff3fd83b</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetFriction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a04c2f4be0c031a46f8bc9a19f6493519</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFriction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7650ec005ac318672148b287439f5adc</anchor>
      <arglist>(Contact &amp;contact, Real value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetRestitution</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac09b3622eb7578b84fed79b5c60a8963</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRestitution</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0ae0edd25827c1833828e25242fa98b3</anchor>
      <arglist>(Contact &amp;contact, Real value)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetTangentSpeed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a992dda5a24ab09ad4f58e854e96eff16</anchor>
      <arglist>(const Contact &amp;contact) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTangentSpeed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a261c046785888f14c36e0b2758e05619</anchor>
      <arglist>(Contact &amp;contact, LinearVelocity value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PositionSolution</type>
      <name>operator+</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acd873bc71022ae60b8dc92a2a4ab74db</anchor>
      <arglist>(PositionSolution lhs, PositionSolution rhs)</arglist>
    </member>
    <member kind="function">
      <type>PositionSolution</type>
      <name>operator-</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad2efb6e040dc5597f0bd9c7deb1761ea</anchor>
      <arglist>(PositionSolution lhs, PositionSolution rhs)</arglist>
    </member>
    <member kind="function">
      <type>ContactID</type>
      <name>GetContactPtr</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac3ce79c7015dd7e600dfff478d1277ec</anchor>
      <arglist>(KeyedContactPtr value)</arglist>
    </member>
    <member kind="function">
      <type>PositionSolverManifold</type>
      <name>GetPSM</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa9987f7f8471dbe26d486e2602661e78</anchor>
      <arglist>(const Manifold &amp;manifold, Manifold::size_type index, const Transformation &amp;xfA, const Transformation &amp;xfB)</arglist>
    </member>
    <member kind="function">
      <type>VelocityConstraint::Conf</type>
      <name>GetRegVelocityConstraintConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3be2a456143f7f1db48944c54ece5f7d</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>VelocityConstraint::Conf</type>
      <name>GetToiVelocityConstraintConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad85899bcfb7e549fe5739759da490fad</anchor>
      <arglist>(const StepConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetNormal</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a505e0ba1aa4e4cdef90f4726d8f8c866</anchor>
      <arglist>(const VelocityConstraint &amp;vc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetTangent</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a12eb87f33057fe3f442b0ec676377957</anchor>
      <arglist>(const VelocityConstraint &amp;vc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetPointRelPosA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a68cc03f13897094111403a1ac4a049c8</anchor>
      <arglist>(const VelocityConstraint &amp;vc, VelocityConstraint::size_type index)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetPointRelPosB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6ee37ce310f1b1c648d9839a484c029a</anchor>
      <arglist>(const VelocityConstraint &amp;vc, VelocityConstraint::size_type index)</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity</type>
      <name>GetVelocityBiasAtPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad29f5f0f1292fa56396d8ed8cbbd1817</anchor>
      <arglist>(const VelocityConstraint &amp;vc, VelocityConstraint::size_type index)</arglist>
    </member>
    <member kind="function">
      <type>Mass</type>
      <name>GetNormalMassAtPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aaf5dd1d8868baa0e0cea2cf19b39cb95</anchor>
      <arglist>(const VelocityConstraint &amp;vc, VelocityConstraint::size_type index)</arglist>
    </member>
    <member kind="function">
      <type>Mass</type>
      <name>GetTangentMassAtPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4e72bcca6e5c6a3f0386f9fa2127f41d</anchor>
      <arglist>(const VelocityConstraint &amp;vc, VelocityConstraint::size_type index)</arglist>
    </member>
    <member kind="function">
      <type>Momentum</type>
      <name>GetNormalImpulseAtPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a238cff049e361d27dcb889d50ea67613</anchor>
      <arglist>(const VelocityConstraint &amp;vc, VelocityConstraint::size_type index)</arglist>
    </member>
    <member kind="function">
      <type>Momentum</type>
      <name>GetTangentImpulseAtPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0b3e102432766123da35ec35f806d6f8</anchor>
      <arglist>(const VelocityConstraint &amp;vc, VelocityConstraint::size_type index)</arglist>
    </member>
    <member kind="function">
      <type>Momentum2</type>
      <name>GetNormalImpulses</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4145b0ae4d099402770893bffc3ed4aa</anchor>
      <arglist>(const VelocityConstraint &amp;vc)</arglist>
    </member>
    <member kind="function">
      <type>Momentum2</type>
      <name>GetTangentImpulses</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a998e3c3312725cd900878cf71f2cf6e5</anchor>
      <arglist>(const VelocityConstraint &amp;vc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNormalImpulseAtPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae7f7d7dbe5e33cfbb08cdb9190ea8f8b</anchor>
      <arglist>(VelocityConstraint &amp;vc, VelocityConstraint::size_type index, Momentum value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTangentImpulseAtPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3736992d15f28f25f8e02fc17e5e3e27</anchor>
      <arglist>(VelocityConstraint &amp;vc, VelocityConstraint::size_type index, Momentum value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNormalImpulses</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acfa6dcc6594d84f26af4630c98f010eb</anchor>
      <arglist>(VelocityConstraint &amp;vc, const Momentum2 impulses)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTangentImpulses</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a98c5ded56d446e057ba2fcb92760358a</anchor>
      <arglist>(VelocityConstraint &amp;vc, const Momentum2 impulses)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetDefaultFriction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6e6f412c2af9722fd3bc32527459feba</anchor>
      <arglist>(const FixtureConf &amp;fixtureA, const FixtureConf &amp;fixtureB)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetDefaultRestitution</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab39f3148c511e1a82d6d23701423da43</anchor>
      <arglist>(const FixtureConf &amp;fixtureA, const FixtureConf &amp;fixtureB)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa2bccb8a9f96f9ef20bfc0c27cd12a25</anchor>
      <arglist>(const FixtureConf &amp;lhs, const FixtureConf &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aef63403acbb62366a22771e25f15a449</anchor>
      <arglist>(const FixtureConf &amp;lhs, const FixtureConf &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>GetBody</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae05325dba34e8b95a635dce75de1f384</anchor>
      <arglist>(const FixtureConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Shape &amp;</type>
      <name>GetShape</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a219930e7c3bdda61101c8dfaef585df9</anchor>
      <arglist>(const FixtureConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; AreaDensity &gt;</type>
      <name>GetDensity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5878e137ad334d88e3070c30de9da341</anchor>
      <arglist>(const FixtureConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetFriction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2ffa79efc13ccd989e1957480f0a920c</anchor>
      <arglist>(const FixtureConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetRestitution</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5f4b19f147e62dd01f2f2cd6bc201df0</anchor>
      <arglist>(const FixtureConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSensor</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6831c65fd153acc5c4938f9249537126</anchor>
      <arglist>(const FixtureConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSensor</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a65d348a372259f54db6e183244fdf6b2</anchor>
      <arglist>(FixtureConf &amp;conf, bool value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Filter</type>
      <name>GetFilterData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad6cb511ceee3aa66e8439d1aec080b7b</anchor>
      <arglist>(const FixtureConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFilterData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6915c94247e90e0fb4ec9948ab979851</anchor>
      <arglist>(FixtureConf &amp;conf, Filter value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ShouldCollide</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aab1cd6287bdc232e5d97c01a12b71c3c</anchor>
      <arglist>(const FixtureConf &amp;fixtureA, const FixtureConf &amp;fixtureB) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reserve</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a664acb63c47699be5fb3eb03201ecddc</anchor>
      <arglist>(Island &amp;island, BodyCounter bodies, ContactCounter contacts, JointCounter joints)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aacc77212a4102b2b298af7a5cc1be392</anchor>
      <arglist>(Island &amp;island) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>Count</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3063d5a0619a13b6a4e9c7dd682d2b8c</anchor>
      <arglist>(const Island &amp;island, BodyID entry)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>Count</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aacd06d34c7670daf163be95cded7b12f</anchor>
      <arglist>(const Island &amp;island, ContactID entry)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>Count</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a12ca0d1652e526ef8a5829a386056f3f</anchor>
      <arglist>(const Island &amp;island, JointID entry)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsFullOfBodies</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad81cfb61a8aae11d28836a542584dd7f</anchor>
      <arglist>(const Island &amp;island)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsFullOfContacts</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0613fe306ae99ce5ca98798c757a3dc2</anchor>
      <arglist>(const Island &amp;island)</arglist>
    </member>
    <member kind="function">
      <type>DistanceJointConf</type>
      <name>GetDistanceJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8ae635b1541038f25f4b61c94b4328a8</anchor>
      <arglist>(const Joint &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>DistanceJointConf</type>
      <name>GetDistanceJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6809a5b4f9ba4ad7957553a329fe1994</anchor>
      <arglist>(const World &amp;world, BodyID bodyA, BodyID bodyB, Length2 anchorA=Length2{}, Length2 anchorB=Length2{})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af55559c8bf6c930582040cf3321b691f</anchor>
      <arglist>(DistanceJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a657f69a1e69282dd357d92926b766211</anchor>
      <arglist>(DistanceJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2c85157ff9400e7126ef9959f062b347</anchor>
      <arglist>(const DistanceJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a35315499cf67026c7d8d7613477023cd</anchor>
      <arglist>(const DistanceJointConf &amp;lhs, const DistanceJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae758c3a2894c69fe0dc10e62d6b50c16</anchor>
      <arglist>(const DistanceJointConf &amp;lhs, const DistanceJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a262919449fdc976d24c1b57d5f764610</anchor>
      <arglist>(const DistanceJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af7938377c565a183168613b640e651e8</anchor>
      <arglist>(const DistanceJointConf &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1086ac024e4e129259c3c1b4f7c5a6c4</anchor>
      <arglist>(DistanceJointConf &amp;, Length2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetFrequency</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae0cc3578e6f724a74d45e9cfc02d412d</anchor>
      <arglist>(DistanceJointConf &amp;object, NonNegative&lt; Frequency &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetDampingRatio</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1f9a4e32b7ca3e69527dca3e2793e1ba</anchor>
      <arglist>(DistanceJointConf &amp;object, Real value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLength</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9d8e5d2ecc10f965faa16f74ade58628</anchor>
      <arglist>(const DistanceJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetLength</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abf156111fddecc740c68f7dbcdaf7ba0</anchor>
      <arglist>(DistanceJointConf &amp;object, Length value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>FrictionJointConf</type>
      <name>GetFrictionJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6803b46a1d73db03f4a26515460c4880</anchor>
      <arglist>(const Joint &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>FrictionJointConf</type>
      <name>GetFrictionJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a35e8c4e6880befb1f81a4caa3b7914eb</anchor>
      <arglist>(const World &amp;world, BodyID bodyA, BodyID bodyB, Length2 anchor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa1ee93d27169ffa7e1c194081f1ba5a2</anchor>
      <arglist>(FrictionJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a01d1ba8983bfece5db0f72889182169c</anchor>
      <arglist>(FrictionJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad8557c8dfa18bd290b35163d5cf86eba</anchor>
      <arglist>(const FrictionJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a194fd21d14647aedddc772f5871295ae</anchor>
      <arglist>(const FrictionJointConf &amp;lhs, const FrictionJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a45ea8b96cd57e4d21f2191d6a832f814</anchor>
      <arglist>(const FrictionJointConf &amp;lhs, const FrictionJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a91ac3d07e13f9277632001e8f02de54f</anchor>
      <arglist>(const FrictionJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ade895bb6a4e1b45bc803784534f2ffb2</anchor>
      <arglist>(const FrictionJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a110d0d6a089b3b8883e1f319984774fb</anchor>
      <arglist>(FrictionJointConf &amp;, Length2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetMaxForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aba8162d50c28927d87bdf7e29aa8afe0</anchor>
      <arglist>(const FrictionJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetMaxForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afa6324a364b2b89057a749a5032ff720</anchor>
      <arglist>(FrictionJointConf &amp;object, NonNegative&lt; Force &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetMaxTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a00b4cc40afea7be207a08ad7c018f3c1</anchor>
      <arglist>(const FrictionJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetMaxTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acfc7a47e907d3aaf399a7919896f3571</anchor>
      <arglist>(FrictionJointConf &amp;object, NonNegative&lt; Torque &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>GearJointConf</type>
      <name>GetGearJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acfe71a7206e29118d5fc491c30470272</anchor>
      <arglist>(const Joint &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>GearJointConf</type>
      <name>GetGearJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2e2f7487e6bca2b26a9dc6779a9bc72b</anchor>
      <arglist>(const World &amp;world, JointID id1, JointID id2, Real ratio=Real{1})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad4f27859af3d0b4d13db6f8cc531c92b</anchor>
      <arglist>(GearJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a69fd9db8bd9050f4f34c3932bc5c1f6b</anchor>
      <arglist>(GearJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5e4a317737862143d7fe7cb241f4a213</anchor>
      <arglist>(const GearJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abf8d004c9a5fca4f9d757e31164db5f0</anchor>
      <arglist>(const GearJointConf &amp;lhs, const GearJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae908913a1c7e55a8431fa73b79c03ff5</anchor>
      <arglist>(const GearJointConf &amp;lhs, const GearJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aef9ee799e4e668610deb9199d0848153</anchor>
      <arglist>(const GearJointConf &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>constexpr AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af2ce467ab8d8f56bd0cf232fd554e58b</anchor>
      <arglist>(const GearJointConf &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a086d21b8f77c0782aaaaee20a89aee6c</anchor>
      <arglist>(GearJointConf &amp;, Length2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetRatio</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad6bb4ee45a731f7095f5c052f16e15c0</anchor>
      <arglist>(const GearJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetRatio</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0561c70cfa90284d65bba0a3f59cb62a</anchor>
      <arglist>(GearJointConf &amp;object, Real value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetConstant</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac71c6757a2460462d539185069dd9c4c</anchor>
      <arglist>(const GearJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetType1</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae6d9a2fadb19711e6a7dba77fc7c1b6d</anchor>
      <arglist>(const GearJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetType2</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7bdfada30a9ccbb76361f8554034da92</anchor>
      <arglist>(const GearJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyConstraint &amp;</type>
      <name>At</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a344ffe5766a20bea9c69eaeae76f0907</anchor>
      <arglist>(std::vector&lt; BodyConstraint &gt; &amp;container, BodyID key)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalAnchorA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a93ffc7c5314aab54f2655159b34412d4</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalAnchorB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac5f4ede3e6df197f89bcff22331feb1f</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9d1898f619ead98398df5bfedae7babe</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7ed1d7a8f54847819b04cf02a47c658e</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetReferenceAngle</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae15b18e1e52dfb2a3a2c093bf5c6cb3e</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetLocalXAxisA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a03a1ac31d6ec2e9713730ebdd3450000</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetLocalYAxisA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abf6c43ab585a2f186d301991199e451d</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetMotorSpeed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a56bbd2633ddd1ac1a15ac718e9f27a3a</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMotorSpeed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7baeaf66a5496fad0d16eb1b28823f47</anchor>
      <arglist>(Joint &amp;object, AngularVelocity value)</arglist>
    </member>
    <member kind="function">
      <type>RotInertia</type>
      <name>GetAngularMass</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad342577d3c27c31a3c5c474b3c8d071a</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Force</type>
      <name>GetMaxForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9d3364c84b46f1f28b1af86e05f83e83</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Torque</type>
      <name>GetMaxTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae39bc1b87b949e8ddc966335bf526c9e</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Force</type>
      <name>GetMaxMotorForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac6c441699c9682957b71d30ec512c920</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMaxMotorForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae9cea0c1cb352dc91e0f77e3b4202d5f</anchor>
      <arglist>(Joint &amp;object, Force value)</arglist>
    </member>
    <member kind="function">
      <type>Torque</type>
      <name>GetMaxMotorTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8695771767390f89daedfca11bb372fe</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMaxMotorTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac17a5d01b67c5e42c42cb0b3c2e01905</anchor>
      <arglist>(Joint &amp;object, Torque value)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetRatio</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a819236db84fd9a87d9e0e9bb2103aba4</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetDampingRatio</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1d5c9f8e6c57fc6620cbfd4042f0aa01</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Frequency</type>
      <name>GetFrequency</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab0761255e7ae5a4dc119e7b1a2873ffe</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFrequency</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af03e3c2d8228e1bf08294102ad6612ce</anchor>
      <arglist>(Joint &amp;object, Frequency value)</arglist>
    </member>
    <member kind="function">
      <type>AngularMomentum</type>
      <name>GetAngularMotorImpulse</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad6c9c6f1cffb8b95006e85e59405b468</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetTarget</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac72c143ca1f9f831ab8c5075563db207</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTarget</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a32817cd25a220c6c39b8d70a935a1e4c</anchor>
      <arglist>(Joint &amp;object, Length2 value)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetLinearLowerLimit</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a69c77ad98199a4a125134aa9dcad9b27</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetLinearUpperLimit</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7bd07582bf06db7e38afe9d1050a4fe3</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLinearLimits</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0c848f01e3faf56ecccc16c8819290ad</anchor>
      <arglist>(Joint &amp;object, Length lower, Length upper)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngularLowerLimit</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af2a0a13adc8cbef557d0264d5fd8ec78</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngularUpperLimit</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a33690974dec12f9f1186cace72777a8e</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngularLimits</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a054f7637a988ddb54b4dd83ba320a172</anchor>
      <arglist>(Joint &amp;object, Angle lower, Angle upper)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLimitEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a38af51869b6c1d87b93123a4a790f874</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnableLimit</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8736e94424a5e0f88a983a4d39097e4d</anchor>
      <arglist>(Joint &amp;object, bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMotorEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad5b4dd16b94cfe0d1f5ce07a01cc598d</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnableMotor</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a07028eef8277c8ce9f1e6a0004d19638</anchor>
      <arglist>(Joint &amp;object, bool value)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLinearOffset</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a71fafe51e82dce85fea4873cd164b521</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLinearOffset</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4f4cb2e25eff8eb3d6895c79ca3516f5</anchor>
      <arglist>(Joint &amp;object, Length2 value)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngularOffset</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aea1405cb3a2b9aa07a391b41b0813505</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngularOffset</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8a77ffe9ddb532660776e958fa4144d9</anchor>
      <arglist>(Joint &amp;object, Angle value)</arglist>
    </member>
    <member kind="function">
      <type>LimitState</type>
      <name>GetLimitState</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a96e6945a982e424009580a3275d9aa45</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetGroundAnchorA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abdb43acaf1ba0f40fc54cdd3e44ef49f</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetGroundAnchorB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa0b16d611763fe6599ab00974b1f9de6</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Momentum</type>
      <name>GetLinearMotorImpulse</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afb2ee68ebcacf1e5d265df72807867f5</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetLength</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a729a90b55326be7bf460e092eb0ad1d9</anchor>
      <arglist>(const Joint &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>TypeID</type>
      <name>GetType</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a14ed64f17ea64f51257b1adca6e385a7</anchor>
      <arglist>(const Joint &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::add_pointer_t&lt; std::add_const_t&lt; T &gt; &gt;</type>
      <name>TypeCast</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a697bc4e18553f5207dd96db40817a664</anchor>
      <arglist>(const Joint *value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::add_pointer_t&lt; T &gt;</type>
      <name>TypeCast</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa592a3a7994d2f355a6d2a2235f24c60</anchor>
      <arglist>(Joint *value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa22000a029fd294dace37815f6141a83</anchor>
      <arglist>(const Joint &amp;lhs, const Joint &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a195b40b377eb99929c3033c990c43d00</anchor>
      <arglist>(const Joint &amp;lhs, const Joint &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>GetBodyA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a700fc1baf4e0165912da41dae27dfc78</anchor>
      <arglist>(const Joint &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>GetBodyB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a37729f6494a066607deb10ea5a57c449</anchor>
      <arglist>(const Joint &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetCollideConnected</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad982ed0433982ac18703569f42f4037c</anchor>
      <arglist>(const Joint &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a523f587750a397be813bef6626f4e7c3</anchor>
      <arglist>(Joint &amp;object, Length2 value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5e4188e9539eee11c78b7d83cf556671</anchor>
      <arglist>(Joint &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adc5dae940d1ed8f8adbb5f017afa7309</anchor>
      <arglist>(Joint &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a43ff6edbefe2306a85cd9fa9faae4621</anchor>
      <arglist>(const Joint &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>TypeCast</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af04a40472f1b7576171f3132305ce7a2</anchor>
      <arglist>(const Joint &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>TypeCast</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac91cb4dc6cbce2a3d54364794b1f1887</anchor>
      <arglist>(Joint &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>TypeCast</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3a5b4ab06d5e078ef5aa2e67b56c5dcc</anchor>
      <arglist>(Joint &amp;&amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Torque</type>
      <name>GetMotorTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5771e47bcd401f72f04f8c24c482270b</anchor>
      <arglist>(const Joint &amp;joint, Frequency inv_dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aaae24e0e3eadefda8d4145490e1c49ab</anchor>
      <arglist>(JointConf &amp;def, const Joint &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyID</type>
      <name>GetBodyA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3e3bb4a7dc061ae0e86c29e287b9dd3b</anchor>
      <arglist>(const JointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr BodyID</type>
      <name>GetBodyB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad93f572c35fb47bafd90668d4be3a9fd</anchor>
      <arglist>(const JointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>GetCollideConnected</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae4acb95cd2fdc94eb04c04ed03a6dd77</anchor>
      <arglist>(const JointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JointKey</type>
      <name>GetJointKey</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad650bf705b17c0eea9396299f6ec4dc6</anchor>
      <arglist>(const Joint &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr int</type>
      <name>Compare</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a18f3133bf2ea804420430e679e116f28</anchor>
      <arglist>(const JointKey &amp;lhs, const JointKey &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsFor</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5edd5fadb12409e0449a93e23be8dc5b</anchor>
      <arglist>(const JointKey key, BodyID body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ToString</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a365dbc3fb240ef6055a4e52d2c36c577</anchor>
      <arglist>(LimitState val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MotorJointConf</type>
      <name>GetMotorJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a951bef7be11b0c1bfdf1adb67f6169c2</anchor>
      <arglist>(const Joint &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MotorJointConf</type>
      <name>GetMotorJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abc10ead5563974d639870bb4c9955a51</anchor>
      <arglist>(const World &amp;world, BodyID bA, BodyID bB)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad18731b5658f790c5810919e63661ca0</anchor>
      <arglist>(MotorJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adf8336f65644600ba5c8c8aff756409e</anchor>
      <arglist>(MotorJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac8c6b476d51a5fcd897ca16754a841ba</anchor>
      <arglist>(const MotorJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1b19f08799b5719ae26c054a7d6f2da5</anchor>
      <arglist>(const MotorJointConf &amp;lhs, const MotorJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adb73921dd33efab19ea30f62abca8839</anchor>
      <arglist>(const MotorJointConf &amp;lhs, const MotorJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLocalAnchorA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6bff2eef6c3ab00e21a7a497dfa69b02</anchor>
      <arglist>(const MotorJointConf &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLocalAnchorB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aff7518dbaba68503c8534f3aa1bc1baf</anchor>
      <arglist>(const MotorJointConf &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a859dc8dd3001dc7aa23033f6de17bf97</anchor>
      <arglist>(MotorJointConf &amp;, Length2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetMaxForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2316866330d122410cad54477dea24c9</anchor>
      <arglist>(const MotorJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetMaxForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a309119086874940563a7e3a4b91c9cc2</anchor>
      <arglist>(MotorJointConf &amp;object, NonNegative&lt; Force &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetMaxTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>addea3c1c41374755038085922785f96d</anchor>
      <arglist>(const MotorJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetMaxTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a740454a9bdb11a84bfc34bad37908030</anchor>
      <arglist>(MotorJointConf &amp;object, NonNegative&lt; Torque &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLinearError</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab1e80b7fb2a127c7bef5388890d3ee0e</anchor>
      <arglist>(const MotorJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetAngularError</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac3f517e88d5b384e337d3322881c5886</anchor>
      <arglist>(const MotorJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLinearOffset</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a53e7afd4eb1bc197703f3d68c4ffd934</anchor>
      <arglist>(const MotorJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetLinearOffset</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a442a2ab7e9ce36a0ea28941056bc8d02</anchor>
      <arglist>(MotorJointConf &amp;object, Length2 value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetAngularOffset</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a75db6ad844d4be5361364e49907b24f8</anchor>
      <arglist>(const MotorJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetAngularOffset</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab185fa3719432e9026a44e602279f8d1</anchor>
      <arglist>(MotorJointConf &amp;object, Angle value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetCorrectionFactor</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa5e4489f264227f6c20010c1838248db</anchor>
      <arglist>(const MotorJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetCorrectionFactor</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5f373e05ffdf359e2f995aec4e5489c0</anchor>
      <arglist>(MotorJointConf &amp;object, Real value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PrismaticJointConf</type>
      <name>GetPrismaticJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a35f6f1e912af7403f2fe74281b0e839f</anchor>
      <arglist>(const Joint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>PrismaticJointConf</type>
      <name>GetPrismaticJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aea5a3b058a514a9dac2a7670be4f37ad</anchor>
      <arglist>(const World &amp;world, BodyID bA, BodyID bB, const Length2 anchor, const UnitVec axis)</arglist>
    </member>
    <member kind="function">
      <type>Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a27fc45b373f9d4f6ff5fe190c9343649</anchor>
      <arglist>(const PrismaticJointConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acf7e81444165613ee2710dfc8804a04a</anchor>
      <arglist>(const PrismaticJointConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a29933cccb0e4f22e8d05503443ac5997</anchor>
      <arglist>(PrismaticJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac45a3ba1b595baaeb87a5ec919615585</anchor>
      <arglist>(PrismaticJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a821a6b138deb8b47c6add793e3b8ea17</anchor>
      <arglist>(const PrismaticJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity</type>
      <name>GetLinearVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab7b59db43cee6a26c0433b69476b0c9b</anchor>
      <arglist>(const World &amp;world, const PrismaticJointConf &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af90207a13837614365ee1b1f331ccb34</anchor>
      <arglist>(const PrismaticJointConf &amp;lhs, const PrismaticJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adeb8e9c029b86567348620b30e693bc7</anchor>
      <arglist>(const PrismaticJointConf &amp;lhs, const PrismaticJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLinearLowerLimit</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2972598e6c903720d93d1aba138ec7b3</anchor>
      <arglist>(const PrismaticJointConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLinearUpperLimit</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a239db9ab5446fbb27eb532c45965cbe4</anchor>
      <arglist>(const PrismaticJointConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetLinearLimits</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab3e9cb2455b78052970feaabe8cf3b1b</anchor>
      <arglist>(PrismaticJointConf &amp;conf, Length lower, Length upper) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab043518c6b8959a7d71cd6325cbf2491</anchor>
      <arglist>(PrismaticJointConf &amp;, Length2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetMaxMotorForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a354d65b6b0cac0916b4788e0ce1a5470</anchor>
      <arglist>(PrismaticJointConf &amp;object, Force value)</arglist>
    </member>
    <member kind="function">
      <type>PulleyJointConf</type>
      <name>GetPulleyJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7844807c1d0889d5dc5cb28bd1a7ae7d</anchor>
      <arglist>(const Joint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>PulleyJointConf</type>
      <name>GetPulleyJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3addeb61645a20288e22687cbef5c6b3</anchor>
      <arglist>(const World &amp;world, BodyID bA, BodyID bB, Length2 groundA, Length2 groundB, Length2 anchorA, Length2 anchorB)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abe82c29ec29b06dd5d6d2fb5a16c557e</anchor>
      <arglist>(PulleyJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa584b0160581b9ab6777d0ccbd694a34</anchor>
      <arglist>(PulleyJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a79e70e2b529615d0765783788b065904</anchor>
      <arglist>(const PulleyJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a900c2f617828c3a70f6b988ac4419b55</anchor>
      <arglist>(PulleyJointConf &amp;object, Length2 newOrigin) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4085412245af82c9b4fec44a41132496</anchor>
      <arglist>(const PulleyJointConf &amp;lhs, const PulleyJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3ae2ced4c2ea4e92078eb0f6277007e9</anchor>
      <arglist>(const PulleyJointConf &amp;lhs, const PulleyJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a587b3fc0018a0aba1d156dcd26147d1d</anchor>
      <arglist>(const PulleyJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad042f7000a43ec5b29154a07465005f6</anchor>
      <arglist>(const PulleyJointConf &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLengthA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a94c0bc2a8291d96ff45e0d157a9d5bf3</anchor>
      <arglist>(const PulleyJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLengthB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aac6b715e0df3e5be4be5ccae4ac4fa36</anchor>
      <arglist>(const PulleyJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetRatio</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abe7de7c24d8d14d4dd2a34e2ecc386b3</anchor>
      <arglist>(PulleyJointConf &amp;object, Real value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RevoluteJointConf</type>
      <name>GetRevoluteJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a679b91e916353c9022ebc3cc26f9201c</anchor>
      <arglist>(const Joint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>RevoluteJointConf</type>
      <name>GetRevoluteJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aebf949d6443b1a6a85ff8a97b65d1b5b</anchor>
      <arglist>(const World &amp;world, BodyID bodyA, BodyID bodyB, Length2 anchor)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngle</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab6330d5a0349c5c78357355a05815694</anchor>
      <arglist>(const World &amp;world, const RevoluteJointConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetAngularVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2103c29612c27b521ec004b60c4b77e5</anchor>
      <arglist>(const World &amp;world, const RevoluteJointConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2fad23f6f66a16325e21b0faadf26d9b</anchor>
      <arglist>(RevoluteJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a87db3ef3ad61289604c8085c1b330e67</anchor>
      <arglist>(RevoluteJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a24000d24706fa8d93f028b3b8b970a17</anchor>
      <arglist>(const RevoluteJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a79d7e1a69ae37d6ab92378ebac7fb2c7</anchor>
      <arglist>(const RevoluteJointConf &amp;lhs, const RevoluteJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1f1939c47dfdcf306663d56d87a9afd2</anchor>
      <arglist>(const RevoluteJointConf &amp;lhs, const RevoluteJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac0a763d149b879a45044edf3c0e513f8</anchor>
      <arglist>(RevoluteJointConf &amp;, Length2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Angle</type>
      <name>GetAngularLowerLimit</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afd8850ec299f0679c41ca58081408de8</anchor>
      <arglist>(const RevoluteJointConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Angle</type>
      <name>GetAngularUpperLimit</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0f475e87122dc3f396a975f55b1c70d0</anchor>
      <arglist>(const RevoluteJointConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2cae96cc4b8f16e7a9ce6abd543f09c1</anchor>
      <arglist>(const RevoluteJointConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4ee40ca4a9dbe09390f0ff493f276dac</anchor>
      <arglist>(const RevoluteJointConf &amp;conf) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetAngularLimits</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae5635ff98f64bcbf6a31cba670913afc</anchor>
      <arglist>(RevoluteJointConf &amp;object, Angle lower, Angle upper) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetMaxMotorTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac5613ecd1ba9cd47dcfa45191c137dbd</anchor>
      <arglist>(RevoluteJointConf &amp;object, Torque value)</arglist>
    </member>
    <member kind="function">
      <type>RopeJointConf</type>
      <name>GetRopeJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae54fa708398286ff56a7c57bfe50fd94</anchor>
      <arglist>(const Joint &amp;joint) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a94620f1488d0e8115ed0b21d89da11e2</anchor>
      <arglist>(RopeJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a180620d4fdb4c36cd2a47944af21ba71</anchor>
      <arglist>(RopeJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a14231e4629e5a1cc642aba42a35245a4</anchor>
      <arglist>(const RopeJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0d485fc6df03e3052d96da519f35585d</anchor>
      <arglist>(const RopeJointConf &amp;lhs, const RopeJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af88a635d83573cbd0ec11f17f4526778</anchor>
      <arglist>(const RopeJointConf &amp;lhs, const RopeJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac7acc7a694d7729620e48300eb157d7b</anchor>
      <arglist>(const RopeJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af3c61329399916ae2b063e6ba94ffb6e</anchor>
      <arglist>(const RopeJointConf &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1259b960c0c0112346fa02785107cdc9</anchor>
      <arglist>(RopeJointConf &amp;, Length2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetMaxLength</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad5cf9d398d3e370e806a070fdbb8d685</anchor>
      <arglist>(const RopeJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetMaxLength</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aeeffd09d05131a961e0d3bd87f94c889</anchor>
      <arglist>(RopeJointConf &amp;object, Length value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TargetJointConf</type>
      <name>GetTargetJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a61f1607657e41b75797c28649e818f8e</anchor>
      <arglist>(const Joint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>Mass22</type>
      <name>GetEffectiveMassMatrix</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6cb7d8c6d0e8773c08196d43f14cc022</anchor>
      <arglist>(const TargetJointConf &amp;object, const BodyConstraint &amp;body) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a346af89c324e945122ee42c65baae268</anchor>
      <arglist>(TargetJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9cbea07928041f632c555303e34e7ef8</anchor>
      <arglist>(TargetJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a04c5b600eda74e0641524a3001e33888</anchor>
      <arglist>(const TargetJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a29e3173ac86b6e5186a733708f38a42d</anchor>
      <arglist>(const TargetJointConf &amp;lhs, const TargetJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2264176e0da3eefdb8e592dd1f931355</anchor>
      <arglist>(const TargetJointConf &amp;lhs, const TargetJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetLocalAnchorA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a742f3193b44e8038c6e21455f2cc3630</anchor>
      <arglist>(const TargetJointConf &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7ec73e83dfde52a4e59c7ef6099e5073</anchor>
      <arglist>(const TargetJointConf &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>constexpr AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afa5cbad1175b924fab7ca3259d3ba8a9</anchor>
      <arglist>(const TargetJointConf &amp;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa3c8c836af2b8a71674101a3ace0d1bf</anchor>
      <arglist>(TargetJointConf &amp;object, Length2 newOrigin)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetTarget</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a643e49fe049c3befd1f928e4d732493c</anchor>
      <arglist>(const TargetJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetTarget</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0d143822f59e9a0dec84d98dbffdb540</anchor>
      <arglist>(TargetJointConf &amp;object, Length2 value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetMaxForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5433a140e014287406113e1ce6508dae</anchor>
      <arglist>(const TargetJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>SetMaxForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a26488bda71d5ddb9df78975b2f37cb03</anchor>
      <arglist>(TargetJointConf &amp;object, NonNegative&lt; Force &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetFrequency</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac9971494480e00e4c3fa99cba906339e</anchor>
      <arglist>(TargetJointConf &amp;object, NonNegative&lt; Frequency &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetDampingRatio</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a93ccadc0666446729427c72fbdac4ad4</anchor>
      <arglist>(TargetJointConf &amp;object, Real value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>WeldJointConf</type>
      <name>GetWeldJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a068dc3f2013d3029414eb4d0eaf85f13</anchor>
      <arglist>(const Joint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>WeldJointConf</type>
      <name>GetWeldJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7a5a52a8c470433ddeb8e44616b0d28a</anchor>
      <arglist>(const World &amp;world, BodyID bodyA, BodyID bodyB, const Length2 anchor=Length2{})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a98ee92f3674bc81b7d523be4f41dd53c</anchor>
      <arglist>(WeldJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab23af50d029203229878c5ceddbcf759</anchor>
      <arglist>(WeldJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8866f1e40aceb9eb5d49d7b1031029cb</anchor>
      <arglist>(const WeldJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ade363e29ce1af1766680bde06e5a8d5c</anchor>
      <arglist>(const WeldJointConf &amp;lhs, const WeldJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3c84131d3c779d955813d70eface1bd9</anchor>
      <arglist>(const WeldJointConf &amp;lhs, const WeldJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2c609024f0b536db041b19c8f8869479</anchor>
      <arglist>(const WeldJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3739f4255fc019f68cd74d5c21867845</anchor>
      <arglist>(const WeldJointConf &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1ca7cf4000562ae2b92cce70e2446dce</anchor>
      <arglist>(WeldJointConf &amp;, Length2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetFrequency</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acafa97d5359a1791ded4ccbc48a0cfaa</anchor>
      <arglist>(WeldJointConf &amp;object, NonNegative&lt; Frequency &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetDampingRatio</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a58977ddd709fa03560c34fcb92949f42</anchor>
      <arglist>(WeldJointConf &amp;object, Real value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>WheelJointConf</type>
      <name>GetWheelJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab455b1a4e3159193b477bef90fa819b4</anchor>
      <arglist>(const Joint &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>WheelJointConf</type>
      <name>GetWheelJointConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afe5cfdb1c7cdce8f51cd5b5932d9059a</anchor>
      <arglist>(const World &amp;world, BodyID bodyA, BodyID bodyB, Length2 anchor, UnitVec axis=UnitVec::GetRight())</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetAngularVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a54073d6bb0b399295ab2b2ce105b02f4</anchor>
      <arglist>(const World &amp;world, const WheelJointConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1bf8a2c1bbd321faa6b6525186d3ffb8</anchor>
      <arglist>(WheelJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolveVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0509df5cc17c5c91b0c05f54ffa10160</anchor>
      <arglist>(WheelJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const StepConf &amp;step)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SolvePosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a71acdf32b41c7fa92c981ca8dd2db6c6</anchor>
      <arglist>(const WheelJointConf &amp;object, std::vector&lt; BodyConstraint &gt; &amp;bodies, const ConstraintSolverConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a749db75cd678bd280e02f2d382bbce2a</anchor>
      <arglist>(const WheelJointConf &amp;lhs, const WheelJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a378a180b24295fc6b58fa5385792b26b</anchor>
      <arglist>(const WheelJointConf &amp;lhs, const WheelJointConf &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aef25b1a360e19b38a39af5a4b776eceb</anchor>
      <arglist>(const WheelJointConf &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a39aeb9ed40d5d141b57b0e2776a3f396</anchor>
      <arglist>(WheelJointConf &amp;, Length2)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetMaxMotorTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7f82a394a8c0f5a020f8647ce0a34d39</anchor>
      <arglist>(WheelJointConf &amp;object, Torque value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetFrequency</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adcd79908a087d2c25629aa14895bf49c</anchor>
      <arglist>(WheelJointConf &amp;object, NonNegative&lt; Frequency &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>SetDampingRatio</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae7f1530d1c2de2df859dfae6eb23d141</anchor>
      <arglist>(WheelJointConf &amp;object, Real value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>GetBodyRange</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abe80bceeb031d85076c29f75f0241475</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; std::vector&lt; BodyID &gt;::const_iterator &gt;</type>
      <name>GetBodies</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a28f809f0951bfb0a97027eaefca55515</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; std::vector&lt; BodyID &gt;::const_iterator &gt;</type>
      <name>GetBodiesForProxies</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa70eeb7b7e00b3920f4539f569be34d2</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>CreateBody</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7a7b3314c3d17fbb49952bdf4fb4ff1a</anchor>
      <arglist>(World &amp;world, const BodyConf &amp;def=GetDefaultBodyConf())</arglist>
    </member>
    <member kind="function">
      <type>const Body &amp;</type>
      <name>GetBody</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac59105439c7d4ed0b5e6af3c7dbc377e</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBody</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a96b67e48017d5525b014c82845ac8ddc</anchor>
      <arglist>(World &amp;world, BodyID id, const Body &amp;body)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Destroy</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5220bddd2803e882d97dfbce54bdceda</anchor>
      <arglist>(World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; std::vector&lt; FixtureID &gt;::const_iterator &gt;</type>
      <name>GetFixtures</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae475a107e192ce25ee57d10790805bfc</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>LinearAcceleration2</type>
      <name>GetLinearAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae8ca55fff3e787fcbc3d30fc8f39f49c</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>AngularAcceleration</type>
      <name>GetAngularAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a05620c9ad05a74b4cd9799d76f4df0ed</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>Acceleration</type>
      <name>GetAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8c16a3a5c5a313873e82f2a5b3c5a444</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a418cd290b6a2d35b2e1714b8ad2b5977</anchor>
      <arglist>(World &amp;world, BodyID id, LinearAcceleration2 linear, AngularAcceleration angular)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab55a73746131ce67978e1b6525ef2828</anchor>
      <arglist>(World &amp;world, BodyID id, LinearAcceleration2 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7d38270de7497d14ebf2dfe48eb64699</anchor>
      <arglist>(World &amp;world, BodyID id, AngularAcceleration value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a38238366981a6ff670b61aef3ec738c0</anchor>
      <arglist>(World &amp;world, BodyID id, Acceleration value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTransformation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad01a8fe16bba00769e661ac6ea969389</anchor>
      <arglist>(World &amp;world, BodyID id, Transformation xfm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLocation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa31cc6e0438fd8de38fe1eddab503121</anchor>
      <arglist>(World &amp;world, BodyID id, Length2 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngle</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a245759e710fc195c98621e6d1ceb4433</anchor>
      <arglist>(World &amp;world, BodyID id, Angle value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RotateAboutWorldPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a118f1cd558a4d51a5f7123fcfdcdf5b6</anchor>
      <arglist>(World &amp;world, BodyID id, Angle amount, Length2 worldPoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RotateAboutLocalPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3d9fea50aa07339ec50b07d3673a1be7</anchor>
      <arglist>(World &amp;world, BodyID id, Angle amount, Length2 localPoint)</arglist>
    </member>
    <member kind="function">
      <type>Acceleration</type>
      <name>CalcGravitationalAcceleration</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a145bc2034162d0e6684d8d606211fb5e</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>GetWorldIndex</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a96cce8e8cf11bdfcb2d834f999744dd3</anchor>
      <arglist>(const World &amp;world, const BodyID id) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyType</type>
      <name>GetType</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1d049ed1a0633d0c0a7138a2c79823b5</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetType</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abe9472104a0c01207d97300925853ed3</anchor>
      <arglist>(World &amp;world, BodyID id, BodyType value, bool resetMassData=true)</arglist>
    </member>
    <member kind="function">
      <type>Transformation</type>
      <name>GetTransformation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae851807b71a13326be2635fb8af75ab6</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngle</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a65c0c4c3adb519277e5418ec800bb7b3</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>Velocity</type>
      <name>GetVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acc05b211fd414f80784e7250c1f0b173</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad96f80e152c8b40ffb278dd171a018fc</anchor>
      <arglist>(World &amp;world, BodyID id, const Velocity &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab57a90509099257c82af9931964780d0</anchor>
      <arglist>(World &amp;world, BodyID id, const LinearVelocity2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abe9eb60684f92671b2acf31c20e7bfdb</anchor>
      <arglist>(World &amp;world, BodyID id, AngularVelocity value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DestroyFixtures</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa70bf9eba0de4ea43c561231f6c51263</anchor>
      <arglist>(World &amp;world, BodyID id, bool resetMassData=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acf3eb15a8221d495856fd34c831255a1</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a36fa18310477a7ab081e0b81425b5bad</anchor>
      <arglist>(World &amp;world, BodyID id, bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAwake</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa7a828e4da95fbbaffcfc14186e451a1</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAwake</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a67874514581554435fd8065942a33050</anchor>
      <arglist>(World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetAwake</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abb9770df3b38d727d39b7ac13ba4c77b</anchor>
      <arglist>(World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMassDataDirty</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a28c9e02154e09942576f0edc8297415c</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsFixedRotation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0a234fed595bbb7745f54c0820597260</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFixedRotation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1a11e67e4bda096d53e4c6a55272656b</anchor>
      <arglist>(World &amp;world, BodyID id, bool value)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetWorldCenter</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a32537729a6c93bba8c9ea99a3bcd737f</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>InvMass</type>
      <name>GetInvMass</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae67b1e703960f2ac4bfefc9d38c7a164</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>InvRotInertia</type>
      <name>GetInvRotInertia</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adbe356dc1eaa258248d26ba77fc8491f</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalCenter</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0d96416fb8a1165678be1c50fce12cc6</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>ComputeMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0f6db19ca88cbfda1c130583c367b97e</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abe6b45c9a1aeec496d83c00a6f587740</anchor>
      <arglist>(World &amp;world, BodyID id, const MassData &amp;massData)</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; std::vector&lt; std::pair&lt; BodyID, JointID &gt; &gt;::const_iterator &gt;</type>
      <name>GetJoints</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0eeb57c8beb84dfbfe470b9707b1fa92</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSpeedable</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5a9a1e21b5e0f1b2200d902a3f577e6e</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAccelerable</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac33af5ec304e45152ffb2d275ba5093c</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsImpenetrable</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a11893b06ac5c981fc1da435d2a07063f</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetImpenetrable</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afb1332e63f530ca56d0efa14deb06bba</anchor>
      <arglist>(World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetImpenetrable</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a66f55f614954b3969e3fb94733834a61</anchor>
      <arglist>(World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSleepingAllowed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abf1860a0b9cd6de8e35cf3ab3353db31</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSleepingAllowed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8f148aa57e72254d95694d31c7b4dbb1</anchor>
      <arglist>(World &amp;world, BodyID, bool value)</arglist>
    </member>
    <member kind="function">
      <type>Frequency</type>
      <name>GetLinearDamping</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad68f40e70485dd95d747d0531f2debad</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLinearDamping</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9fd32bf6cda4a42e0b61db21fb7bfe5c</anchor>
      <arglist>(World &amp;world, BodyID id, NonNegative&lt; Frequency &gt; linearDamping)</arglist>
    </member>
    <member kind="function">
      <type>Frequency</type>
      <name>GetAngularDamping</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aec885dc5540478cf5ffef4e893e82fcd</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngularDamping</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a79dbcc9738c04b86acf653b8cab48971</anchor>
      <arglist>(World &amp;world, BodyID id, NonNegative&lt; Frequency &gt; angularDamping)</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; std::vector&lt; KeyedContactPtr &gt;::const_iterator &gt;</type>
      <name>GetContacts</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae5ab8a5162315de2f340bf43b8243e5d</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>Force2</type>
      <name>GetCentripetalForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a63ff1a3d8b15fd8ab2fc36b475a6b643</anchor>
      <arglist>(const World &amp;world, BodyID id, Length2 axis)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af2cf9255dec702ee772907123e23d889</anchor>
      <arglist>(World &amp;world, BodyID id, Force2 force, Length2 point)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a63de8f07f975cb055b0790364f2f6a69</anchor>
      <arglist>(World &amp;world, BodyID id, Torque torque)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyLinearImpulse</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a496ed2441dd8b38efd57ca94b2c74a17</anchor>
      <arglist>(World &amp;world, BodyID id, Momentum2 impulse, Length2 point)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyAngularImpulse</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1b34b2cc77e2ef64a6155572fc589ead</anchor>
      <arglist>(World &amp;world, BodyID id, AngularMomentum impulse)</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>GetAwakeCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0812de1607b6656927bc2ad724f1d7c3</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>Awaken</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1539463268cf6db572823eb1a195dc70</anchor>
      <arglist>(World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAccelerations</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad85bb4dfbf060d7d28668e4bc2d73a10</anchor>
      <arglist>(World &amp;world, Acceleration acceleration) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAccelerations</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab9dc75916d003478c7004172110b58e2</anchor>
      <arglist>(World &amp;world, LinearAcceleration2 acceleration) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>FindClosestBody</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7c37ce126c86487bd78a0b8d6734e182</anchor>
      <arglist>(const World &amp;world, Length2 location) noexcept</arglist>
    </member>
    <member kind="function">
      <type>FixtureCounter</type>
      <name>GetFixtureCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a20944afa5f0709c73162e7f7bf56e408</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTransform</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afe96807931f9815ed363951901508f8d</anchor>
      <arglist>(World &amp;world, BodyID id, Length2 location, Angle angle)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aabf27f5cfd9092be041a781d24cfa9a1</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetWorldPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad52c5cffc4cd82e4cf533db1afcedc93</anchor>
      <arglist>(const World &amp;world, BodyID id, const Length2 localPoint)</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetLocalVector</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac542518f1fbacb567e5b39778de863db</anchor>
      <arglist>(const World &amp;world, BodyID body, const UnitVec uv)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalPoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad432f7c9779ee902b41cdfab944c8885</anchor>
      <arglist>(const World &amp;world, BodyID body, const Length2 worldPoint)</arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>GetPosition</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9fe7fe17864539ef49018ae954c9e8b8</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetWorldVector</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afb57be7efe663810331859b5e0c9a253</anchor>
      <arglist>(const World &amp;world, BodyID body, UnitVec localVector)</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity2</type>
      <name>GetLinearVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afb257e46e441021d64884e95c400fa0f</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetAngularVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a116c82c48643c1ef6199d27e9b9dd882</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Awaken</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a4968cdffa51be385b42f978f3226901d</anchor>
      <arglist>(World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>Mass</type>
      <name>GetMass</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad51a22660fa68bff534e3ae5bbcaba38</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>RotInertia</type>
      <name>GetRotInertia</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8cc24a20ec1f33d8e51baf8bc435406a</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>RotInertia</type>
      <name>GetLocalRotInertia</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad374df7cc8d1a5a9a186e0ae8a7c8cb3</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a873904ef02cab072a393ef4554c17ea3</anchor>
      <arglist>(const World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0f4a5600e14e8a21bdf50bfe3382cb55</anchor>
      <arglist>(World &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetImpenetrable</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adb8a3d49c66601ec5953d19714aa9759</anchor>
      <arglist>(World &amp;world, BodyID id, bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyForceToCenter</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aff8c388b99a60c431d85dc649786562a</anchor>
      <arglist>(World &amp;world, BodyID id, Force2 force)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adca4e4bff8f8c98a0247a10e9551edca</anchor>
      <arglist>(World &amp;world, BodyID id, Force2 force, Length2 point) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5800108f6c4be7a8a49d5283aa881616</anchor>
      <arglist>(World &amp;world, BodyID id, Torque torque) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>GetBodyCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a54933e742508cac5c0b219c653c67674</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearForces</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa8a757a3ee66fa157cbf1ffafdf556d4</anchor>
      <arglist>(World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAccelerations</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae23446b68b07e35cff2b642c5573acfe</anchor>
      <arglist>(World &amp;world, F fn)</arglist>
    </member>
    <member kind="function">
      <type>constexpr WorldConf</type>
      <name>GetDefaultWorldConf</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a541672909a4b96348950519410fcd082</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>ContactCounter</type>
      <name>GetContactRange</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa69d38b444407e38b21ea8a4dd875678</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; std::vector&lt; KeyedContactPtr &gt;::const_iterator &gt;</type>
      <name>GetContacts</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5ba0f1fe0a6e9a140c4d264f61f7440e</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Contact &amp;</type>
      <name>GetContact</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac283a088c9613f5ac5470c1d2f6c94a7</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetContact</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af66ef8ef333d03072a9a9fe66cc0309a</anchor>
      <arglist>(World &amp;world, ContactID id, const Contact &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsTouching</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a386a732d954a80f48e6a3ac7beca1237</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAwake</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a89c2757003061a1852f035d352ec68a5</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAwake</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aeaa33fbede9039afb79513b1a7432278</anchor>
      <arglist>(World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetChildIndexA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a24ba41bdcb80e48e4bfebac362eb23db</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetChildIndexB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a708d52132fb3f4ffbd49bf09ebc64740</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>FixtureID</type>
      <name>GetFixtureA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afb6a01c31ef63559cf6c5d7892e863d5</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>FixtureID</type>
      <name>GetFixtureB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a697b60b490bbcdae46d962c97d780e07</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>GetBodyA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa8c24669bbb9850b21ef17c5217f0a45</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>GetBodyB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a379c87f1276cec0f81e35942dc144b27</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>TimestepIters</type>
      <name>GetToiCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab2cf2abf28efb6e6ba368648b49484f0</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>NeedsFiltering</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aadd14b7a073e106ee40d4488d131f673</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>NeedsUpdating</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aaada9701c50ea1607ecf3ae02c8f72c1</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasValidToi</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aae57c7aca1c8c840ea8eb1ba1d44ef07</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetToi</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac62d6b0d4985566ff6e1ca9d3f1fa1e6</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetFriction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2ada1ba075b82b0e496f2a3a012ab495</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetRestitution</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ada6f0319b80bd4a62673f539e41d0b86</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFriction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0fbfbb5c2714aac231db6f9b3794d9e4</anchor>
      <arglist>(World &amp;world, ContactID id, Real friction)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRestitution</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a74f86083992d822f2b6376b98c8e8a79</anchor>
      <arglist>(World &amp;world, ContactID id, Real restitution)</arglist>
    </member>
    <member kind="function">
      <type>const Manifold &amp;</type>
      <name>GetManifold</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af36b360b9ed9ff9e993a1c1a5655e46d</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>LinearVelocity</type>
      <name>GetTangentSpeed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2a314b9568d6553aaac1df1a0054250e</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTangentSpeed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adaae6c7d046c05b5b2f79c2e0d3fedae</anchor>
      <arglist>(World &amp;world, ContactID id, LinearVelocity value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a10fdf8ef9cbd8b1ff7b51334e72a6ef5</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aaccb259506fe50452b035158ec12e47b</anchor>
      <arglist>(World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsetEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6b1a2071021c814a1ee5bfe54c994287</anchor>
      <arglist>(World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetDefaultFriction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad4c197be0402b89a41342cfe51523d45</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetDefaultRestitution</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad04dd80754bf974462c8796cd3c95b07</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>WorldManifold</type>
      <name>GetWorldManifold</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9e4fddd252b20dfceb87d93f5ad11087</anchor>
      <arglist>(const World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>ContactCounter</type>
      <name>GetTouchingCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af8aabfb6390fed1c549e81700b0cd80e</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetFriction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a74979affb98f9307f121fd8f4f63910d</anchor>
      <arglist>(World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetRestitution</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af23360c9130e209a06ae0c111f274876</anchor>
      <arglist>(World &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae6e78139be823080998e2cf046601977</anchor>
      <arglist>(World &amp;world, ContactID id, bool value)</arglist>
    </member>
    <member kind="function">
      <type>ContactCounter</type>
      <name>GetContactCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac7b6c00fbd4fc40a4957bd082c9437b4</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>FixtureCounter</type>
      <name>GetFixtureRange</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8c18ccec305798581941df7ef567123d</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>FixtureCounter</type>
      <name>GetFixtureCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac30f61aacb499241e0bde575efc4b5b4</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>FixtureID</type>
      <name>CreateFixture</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a96ffed101b6adaeaf51d57ee17323c95</anchor>
      <arglist>(World &amp;world, FixtureConf def=FixtureConf{}, bool resetMassData=true)</arglist>
    </member>
    <member kind="function">
      <type>FixtureID</type>
      <name>CreateFixture</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa76df465e73530b8f1026981e6471bd3</anchor>
      <arglist>(World &amp;world, BodyID id, const Shape &amp;shape, FixtureConf def=FixtureConf{}, bool resetMassData=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Destroy</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aee0269f0a023b2598e8b7286b35519d8</anchor>
      <arglist>(World &amp;world, FixtureID id, bool resetMassData=true)</arglist>
    </member>
    <member kind="function">
      <type>Filter</type>
      <name>GetFilterData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1dbda295266109b5cd1cb357124a1d4c</anchor>
      <arglist>(const World &amp;world, FixtureID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFilterData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5cda7cbb9a8e263bacaed250c1aea6cd</anchor>
      <arglist>(World &amp;world, FixtureID id, const Filter &amp;filter)</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>GetBody</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae41d95c5b1ec79c36e344c95fa884bc1</anchor>
      <arglist>(const World &amp;world, FixtureID id)</arglist>
    </member>
    <member kind="function">
      <type>Transformation</type>
      <name>GetTransformation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acdfa023334becda826867586a581979d</anchor>
      <arglist>(const World &amp;world, FixtureID id)</arglist>
    </member>
    <member kind="function">
      <type>const Shape &amp;</type>
      <name>GetShape</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>adba78c797c56900392e14caa245032b7</anchor>
      <arglist>(const World &amp;world, FixtureID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsSensor</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a191f8d94e1733aad171a69519a0ab49e</anchor>
      <arglist>(const World &amp;world, FixtureID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSensor</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab61ecfbbe51f6e7f34db6b35ce15ac1b</anchor>
      <arglist>(World &amp;world, FixtureID id, bool value)</arglist>
    </member>
    <member kind="function">
      <type>AreaDensity</type>
      <name>GetDensity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a965b984815574cb6d0ed9bf3824f59c4</anchor>
      <arglist>(const World &amp;world, FixtureID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestPoint</name>
      <anchorfile>group__TestPointGroup.html</anchorfile>
      <anchor>gad0dda7c567b740e8ce2e4f04fa593a25</anchor>
      <arglist>(const World &amp;world, FixtureID id, Length2 p)</arglist>
    </member>
    <member kind="function">
      <type>FixtureID</type>
      <name>CreateFixture</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acb365337e5b85b3b86f24d214eeb5840</anchor>
      <arglist>(World &amp;world, BodyID id, const T &amp;shapeConf, FixtureConf def=FixtureConf{}, bool resetMassData=true)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetFriction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a58dc7587cbd5da666f4501eb719b059e</anchor>
      <arglist>(const World &amp;world, FixtureID id)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetRestitution</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7fe43c7b209c1aca69358206e4a7a9fa</anchor>
      <arglist>(const World &amp;world, FixtureID id)</arglist>
    </member>
    <member kind="function">
      <type>MassData</type>
      <name>GetMassData</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0f686d9e42eedbadcc373295b380dfa2</anchor>
      <arglist>(const World &amp;world, FixtureID id)</arglist>
    </member>
    <member kind="function">
      <type>BodyCounter</type>
      <name>GetBodyRange</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af1f54963f89ffa91d31fc57260d4ac8c</anchor>
      <arglist>(const WorldImpl &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>CreateBody</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa60c2cfd2b38cdfc416aca0cc1cb4282</anchor>
      <arglist>(WorldImpl &amp;world, const BodyConf &amp;def=GetDefaultBodyConf())</arglist>
    </member>
    <member kind="function">
      <type>const Body &amp;</type>
      <name>GetBody</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0d08d623ac10313556747b49a49dbb4a</anchor>
      <arglist>(const WorldImpl &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBody</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0f1ee37d3ab61133b09736ac0a37de6b</anchor>
      <arglist>(WorldImpl &amp;world, BodyID id, const Body &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Destroy</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a27fe25ca313f7d6953e4a1c55b8827d4</anchor>
      <arglist>(WorldImpl &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; std::vector&lt; std::pair&lt; BodyID, JointID &gt; &gt;::const_iterator &gt;</type>
      <name>GetJoints</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2a1806882b555f6b9573b9c812f5a149</anchor>
      <arglist>(const WorldImpl &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; WorldImpl::Fixtures::const_iterator &gt;</type>
      <name>GetFixtures</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a476a114f99e23630b4fa1cdcd86df976</anchor>
      <arglist>(const WorldImpl &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; std::vector&lt; KeyedContactPtr &gt;::const_iterator &gt;</type>
      <name>GetContacts</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a592fb5e510f53e11c60b73f452164e47</anchor>
      <arglist>(const WorldImpl &amp;world, BodyID id)</arglist>
    </member>
    <member kind="function">
      <type>ContactCounter</type>
      <name>GetContactRange</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0e1eb87fd5e77d8c8f8aee47da70f01c</anchor>
      <arglist>(const WorldImpl &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const Contact &amp;</type>
      <name>GetContact</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a91773d69ef6d97322fa7ea65a34bb4d8</anchor>
      <arglist>(const WorldImpl &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetContact</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a70a5652ade1a86cbc36372da0d9512af</anchor>
      <arglist>(WorldImpl &amp;world, ContactID id, const Contact &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const Manifold &amp;</type>
      <name>GetManifold</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a05ef719453561f4b0f544360c94b4ba5</anchor>
      <arglist>(const WorldImpl &amp;world, ContactID id)</arglist>
    </member>
    <member kind="function">
      <type>FixtureCounter</type>
      <name>GetFixtureRange</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a87a2b2161fea37eb8aeec03069126f2b</anchor>
      <arglist>(const WorldImpl &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>FixtureID</type>
      <name>CreateFixture</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a495fdb19d5ffc0602211bebda2c2e58c</anchor>
      <arglist>(WorldImpl &amp;world, const FixtureConf &amp;def)</arglist>
    </member>
    <member kind="function">
      <type>const FixtureConf &amp;</type>
      <name>GetFixture</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae4fd169656cf635ab80ca7e640ab46b6</anchor>
      <arglist>(const WorldImpl &amp;world, FixtureID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFixture</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ace6f407b50019144c9e6c6790fc95f48</anchor>
      <arglist>(WorldImpl &amp;world, FixtureID id, const FixtureConf &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Destroy</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a893d7b988a30a4a56c4c8f0805018316</anchor>
      <arglist>(WorldImpl &amp;world, FixtureID id)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; ContactCounter &gt; &amp;</type>
      <name>GetProxies</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a42e566b3ebd11a079b52b2b2783eae1f</anchor>
      <arglist>(const WorldImpl &amp;world, FixtureID id)</arglist>
    </member>
    <member kind="function">
      <type>ContactCounter</type>
      <name>GetProxy</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a207c061fc4a4cf2aa0af2431d5be1aa0</anchor>
      <arglist>(const WorldImpl &amp;world, FixtureID id, ChildCounter child)</arglist>
    </member>
    <member kind="function">
      <type>ChildCounter</type>
      <name>GetProxyCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a50f34d73a3d42dedb30272462a986816</anchor>
      <arglist>(const WorldImpl &amp;world, FixtureID id)</arglist>
    </member>
    <member kind="function">
      <type>JointCounter</type>
      <name>GetJointRange</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aafd03bdc701b63cfdb6ffe81c7096631</anchor>
      <arglist>(const WorldImpl &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JointID</type>
      <name>CreateJoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a27fad602d38bef0ded44254b7066695e</anchor>
      <arglist>(WorldImpl &amp;world, const Joint &amp;def)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Destroy</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad11049091ca60e7a0a56f16d7c5c4e35</anchor>
      <arglist>(WorldImpl &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>const Joint &amp;</type>
      <name>GetJoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1b24751e62a84dd90abd86f67a3226cc</anchor>
      <arglist>(const WorldImpl &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetJoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a66bba438f6edc5eb9c6bb55f7caa8202</anchor>
      <arglist>(WorldImpl &amp;world, JointID id, const Joint &amp;def)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; WorldImpl &gt;</type>
      <name>CreateWorldImpl</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a572be47335a912510bc04eadbabf6270</anchor>
      <arglist>(const WorldConf &amp;def)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; WorldImpl &gt;</type>
      <name>CreateWorldImpl</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a102c27ad823abe1f827145ea1f5dc8ca</anchor>
      <arglist>(const WorldImpl &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a317ad010847421750166838cede7bcfa</anchor>
      <arglist>(WorldImpl &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFixtureDestructionListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2c29a7b215e94a078dac19a738130c1d</anchor>
      <arglist>(WorldImpl &amp;world, std::function&lt; void(FixtureID)&gt; listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetJointDestructionListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acff18a22b02f78222a56f6a14dcbfa90</anchor>
      <arglist>(WorldImpl &amp;world, std::function&lt; void(JointID)&gt; listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBeginContactListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7f75137a01725df9036e87f9447d62b8</anchor>
      <arglist>(WorldImpl &amp;world, std::function&lt; void(ContactID)&gt; listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEndContactListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8c04058f6a200a2804fbb428a7be9630</anchor>
      <arglist>(WorldImpl &amp;world, std::function&lt; void(ContactID)&gt; listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPreSolveContactListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7209065d048d81a3bba79b000683bf97</anchor>
      <arglist>(WorldImpl &amp;world, std::function&lt; void(ContactID, const Manifold &amp;)&gt; listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPostSolveContactListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a04becf4f4af1f6e8b8c5ba66f200dffc</anchor>
      <arglist>(WorldImpl &amp;world, std::function&lt; void(ContactID, const ContactImpulsesList &amp;, unsigned)&gt; listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>StepStats</type>
      <name>Step</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa25253387bf26e86389e48ae89e2f0d8</anchor>
      <arglist>(WorldImpl &amp;world, const StepConf &amp;conf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af96a54f5afb3a967e0ef397c0beceba8</anchor>
      <arglist>(WorldImpl &amp;world, Length2 newOrigin)</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; std::vector&lt; BodyID &gt;::const_iterator &gt;</type>
      <name>GetBodies</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3011d97673613dced0ff483a59cbdde9</anchor>
      <arglist>(const WorldImpl &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; std::vector&lt; BodyID &gt;::const_iterator &gt;</type>
      <name>GetBodiesForProxies</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad0d6997a55f534b37394b53bbecd8b91</anchor>
      <arglist>(const WorldImpl &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; std::vector&lt; JointID &gt;::const_iterator &gt;</type>
      <name>GetJoints</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae575bb139a5db8094e954d44ebe26648</anchor>
      <arglist>(const WorldImpl &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; std::vector&lt; KeyedContactPtr &gt;::const_iterator &gt;</type>
      <name>GetContacts</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aab22950c2b077f1dcb8ca254111757a0</anchor>
      <arglist>(const WorldImpl &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLocked</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9f6e06ae5d756249d2d948e3a11d4d20</anchor>
      <arglist>(const WorldImpl &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsStepComplete</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a29d79bc60866034a46ee93cef089306d</anchor>
      <arglist>(const WorldImpl &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetSubStepping</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab956952cfa59979aef58175119efc46b</anchor>
      <arglist>(const WorldImpl &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSubStepping</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae2e1393346f2feb9e6cd1261194cd52a</anchor>
      <arglist>(WorldImpl &amp;world, bool value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetMinVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3dc85a3fd79661b17f225819fc61ca0c</anchor>
      <arglist>(const WorldImpl &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetMaxVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a85a5c5aa03607543a1d1dea2a31520af</anchor>
      <arglist>(const WorldImpl &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Frequency</type>
      <name>GetInvDeltaTime</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a21dff1f3172e2ee11f203920bf62ba28</anchor>
      <arglist>(const WorldImpl &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const DynamicTree &amp;</type>
      <name>GetTree</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a74860eba448f1106cdc81246a25d29fe</anchor>
      <arglist>(const WorldImpl &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; std::vector&lt; FixtureID &gt;::const_iterator &gt;</type>
      <name>GetFixturesForProxies</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae0548905239581e1b5de261dc7e3dbeb</anchor>
      <arglist>(const WorldImpl &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JointCounter</type>
      <name>GetJointRange</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ade6a80b2e35e7e0a4a7374925497a2bd</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>SizedRange&lt; std::vector&lt; JointID &gt;::const_iterator &gt;</type>
      <name>GetJoints</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac8f6e0a116a71527f6671053e7f8e616</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>JointID</type>
      <name>CreateJoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a306ddb4629a63298afd72f849a05bbe5</anchor>
      <arglist>(World &amp;world, const Joint &amp;def)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Destroy</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a806941861724bdba59cbcc6fc0cea61e</anchor>
      <arglist>(World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>const Joint &amp;</type>
      <name>GetJoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1107e6659ad32e836ad15e04758d15bf</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetJoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac4b3a69acd5e4d6ccceda622fd2a3e9a</anchor>
      <arglist>(World &amp;world, JointID id, const Joint &amp;def)</arglist>
    </member>
    <member kind="function">
      <type>TypeID</type>
      <name>GetType</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a27fd66901457a53162b0e900ca1b46a9</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetCollideConnected</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3b869cbb8b5896ccdf15c66f1d00761a</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>GetBodyA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a75920437a0a87a24443296f1191db23b</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>BodyID</type>
      <name>GetBodyB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3f6b43a34cbbdbc34530e5513820e2ac</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalAnchorA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>acde3e0a71def1cfceb2c821288555155</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLocalAnchorB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1aebe08694e219bf5032c3c44c5cc5ab</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Momentum2</type>
      <name>GetLinearReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3faa14e4c0188345c54d433a877ae01f</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>AngularMomentum</type>
      <name>GetAngularReaction</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a57bbf093e91c58e3bdf61479c561bee0</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetReferenceAngle</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a902c4e2db9331be98f4150759ed738bd</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAwake</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a85c5cee4a3713d3ef248eab7b4d05926</anchor>
      <arglist>(World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetLocalXAxisA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a35b304b54e47447d5277528ad2a9b469</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>UnitVec</type>
      <name>GetLocalYAxisA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af6865d25a20091233c0f8b104c658df2</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetMotorSpeed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a688c457d004db7df23965d2227f4124e</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMotorSpeed</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a900537131a6eb2dc318a7990d8c544b8</anchor>
      <arglist>(World &amp;world, JointID id, AngularVelocity value)</arglist>
    </member>
    <member kind="function">
      <type>AngularMomentum</type>
      <name>GetAngularMotorImpulse</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a80c87366a9452f7ef76b5474a723e245</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>RotInertia</type>
      <name>GetAngularMass</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a69407c4afef863d09f490618aa390318</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Torque</type>
      <name>GetMaxMotorTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af1b821c24f62a16d978fcce0f6ed0375</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetMaxMotorTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa4a8c62d8ac89a11ae8f6be2e8cded5a</anchor>
      <arglist>(World &amp;world, JointID id, Torque value)</arglist>
    </member>
    <member kind="function">
      <type>Frequency</type>
      <name>GetFrequency</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a72d60d568707d6551e9dedb02c9e2724</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFrequency</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a23e2f1041c3b5a7cbc2c1b1d7f7ff689</anchor>
      <arglist>(World &amp;world, JointID id, Frequency value)</arglist>
    </member>
    <member kind="function">
      <type>AngularVelocity</type>
      <name>GetAngularVelocity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af0d81eef4bb9836cfc9afef270a17054</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac628649081fe495f59e06aff27f3201d</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>JointCounter</type>
      <name>GetWorldIndex</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae1416ad660edc4914c490c7ea156ab93</anchor>
      <arglist>(const World &amp;world, JointID id) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetAnchorA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ad3c653a34c7a681dbc60ec447225e85f</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetAnchorB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa88982e1bd4c8bafe0160cdad5a68a71</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetRatio</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7089b428b6ec35dc8b4d62396982bbd0</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetJointTranslation</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a0469ef558d7b14efb4792c7f24084d7e</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngle</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a488b1925795688fed10e2f506cda91c5</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsLimitEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aea48262785f5cc1a4efcb6856e8327f2</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnableLimit</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae88a98bb1700968afaff9b143820e0d1</anchor>
      <arglist>(World &amp;world, JointID id, bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMotorEnabled</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a9f9bc9518243b79711cd0defe739671c</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnableMotor</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aec28b93da1c0c63493d4a9d05e95eff2</anchor>
      <arglist>(World &amp;world, JointID id, bool value)</arglist>
    </member>
    <member kind="function">
      <type>Momentum</type>
      <name>GetLinearMotorImpulse</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1136742708ea7dc3cfd2ec1fc3435e1b</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetLinearOffset</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a730510b6851cf86fdc29a007ff3b26f0</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLinearOffset</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a81d72e02a8cad05f27a97f52ab8fff3d</anchor>
      <arglist>(World &amp;world, JointID id, Length2 value)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngularOffset</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a1671b9e54818077d726f3f6cba342eb4</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngularOffset</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abddeb217913218d82cfb1857fc14e12b</anchor>
      <arglist>(World &amp;world, JointID id, Angle value)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetGroundAnchorA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5e44d6db77292b823171b97df09a3cd8</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetGroundAnchorB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5011bee6db23c7f1d50cadf00674e692</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetCurrentLengthA</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>afd81bf06efee4b29f2490134f52baddc</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetCurrentLengthB</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a11679510e7348f8480d317a02ba3e2aa</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>GetTarget</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a74c3d7ede9ca7f67050e7ef5c109d212</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTarget</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a5c5030bdc9a0a22cf720f3b3b551c6e2</anchor>
      <arglist>(World &amp;world, JointID id, Length2 value)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngularLowerLimit</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a25c524e133872333f16ba15dec55a23d</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngularUpperLimit</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a16abb6c18ad6df80be85a69e6cef496c</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAngularLimits</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aa07553452b8502796da81d8bb81b73d1</anchor>
      <arglist>(World &amp;world, JointID id, Angle lower, Angle upper)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a51154f75b56a864d6fd29682a5c16d8a</anchor>
      <arglist>(World &amp;world, JointID id, Length2 value)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>GetDampingRatio</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>aeb5fc13ad106742d7189897e0a95c2de</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetLength</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a806d53a54ac5ef05308d51d87cdf0192</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>LimitState</type>
      <name>GetLimitState</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af0dcaa1775e96d5b8014493d6e3dbc7d</anchor>
      <arglist>(const World &amp;world, JointID id)</arglist>
    </member>
    <member kind="function">
      <type>JointID</type>
      <name>CreateJoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ae2daf9b23558da46e3662b2405f97156</anchor>
      <arglist>(World &amp;world, const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetJoint</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac07ce291e8ce59c988ee4bafca890059</anchor>
      <arglist>(World &amp;world, JointID id, const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Force</type>
      <name>GetMotorForce</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a3e6c752f15d341da441a3b7541bf8791</anchor>
      <arglist>(const World &amp;world, JointID id, Frequency inv_dt)</arglist>
    </member>
    <member kind="function">
      <type>Torque</type>
      <name>GetMotorTorque</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a2eb6880ff8f81a8555c092138e0c6759</anchor>
      <arglist>(const World &amp;world, JointID id, Frequency inv_dt)</arglist>
    </member>
    <member kind="function">
      <type>JointCounter</type>
      <name>GetJointCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8902de592d92cefc72d2e984d591a27d</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFixtureDestructionListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>af41c649d4dd3ad38b1ea4345668123b3</anchor>
      <arglist>(World &amp;world, std::function&lt; void(FixtureID)&gt; listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetJointDestructionListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a6610b57bcd07b93a0aee57b1ee992b8c</anchor>
      <arglist>(World &amp;world, std::function&lt; void(JointID)&gt; listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBeginContactListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a653180033620e8c277350132bebfb55e</anchor>
      <arglist>(World &amp;world, std::function&lt; void(ContactID)&gt; listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEndContactListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a366fea84a0fee4e83888dc294dbd1454</anchor>
      <arglist>(World &amp;world, std::function&lt; void(ContactID)&gt; listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPreSolveContactListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a37ff0fa0aab9577c6da79333dfbd4cba</anchor>
      <arglist>(World &amp;world, std::function&lt; void(ContactID, const Manifold &amp;)&gt; listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPostSolveContactListener</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a128995c173435b41e5a7c1e7452a83ab</anchor>
      <arglist>(World &amp;world, std::function&lt; void(ContactID, const ContactImpulsesList &amp;, unsigned)&gt; listener) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a8811dc9edaaa6fa9aa10dc843bf4bb9a</anchor>
      <arglist>(World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetMinVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a37fe6b5dbdfa9f4e5b7a09bdcbd4485d</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Length</type>
      <name>GetMaxVertexRadius</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a33c81759b720514f3666528e7d9f2688</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>StepStats</type>
      <name>Step</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a7a6f95c38761b4ca2fcc284154f704c3</anchor>
      <arglist>(World &amp;world, const StepConf &amp;conf=StepConf{})</arglist>
    </member>
    <member kind="function">
      <type>StepStats</type>
      <name>Step</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a035ee60a3274619546a2cee7b982b894</anchor>
      <arglist>(World &amp;world, Time delta, TimestepIters velocityIterations=8, TimestepIters positionIterations=3)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GetSubStepping</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab8d7ece82bb9a60db3d1f1d98ac80b98</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetSubStepping</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>abd11a65631c7b9dd009090492fe98874</anchor>
      <arglist>(World &amp;world, bool flag) noexcept</arglist>
    </member>
    <member kind="function">
      <type>const DynamicTree &amp;</type>
      <name>GetTree</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ab314146b43aa31bdc72e5795b5f44659</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>FixtureCounter</type>
      <name>GetShapeCount</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a198704845b880c379966e5b79b297527</anchor>
      <arglist>(const World &amp;world) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ShiftOrigin</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>a262c7508b542fccad3e066c166a69ad2</anchor>
      <arglist>(World &amp;world, Length2 newOrigin)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Transform_identity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ac330e66ae1b4cbbfd851406256b18972</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>EarthlyGravity</name>
      <anchorfile>namespaceplayrho_1_1d2.html</anchorfile>
      <anchor>ababb5cdb48a1960a30aed40859075dee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>playrho::detail</name>
    <filename>namespaceplayrho_1_1detail.html</filename>
    <class kind="struct">playrho::detail::AABB</class>
    <class kind="struct">playrho::detail::Defaults</class>
    <class kind="struct">playrho::detail::Defaults&lt; Fixed&lt; std::int32_t, FRACTION_BITS &gt; &gt;</class>
    <class kind="class">playrho::detail::IndexingNamedType</class>
    <class kind="struct">playrho::detail::IsIterableImpl</class>
    <class kind="struct">playrho::detail::IsIterableImpl&lt; T, std::void_t&lt; decltype(begin(std::declval&lt; T &gt;())), decltype(end(std::declval&lt; T &gt;())), decltype(++std::declval&lt; decltype(begin(std::declval&lt; T &amp; &gt;()))&amp; &gt;()), decltype(*begin(std::declval&lt; T &gt;())) &gt; &gt;</class>
    <class kind="struct">playrho::detail::LengthIndices</class>
    <class kind="struct">playrho::detail::MassData</class>
    <class kind="struct">playrho::detail::RayCastInput</class>
    <class kind="struct">playrho::detail::SeparationInfo</class>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>ae9459aea2a9cd94f8089837a09f41003</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>abe2471568df9b5635f92209b8d25be38</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>ac7738d0953158fb06eada28384bde27b</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>aa3edeccc850d69e6165e5a5523e5b406</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a76b557d909c21ff5256aeb1a9d3b8c05</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a48d06003e414f652104fd195b308d296</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;lhs, const AABB&lt; N &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>TestOverlap</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a9ad73cec0b99cb943f354a290c7f9bfc</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;a, const AABB&lt; N &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt;</type>
      <name>GetIntersectingAABB</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a91d15c57e8504dca29a922fb382a0eec</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;a, const AABB&lt; N &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; Length, N &gt;</type>
      <name>GetCenter</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>aa5c9f951c0b82a2cdecdc7d559ca34d4</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; Length, N &gt;</type>
      <name>GetDimensions</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a3f0de4fdd4cecf5567090bf345c42ead</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; Length, N &gt;</type>
      <name>GetExtents</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a869cd35cc1b8a53bfdedd47f2b6b9000</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>Contains</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>aeccc4adba69c5f7bbf4c0c3724ae1fcc</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;a, const AABB&lt; N &gt; &amp;b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt; &amp;</type>
      <name>Include</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>aa5638faaf78557603c3e60b945f0c415</anchor>
      <arglist>(AABB&lt; N &gt; &amp;var, const Vector&lt; Length, N &gt; &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt; &amp;</type>
      <name>Include</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a5daa9c97e0b9a5dcf45681bf596639c3</anchor>
      <arglist>(AABB&lt; N &gt; &amp;var, const AABB&lt; N &gt; &amp;val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt; &amp;</type>
      <name>Move</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a5f59177e89e8d24dfee72915a0ebe649</anchor>
      <arglist>(AABB&lt; N &gt; &amp;var, const Vector&lt; Length, N &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt; &amp;</type>
      <name>Fatten</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a3b93a03d7da33af6899f8997a3b254ce</anchor>
      <arglist>(AABB&lt; N &gt; &amp;var, const NonNegative&lt; Length &gt; amount) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt;</type>
      <name>GetDisplacedAABB</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a1d14a66e8a7cca9d84a04736e498e1a2</anchor>
      <arglist>(AABB&lt; N &gt; aabb, const Vector&lt; Length, N &gt; displacement)</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt;</type>
      <name>GetFattenedAABB</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a3f169758eb050baf511b152fb5177735</anchor>
      <arglist>(AABB&lt; N &gt; aabb, const Length amount)</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt;</type>
      <name>GetMovedAABB</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a74557026c35a580c45dfc12f0c2bc6c0</anchor>
      <arglist>(AABB&lt; N &gt; aabb, const Vector&lt; Length, N &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AABB&lt; N &gt;</type>
      <name>GetEnclosingAABB</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>af0034e680404f80e04d94699d42ed07d</anchor>
      <arglist>(AABB&lt; N &gt; a, const AABB&lt; N &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; Length, N &gt;</type>
      <name>GetLowerBound</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>aad63477b5cea2c8275ecedff1f3f9530</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; Length, N &gt;</type>
      <name>GetUpperBound</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a98a4a10ae8cc38664e56b99a5ef40ba6</anchor>
      <arglist>(const AABB&lt; N &gt; &amp;aabb) noexcept</arglist>
    </member>
    <member kind="function">
      <type>inline ::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>aeedbbe27963b9396e1e566a97a03097a</anchor>
      <arglist>(::std::ostream &amp;os, const AABB&lt; N &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>af4a0970bf5a0f7b37eeb21d6301a75e2</anchor>
      <arglist>(MassData&lt; N &gt; lhs, MassData&lt; N &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a64050b6fc27058d98f7e504d4a3eacab</anchor>
      <arglist>(MassData&lt; N &gt; lhs, MassData&lt; N &gt; rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>factorial</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a9f8231d1d9f61cb1b262cd79c62951fb</anchor>
      <arglist>(std::int64_t n)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Fixed&lt; BT, FB &gt;</type>
      <name>exp</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a4237a1a9c35033e7f2d44fcba79b5c53</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>log</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a2133e6bdaa781faf55ab21c618328445</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Fixed&lt; BT, FB &gt;</type>
      <name>sin</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>aa3f589528f56370c3aff73cea9c043b8</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Fixed&lt; BT, FB &gt;</type>
      <name>cos</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a85d24ce8b375444d38c8c0b154c5fca3</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Fixed&lt; BT, FB &gt;</type>
      <name>atan</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a70e6d2d2422ff5e4331fa12d63591192</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>ComputeSqrt</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a841f7c8e6ad559c469948f3e26e7835d</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>AngularNormalize</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a027dccab6934b3c157ef2dc01ef3ccc0</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; angleInRadians)</arglist>
    </member>
    <member kind="function">
      <type>constexpr T &amp;</type>
      <name>UnderlyingValue</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a7b860a55d7e9a0e7c05b37787f138f0a</anchor>
      <arglist>(IndexingNamedType&lt; T, Tag &gt; &amp;o) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const T &amp;</type>
      <name>UnderlyingValue</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>ad04160d5c1648ce7423d94accd7f7268</anchor>
      <arglist>(const IndexingNamedType&lt; T, Tag &gt; &amp;o) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>max_size</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>aaa616ce7863431ef4a242233299ac2e3</anchor>
      <arglist>(const T &amp;arg) -&gt; decltype(arg.max_size())</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>IsFull</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a9c6ef61517707043fb5fd0891647687f</anchor>
      <arglist>(const T &amp;arg) -&gt; decltype(size(arg)==max_size(arg))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>Data</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>afc8349a3fdfeaeaf4017dfb267412ae6</anchor>
      <arglist>(T &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>Size</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>aa36e925a21b13b0e209f0d29e350ac83</anchor>
      <arglist>(T &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr const char *</type>
      <name>GetNameForTypeInfo</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a25d05ab7f476ecba879ae99a7d3e50bc</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>FixedPi</name>
      <anchorfile>namespaceplayrho_1_1detail.html</anchorfile>
      <anchor>a42d6cb8328944dfa9318f28ab0972130</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>std</name>
    <filename>namespacestd.html</filename>
    <class kind="struct">std::equal_to&lt; playrho::d2::JointKey &gt;</class>
    <class kind="struct">std::equal_to&lt;::playrho::propagate_const&lt; T &gt; &gt;</class>
    <class kind="struct">std::greater&lt;::playrho::propagate_const&lt; T &gt; &gt;</class>
    <class kind="struct">std::greater_equal&lt;::playrho::propagate_const&lt; T &gt; &gt;</class>
    <class kind="struct">std::hash&lt; playrho::ContactKey &gt;</class>
    <class kind="struct">std::hash&lt;::playrho::detail::IndexingNamedType&lt; T, Tag &gt; &gt;</class>
    <class kind="struct">std::hash&lt;::playrho::propagate_const&lt; T &gt; &gt;</class>
    <class kind="struct">std::less&lt; playrho::d2::JointKey &gt;</class>
    <class kind="struct">std::less&lt;::playrho::propagate_const&lt; T &gt; &gt;</class>
    <class kind="struct">std::less_equal&lt;::playrho::propagate_const&lt; T &gt; &gt;</class>
    <class kind="struct">std::not_equal_to&lt;::playrho::propagate_const&lt; T &gt; &gt;</class>
    <class kind="class">std::numeric_limits&lt; playrho::Fixed&lt; BT, FB &gt; &gt;</class>
    <class kind="class">std::tuple_element&lt; I, playrho::d2::UnitVec &gt;</class>
    <class kind="class">std::tuple_element&lt; I, playrho::Vector&lt; T, N &gt; &gt;</class>
    <class kind="class">std::tuple_size&lt; playrho::ArrayList&lt; T, N, SIZE_TYPE &gt; &gt;</class>
    <class kind="class">std::tuple_size&lt; playrho::d2::UnitVec &gt;</class>
    <class kind="class">std::tuple_size&lt; playrho::Vector&lt; T, N &gt; &gt;</class>
  </compound>
  <compound kind="group">
    <name>RayCastGroup</name>
    <title>Ray Casting Functions</title>
    <filename>group__RayCastGroup.html</filename>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gad7a1b955a57a2bb043750bf32cde2549</anchor>
      <arglist>(Length radius, Length2 location, const RayCastInput &amp;input) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>ga425e9dc1c0e263bf7484ef6ef2cde86b</anchor>
      <arglist>(const ::playrho::detail::AABB&lt; 2 &gt; &amp;aabb, const RayCastInput &amp;input) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gabc2e992343e201f48c1956753a530247</anchor>
      <arglist>(const DistanceProxy &amp;proxy, const RayCastInput &amp;input, const Transformation &amp;transform) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gaada5f6c5635166baaf1bc81636d8b93a</anchor>
      <arglist>(const Shape &amp;shape, ChildCounter childIndex, const RayCastInput &amp;input, const Transformation &amp;transform) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gadf0ec62e1852e3bc9b017eae4a5616b4</anchor>
      <arglist>(const DynamicTree &amp;tree, RayCastInput input, const DynamicTreeRayCastCB &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gae96eee6263453ce2250d79fd8beb88bd</anchor>
      <arglist>(const World &amp;world, const RayCastInput &amp;input, const FixtureRayCastCB &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gabc2e992343e201f48c1956753a530247</anchor>
      <arglist>(const DistanceProxy &amp;proxy, const RayCastInput &amp;input, const Transformation &amp;transform) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RayCastOutput</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gaada5f6c5635166baaf1bc81636d8b93a</anchor>
      <arglist>(const Shape &amp;shape, ChildCounter childIndex, const RayCastInput &amp;input, const Transformation &amp;transform) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>RayCast</name>
      <anchorfile>group__RayCastGroup.html</anchorfile>
      <anchor>gae96eee6263453ce2250d79fd8beb88bd</anchor>
      <arglist>(const World &amp;world, const RayCastInput &amp;input, const FixtureRayCastCB &amp;callback)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>PartsGroup</name>
    <title>Shape Classes</title>
    <filename>group__PartsGroup.html</filename>
    <class kind="class">playrho::d2::ChainShapeConf</class>
    <class kind="struct">playrho::d2::DiskShapeConf</class>
    <class kind="class">playrho::d2::EdgeShapeConf</class>
    <class kind="struct">playrho::d2::MultiShapeConf</class>
    <class kind="class">playrho::d2::PolygonShapeConf</class>
    <class kind="class">playrho::d2::Shape</class>
  </compound>
  <compound kind="group">
    <name>CheckedValues</name>
    <title>Checked Value Types</title>
    <filename>group__CheckedValues.html</filename>
    <member kind="typedef">
      <type>CheckedValue&lt; T &gt;</type>
      <name>DefaultCheckedValue</name>
      <anchorfile>group__CheckedValues.html</anchorfile>
      <anchor>gae37a2881e65f48db22b37ebdf8a2075e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CheckedValue&lt; T, FiniteChecker&lt; T &gt; &gt;</type>
      <name>Finite</name>
      <anchorfile>group__CheckedValues.html</anchorfile>
      <anchor>ga46783d843137ba60b696139078119dec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CheckedValue&lt; T, NegativeChecker&lt; T &gt; &gt;</type>
      <name>Negative</name>
      <anchorfile>group__CheckedValues.html</anchorfile>
      <anchor>gab69142355b498ed0ff7ec9ee8aec5d7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CheckedValue&lt; T, NonNegativeChecker&lt; T &gt; &gt;</type>
      <name>NonNegative</name>
      <anchorfile>group__CheckedValues.html</anchorfile>
      <anchor>gac74ec9c65c8f22cefed941aa486af9e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CheckedValue&lt; T, NonPositiveChecker&lt; T &gt; &gt;</type>
      <name>NonPositive</name>
      <anchorfile>group__CheckedValues.html</anchorfile>
      <anchor>gae7595073697fcf149a7828d5ea96c23d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::enable_if_t&lt;!std::is_pointer&lt; T &gt;::value, CheckedValue&lt; T, NonZeroChecker&lt; T &gt; &gt;&gt;</type>
      <name>NonZero</name>
      <anchorfile>group__CheckedValues.html</anchorfile>
      <anchor>ga78bf6648df130b547bb5e79e3dcb9a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::enable_if_t&lt; std::is_pointer&lt; T &gt;::value, CheckedValue&lt; T, NonZeroChecker&lt; T &gt; &gt;&gt;</type>
      <name>NonNull</name>
      <anchorfile>group__CheckedValues.html</anchorfile>
      <anchor>ga6765653a298365f410348651dff5b088</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CheckedValue&lt; T, PositiveChecker&lt; T &gt; &gt;</type>
      <name>Positive</name>
      <anchorfile>group__CheckedValues.html</anchorfile>
      <anchor>ga68f6ae626f30553fcc05b6d944bae742</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CheckedValue&lt; T, UnitIntervalChecker&lt; T &gt; &gt;</type>
      <name>UnitInterval</name>
      <anchorfile>group__CheckedValues.html</anchorfile>
      <anchor>gabdc100fb69df2f2d3726be076c6b9501</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>FixedMath</name>
    <title>Math Functions For Fixed Types</title>
    <filename>group__FixedMath.html</filename>
    <namespace>playrho::detail</namespace>
    <member kind="function">
      <type>constexpr Fixed&lt; BT, FB &gt;</type>
      <name>abs</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>gad5766364e4f6e29b62f20216a25a678f</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Fixed&lt; BT, FB &gt;</type>
      <name>pow</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>gae62c436656c3c2a2e0d46d83fe1ea3ae</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; value, int n)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Fixed&lt; BT, FB &gt;</type>
      <name>trunc</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga55adeaba7e08eb415e6437f709b62c0f</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>nextafter</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga935fa93a69f58baf20b00e14461d51e7</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; from, Fixed&lt; BT, FB &gt; to) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>fmod</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>gaae59d507ab3b0f722d4d22b3e4969f4a</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; dividend, Fixed&lt; BT, FB &gt; divisor) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>sqrt</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga7a9d7e9855b45a3b4103632a47ccd6f4</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isnormal</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga4ab479ab854291e9d03a25cc0986deca</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>sin</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga0daabd6eacf8702561639d394e3efe6e</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>cos</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>gaf6191f040980675d9a5c71bd53c79060</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>atan</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>gaa5670d26d229424278268189beb541f5</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>atan2</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>gaad3e4450a30d08eceda4225bd26c312b</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; y, Fixed&lt; BT, FB &gt; x)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>log</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga661c3590b9b618ac14194bf25a70f1d6</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>exp</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga7ddb9c067c645bded41aafe75cfecd02</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; arg)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>pow</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga85dfc7d7d071b22f80179a86e5544237</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; base, Fixed&lt; BT, FB &gt; exponent)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>hypot</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>gafff5f9018a9088992be3c922926aee56</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; x, Fixed&lt; BT, FB &gt; y)</arglist>
    </member>
    <member kind="function">
      <type>Fixed&lt; BT, FB &gt;</type>
      <name>round</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga1e3ca7fb2626886c5920bbc5f570a525</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signbit</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>ga8445167791eb53f1e8eb0dbf318293a1</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>isnan</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>gab57c92b7d96634ba24fa1f6c25647799</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isfinite</name>
      <anchorfile>group__FixedMath.html</anchorfile>
      <anchor>gab8fa73692143466ca4d584aacf5749f1</anchor>
      <arglist>(Fixed&lt; BT, FB &gt; value) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Math</name>
    <title>Additional Math Functions</title>
    <filename>group__Math.html</filename>
    <member kind="function">
      <type>constexpr U</type>
      <name>Secant</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga9cf6fb58c36515834217c6b150b43772</anchor>
      <arglist>(T target, U a1, T s1, U a2, T s2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>Bisect</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga8ccc71ac7ccd063fd81a31d78c3d2c90</anchor>
      <arglist>(T a1, T a2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>IsOdd</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga76721557b2b677d24efa2d0415954be5</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Square</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga948ebcbc9ef959d24546e6c8ff848fa6</anchor>
      <arglist>(TYPE t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>Atan2</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gab870a9188fcc77c905807fa718a8268d</anchor>
      <arglist>(T y, T x)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>Average</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga8b2133f1c2e5299035bb059d2d2706cd</anchor>
      <arglist>(const T &amp;span)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; IsArithmetic&lt; T &gt;::value, T &gt;</type>
      <name>RoundOff</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gab8f24574b8a0ca458ec2fe9d691364ff</anchor>
      <arglist>(T value, unsigned precision=100000)</arglist>
    </member>
    <member kind="function">
      <type>Vec2</type>
      <name>RoundOff</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga812ea5eaf66fb9d1bffa799886b2eee3</anchor>
      <arglist>(Vec2 value, std::uint32_t precision=100000)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; T, N &gt;</type>
      <name>abs</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga901850dd04519b8e6d642ab96a10d9ea</anchor>
      <arglist>(const Vector&lt; T, N &gt; &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>d2::UnitVec</type>
      <name>abs</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gac862a8609b82126d0683ecb38a498087</anchor>
      <arglist>(const d2::UnitVec &amp;v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_arithmetic&lt; T &gt;::value, bool &gt;</type>
      <name>AlmostZero</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gafd0270fbd098406a8cf4496d1de8a155</anchor>
      <arglist>(T value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::enable_if_t&lt; std::is_floating_point&lt; T &gt;::value, bool &gt;</type>
      <name>AlmostEqual</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga00c5f66dc1a40a727a7983aab1d92929</anchor>
      <arglist>(T x, T y, int ulp=2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>ModuloViaFmod</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga25b52facf9e28f05e5e41f4e7b7ff54e</anchor>
      <arglist>(T dividend, T divisor) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>ModuloViaTrunc</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga84e7cb2a415fcb956202c8d7e1b1d200</anchor>
      <arglist>(T dividend, T divisor) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetNormalized</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga156a2abff11f978a8df25efbf0c10147</anchor>
      <arglist>(Angle value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetAngle</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga56785e4c60180ef416fe29f68ccf525a</anchor>
      <arglist>(const Vector2&lt; T &gt; value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetMagnitudeSquared</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga1ac00e661c653f21ddbd0693bbb039ac</anchor>
      <arglist>(T value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>GetMagnitude</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga85c114f129eeee63e60ec7d4703bbd65</anchor>
      <arglist>(T value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Dot</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga451c8554a408d41df85a41650e0ada93</anchor>
      <arglist>(const T1 a, const T2 b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Cross</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga804d55e7545685ee9841c239bdac7c8f</anchor>
      <arglist>(T1 a, T2 b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Solve</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga3846333746b73978c91e250c6f239ce3</anchor>
      <arglist>(const Matrix22&lt; U &gt; mat, const Vector2&lt; T &gt; b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Invert</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga00cc9646bab6ce84d6b4704f8c1e0ade</anchor>
      <arglist>(const Matrix22&lt; IN_TYPE &gt; value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vec3</type>
      <name>Solve33</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gab4795a90a377c5335ce5b1900caf6d24</anchor>
      <arglist>(const Mat33 &amp;mat, const Vec3 b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>Solve22</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga0a0606abee6bd0cc122578a2a640f044</anchor>
      <arglist>(const Mat33 &amp;mat, const T b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mat33</type>
      <name>GetInverse22</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gaeaceaa1218e1f86e27e6678db247bc79</anchor>
      <arglist>(const Mat33 &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mat33</type>
      <name>GetSymInverse33</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gae7a513e105038f6425bfc83180a69cd3</anchor>
      <arglist>(const Mat33 &amp;value) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetRevPerpendicular</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga6aa0aece94173885da01b5e3a6737af7</anchor>
      <arglist>(const T vector) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>GetFwdPerpendicular</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga87b57d633b625c58f9200a201e4664a7</anchor>
      <arglist>(const T vector) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>Transform</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gac898f9ba1986f3886cb93c0668613c41</anchor>
      <arglist>(const Vector&lt; T1, M &gt; v, const Matrix&lt; T2, M, N &gt; &amp;m) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vec2</type>
      <name>Transform</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga52a7716aaab729705e73d4d533e81672</anchor>
      <arglist>(const Vec2 v, const Mat33 &amp;A) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vec2</type>
      <name>InverseTransform</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga819a9ef6f9c3d492b5177ca25077618e</anchor>
      <arglist>(const Vec2 v, const Mat22 &amp;A) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mat22</type>
      <name>MulT</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gab471bae6413067374ab8d8262533e402</anchor>
      <arglist>(const Mat22 &amp;A, const Mat22 &amp;B) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Mat22</type>
      <name>abs</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga94fee43efb2fa412b816e9e0a7df87f8</anchor>
      <arglist>(const Mat22 &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>NextPowerOfTwo</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga2e157fe9f9288debcd4be111a2485991</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>Normalize</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga0c7d2525a406c1f83c0574e46a2cee32</anchor>
      <arglist>(Vec2 &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>Length2</type>
      <name>ComputeCentroid</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gae769785f0540a4b8960b282f6b105c14</anchor>
      <arglist>(const Span&lt; const Length2 &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>GetModuloNext</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>gaf9689e93a5538424dfb54bbbb78ad217</anchor>
      <arglist>(T value, T count) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>GetModuloPrev</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga37e627f196ec102af9dd855d05611a6e</anchor>
      <arglist>(T value, T count) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Angle</type>
      <name>GetDelta</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga8c036532db1260373b97c1d85360894c</anchor>
      <arglist>(Angle a1, Angle a2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Angle</type>
      <name>GetRevRotationalAngle</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga07dcf271b85b501cd2d7188902066e55</anchor>
      <arglist>(Angle a1, Angle a2) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Length2 &gt;</type>
      <name>GetCircleVertices</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga3b8e8abc999b0c63cf1921b0edcf0b36</anchor>
      <arglist>(Length radius, unsigned slices, Angle start=0_deg, Real turns=Real{1})</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Area &gt;</type>
      <name>GetAreaOfCircle</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga0eb57dabfe8d3db9e509a6b493173358</anchor>
      <arglist>(Length radius)</arglist>
    </member>
    <member kind="function">
      <type>NonNegative&lt; Area &gt;</type>
      <name>GetAreaOfPolygon</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga118f8284073d2638e48ef8f13177e1d9</anchor>
      <arglist>(Span&lt; const Length2 &gt; vertices)</arglist>
    </member>
    <member kind="function">
      <type>SecondMomentOfArea</type>
      <name>GetPolarMoment</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga760adfdd1cb30bdae8cd37c1ae5da485</anchor>
      <arglist>(Span&lt; const Length2 &gt; vertices)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Vector&lt; T, N &gt;</type>
      <name>abs</name>
      <anchorfile>group__Math.html</anchorfile>
      <anchor>ga901850dd04519b8e6d642ab96a10d9ea</anchor>
      <arglist>(const Vector&lt; T, N &gt; &amp;v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>MatrixTraitsGroup</name>
    <title>Matrix Traits</title>
    <filename>group__MatrixTraitsGroup.html</filename>
    <class kind="struct">playrho::IsMatrix</class>
    <class kind="struct">playrho::IsMatrix&lt; Vector&lt; Vector&lt; T, N &gt;, M &gt; &gt;</class>
    <class kind="struct">playrho::IsSquareMatrix</class>
    <class kind="struct">playrho::IsSquareMatrix&lt; Vector&lt; Vector&lt; T, M &gt;, M &gt; &gt;</class>
  </compound>
  <compound kind="group">
    <name>DecimalUnitPrefices</name>
    <title>Decimal Unit Prefices</title>
    <filename>group__DecimalUnitPrefices.html</filename>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Centi</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>ga0367ca8edd23b32c868e3fe5f79082ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Deci</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>ga5a49a7e54c1b478f5b1cc882aa55f2d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Kilo</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>gae537180a6f4ceb3a3192ee623fc2c8bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Mega</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>gad7b2132b6101f0d7f6b3658147025168</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Giga</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>ga66ca2124fd143e2433bb2f409dc83f92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Tera</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>gaf30f732f080ece0b4e695da15e9da2a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Peta</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>ga590efc6f9c2013056da85de7ab4e84ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Yotta</name>
      <anchorfile>group__DecimalUnitPrefices.html</anchorfile>
      <anchor>ga57179cfbd588c3d24609ad449a94bb0a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>PhysicalQuantities</name>
    <title>Physical Quantity Types</title>
    <filename>group__PhysicalQuantities.html</filename>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::time)</type>
      <name>Time</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga250898c9929b0e6eaf56a1967c568888</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::frequency)</type>
      <name>Frequency</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gad39135cf298be76964c70829ec84a51e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::length)</type>
      <name>Length</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga7361ef2e10e7853a05b64aa433651014</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::velocity)</type>
      <name>LinearVelocity</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga6e944c18ed210626b5829b8ad2813fde</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::acceleration)</type>
      <name>LinearAcceleration</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gadf7de472e7f4a6fa26bff6a655f100e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::mass)</type>
      <name>Mass</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga5edfc295416b7690b4f949223b551bc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(playrho::units::si::inverse_mass)</type>
      <name>InvMass</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga9b387148008099ec9d37dbcf1f1a1571</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::area)</type>
      <name>Area</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga3ea2a7de91fdafccb2e49c3a84117ab5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::surface_density)</type>
      <name>AreaDensity</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga534c92a63631b49d1e80119a68af8a4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::plane_angle)</type>
      <name>Angle</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gab999341c050df340ff56a65816a63da9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::angular_velocity)</type>
      <name>AngularVelocity</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gac33f92018f7e8821550296aece465028</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::angular_acceleration)</type>
      <name>AngularAcceleration</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gafcce543a0d59f313adb801e2e18ede86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::force)</type>
      <name>Force</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gabdbf955ed1cafec5062f074511ee4829</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::torque)</type>
      <name>Torque</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gaa13e620479b6e4a34fae5a90bcaf9355</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(playrho::units::si::second_moment_of_area)</type>
      <name>SecondMomentOfArea</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga9ded7e1044d55beb1ca2957d671ece44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::moment_of_inertia)</type>
      <name>RotInertia</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga67bbb3e4938321efec8d939636bf988e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(playrho::units::si::inverse_moment_of_inertia)</type>
      <name>InvRotInertia</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>gad5941a3d5c4b22ba991887772a3744de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::momentum)</type>
      <name>Momentum</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga1d281ffd7cf8e2c8897d03a1cae9f1f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PLAYRHO_QUANTITY(boost::units::si::angular_momentum)</type>
      <name>AngularMomentum</name>
      <anchorfile>group__PhysicalQuantities.html</anchorfile>
      <anchor>ga3537d441743bb2f96c612296424f1e43</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>PhysicalUnits</name>
    <title>Units For Physical Quantities</title>
    <filename>group__PhysicalUnits.html</filename>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Second</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga6dacec03532687e9bac4ac6a882b35ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>SquareSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga64467fca61de8c359a4e019f977ff320</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Hertz</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gadef54036b9480e0cf730100688e20570</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Meter</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gab5d1d9c70d11cff5fb552e939de39b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>MeterPerSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga9d80fc94ec9d5990d2fa6b9e4b67267d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>MeterPerSquareSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga0bc87db1f0fbc1b5f1ae9b44c66b6e82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Kilogram</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gad4ca745853415c1b3df906848978df9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>SquareMeter</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga1fb0acbda4409a1a132baf7df83b9870</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>CubicMeter</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga0107011ec7329a9ac267119f7ff941bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>KilogramPerSquareMeter</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga64416f646855741c31802eb689760ba8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Radian</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gaebbe3f5282db32af8292500e505e21e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Degree</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gaf0840a4c6fcfa4ed0f1e25820fea0ca3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>SquareRadian</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga941b3913fd0dd86a33e695cd9b73318f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>RadianPerSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga446e46852ff69dee446aadc44635865c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DegreePerSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga987ba57899c87b7d6734d046d1c854b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>RadianPerSquareSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga0da7c45fe3ebc86d397e684154033742</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>DegreePerSquareSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga7a7cdea552b0f98a011b3287850433a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>Newton</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gac88db74a1ddb390655f0837d9c970f76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>NewtonMeter</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gab920bd1046410474258f9e8630e557a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>NewtonSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga64db6556e1824d11178c3d68301c2adc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>NewtonMeterSecond</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>gae55524173aec32daa74def2b8dddc0bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>RevolutionsPerMinute</name>
      <anchorfile>group__PhysicalUnits.html</anchorfile>
      <anchor>ga46b97afc56560699033e7c3fb480a4f7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Unitsymbols</name>
    <title>Literals For Unit Symbols</title>
    <filename>group__Unitsymbols.html</filename>
    <member kind="function">
      <type>constexpr Mass</type>
      <name>operator&quot;&quot;_g</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga6ce86132eda24d9d313987cba6a40c16</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mass</type>
      <name>operator&quot;&quot;_g</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gab99c0b153cdb012f8093f047b1e3b13a</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mass</type>
      <name>operator&quot;&quot;_kg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga4275b8597bcf1f8a32e4ac63d15e8c2e</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mass</type>
      <name>operator&quot;&quot;_kg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga0583d00d5cfbd6ebafb90513fb2e8716</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mass</type>
      <name>operator&quot;&quot;_Pg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gac5ea7c8025fab0245e701dd6b8d007e3</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mass</type>
      <name>operator&quot;&quot;_Pg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gaaac22c102dd87d993148b80a1eee53f5</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mass</type>
      <name>operator&quot;&quot;_Yg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga33cea28a3e64ca1c6d99f7f8faf94fce</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mass</type>
      <name>operator&quot;&quot;_Yg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gae72c48eb6e122d69ef30a66c46097e4d</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_m</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gac44de43c674315e6fbd85b6e5ddfdaf2</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_m</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga7d89f0cf5e3cfca6baca44e120dca07e</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_dm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gae82c9c088bc93622218a1badc9d03b5a</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_dm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga0d299ad14289355c2f342e05e73e1b20</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_cm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga04dc851fdae513e0f9b14f8a4b74c9a1</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_cm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gadbf7524233f643e271fc50aa6d2a4401</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_Gm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gaf479ecbf0200f8bd8e17e29f731a4382</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_Gm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gad6bac94ca61f289cd740eee1cc43457a</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_Mm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga96ba59041cd8bad1d0d9cfa25849e83c</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_Mm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga28f21b0a602e2254b1262f893afec589</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_km</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gaec4a5ced37bf0be5d99290b2d849ba7c</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Length</type>
      <name>operator&quot;&quot;_km</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gafb2666059c4896c7f4ee37638f200f92</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Time</type>
      <name>operator&quot;&quot;_s</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gad8e688fefbc6a775e54e3007452ffb31</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Time</type>
      <name>operator&quot;&quot;_s</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gad3c7c61bf90f4d1d293c0e21a6b91e6c</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Time</type>
      <name>operator&quot;&quot;_min</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gaf76dd9ba5e10ec5fff19e862c6eb6233</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Time</type>
      <name>operator&quot;&quot;_min</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga18e617896083abcb8613740cccb0256f</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Time</type>
      <name>operator&quot;&quot;_h</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga600eebec225b23a712127c7abc6fcc7f</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Time</type>
      <name>operator&quot;&quot;_h</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga8a7e67e9f6f6ce9afd6b5dd838d403ed</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Time</type>
      <name>operator&quot;&quot;_d</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gab5a3c470d8b4526200a1d2624ddab62e</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Time</type>
      <name>operator&quot;&quot;_d</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gac162fd06cbec0dd5f6139bbe9a84a6af</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Angle</type>
      <name>operator&quot;&quot;_rad</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gaab9f386c8751e2883dddc4893dc0182c</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Angle</type>
      <name>operator&quot;&quot;_rad</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga508a82478f814f16e0a59d960ae70590</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Angle</type>
      <name>operator&quot;&quot;_deg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gaf8c63e873b437f0cb242bc4bdc6f8af6</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Angle</type>
      <name>operator&quot;&quot;_deg</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gab6f526d13a814b761e72261aff8f2f57</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Force</type>
      <name>operator&quot;&quot;_N</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga930727b91c3eb0546d44b7ae6618222c</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Force</type>
      <name>operator&quot;&quot;_N</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga571aff9a2615a7a0bed40f9e054b66a7</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Area</type>
      <name>operator&quot;&quot;_m2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gac6c8357df9fe338a73682102308ecca7</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Area</type>
      <name>operator&quot;&quot;_m2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga39c8b53142a362994deef473436686e5</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr LinearVelocity</type>
      <name>operator&quot;&quot;_mps</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gac5523ffa4958cae83ead5ca14aed1d3e</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr LinearVelocity</type>
      <name>operator&quot;&quot;_mps</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gaebbde261f2aeea6755fb870a29530438</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr LinearVelocity</type>
      <name>operator&quot;&quot;_kps</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gac876272e650fa5949583536207e8d047</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr LinearVelocity</type>
      <name>operator&quot;&quot;_kps</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gaa92eb53b542247ea1a4546ea5d296a7e</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr LinearAcceleration</type>
      <name>operator&quot;&quot;_mps2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga29fd0c08001cd86d9fffaeba8db0bad2</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr LinearAcceleration</type>
      <name>operator&quot;&quot;_mps2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga4dcac2c8c0ba41800377dfa7fc1396d9</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Frequency</type>
      <name>operator&quot;&quot;_Hz</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga0e1f5fa0f1ce0785ae11f789eb69a2f4</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Frequency</type>
      <name>operator&quot;&quot;_Hz</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga6b528013add62057edbddb11c79c8a36</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Torque</type>
      <name>operator&quot;&quot;_Nm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gad274f795522e2b024bac4ce6b4a1636d</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Torque</type>
      <name>operator&quot;&quot;_Nm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gaf44dd10192e584c1ff4094a3b1035732</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum</type>
      <name>operator&quot;&quot;_Ns</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga4e4af46280404d4cb71047dd34d67097</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Momentum</type>
      <name>operator&quot;&quot;_Ns</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga4efb2b2f16bc784b7d57ca46ed3f6a13</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AreaDensity</type>
      <name>operator&quot;&quot;_kgpm2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga948148b4234cf1f7030a336d64868129</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AreaDensity</type>
      <name>operator&quot;&quot;_kgpm2</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>gacb329e2432dd4b9d459faf7a89501847</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AngularVelocity</type>
      <name>operator&quot;&quot;_rpm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga9ca4e4146c562c10b7b630bb5e84f791</anchor>
      <arglist>(unsigned long long int v) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr AngularVelocity</type>
      <name>operator&quot;&quot;_rpm</name>
      <anchorfile>group__Unitsymbols.html</anchorfile>
      <anchor>ga7fba9a464320ef807425a9696f4af414</anchor>
      <arglist>(long double v) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>UnitConstants</name>
    <title>Physical Constants</title>
    <filename>group__UnitConstants.html</filename>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>EarthlyLinearAcceleration</name>
      <anchorfile>group__UnitConstants.html</anchorfile>
      <anchor>ga770e7e3c14510e96d5115b36988e5dde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>BigG</name>
      <anchorfile>group__UnitConstants.html</anchorfile>
      <anchor>ga4435a07d3cb65258172c132b134c02fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>VectorTraitsGroup</name>
    <title>Vector Traits</title>
    <filename>group__VectorTraitsGroup.html</filename>
    <class kind="struct">playrho::IsVector</class>
    <class kind="struct">playrho::IsVector&lt; Vector&lt; T, N &gt; &gt;</class>
  </compound>
  <compound kind="group">
    <name>JointsGroup</name>
    <title>Joint Classes</title>
    <filename>group__JointsGroup.html</filename>
    <class kind="struct">playrho::d2::DistanceJointConf</class>
    <class kind="struct">playrho::d2::FrictionJointConf</class>
    <class kind="struct">playrho::d2::GearJointConf</class>
    <class kind="class">playrho::d2::Joint</class>
    <class kind="struct">playrho::d2::MotorJointConf</class>
    <class kind="struct">playrho::d2::PrismaticJointConf</class>
    <class kind="struct">playrho::d2::PulleyJointConf</class>
    <class kind="struct">playrho::d2::RevoluteJointConf</class>
    <class kind="struct">playrho::d2::RopeJointConf</class>
    <class kind="struct">playrho::d2::TargetJointConf</class>
    <class kind="struct">playrho::d2::WeldJointConf</class>
    <class kind="struct">playrho::d2::WheelJointConf</class>
  </compound>
  <compound kind="group">
    <name>PhysicalEntities</name>
    <title>Physical Entities</title>
    <filename>group__PhysicalEntities.html</filename>
    <class kind="class">playrho::d2::Body</class>
    <class kind="struct">playrho::d2::BodyConf</class>
    <class kind="class">playrho::d2::Contact</class>
    <class kind="struct">playrho::d2::FixtureConf</class>
    <class kind="class">playrho::d2::Joint</class>
  </compound>
  <compound kind="group">
    <name>TestPointGroup</name>
    <title>Point Containment Test Functions</title>
    <filename>group__TestPointGroup.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>TestPoint</name>
      <anchorfile>group__TestPointGroup.html</anchorfile>
      <anchor>gac9da7b3dd9e1dc5532a0f3c47f31f22e</anchor>
      <arglist>(const DistanceProxy &amp;proxy, Length2 point) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestPoint</name>
      <anchorfile>group__TestPointGroup.html</anchorfile>
      <anchor>gafcfbf811dc989043838f0a4c7c64b59b</anchor>
      <arglist>(const Shape &amp;shape, Length2 point) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestPoint</name>
      <anchorfile>group__TestPointGroup.html</anchorfile>
      <anchor>gad0dda7c567b740e8ce2e4f04fa593a25</anchor>
      <arglist>(const World &amp;world, FixtureID id, Length2 p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestPoint</name>
      <anchorfile>group__TestPointGroup.html</anchorfile>
      <anchor>gac9da7b3dd9e1dc5532a0f3c47f31f22e</anchor>
      <arglist>(const DistanceProxy &amp;proxy, Length2 point) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestPoint</name>
      <anchorfile>group__TestPointGroup.html</anchorfile>
      <anchor>gafcfbf811dc989043838f0a4c7c64b59b</anchor>
      <arglist>(const Shape &amp;shape, Length2 point) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TestPoint</name>
      <anchorfile>group__TestPointGroup.html</anchorfile>
      <anchor>gad0dda7c567b740e8ce2e4f04fa593a25</anchor>
      <arglist>(const World &amp;world, FixtureID id, Length2 p)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>ExceptionsGroup</name>
    <title>Library Defined Exceptions</title>
    <filename>group__ExceptionsGroup.html</filename>
    <class kind="class">playrho::InvalidArgument</class>
    <class kind="class">playrho::LengthError</class>
    <class kind="class">playrho::WrongState</class>
  </compound>
  <compound kind="group">
    <name>ConstraintsGroup</name>
    <title>Library Defined Constraints</title>
    <filename>group__ConstraintsGroup.html</filename>
    <subgroup>JointsGroup</subgroup>
    <class kind="class">playrho::d2::Contact</class>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>PlayRho API Documentation</title>
    <filename>index.html</filename>
    <docanchor file="index.html" title="Overview">intro_sec</docanchor>
    <docanchor file="index.html" title="Getting Started">coding_sec</docanchor>
    <docanchor file="index.html" title="An Entire Application">helloworld_sec</docanchor>
  </compound>
</tagfile>
