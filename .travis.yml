# This file configures the build and run environment on https://travis-ci.org/

# Specify the operating systems on which to test for.
os:
  - linux

# For details on building a C++ project see: https://docs.travis-ci.com/user/languages/cpp/
language: cpp

dist: trusty

# Specifiy which compiler or compilers to test against.
# For details, see https://docs.travis-ci.com/user/languages/cpp/#Choosing-compilers-to-test-against
compiler:
  - clang
  - gcc

# Define build environment variables.
# Each variable causes an individual build.
env:
  - REAL_TYPE=float
  - REAL_TYPE=double

# Specify explicitly which branches to build or not build
# For details see: https://docs.travis-ci.com/user/customizing-the-build/#Building-Specific-Branches
branches:
  only:
    - master

# Specify which OS X image to use.
# "xcode8" is supposed to provide a macosx10.11 SK preinstalled.
# For details see: https://docs.travis-ci.com/user/osx-ci-environment/
#osx_image: xcode8

#xcode_project: Build/xcode5/PlayRho.xcodeproj
#xcode_scheme: UnitTest

# https://cmake.org/files/v3.7/cmake-3.7.2-Linux-x86_64.tar.gz

# Specify which "apt" packages to install/update.
# For white-listed aliases, see https://github.com/travis-ci/apt-source-whitelist/blob/master/ubuntu.json
#
# Ideally there are usable packages for GLFW version 3 or GLEW version 2 but
# I haven't found usable ones. The closest I got was from a source that
# appeared to cause package conflicts. So these are dealt with later in the
# install stage by downloading, building and installing them the manual way.
#
addons:
  apt:
    sources:
      - deadsnakes
      - ubuntu-toolchain-r-test
      - george-edison55-precise-backports
      - llvm-toolchain-trusty-5.0
    packages:
      - build-essential
      - cmake
      - cmake-data
      - clang-5.0
      - g++-8
      - gcc-8
      - xorg-dev
      - libx11-dev
      - libxmu-dev
      - libxi-dev
      - libgl1-mesa-dev
      - libosmesa-dev
      - lcov
      - ggcov

# Seems new way is to call: pip install --user cpp-coveralls
# That works for installing cpp-coveralls, but haven't figured out how to get cpp-coveralls to work.
before_install:
  - gem install coveralls-lcov
  - pip install --user cpp-coveralls

# Install stage. Setup dependencies that can't be setup as addon packages.
#
# I'd prefer that GLFW and GLEW get installed as packages but I didn't find
# usable packages for GLFW version 3 (or newer) and GLEW version 2 (or newer).
# Both of which are required for the PlayRho Testbed and ONLY the Testbed.
#
# Additional notes:
# Linux seems to usually support "sha256sum". OS X meanwhile calls it "shasum".
# For dumping compiler macros: $CXX -dM -E - < /dev/null | sort
# Don't use backslashes for line folding/breaking; they don't work for that.
#
install:
  - |
    if [ "$CXX" = "g++" ]
    then
      export CXX="g++-8" CC="gcc-8"
      wget http://downloads.sourceforge.net/ltp/lcov-1.13.tar.gz
      tar xf lcov-1.13.tar.gz
      mkdir -p /tmp/usr
      make -C lcov-1.13/ PREFIX=/tmp/usr install
    fi
  - if [ "$CXX" = "clang++" ]; then export CXX="clang++-5.0" CC="clang-5.0"; fi
  - |
    echo CXX=$CXX HOME=$HOME TRAVIS_BUILD_DIR=$TRAVIS_BUILD_DIR
    cmake --version
    export SOURCE_ROOT="${TRAVIS_BUILD_DIR}" BUILD_ROOT="${TRAVIS_BUILD_DIR}-Build"
    PLAYRHO_BUILD_OPTIONS="-DPLAYRHO_BUILD_UNIT_TESTS=ON -DPLAYRHO_BUILD_HELLOWORLD=ON -DPLAYRHO_BUILD_TESTBED=ON"
  - |
    if [ "${REAL_TYPE}foo" != "foo" ]; then
      PLAYRHO_BUILD_OPTIONS="$PLAYRHO_BUILD_OPTIONS -DPLAYRHO_REAL_TYPE=$REAL_TYPE"
    fi
    if [ "$CXX" = "clang++" ]; then
      PLAYRHO_BUILD_OPTIONS="$PLAYRHO_BUILD_OPTIONS -DPLAYRHO_BUILD_BENCHMARK=ON"
    fi
    echo $PLAYRHO_BUILD_OPTIONS
  - git clone https://github.com/louis-langholtz/units.git && wget https://sourceforge.net/projects/boost/files/boost/1.63.0/boost_1_63_0.tar.bz2 -O /tmp/boost_1_63_0.tar.bz2 && sha256sum /tmp/boost_1_63_0.tar.bz2 && echo "Expect SHA256 Hash of beae2529f759f6b3bf3f4969a19c2e9d6f0c503edcb2de4a61d1428519fcb3b0" && export BOOST_INC_DST=/tmp/boost_1_63_0/include/boost BOOST_SRC=$HOME/boost-src && mkdir -p $BOOST_SRC $BOOST_INC_DST && pushd $BOOST_SRC && tar --bzip2 -xf /tmp/boost_1_63_0.tar.bz2 && cp -a boost_1_63_0/boost/* $BOOST_INC_DST && popd && pushd $BOOST_INC_DST && mv units units.old && ln -s $HOME/units/include/boost/units . && popd
  - |
    export GLFW_URL=https://github.com/glfw/glfw/releases/download/3.2.1/glfw-3.2.1.zip
    mkdir /tmp/glfw && pushd /tmp/glfw && curl --location --remote-name $GLFW_URL && md5sum *.zip && echo "Expect MD5 hash of 824c99eea073bdd6d2fec76b538f79af" && unzip -q *.zip && rm *.zip && mkdir ../glfw-build && cd ../glfw-build && cmake -DCMAKE_INSTALL_PREFIX=/tmp/usr ../glfw/* && make && make install && popd
  - |
    export GLEW_URL=https://sourceforge.net/projects/glew/files/glew/2.0.0/glew-2.0.0.zip
    mkdir /tmp/glew && pushd /tmp/glew && curl --location --remote-name $GLEW_URL && md5sum *.zip && echo "Expect MD5 hash of 54c913d0c00726fb028d089ad1664ede" && unzip -q *.zip && rm *.zip && cd * && make && make DESTDIR=/tmp install && popd

script:
  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" && "$CXX" == "clang++-5.0" ]]; then
      (pwd && mkdir -p $BUILD_ROOT && cd $BUILD_ROOT && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=/tmp/usr -DCMAKE_LIBRARY_PATH=/tmp/usr/lib $PLAYRHO_BUILD_OPTIONS $SOURCE_ROOT && make && cd UnitTests && ./UnitTests --gtest_filter=-Dump.OneBodyWorld )
    fi
  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" && "$CXX" == "g++-8" ]]; then
      # Have CMake build with unit test code coverage enabled...
      # (pwd && mkdir -p $BUILD_ROOT && cd $BUILD_ROOT && cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_PREFIX_PATH=/tmp/usr -DCMAKE_LIBRARY_PATH=/tmp/usr/lib -DPLAYRHO_ENABLE_COVERAGE=ON $PLAYRHO_BUILD_OPTIONS $SOURCE_ROOT && make && cd UnitTests && ./UnitTests --gtest_filter=-Dump.OneBodyWorld:Math.LengthFasterThanHypot )
      pwd
      cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_PREFIX_PATH=/tmp/usr -DCMAKE_LIBRARY_PATH=/tmp/usr/lib -DPLAYRHO_ENABLE_COVERAGE=ON $PLAYRHO_BUILD_OPTIONS . && make && cd UnitTests && ./UnitTests --gtest_filter=-Dump.OneBodyWorld:Math.LengthFasterThanHypot
    fi
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      (cd PlayRho && xcodebuild -project Build/xcode5/PlayRho.xcodeproj -list)
    fi

# Notes:
#   .gcno files are binary files.
after_success:
  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" && "$CXX" == "g++-8" ]]; then
      # .gcno files are GCC coverage notes files generated by GCC compiles using the -ftest-coverage option.
      # .gcda files are GCC count data files generated by running objects compiled with GCC -fprofile-arcs option
      # .gcda and .gcno files will be generated where the .o files are at.
      # Example: /home/travis/build/louis-langholtz/PlayRho-Build/PlayRho/CMakeFiles/PlayRho.dir/Collision/MassData.cpp.gcda
      # From gcc website: "use the intermediate format that is provided by gcov tool via --json-format option".
      # BUILD_ROOT=/home/travis/build/louis-langholtz/PlayRho-Build
      # SOURCE_ROOT=/home/travis/build/louis-langholtz/PlayRho
      export PATH=/tmp/usr/bin:$PATH
      pwd && ls -laF . /usr/bin/gcov*

      # Old way uses lcov - lcov is the LTV GCOV extension. gcov is 8.1.0.
      # lcov uses geninfo. geninfo warns for files:
      #   "cannot find an entry for #home#travis#build#louis-langholtz#PlayRho#PlayRho#Dynamics#StepConf.cpp.gcov in .gcno file, skipping file!"
      # See https://github.com/linux-test-project/lcov/issues/38
      #cd $BUILD_ROOT && pwd
      #lcov --gcov-tool /usr/bin/gcov-8 --directory PlayRho --directory UnitTests --base-directory $SOURCE_ROOT --capture --output-file coverage.info
      #echo "Lcov exited with status $?"
      #ls -laF coverage.info
      #lcov --gcov-tool /usr/bin/gcov-8 --remove coverage.info '*/UnitTests/*' -o coverage.info
      #lcov --gcov-tool /usr/bin/gcov-8 --remove coverage.info '/usr/include/*' -o coverage.info
      #ls -laF coverage.info
      #cd $SOURCE_ROOT && pwd
      #coveralls-lcov $BUILD_ROOT/coverage.info
      # New way (not working yet)...
      #echo BUILD_ROOT=$BUILD_ROOT SOURCE_ROOT=$SOURCE_ROOT
      #ls -laFR $BUILD_ROOT
      #ls -laF UnitTests
      #ls -laF PlayRho
      # Attempts... latest is lowest here
      #coveralls --verbose --gcov /usr/bin/gcov-8 --build-root $BUILD_ROOT --exclude UnitTests --exclude /usr/include --gcov-options '\-lp'
      #coveralls --gcov /usr/bin/gcov-8 --build-root $BUILD_ROOT --include PlayRho --gcov-options '\-lp'
      #coveralls --verbose --gcov /usr/bin/gcov-8 --include PlayRho --gcov-options '\-lp'
      #coveralls --verbose --gcov /usr/bin/gcov-8 --include PlayRho
      #coveralls --gcov /usr/bin/gcov-8 --root $SOURCE_ROOT --build-root $BUILD_ROOT --include PlayRho --include UnitTests --gcov-options '\-lp'
      #coveralls --verbose --gcov /usr/bin/gcov-8 --root $SOURCE_ROOT --build-root $BUILD_ROOT --include PlayRho --exclude UnitTests --gcov-options '\-lp'
      # The following recognizes coverage but then fails seemingly doing a git status not within the git toplevel directory. It also fails to exclude /usr/include files.
      #coveralls --gcov /usr/bin/gcov-8 --root $BUILD_ROOT --include PlayRho --exclude UnitTests --gcov-options '\-lp'
      # Following two lines don't result in any coverage being recognized
      #cd $BUILD_ROOT
      #coveralls --gcov /usr/bin/gcov-8 --root $SOURCE_ROOT --include PlayRho --exclude UnitTests --exclude-pattern "/usr/.*" --gcov-options '\-lp'
      #coveralls --gcov /usr/bin/gcov-8 --root $BUILD_ROOT --include PlayRho --exclude UnitTests --exclude-pattern "/usr/.*" --gcov-options '\-lp'
      # The following succeeds in traversing the source files but doesn't see any of the data files
      #cd ..
      #coveralls --verbose --gcov /usr/bin/gcov-8 --root $SOURCE_ROOT --build-root $BUILD_ROOT --include PlayRho --exclude UnitTests --exclude-pattern '/usr/.*' --gcov-options '\-lp'
      #cd $BUILD_ROOT
      #coveralls --verbose --gcov /usr/bin/gcov-8 --include PlayRho --exclude UnitTests --exclude-pattern '/usr/.*' --gcov-options '\-lp'
      # The following based on running cmake in source directory results in EXIT_SUCCESS but coveralls.io doesn't seem to see any of the code coverage
      #coveralls --verbose --gcov /usr/bin/gcov-8 --include PlayRho --exclude UnitTests --exclude-pattern '/usr/.*' --gcov-options '\-lp'
      cpp-coveralls --verbose --gcov /usr/bin/gcov-8 --root PlayRho --gcov-options '\-lp'
    fi
